// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return xhr.response;
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 34144;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,3,132,50,208,216,218,222,63,16,0,16,0,16,0,224,63,130,34,254,20,175,101,218,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,16,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,240,63,32,224,31,224,31,224,239,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,224,31,224,31,224,239,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,224,31,224,31,224,239,63,123,20,174,71,225,122,132,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,112,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,112,63,0,0,0,0,0,0,0,0,16,16,16,16,16,16,224,63,16,16,16,16,16,16,224,63,16,0,16,0,16,0,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,16,0,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,16,0,224,63,0,0,0,0,0,0,89,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,111,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,111,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,192,0,0,0,0,0,0,96,192,0,0,0,0,224,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,255,255,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,136,99,93,220,70,3,212,63,117,147,24,4,86,14,213,63,0,0,0,0,0,0,240,63,123,20,174,71,225,122,228,63,31,133,235,81,184,30,213,63,0,0,0,0,0,0,240,63,51,51,51,51,51,51,211,63,51,51,51,51,51,51,227,63,0,0,0,0,0,0,240,63,51,51,51,51,51,51,195,63,184,30,133,235,81,184,174,63,0,0,0,0,0,0,240,63,208,179,89,245,185,218,238,63,0,0,0,0,0,0,240,63,132,13,79,175,148,101,234,63,0,0,0,0,0,0,0,0,92,172,168,193,52,12,199,63,4,226,117,253,130,221,208,63,99,122,194,18,15,40,207,191,0,0,0,0,0,0,36,64,142,1,217,235,221,31,199,63,21,87,149,125,87,4,209,63,3,67,86,183,122,78,208,191,0,0,0,0,0,0,52,64,160,79,228,73,210,53,199,63,173,47,18,218,114,46,209,63,250,68,158,36,93,51,209,191,0,0,0,0,0,0,62,64,31,186,160,190,101,78,199,63,179,36,64,77,45,91,209,63,135,191,38,107,212,67,210,191,0,0,0,0,0,0,68,64,39,136,186,15,64,106,199,63,95,36,180,229,92,138,209,63,57,214,197,109,52,128,211,191,0,0,0,0,0,0,73,64,182,185,49,61,97,137,199,63,235,28,3,178,215,187,209,63,182,243,253,212,120,233,212,191,0,0,0,0,0,0,78,64,92,114,220,41,29,172,199,63,59,199,128,236,245,238,209,63,142,59,165,131,245,127,214,191,0,0,0,0,0,128,81,64,24,178,186,213,115,210,199,63,136,17,194,163,141,35,210,63,78,209,145,92,254,67,216,191,0,0,0,0,0,0,84,64,120,156,162,35,185,252,199,63,183,180,26,18,247,88,210,63,75,234,4,52,17,54,218,191,0,0,0,0,0,128,86,64,237,13,190,48,153,42,200,63,59,141,180,84,222,142,210,63,17,170,212,236,129,86,220,191,0,0,0,0,0,0,89,64,6,42,227,223,103,92,200,63,191,101,78,151,197,196,210,63,188,87,173,76,248,165,222,191,0,0,0,0,0,64,95,64,239,225,146,227,78,233,200,63,181,253,43,43,77,74,211,63,199,215,158,89,18,160,226,191,0,0,0,0,0,192,98,64,147,82,208,237,37,141,201,63,124,39,102,189,24,202,211,63,204,64,101,252,251,140,230,191,0,0,0,0,0,224,101,64,18,131,192,202,161,69,202,63,83,145,10,99,11,65,212,63,66,67,255,4,23,43,235,191,0,0,0,0,0,0,105,64,114,51,220,128,207,15,203,63,203,190,43,130,255,173,212,63,95,152,76,21,140,74,240,191,0,0,0,0,0,32,108,64,97,142,30,191,183,233,203,63,114,51,220,128,207,15,213,63,100,93,220,70,3,120,243,191,0,0,0,0,0,64,111,64,227,83,0,140,103,208,204,63,17,1,135,80,165,102,213,63,128,72,191,125,29,56,247,191,0,0,0,0,0,48,113,64,26,139,166,179,147,193,205,63,52,75,2,212,212,178,213,63,204,238,201,195,66,173,251,191,0,0,0,0,0,192,114,64,65,130,226,199,152,187,206,63,247,88,250,208,5,245,213,63,166,10,70,37,117,130,0,192,0,0,0,0,0,80,116,64,31,157,186,242,89,158,207,63,118,113,27,13,224,45,214,63,145,15,122,54,171,190,3,192,0,0,0,0,0,224,117,64,255,9,46,86,212,96,208,63,88,255,231,48,95,94,214,63,188,150,144,15,122,182,7,192,0,0,0,0,0,112,119,64,76,55,137,65,96,229,208,63,186,73,12,2,43,135,214,63,187,39,15,11,181,166,12,192,0,0,0,0,0,0,121,64,150,4,168,169,101,107,209,63,126,169,159,55,21,169,214,63,21,140,74,234,4,116,17,192,0,0,0,0,0,144,122,64,53,7,8,230,232,241,209,63,133,119,185,136,239,196,214,63,83,5,163,146,58,129,21,192,0,0,0,0,0,32,124,64,41,63,169,246,233,120,210,63,236,250,5,187,97,219,214,63,186,107,9,249,160,231,26,192,0,0,0,0,0,176,125,64,143,83,116,36,151,255,210,63,147,140,156,133,61,237,214,63,55,137,65,96,229,48,33,192,0,0,0,0,0,64,127,64,103,68,105,111,240,133,211,63,208,97,190,188,0,251,214,63,217,206,247,83,227,165,38,192,0,0,0,0,0,104,128,64,93,220,70,3,120,11,212,63,48,158,65,67,255,4,215,63,168,198,75,55,137,65,47,192,0,0,0,0,0,48,129,64,171,9,162,238,3,144,212,63,149,154,61,208,10,12,215,63,51,51,51,51,51,83,55,192,0,0,0,0,0,248,129,64,136,186,15,64,106,19,213,63,141,122,136,70,119,16,215,63,195,245,40,92,143,98,68,192,0,0,0,0,0,192,130,64,104,203,185,20,87,149,213,63,166,97,248,136,152,18,215,63,205,204,204,204,204,28,93,192,134,201,84,193,168,164,236,63,177,225,233,149,178,12,209,63,240,133,201,84,193,168,196,191,196,177,46,110,163,1,232,191,209,34,219,249,126,106,251,63,39,194,134,167,87,202,162,63,9,249,160,103,179,234,163,63,240,167,198,75,55,137,177,191,183,98,127,217,61,121,240,63,0,0,0,0,0,0,240,63,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,80,101,114,99,101,112,116,117,97,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,128,8,0,0,1,0,0,0,82,101,108,97,116,105,118,101,32,99,111,108,111,114,105,109,101,116,114,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,140,9,0,0,2,0,0,0,83,97,116,117,114,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,152,10,0,0,3,0,0,0,65,98,115,111,108,117,116,101,32,99,111,108,111,114,105,109,101,116,114,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,164,11,0,0,10,0,0,0,80,101,114,99,101,112,116,117,97,108,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,105,110,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,176,12,0,0,11,0,0,0,82,101,108,97,116,105,118,101,32,99,111,108,111,114,105,109,101,116,114,105,99,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,105,110,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,188,13,0,0,12,0,0,0,83,97,116,117,114,97,116,105,111,110,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,105,110,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,200,14,0,0,13,0,0,0,80,101,114,99,101,112,116,117,97,108,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,112,108,97,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,212,15,0,0,14,0,0,0,82,101,108,97,116,105,118,101,32,99,111,108,111,114,105,109,101,116,114,105,99,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,112,108,97,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,224,16,0,0,15,0,0,0,83,97,116,117,114,97,116,105,111,110,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,112,108,97,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,9,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,128,51,0,0,0,52,0,0,64,52,0,0,128,52,0,0,160,52,0,0,192,52,0,0,224,52,0,0,0,53,0,0,16,53,0,0,32,53,0,0,48,53,0,0,64,53,0,0,80,53,0,0,96,53,0,0,112,53,0,0,128,53,0,0,136,53,0,0,144,53,0,0,152,53,0,0,160,53,0,0,168,53,0,0,176,53,0,0,184,53,0,0,192,53,0,0,200,53,0,0,208,53,0,0,216,53,0,0,224,53,0,0,232,53,0,0,240,53,0,0,248,53,0,0,0,54,0,0,4,54,0,0,8,54,0,0,12,54,0,0,16,54,0,0,20,54,0,0,24,54,0,0,28,54,0,0,32,54,0,0,36,54,0,0,40,54,0,0,44,54,0,0,48,54,0,0,52,54,0,0,56,54,0,0,60,54,0,0,64,54,0,0,68,54,0,0,72,54,0,0,76,54,0,0,80,54,0,0,84,54,0,0,88,54,0,0,92,54,0,0,96,54,0,0,100,54,0,0,104,54,0,0,108,54,0,0,112,54,0,0,116,54,0,0,120,54,0,0,124,54,0,0,128,54,0,0,130,54,0,0,132,54,0,0,134,54,0,0,136,54,0,0,138,54,0,0,140,54,0,0,142,54,0,0,144,54,0,0,146,54,0,0,148,54,0,0,150,54,0,0,152,54,0,0,154,54,0,0,156,54,0,0,158,54,0,0,160,54,0,0,162,54,0,0,164,54,0,0,166,54,0,0,168,54,0,0,170,54,0,0,172,54,0,0,174,54,0,0,176,54,0,0,178,54,0,0,180,54,0,0,182,54,0,0,184,54,0,0,186,54,0,0,188,54,0,0,190,54,0,0,192,54,0,0,194,54,0,0,196,54,0,0,198,54,0,0,200,54,0,0,202,54,0,0,204,54,0,0,206,54,0,0,208,54,0,0,210,54,0,0,212,54,0,0,214,54,0,0,216,54,0,0,218,54,0,0,220,54,0,0,222,54,0,0,224,54,0,0,226,54,0,0,228,54,0,0,230,54,0,0,232,54,0,0,234,54,0,0,236,54,0,0,238,54,0,0,240,54,0,0,242,54,0,0,244,54,0,0,246,54,0,0,248,54,0,0,250,54,0,0,252,54,0,0,254,54,0,0,0,55,0,0,1,55,0,0,2,55,0,0,3,55,0,0,4,55,0,0,5,55,0,0,6,55,0,0,7,55,0,0,8,55,0,0,9,55,0,0,10,55,0,0,11,55,0,0,12,55,0,0,13,55,0,0,14,55,0,0,15,55,0,0,16,55,0,0,17,55,0,0,18,55,0,0,19,55,0,0,20,55,0,0,21,55,0,0,22,55,0,0,23,55,0,0,24,55,0,0,25,55,0,0,26,55,0,0,27,55,0,0,28,55,0,0,29,55,0,0,30,55,0,0,31,55,0,0,32,55,0,0,33,55,0,0,34,55,0,0,35,55,0,0,36,55,0,0,37,55,0,0,38,55,0,0,39,55,0,0,40,55,0,0,41,55,0,0,42,55,0,0,43,55,0,0,44,55,0,0,45,55,0,0,46,55,0,0,47,55,0,0,48,55,0,0,49,55,0,0,50,55,0,0,51,55,0,0,52,55,0,0,53,55,0,0,54,55,0,0,55,55,0,0,56,55,0,0,57,55,0,0,58,55,0,0,59,55,0,0,60,55,0,0,61,55,0,0,62,55,0,0,63,55,0,0,64,55,0,0,65,55,0,0,66,55,0,0,67,55,0,0,68,55,0,0,69,55,0,0,70,55,0,0,71,55,0,0,72,55,0,0,73,55,0,0,74,55,0,0,75,55,0,0,76,55,0,0,77,55,0,0,78,55,0,0,79,55,0,0,80,55,0,0,81,55,0,0,82,55,0,0,83,55,0,0,84,55,0,0,85,55,0,0,86,55,0,0,87,55,0,0,88,55,0,0,89,55,0,0,90,55,0,0,91,55,0,0,92,55,0,0,93,55,0,0,94,55,0,0,95,55,0,0,96,55,0,0,97,55,0,0,98,55,0,0,99,55,0,0,100,55,0,0,101,55,0,0,102,55,0,0,103,55,0,0,104,55,0,0,105,55,0,0,106,55,0,0,107,55,0,0,108,55,0,0,109,55,0,0,110,55,0,0,111,55,0,0,112,55,0,0,113,55,0,0,114,55,0,0,115,55,0,0,116,55,0,0,117,55,0,0,118,55,0,0,119,55,0,0,120,55,0,0,121,55,0,0,122,55,0,0,123,55,0,0,124,55,0,0,125,55,0,0,126,55,0,0,127,55,0,0,128,55,0,128,128,55,0,0,129,55,0,128,129,55,0,0,130,55,0,128,130,55,0,0,131,55,0,128,131,55,0,0,132,55,0,128,132,55,0,0,133,55,0,128,133,55,0,0,134,55,0,128,134,55,0,0,135,55,0,128,135,55,0,0,136,55,0,128,136,55,0,0,137,55,0,128,137,55,0,0,138,55,0,128,138,55,0,0,139,55,0,128,139,55,0,0,140,55,0,128,140,55,0,0,141,55,0,128,141,55,0,0,142,55,0,128,142,55,0,0,143,55,0,128,143,55,0,0,144,55,0,128,144,55,0,0,145,55,0,128,145,55,0,0,146,55,0,128,146,55,0,0,147,55,0,128,147,55,0,0,148,55,0,128,148,55,0,0,149,55,0,128,149,55,0,0,150,55,0,128,150,55,0,0,151,55,0,128,151,55,0,0,152,55,0,128,152,55,0,0,153,55,0,128,153,55,0,0,154,55,0,128,154,55,0,0,155,55,0,128,155,55,0,0,156,55,0,128,156,55,0,0,157,55,0,128,157,55,0,0,158,55,0,128,158,55,0,0,159,55,0,128,159,55,0,0,160,55,0,128,160,55,0,0,161,55,0,128,161,55,0,0,162,55,0,128,162,55,0,0,163,55,0,128,163,55,0,0,164,55,0,128,164,55,0,0,165,55,0,128,165,55,0,0,166,55,0,128,166,55,0,0,167,55,0,128,167,55,0,0,168,55,0,128,168,55,0,0,169,55,0,128,169,55,0,0,170,55,0,128,170,55,0,0,171,55,0,128,171,55,0,0,172,55,0,128,172,55,0,0,173,55,0,128,173,55,0,0,174,55,0,128,174,55,0,0,175,55,0,128,175,55,0,0,176,55,0,128,176,55,0,0,177,55,0,128,177,55,0,0,178,55,0,128,178,55,0,0,179,55,0,128,179,55,0,0,180,55,0,128,180,55,0,0,181,55,0,128,181,55,0,0,182,55,0,128,182,55,0,0,183,55,0,128,183,55,0,0,184,55,0,128,184,55,0,0,185,55,0,128,185,55,0,0,186,55,0,128,186,55,0,0,187,55,0,128,187,55,0,0,188,55,0,128,188,55,0,0,189,55,0,128,189,55,0,0,190,55,0,128,190,55,0,0,191,55,0,128,191,55,0,0,192,55,0,128,192,55,0,0,193,55,0,128,193,55,0,0,194,55,0,128,194,55,0,0,195,55,0,128,195,55,0,0,196,55,0,128,196,55,0,0,197,55,0,128,197,55,0,0,198,55,0,128,198,55,0,0,199,55,0,128,199,55,0,0,200,55,0,128,200,55,0,0,201,55,0,128,201,55,0,0,202,55,0,128,202,55,0,0,203,55,0,128,203,55,0,0,204,55,0,128,204,55,0,0,205,55,0,128,205,55,0,0,206,55,0,128,206,55,0,0,207,55,0,128,207,55,0,0,208,55,0,128,208,55,0,0,209,55,0,128,209,55,0,0,210,55,0,128,210,55,0,0,211,55,0,128,211,55,0,0,212,55,0,128,212,55,0,0,213,55,0,128,213,55,0,0,214,55,0,128,214,55,0,0,215,55,0,128,215,55,0,0,216,55,0,128,216,55,0,0,217,55,0,128,217,55,0,0,218,55,0,128,218,55,0,0,219,55,0,128,219,55,0,0,220,55,0,128,220,55,0,0,221,55,0,128,221,55,0,0,222,55,0,128,222,55,0,0,223,55,0,128,223,55,0,0,224,55,0,128,224,55,0,0,225,55,0,128,225,55,0,0,226,55,0,128,226,55,0,0,227,55,0,128,227,55,0,0,228,55,0,128,228,55,0,0,229,55,0,128,229,55,0,0,230,55,0,128,230,55,0,0,231,55,0,128,231,55,0,0,232,55,0,128,232,55,0,0,233,55,0,128,233,55,0,0,234,55,0,128,234,55,0,0,235,55,0,128,235,55,0,0,236,55,0,128,236,55,0,0,237,55,0,128,237,55,0,0,238,55,0,128,238,55,0,0,239,55,0,128,239,55,0,0,240,55,0,128,240,55,0,0,241,55,0,128,241,55,0,0,242,55,0,128,242,55,0,0,243,55,0,128,243,55,0,0,244,55,0,128,244,55,0,0,245,55,0,128,245,55,0,0,246,55,0,128,246,55,0,0,247,55,0,128,247,55,0,0,248,55,0,128,248,55,0,0,249,55,0,128,249,55,0,0,250,55,0,128,250,55,0,0,251,55,0,128,251,55,0,0,252,55,0,128,252,55,0,0,253,55,0,128,253,55,0,0,254,55,0,128,254,55,0,0,255,55,0,128,255,55,0,0,0,56,0,64,0,56,0,128,0,56,0,192,0,56,0,0,1,56,0,64,1,56,0,128,1,56,0,192,1,56,0,0,2,56,0,64,2,56,0,128,2,56,0,192,2,56,0,0,3,56,0,64,3,56,0,128,3,56,0,192,3,56,0,0,4,56,0,64,4,56,0,128,4,56,0,192,4,56,0,0,5,56,0,64,5,56,0,128,5,56,0,192,5,56,0,0,6,56,0,64,6,56,0,128,6,56,0,192,6,56,0,0,7,56,0,64,7,56,0,128,7,56,0,192,7,56,0,0,8,56,0,64,8,56,0,128,8,56,0,192,8,56,0,0,9,56,0,64,9,56,0,128,9,56,0,192,9,56,0,0,10,56,0,64,10,56,0,128,10,56,0,192,10,56,0,0,11,56,0,64,11,56,0,128,11,56,0,192,11,56,0,0,12,56,0,64,12,56,0,128,12,56,0,192,12,56,0,0,13,56,0,64,13,56,0,128,13,56,0,192,13,56,0,0,14,56,0,64,14,56,0,128,14,56,0,192,14,56,0,0,15,56,0,64,15,56,0,128,15,56,0,192,15,56,0,0,16,56,0,64,16,56,0,128,16,56,0,192,16,56,0,0,17,56,0,64,17,56,0,128,17,56,0,192,17,56,0,0,18,56,0,64,18,56,0,128,18,56,0,192,18,56,0,0,19,56,0,64,19,56,0,128,19,56,0,192,19,56,0,0,20,56,0,64,20,56,0,128,20,56,0,192,20,56,0,0,21,56,0,64,21,56,0,128,21,56,0,192,21,56,0,0,22,56,0,64,22,56,0,128,22,56,0,192,22,56,0,0,23,56,0,64,23,56,0,128,23,56,0,192,23,56,0,0,24,56,0,64,24,56,0,128,24,56,0,192,24,56,0,0,25,56,0,64,25,56,0,128,25,56,0,192,25,56,0,0,26,56,0,64,26,56,0,128,26,56,0,192,26,56,0,0,27,56,0,64,27,56,0,128,27,56,0,192,27,56,0,0,28,56,0,64,28,56,0,128,28,56,0,192,28,56,0,0,29,56,0,64,29,56,0,128,29,56,0,192,29,56,0,0,30,56,0,64,30,56,0,128,30,56,0,192,30,56,0,0,31,56,0,64,31,56,0,128,31,56,0,192,31,56,0,0,32,56,0,64,32,56,0,128,32,56,0,192,32,56,0,0,33,56,0,64,33,56,0,128,33,56,0,192,33,56,0,0,34,56,0,64,34,56,0,128,34,56,0,192,34,56,0,0,35,56,0,64,35,56,0,128,35,56,0,192,35,56,0,0,36,56,0,64,36,56,0,128,36,56,0,192,36,56,0,0,37,56,0,64,37,56,0,128,37,56,0,192,37,56,0,0,38,56,0,64,38,56,0,128,38,56,0,192,38,56,0,0,39,56,0,64,39,56,0,128,39,56,0,192,39,56,0,0,40,56,0,64,40,56,0,128,40,56,0,192,40,56,0,0,41,56,0,64,41,56,0,128,41,56,0,192,41,56,0,0,42,56,0,64,42,56,0,128,42,56,0,192,42,56,0,0,43,56,0,64,43,56,0,128,43,56,0,192,43,56,0,0,44,56,0,64,44,56,0,128,44,56,0,192,44,56,0,0,45,56,0,64,45,56,0,128,45,56,0,192,45,56,0,0,46,56,0,64,46,56,0,128,46,56,0,192,46,56,0,0,47,56,0,64,47,56,0,128,47,56,0,192,47,56,0,0,48,56,0,64,48,56,0,128,48,56,0,192,48,56,0,0,49,56,0,64,49,56,0,128,49,56,0,192,49,56,0,0,50,56,0,64,50,56,0,128,50,56,0,192,50,56,0,0,51,56,0,64,51,56,0,128,51,56,0,192,51,56,0,0,52,56,0,64,52,56,0,128,52,56,0,192,52,56,0,0,53,56,0,64,53,56,0,128,53,56,0,192,53,56,0,0,54,56,0,64,54,56,0,128,54,56,0,192,54,56,0,0,55,56,0,64,55,56,0,128,55,56,0,192,55,56,0,0,56,56,0,64,56,56,0,128,56,56,0,192,56,56,0,0,57,56,0,64,57,56,0,128,57,56,0,192,57,56,0,0,58,56,0,64,58,56,0,128,58,56,0,192,58,56,0,0,59,56,0,64,59,56,0,128,59,56,0,192,59,56,0,0,60,56,0,64,60,56,0,128,60,56,0,192,60,56,0,0,61,56,0,64,61,56,0,128,61,56,0,192,61,56,0,0,62,56,0,64,62,56,0,128,62,56,0,192,62,56,0,0,63,56,0,64,63,56,0,128,63,56,0,192,63,56,0,0,64,56,0,64,64,56,0,128,64,56,0,192,64,56,0,0,65,56,0,64,65,56,0,128,65,56,0,192,65,56,0,0,66,56,0,64,66,56,0,128,66,56,0,192,66,56,0,0,67,56,0,64,67,56,0,128,67,56,0,192,67,56,0,0,68,56,0,64,68,56,0,128,68,56,0,192,68,56,0,0,69,56,0,64,69,56,0,128,69,56,0,192,69,56,0,0,70,56,0,64,70,56,0,128,70,56,0,192,70,56,0,0,71,56,0,64,71,56,0,128,71,56,0,192,71,56,0,0,72,56,0,64,72,56,0,128,72,56,0,192,72,56,0,0,73,56,0,64,73,56,0,128,73,56,0,192,73,56,0,0,74,56,0,64,74,56,0,128,74,56,0,192,74,56,0,0,75,56,0,64,75,56,0,128,75,56,0,192,75,56,0,0,76,56,0,64,76,56,0,128,76,56,0,192,76,56,0,0,77,56,0,64,77,56,0,128,77,56,0,192,77,56,0,0,78,56,0,64,78,56,0,128,78,56,0,192,78,56,0,0,79,56,0,64,79,56,0,128,79,56,0,192,79,56,0,0,80,56,0,64,80,56,0,128,80,56,0,192,80,56,0,0,81,56,0,64,81,56,0,128,81,56,0,192,81,56,0,0,82,56,0,64,82,56,0,128,82,56,0,192,82,56,0,0,83,56,0,64,83,56,0,128,83,56,0,192,83,56,0,0,84,56,0,64,84,56,0,128,84,56,0,192,84,56,0,0,85,56,0,64,85,56,0,128,85,56,0,192,85,56,0,0,86,56,0,64,86,56,0,128,86,56,0,192,86,56,0,0,87,56,0,64,87,56,0,128,87,56,0,192,87,56,0,0,88,56,0,64,88,56,0,128,88,56,0,192,88,56,0,0,89,56,0,64,89,56,0,128,89,56,0,192,89,56,0,0,90,56,0,64,90,56,0,128,90,56,0,192,90,56,0,0,91,56,0,64,91,56,0,128,91,56,0,192,91,56,0,0,92,56,0,64,92,56,0,128,92,56,0,192,92,56,0,0,93,56,0,64,93,56,0,128,93,56,0,192,93,56,0,0,94,56,0,64,94,56,0,128,94,56,0,192,94,56,0,0,95,56,0,64,95,56,0,128,95,56,0,192,95,56,0,0,96,56,0,64,96,56,0,128,96,56,0,192,96,56,0,0,97,56,0,64,97,56,0,128,97,56,0,192,97,56,0,0,98,56,0,64,98,56,0,128,98,56,0,192,98,56,0,0,99,56,0,64,99,56,0,128,99,56,0,192,99,56,0,0,100,56,0,64,100,56,0,128,100,56,0,192,100,56,0,0,101,56,0,64,101,56,0,128,101,56,0,192,101,56,0,0,102,56,0,64,102,56,0,128,102,56,0,192,102,56,0,0,103,56,0,64,103,56,0,128,103,56,0,192,103,56,0,0,104,56,0,64,104,56,0,128,104,56,0,192,104,56,0,0,105,56,0,64,105,56,0,128,105,56,0,192,105,56,0,0,106,56,0,64,106,56,0,128,106,56,0,192,106,56,0,0,107,56,0,64,107,56,0,128,107,56,0,192,107,56,0,0,108,56,0,64,108,56,0,128,108,56,0,192,108,56,0,0,109,56,0,64,109,56,0,128,109,56,0,192,109,56,0,0,110,56,0,64,110,56,0,128,110,56,0,192,110,56,0,0,111,56,0,64,111,56,0,128,111,56,0,192,111,56,0,0,112,56,0,64,112,56,0,128,112,56,0,192,112,56,0,0,113,56,0,64,113,56,0,128,113,56,0,192,113,56,0,0,114,56,0,64,114,56,0,128,114,56,0,192,114,56,0,0,115,56,0,64,115,56,0,128,115,56,0,192,115,56,0,0,116,56,0,64,116,56,0,128,116,56,0,192,116,56,0,0,117,56,0,64,117,56,0,128,117,56,0,192,117,56,0,0,118,56,0,64,118,56,0,128,118,56,0,192,118,56,0,0,119,56,0,64,119,56,0,128,119,56,0,192,119,56,0,0,120,56,0,64,120,56,0,128,120,56,0,192,120,56,0,0,121,56,0,64,121,56,0,128,121,56,0,192,121,56,0,0,122,56,0,64,122,56,0,128,122,56,0,192,122,56,0,0,123,56,0,64,123,56,0,128,123,56,0,192,123,56,0,0,124,56,0,64,124,56,0,128,124,56,0,192,124,56,0,0,125,56,0,64,125,56,0,128,125,56,0,192,125,56,0,0,126,56,0,64,126,56,0,128,126,56,0,192,126,56,0,0,127,56,0,64,127,56,0,128,127,56,0,192,127,56,0,0,0,56,0,32,0,56,0,64,0,56,0,96,0,56,0,128,0,56,0,160,0,56,0,192,0,56,0,224,0,56,0,0,1,56,0,32,1,56,0,64,1,56,0,96,1,56,0,128,1,56,0,160,1,56,0,192,1,56,0,224,1,56,0,0,2,56,0,32,2,56,0,64,2,56,0,96,2,56,0,128,2,56,0,160,2,56,0,192,2,56,0,224,2,56,0,0,3,56,0,32,3,56,0,64,3,56,0,96,3,56,0,128,3,56,0,160,3,56,0,192,3,56,0,224,3,56,0,0,4,56,0,32,4,56,0,64,4,56,0,96,4,56,0,128,4,56,0,160,4,56,0,192,4,56,0,224,4,56,0,0,5,56,0,32,5,56,0,64,5,56,0,96,5,56,0,128,5,56,0,160,5,56,0,192,5,56,0,224,5,56,0,0,6,56,0,32,6,56,0,64,6,56,0,96,6,56,0,128,6,56,0,160,6,56,0,192,6,56,0,224,6,56,0,0,7,56,0,32,7,56,0,64,7,56,0,96,7,56,0,128,7,56,0,160,7,56,0,192,7,56,0,224,7,56,0,0,8,56,0,32,8,56,0,64,8,56,0,96,8,56,0,128,8,56,0,160,8,56,0,192,8,56,0,224,8,56,0,0,9,56,0,32,9,56,0,64,9,56,0,96,9,56,0,128,9,56,0,160,9,56,0,192,9,56,0,224,9,56,0,0,10,56,0,32,10,56,0,64,10,56,0,96,10,56,0,128,10,56,0,160,10,56,0,192,10,56,0,224,10,56,0,0,11,56,0,32,11,56,0,64,11,56,0,96,11,56,0,128,11,56,0,160,11,56,0,192,11,56,0,224,11,56,0,0,12,56,0,32,12,56,0,64,12,56,0,96,12,56,0,128,12,56,0,160,12,56,0,192,12,56,0,224,12,56,0,0,13,56,0,32,13,56,0,64,13,56,0,96,13,56,0,128,13,56,0,160,13,56,0,192,13,56,0,224,13,56,0,0,14,56,0,32,14,56,0,64,14,56,0,96,14,56,0,128,14,56,0,160,14,56,0,192,14,56,0,224,14,56,0,0,15,56,0,32,15,56,0,64,15,56,0,96,15,56,0,128,15,56,0,160,15,56,0,192,15,56,0,224,15,56,0,0,16,56,0,32,16,56,0,64,16,56,0,96,16,56,0,128,16,56,0,160,16,56,0,192,16,56,0,224,16,56,0,0,17,56,0,32,17,56,0,64,17,56,0,96,17,56,0,128,17,56,0,160,17,56,0,192,17,56,0,224,17,56,0,0,18,56,0,32,18,56,0,64,18,56,0,96,18,56,0,128,18,56,0,160,18,56,0,192,18,56,0,224,18,56,0,0,19,56,0,32,19,56,0,64,19,56,0,96,19,56,0,128,19,56,0,160,19,56,0,192,19,56,0,224,19,56,0,0,20,56,0,32,20,56,0,64,20,56,0,96,20,56,0,128,20,56,0,160,20,56,0,192,20,56,0,224,20,56,0,0,21,56,0,32,21,56,0,64,21,56,0,96,21,56,0,128,21,56,0,160,21,56,0,192,21,56,0,224,21,56,0,0,22,56,0,32,22,56,0,64,22,56,0,96,22,56,0,128,22,56,0,160,22,56,0,192,22,56,0,224,22,56,0,0,23,56,0,32,23,56,0,64,23,56,0,96,23,56,0,128,23,56,0,160,23,56,0,192,23,56,0,224,23,56,0,0,24,56,0,32,24,56,0,64,24,56,0,96,24,56,0,128,24,56,0,160,24,56,0,192,24,56,0,224,24,56,0,0,25,56,0,32,25,56,0,64,25,56,0,96,25,56,0,128,25,56,0,160,25,56,0,192,25,56,0,224,25,56,0,0,26,56,0,32,26,56,0,64,26,56,0,96,26,56,0,128,26,56,0,160,26,56,0,192,26,56,0,224,26,56,0,0,27,56,0,32,27,56,0,64,27,56,0,96,27,56,0,128,27,56,0,160,27,56,0,192,27,56,0,224,27,56,0,0,28,56,0,32,28,56,0,64,28,56,0,96,28,56,0,128,28,56,0,160,28,56,0,192,28,56,0,224,28,56,0,0,29,56,0,32,29,56,0,64,29,56,0,96,29,56,0,128,29,56,0,160,29,56,0,192,29,56,0,224,29,56,0,0,30,56,0,32,30,56,0,64,30,56,0,96,30,56,0,128,30,56,0,160,30,56,0,192,30,56,0,224,30,56,0,0,31,56,0,32,31,56,0,64,31,56,0,96,31,56,0,128,31,56,0,160,31,56,0,192,31,56,0,224,31,56,0,0,32,56,0,32,32,56,0,64,32,56,0,96,32,56,0,128,32,56,0,160,32,56,0,192,32,56,0,224,32,56,0,0,33,56,0,32,33,56,0,64,33,56,0,96,33,56,0,128,33,56,0,160,33,56,0,192,33,56,0,224,33,56,0,0,34,56,0,32,34,56,0,64,34,56,0,96,34,56,0,128,34,56,0,160,34,56,0,192,34,56,0,224,34,56,0,0,35,56,0,32,35,56,0,64,35,56,0,96,35,56,0,128,35,56,0,160,35,56,0,192,35,56,0,224,35,56,0,0,36,56,0,32,36,56,0,64,36,56,0,96,36,56,0,128,36,56,0,160,36,56,0,192,36,56,0,224,36,56,0,0,37,56,0,32,37,56,0,64,37,56,0,96,37,56,0,128,37,56,0,160,37,56,0,192,37,56,0,224,37,56,0,0,38,56,0,32,38,56,0,64,38,56,0,96,38,56,0,128,38,56,0,160,38,56,0,192,38,56,0,224,38,56,0,0,39,56,0,32,39,56,0,64,39,56,0,96,39,56,0,128,39,56,0,160,39,56,0,192,39,56,0,224,39,56,0,0,40,56,0,32,40,56,0,64,40,56,0,96,40,56,0,128,40,56,0,160,40,56,0,192,40,56,0,224,40,56,0,0,41,56,0,32,41,56,0,64,41,56,0,96,41,56,0,128,41,56,0,160,41,56,0,192,41,56,0,224,41,56,0,0,42,56], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([0,32,42,56,0,64,42,56,0,96,42,56,0,128,42,56,0,160,42,56,0,192,42,56,0,224,42,56,0,0,43,56,0,32,43,56,0,64,43,56,0,96,43,56,0,128,43,56,0,160,43,56,0,192,43,56,0,224,43,56,0,0,44,56,0,32,44,56,0,64,44,56,0,96,44,56,0,128,44,56,0,160,44,56,0,192,44,56,0,224,44,56,0,0,45,56,0,32,45,56,0,64,45,56,0,96,45,56,0,128,45,56,0,160,45,56,0,192,45,56,0,224,45,56,0,0,46,56,0,32,46,56,0,64,46,56,0,96,46,56,0,128,46,56,0,160,46,56,0,192,46,56,0,224,46,56,0,0,47,56,0,32,47,56,0,64,47,56,0,96,47,56,0,128,47,56,0,160,47,56,0,192,47,56,0,224,47,56,0,0,48,56,0,32,48,56,0,64,48,56,0,96,48,56,0,128,48,56,0,160,48,56,0,192,48,56,0,224,48,56,0,0,49,56,0,32,49,56,0,64,49,56,0,96,49,56,0,128,49,56,0,160,49,56,0,192,49,56,0,224,49,56,0,0,50,56,0,32,50,56,0,64,50,56,0,96,50,56,0,128,50,56,0,160,50,56,0,192,50,56,0,224,50,56,0,0,51,56,0,32,51,56,0,64,51,56,0,96,51,56,0,128,51,56,0,160,51,56,0,192,51,56,0,224,51,56,0,0,52,56,0,32,52,56,0,64,52,56,0,96,52,56,0,128,52,56,0,160,52,56,0,192,52,56,0,224,52,56,0,0,53,56,0,32,53,56,0,64,53,56,0,96,53,56,0,128,53,56,0,160,53,56,0,192,53,56,0,224,53,56,0,0,54,56,0,32,54,56,0,64,54,56,0,96,54,56,0,128,54,56,0,160,54,56,0,192,54,56,0,224,54,56,0,0,55,56,0,32,55,56,0,64,55,56,0,96,55,56,0,128,55,56,0,160,55,56,0,192,55,56,0,224,55,56,0,0,56,56,0,32,56,56,0,64,56,56,0,96,56,56,0,128,56,56,0,160,56,56,0,192,56,56,0,224,56,56,0,0,57,56,0,32,57,56,0,64,57,56,0,96,57,56,0,128,57,56,0,160,57,56,0,192,57,56,0,224,57,56,0,0,58,56,0,32,58,56,0,64,58,56,0,96,58,56,0,128,58,56,0,160,58,56,0,192,58,56,0,224,58,56,0,0,59,56,0,32,59,56,0,64,59,56,0,96,59,56,0,128,59,56,0,160,59,56,0,192,59,56,0,224,59,56,0,0,60,56,0,32,60,56,0,64,60,56,0,96,60,56,0,128,60,56,0,160,60,56,0,192,60,56,0,224,60,56,0,0,61,56,0,32,61,56,0,64,61,56,0,96,61,56,0,128,61,56,0,160,61,56,0,192,61,56,0,224,61,56,0,0,62,56,0,32,62,56,0,64,62,56,0,96,62,56,0,128,62,56,0,160,62,56,0,192,62,56,0,224,62,56,0,0,63,56,0,32,63,56,0,64,63,56,0,96,63,56,0,128,63,56,0,160,63,56,0,192,63,56,0,224,63,56,0,0,64,56,0,32,64,56,0,64,64,56,0,96,64,56,0,128,64,56,0,160,64,56,0,192,64,56,0,224,64,56,0,0,65,56,0,32,65,56,0,64,65,56,0,96,65,56,0,128,65,56,0,160,65,56,0,192,65,56,0,224,65,56,0,0,66,56,0,32,66,56,0,64,66,56,0,96,66,56,0,128,66,56,0,160,66,56,0,192,66,56,0,224,66,56,0,0,67,56,0,32,67,56,0,64,67,56,0,96,67,56,0,128,67,56,0,160,67,56,0,192,67,56,0,224,67,56,0,0,68,56,0,32,68,56,0,64,68,56,0,96,68,56,0,128,68,56,0,160,68,56,0,192,68,56,0,224,68,56,0,0,69,56,0,32,69,56,0,64,69,56,0,96,69,56,0,128,69,56,0,160,69,56,0,192,69,56,0,224,69,56,0,0,70,56,0,32,70,56,0,64,70,56,0,96,70,56,0,128,70,56,0,160,70,56,0,192,70,56,0,224,70,56,0,0,71,56,0,32,71,56,0,64,71,56,0,96,71,56,0,128,71,56,0,160,71,56,0,192,71,56,0,224,71,56,0,0,72,56,0,32,72,56,0,64,72,56,0,96,72,56,0,128,72,56,0,160,72,56,0,192,72,56,0,224,72,56,0,0,73,56,0,32,73,56,0,64,73,56,0,96,73,56,0,128,73,56,0,160,73,56,0,192,73,56,0,224,73,56,0,0,74,56,0,32,74,56,0,64,74,56,0,96,74,56,0,128,74,56,0,160,74,56,0,192,74,56,0,224,74,56,0,0,75,56,0,32,75,56,0,64,75,56,0,96,75,56,0,128,75,56,0,160,75,56,0,192,75,56,0,224,75,56,0,0,76,56,0,32,76,56,0,64,76,56,0,96,76,56,0,128,76,56,0,160,76,56,0,192,76,56,0,224,76,56,0,0,77,56,0,32,77,56,0,64,77,56,0,96,77,56,0,128,77,56,0,160,77,56,0,192,77,56,0,224,77,56,0,0,78,56,0,32,78,56,0,64,78,56,0,96,78,56,0,128,78,56,0,160,78,56,0,192,78,56,0,224,78,56,0,0,79,56,0,32,79,56,0,64,79,56,0,96,79,56,0,128,79,56,0,160,79,56,0,192,79,56,0,224,79,56,0,0,80,56,0,32,80,56,0,64,80,56,0,96,80,56,0,128,80,56,0,160,80,56,0,192,80,56,0,224,80,56,0,0,81,56,0,32,81,56,0,64,81,56,0,96,81,56,0,128,81,56,0,160,81,56,0,192,81,56,0,224,81,56,0,0,82,56,0,32,82,56,0,64,82,56,0,96,82,56,0,128,82,56,0,160,82,56,0,192,82,56,0,224,82,56,0,0,83,56,0,32,83,56,0,64,83,56,0,96,83,56,0,128,83,56,0,160,83,56,0,192,83,56,0,224,83,56,0,0,84,56,0,32,84,56,0,64,84,56,0,96,84,56,0,128,84,56,0,160,84,56,0,192,84,56,0,224,84,56,0,0,85,56,0,32,85,56,0,64,85,56,0,96,85,56,0,128,85,56,0,160,85,56,0,192,85,56,0,224,85,56,0,0,86,56,0,32,86,56,0,64,86,56,0,96,86,56,0,128,86,56,0,160,86,56,0,192,86,56,0,224,86,56,0,0,87,56,0,32,87,56,0,64,87,56,0,96,87,56,0,128,87,56,0,160,87,56,0,192,87,56,0,224,87,56,0,0,88,56,0,32,88,56,0,64,88,56,0,96,88,56,0,128,88,56,0,160,88,56,0,192,88,56,0,224,88,56,0,0,89,56,0,32,89,56,0,64,89,56,0,96,89,56,0,128,89,56,0,160,89,56,0,192,89,56,0,224,89,56,0,0,90,56,0,32,90,56,0,64,90,56,0,96,90,56,0,128,90,56,0,160,90,56,0,192,90,56,0,224,90,56,0,0,91,56,0,32,91,56,0,64,91,56,0,96,91,56,0,128,91,56,0,160,91,56,0,192,91,56,0,224,91,56,0,0,92,56,0,32,92,56,0,64,92,56,0,96,92,56,0,128,92,56,0,160,92,56,0,192,92,56,0,224,92,56,0,0,93,56,0,32,93,56,0,64,93,56,0,96,93,56,0,128,93,56,0,160,93,56,0,192,93,56,0,224,93,56,0,0,94,56,0,32,94,56,0,64,94,56,0,96,94,56,0,128,94,56,0,160,94,56,0,192,94,56,0,224,94,56,0,0,95,56,0,32,95,56,0,64,95,56,0,96,95,56,0,128,95,56,0,160,95,56,0,192,95,56,0,224,95,56,0,0,96,56,0,32,96,56,0,64,96,56,0,96,96,56,0,128,96,56,0,160,96,56,0,192,96,56,0,224,96,56,0,0,97,56,0,32,97,56,0,64,97,56,0,96,97,56,0,128,97,56,0,160,97,56,0,192,97,56,0,224,97,56,0,0,98,56,0,32,98,56,0,64,98,56,0,96,98,56,0,128,98,56,0,160,98,56,0,192,98,56,0,224,98,56,0,0,99,56,0,32,99,56,0,64,99,56,0,96,99,56,0,128,99,56,0,160,99,56,0,192,99,56,0,224,99,56,0,0,100,56,0,32,100,56,0,64,100,56,0,96,100,56,0,128,100,56,0,160,100,56,0,192,100,56,0,224,100,56,0,0,101,56,0,32,101,56,0,64,101,56,0,96,101,56,0,128,101,56,0,160,101,56,0,192,101,56,0,224,101,56,0,0,102,56,0,32,102,56,0,64,102,56,0,96,102,56,0,128,102,56,0,160,102,56,0,192,102,56,0,224,102,56,0,0,103,56,0,32,103,56,0,64,103,56,0,96,103,56,0,128,103,56,0,160,103,56,0,192,103,56,0,224,103,56,0,0,104,56,0,32,104,56,0,64,104,56,0,96,104,56,0,128,104,56,0,160,104,56,0,192,104,56,0,224,104,56,0,0,105,56,0,32,105,56,0,64,105,56,0,96,105,56,0,128,105,56,0,160,105,56,0,192,105,56,0,224,105,56,0,0,106,56,0,32,106,56,0,64,106,56,0,96,106,56,0,128,106,56,0,160,106,56,0,192,106,56,0,224,106,56,0,0,107,56,0,32,107,56,0,64,107,56,0,96,107,56,0,128,107,56,0,160,107,56,0,192,107,56,0,224,107,56,0,0,108,56,0,32,108,56,0,64,108,56,0,96,108,56,0,128,108,56,0,160,108,56,0,192,108,56,0,224,108,56,0,0,109,56,0,32,109,56,0,64,109,56,0,96,109,56,0,128,109,56,0,160,109,56,0,192,109,56,0,224,109,56,0,0,110,56,0,32,110,56,0,64,110,56,0,96,110,56,0,128,110,56,0,160,110,56,0,192,110,56,0,224,110,56,0,0,111,56,0,32,111,56,0,64,111,56,0,96,111,56,0,128,111,56,0,160,111,56,0,192,111,56,0,224,111,56,0,0,112,56,0,32,112,56,0,64,112,56,0,96,112,56,0,128,112,56,0,160,112,56,0,192,112,56,0,224,112,56,0,0,113,56,0,32,113,56,0,64,113,56,0,96,113,56,0,128,113,56,0,160,113,56,0,192,113,56,0,224,113,56,0,0,114,56,0,32,114,56,0,64,114,56,0,96,114,56,0,128,114,56,0,160,114,56,0,192,114,56,0,224,114,56,0,0,115,56,0,32,115,56,0,64,115,56,0,96,115,56,0,128,115,56,0,160,115,56,0,192,115,56,0,224,115,56,0,0,116,56,0,32,116,56,0,64,116,56,0,96,116,56,0,128,116,56,0,160,116,56,0,192,116,56,0,224,116,56,0,0,117,56,0,32,117,56,0,64,117,56,0,96,117,56,0,128,117,56,0,160,117,56,0,192,117,56,0,224,117,56,0,0,118,56,0,32,118,56,0,64,118,56,0,96,118,56,0,128,118,56,0,160,118,56,0,192,118,56,0,224,118,56,0,0,119,56,0,32,119,56,0,64,119,56,0,96,119,56,0,128,119,56,0,160,119,56,0,192,119,56,0,224,119,56,0,0,120,56,0,32,120,56,0,64,120,56,0,96,120,56,0,128,120,56,0,160,120,56,0,192,120,56,0,224,120,56,0,0,121,56,0,32,121,56,0,64,121,56,0,96,121,56,0,128,121,56,0,160,121,56,0,192,121,56,0,224,121,56,0,0,122,56,0,32,122,56,0,64,122,56,0,96,122,56,0,128,122,56,0,160,122,56,0,192,122,56,0,224,122,56,0,0,123,56,0,32,123,56,0,64,123,56,0,96,123,56,0,128,123,56,0,160,123,56,0,192,123,56,0,224,123,56,0,0,124,56,0,32,124,56,0,64,124,56,0,96,124,56,0,128,124,56,0,160,124,56,0,192,124,56,0,224,124,56,0,0,125,56,0,32,125,56,0,64,125,56,0,96,125,56,0,128,125,56,0,160,125,56,0,192,125,56,0,224,125,56,0,0,126,56,0,32,126,56,0,64,126,56,0,96,126,56,0,128,126,56,0,160,126,56,0,192,126,56,0,224,126,56,0,0,127,56,0,32,127,56,0,64,127,56,0,96,127,56,0,128,127,56,0,160,127,56,0,192,127,56,0,224,127,56,0,0,0,0,0,0,128,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,128,2,0,0,0,3,0,0,128,3,0,0,0,4,0,0,128,4,0,0,0,5,0,0,128,5,0,0,0,6,0,0,128,6,0,0,0,7,0,0,128,7,0,0,0,8,0,0,128,8,0,0,0,9,0,0,128,9,0,0,0,10,0,0,128,10,0,0,0,11,0,0,128,11,0,0,0,12,0,0,128,12,0,0,0,13,0,0,128,13,0,0,0,14,0,0,128,14,0,0,0,15,0,0,128,71,0,0,0,128,0,0,128,128,0,0,0,129,0,0,128,129,0,0,0,130,0,0,128,130,0,0,0,131,0,0,128,131,0,0,0,132,0,0,128,132,0,0,0,133,0,0,128,133,0,0,0,134,0,0,128,134,0,0,0,135,0,0,128,135,0,0,0,136,0,0,128,136,0,0,0,137,0,0,128,137,0,0,0,138,0,0,128,138,0,0,0,139,0,0,128,139,0,0,0,140,0,0,128,140,0,0,0,141,0,0,128,141,0,0,0,142,0,0,128,142,0,0,0,143,0,0,128,199,48,66,50,65,49,66,50,65,50,66,50,65,49,66,50,65,48,66,50,68,49,66,50,68,50,66,50,68,51,66,50,68,48,65,50,66,49,65,50,66,50,65,50,66,49,65,50,66,48,68,50,66,49,68,50,66,50,68,50,66,51,68,50,66,40,0,0,0,12,52,0,0,41,0,0,0,20,52,0,0,42,0,0,0,28,52,0,0,43,0,0,0,0,0,0,0,24,0,74,0,128,19,0,0,44,0,0,0,24,0,73,0,128,19,0,0,45,0,0,0,28,0,74,0,128,19,0,0,46,0,0,0,28,0,73,0,128,19,0,0,47,0,0,0,0,0,64,0,248,119,31,0,48,0,0,0,4,0,64,0,248,119,31,0,49,0,0,0,2,0,64,0,248,119,31,0,50,0,0,0,9,0,0,0,0,0,31,0,51,0,0,0,137,0,0,0,0,0,31,0,52,0,0,0,137,64,0,0,0,0,31,0,53,0,0,0,9,32,0,0,0,0,31,0,54,0,0,0,25,0,30,0,0,0,0,0,55,0,0,0,153,64,30,0,0,0,0,0,56,0,0,0,26,0,30,0,0,0,0,0,57,0,0,0,25,0,32,0,0,0,31,0,58,0,0,0,153,0,32,0,0,0,31,0,59,0,0,0,153,64,32,0,0,0,31,0,60,0,0,0,153,68,32,0,0,0,31,0,61,0,0,0,153,4,32,0,0,0,31,0,62,0,0,0,25,4,32,0,0,0,31,0,63,0,0,0,25,0,0,0,0,0,31,0,64,0,0,0,153,0,0,0,0,0,31,0,65,0,0,0,153,64,0,0,0,0,31,0,66,0,0,0,153,68,0,0,0,0,31,0,67,0,0,0,153,4,0,0,0,0,31,0,68,0,0,0,25,4,0,0,0,0,31,0,69,0,0,0,49,0,0,0,0,0,31,0,70,0,0,0,49,4,0,0,0,0,31,0,71,0,0,0,33,0,0,0,0,0,31,0,72,0,0,0,33,32,0,0,0,0,31,0,73,0,0,0,33,64,0,0,0,0,31,0,74,0,0,0,33,4,0,0,0,0,31,0,75,0,0,0,33,68,0,0,0,0,31,0,76,0,0,0,1,0,0,0,248,103,31,0,77,0,0,0,1,16,0,0,248,103,31,0,78,0,0,0,10,0,0,0,0,0,31,0,79,0,0,0,138,0,0,0,0,0,31,0,80,0,0,0,138,64,0,0,0,0,31,0,81,0,0,0,10,32,0,0,0,0,31,0,82,0,0,0,10,8,0,0,0,0,31,0,83,0,0,0,26,0,0,0,0,0,31,0,84,0,0,0,26,4,0,0,0,0,31,0,85,0,0,0,26,8,0,0,0,0,31,0,86,0,0,0,154,0,0,0,0,0,31,0,87,0,0,0,154,4,0,0,0,0,31,0,88,0,0,0,154,64,0,0,0,0,31,0,89,0,0,0,154,68,0,0,0,0,31,0,90,0,0,0,34,0,0,0,0,0,31,0,91,0,0,0,34,32,0,0,0,0,31,0,92,0,0,0,34,4,0,0,0,0,31,0,93,0,0,0,34,8,0,0,0,0,31,0,94,0,0,0,50,0,0,0,0,0,31,0,95,0,0,0,50,4,0,0,0,0,31,0,96,0,0,0,2,16,0,0,248,47,31,0,97,0,0,0,2,0,0,0,248,111,31,0,98,0,0,0,28,0,74,0,128,19,0,0,99,0,0,0,28,0,73,0,128,19,0,0,100,0,0,0,24,0,74,0,128,19,0,0,101,0,0,0,24,0,73,0,128,19,0,0,102,0,0,0,4,0,64,0,248,119,31,0,103,0,0,0,0,0,64,0,248,119,31,0,104,0,0,0,2,0,64,0,248,103,31,0,105,0,0,0,24,0,74,0,128,19,0,0,106,0,0,0,24,0,73,0,128,19,0,0,107,0,0,0,28,0,74,0,128,19,0,0,108,0,0,0,28,0,73,0,128,19,0,0,109,0,0,0,8,0,67,0,0,0,0,0,110,0,0,0,0,0,64,0,248,119,31,0,111,0,0,0,4,0,64,0,248,119,31,0,112,0,0,0,2,0,64,0,248,119,31,0,113,0,0,0,9,0,0,0,0,0,31,0,114,0,0,0,137,0,0,0,0,0,31,0,115,0,0,0,9,1,0,0,0,0,31,0,116,0,0,0,9,32,0,0,0,0,31,0,117,0,0,0,17,0,16,0,0,0,0,0,118,0,0,0,25,0,30,0,0,0,0,0,119,0,0,0,153,64,30,0,0,0,0,0,120,0,0,0,26,0,30,0,0,0,0,0,121,0,0,0,25,0,0,0,0,0,31,0,122,0,0,0,25,4,0,0,0,0,31,0,123,0,0,0,153,4,0,0,0,0,31,0,124,0,0,0,153,64,0,0,0,0,31,0,125,0,0,0,153,68,0,0,0,0,31,0,126,0,0,0,33,0,0,0,0,0,31,0,127,0,0,0,33,32,0,0,0,0,31,0,128,0,0,0,33,64,0,0,0,0,31,0,129,0,0,0,33,4,0,0,0,0,31,0,130,0,0,0,33,68,0,0,0,0,31,0,131,0,0,0,1,16,0,0,248,103,31,0,132,0,0,0,1,0,0,0,248,103,31,0,133,0,0,0,10,0,0,0,0,0,31,0,134,0,0,0,10,32,0,0,0,0,31,0,135,0,0,0,138,1,0,0,0,0,31,0,136,0,0,0,18,0,0,0,0,0,31,0,137,0,0,0,26,0,0,0,0,0,31,0,138,0,0,0,34,0,0,0,0,0,31,0,139,0,0,0,26,4,0,0,0,0,31,0,140,0,0,0,154,64,0,0,0,0,31,0,141,0,0,0,154,4,0,0,0,0,31,0,142,0,0,0,34,32,0,0,0,0,31,0,143,0,0,0,34,64,0,0,0,0,31,0,144,0,0,0,34,4,0,0,0,0,31,0,145,0,0,0,34,68,0,0,0,0,31,0,146,0,0,0,2,16,0,0,248,47,31,0,147,0,0,0,2,0,0,0,248,111,31,0,148,0,0,0,24,0,74,0,128,19,0,0,149,0,0,0,28,0,74,0,128,19,0,0,150,0,0,0,24,0,73,0,128,19,0,0,151,0,0,0,28,0,73,0,128,19,0,0,152,0,0,0,4,0,64,0,248,87,31,0,153,0,0,0,0,0,64,0,248,87,31,0,154,0,0,0,2,0,64,0,248,87,31,0,155,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,18,0,0,156,95,0,0,8,7,0,0,236,17,0,0,208,126,0,0,204,126,0,0,216,126,0,0,228,126,0,0,232,126,0,0,200,126,0,0,224,126,0,0,212,126,0,0,240,126,0,0,8,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,114,104,99,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,0,0,0,0,0,0,0,0,224,57,0,0,111,114,108,99,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,50,51,102,115,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,0,0,0,0,0,0,0,0,32,58,0,0,50,51,102,117,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,0,0,0,0,0,0,0,0,64,58,0,0,116,120,101,116,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,96,58,0,0,99,115,101,100,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,128,58,0,0,118,114,117,99,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,0,0,0,0,0,0,0,0,160,58,0,0,97,114,97,112,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0,192,58,0,0,109,105,116,100,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,0,0,0,0,0,0,0,0,224,58,0,0,49,116,102,109,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,50,116,102,109,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,0,0,0,0,0,0,0,0,32,59,0,0,116,114,108,99,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,0,0,0,0,0,0,0,0,64,59,0,0,50,108,99,110,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,0,0,0,0,0,0,0,0,96,59,0,0,99,117,108,109,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,0,0,0,0,0,0,0,0,128,59,0,0,113,101,115,112,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,0,0,0,0,0,0,0,0,160,59,0,0,32,103,105,115,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,0,0,0,0,0,0,0,0,192,59,0,0,115,97,101,109,220,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,224,59,0,0,97,116,97,100,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,32,66,65,109,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,0,0,0,0,0,0,0,0,32,60,0,0,32,65,66,109,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,0,0,0,0,0,0,0,0,64,60,0,0,32,100,102,98,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0,96,60,0,0,105,100,114,99,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,128,60,0,0,116,101,112,109,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,0,0,0,0,0,0,0,0,160,60,0,0,110,114,99,115,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,0,0,0,0,0,0,0,0,192,60,0,0,119,101,105,118,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,224,60,0,0,32,90,89,88,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,61,0,0,184,5,165,23,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,0,0,0,0,0,0,0,0,32,61,0,0,0,238,120,148,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,0,0,0,0,0,0,0,0,64,61,0,0,100,105,115,112,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,0,0,0,0,0,0,0,0,96,61,0,0,116,99,105,100,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,0,0,0,0,0,0,0,0,128,61,0,0,116,103,99,118,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,67,65,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,61,0,0,83,67,65,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,61,0,0,116,115,118,99,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,0,0,0,0,0,0,0,0,0,62,0,0,102,116,97,109,20,1,0,0,21,1,0,0,18,1,0,0,19,1,0,0,0,0,0,0,0,0,0,0,32,62,0,0,116,117,108,99,22,1,0,0,23,1,0,0,18,1,0,0,19,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,48,66,50,65,1,0,0,0,3,0,0,0,50,116,102,109,32,66,65,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,0,0,220,62,0,0,49,66,50,65,1,0,0,0,3,0,0,0,50,116,102,109,32,66,65,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,0,0,64,63,0,0,50,66,50,65,1,0,0,0,3,0,0,0,50,116,102,109,32,66,65,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,0,0,164,63,0,0,48,65,50,66,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,0,0,8,64,0,0,49,65,50,66,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,0,0,108,64,0,0,50,65,50,66,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,0,0,208,64,0,0,90,89,88,114,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,1,0,0,52,65,0,0,90,89,88,103,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,1,0,0,152,65,0,0,90,89,88,98,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,1,0,0,252,65,0,0,67,82,84,114,1,0,0,0,3,0,0,0,118,114,117,99,97,114,97,112,0,238,120,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,1,0,0,96,66,0,0,67,82,84,103,1,0,0,0,3,0,0,0,118,114,117,99,97,114,97,112,0,238,120,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,1,0,0,196,66,0,0,67,82,84,98,1,0,0,0,3,0,0,0,118,114,117,99,97,114,97,112,0,238,120,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,1,0,0,40,67,0,0,116,108,97,99,1,0,0,0,1,0,0,0,109,105,116,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,67,0,0,103,114,97,116,1,0,0,0,1,0,0,0,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,67,0,0,100,97,104,99,9,0,0,0,1,0,0,0,50,51,102,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,68,0,0,109,114,104,99,1,0,0,0,1,0,0,0,109,114,104,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,68,0,0,111,114,108,99,1,0,0,0,1,0,0,0,111,114,108,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,69,0,0,116,114,108,99,1,0,0,0,1,0,0,0,116,114,108,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,69,0,0,116,111,108,99,1,0,0,0,1,0,0,0,116,114,108,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,69,0,0,116,114,112,99,1,0,0,0,3,0,0,0,116,120,101,116,99,117,108,109,99,115,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,1,0,0,72,70,0,0,109,105,116,100,1,0,0,0,1,0,0,0,109,105,116,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,70,0,0,100,110,109,100,1,0,0,0,3,0,0,0,99,115,101,100,99,117,108,109,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,1,0,0,16,71,0,0,100,100,109,100,1,0,0,0,3,0,0,0,99,115,101,100,99,117,108,109,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,1,0,0,116,71,0,0,116,109,97,103,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,0,0,216,71,0,0,67,82,84,107,1,0,0,0,2,0,0,0,118,114,117,99,97,114,97,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,1,0,0,60,72,0,0,105,109,117,108,1,0,0,0,1,0,0,0,32,90,89,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,72,0,0,116,112,107,98,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,73,0,0,116,112,116,119,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,73,0,0,50,108,99,110,1,0,0,0,1,0,0,0,50,108,99,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,73,0,0,48,101,114,112,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,0,0,48,74,0,0,49,101,114,112,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,0,0,148,74,0,0,50,101,114,112,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,1,0,0,248,74,0,0,99,115,101,100,1,0,0,0,3,0,0,0,99,115,101,100,99,117,108,109,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,1,0,0,92,75,0,0,113,101,115,112,1,0,0,0,1,0,0,0,113,101,115,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,75,0,0,104,99,101,116,1,0,0,0,1,0,0,0,32,103,105,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,76,0,0,115,105,105,99,1,0,0,0,1,0,0,0,32,103,105,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,76,0,0,48,103,105,114,1,0,0,0,1,0,0,0,32,103,105,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,76,0,0,50,103,105,114,1,0,0,0,1,0,0,0,32,103,105,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,77,0,0,115,97,101,109,1,0,0,0,1,0,0,0,115,97,101,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,77,0,0,48,100,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,78,0,0,49,100,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,78,0,0,50,100,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,78,0,0,51,100,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,79,0,0,115,50,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,79,0,0,105,50,115,112,1,0,0,0,1,0,0,0,97,116,97,100], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([12,80,0,0,100,101,117,118,1,0,0,0,3,0,0,0,99,115,101,100,99,117,108,109,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,1,0,0,112,80,0,0,32,100,102,98,1,0,0,0,1,0,0,0,32,100,102,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,80,0,0,105,100,114,99,1,0,0,0,1,0,0,0,105,100,114,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,81,0,0,48,66,50,68,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,81,0,0,49,66,50,68,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0,50,66,50,68,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,82,0,0,51,66,50,68,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,82,0,0,48,68,50,66,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,83,0,0,49,68,50,66,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,83,0,0,50,68,50,66,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,83,0,0,51,68,50,66,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,84,0,0,100,114,99,115,1,0,0,0,1,0,0,0,99,115,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,84,0,0,119,101,105,118,1,0,0,0,1,0,0,0,119,101,105,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,85,0,0,110,114,99,115,1,0,0,0,1,0,0,0,110,114,99,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,85,0,0,116,103,99,118,1,0,0,0,1,0,0,0,116,103,99,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,85,0,0,97,116,101,109,1,0,0,0,1,0,0,0,116,99,105,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,86,0,0,100,105,115,112,1,0,0,0,1,0,0,0,100,105,115,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,86,0,0,109,99,115,100,1,0,0,0,1,0,0,0,99,117,108,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,87,0,0,115,116,114,97,9,0,0,0,1,0,0,0,50,51,102,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,71,0,0,0,66,0,0,0,32,0,0,0,98,0,0,0,117,0,0,0,105,0,0,0,108,0,0,0,116,0,0,0,45,0,0,0,105,0,0,0,110,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,32,0,0,0,99,0,0,0,111,0,0,0,112,0,0,0,121,0,0,0,114,0,0,0,105,0,0,0,103,0,0,0,104,0,0,0,116,0,0,0,44,0,0,0,32,0,0,0,117,0,0,0,115,0,0,0,101,0,0,0,32,0,0,0,102,0,0,0,114,0,0,0,101,0,0,0,101,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,76,0,0,0,97,0,0,0,98,0,0,0,32,0,0,0,105,0,0,0,100,0,0,0,101,0,0,0,110,0,0,0,116,0,0,0,105,0,0,0,116,0,0,0,121,0,0,0,32,0,0,0,98,0,0,0,117,0,0,0,105,0,0,0,108,0,0,0,116,0,0,0,45,0,0,0,105,0,0,0,110,0,0,0,0,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,32,0,0,0,105,0,0,0,100,0,0,0,101,0,0,0,110,0,0,0,116,0,0,0,105,0,0,0,116,0,0,0,121,0,0,0,32,0,0,0,98,0,0,0,117,0,0,0,105,0,0,0,108,0,0,0,116,0,0,0,45,0,0,0,105,0,0,0,110,0,0,0,0,0,0,0,115,0,0,0,82,0,0,0,71,0,0,0,66,0,0,0,32,0,0,0,98,0,0,0,117,0,0,0,105,0,0,0,108,0,0,0,116,0,0,0,45,0,0,0,105,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,1,0,0,32,1,0,0,92,129,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,0,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,4,0,8,0,16,0,32,0,64,0,128,0,0,1,0,2,0,4,0,8,0,12,0,16,0,20,0,24,0,28,0,32,0,36,0,40,0,44,0,48,0,52,0,56,0,60,0,64,0,68,0,72,0,76,0,80,0,84,0,88,0,92,0,96,0,100,0,104,0,108,0,112,0,116,0,120,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,1,128,2,128,4,128,8,128,16,128,32,128,64,128,128,128,0,129,0,130,0,132,0,136,0,140,0,144,0,148,0,152,0,156,0,160,0,164,0,168,0,172,0,176,0,180,0,184,0,188,0,192,0,196,0,200,0,204,0,208,0,212,0,216,0,220,0,224,0,228,0,232,0,236,0,240,0,244,0,248,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,128,128,128,128,255,255,0,0,0,0,0,0,255,255,255,255,255,255,0,0,255,255,128,128,128,128,0,0,0,0,128,128,128,128,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,127,0,127,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,97,108,112,104,97,32,99,104,97,110,110,101,108,32,119,105,100,116,104,0,67,111,108,111,114,83,112,97,99,101,32,109,105,115,109,97,116,99,104,0,67,111,117,108,100,110,39,116,32,108,105,110,107,32,39,37,100,39,32,112,114,111,102,105,108,101,115,0,85,110,115,117,112,112,111,114,116,101,100,32,105,110,116,101,110,116,32,39,37,100,39,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,103,97,109,109,97,46,99,0,40,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,116,111,110,101,32,99,117,114,118,101,32,111,102,32,109,111,114,101,32,116,104,97,110,32,54,53,53,51,48,32,101,110,116,114,105,101,115,0,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,116,111,110,101,32,99,117,114,118,101,32,119,105,116,104,32,122,101,114,111,32,115,101,103,109,101,110,116,115,32,97,110,100,32,110,111,32,116,97,98,108,101,0,40,83,101,103,109,101,110,116,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,66,117,105,108,100,83,101,103,109,101,110,116,101,100,84,111,110,101,67,117,114,118,101,0,40,80,97,114,97,109,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,66,117,105,108,100,80,97,114,97,109,101,116,114,105,99,84,111,110,101,67,117,114,118,101,0,73,110,118,97,108,105,100,32,112,97,114,97,109,101,116,114,105,99,32,99,117,114,118,101,32,116,121,112,101,32,37,100,0,40,67,117,114,118,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,70,114,101,101,84,111,110,101,67,117,114,118,101,84,114,105,112,108,101,0,40,88,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,74,111,105,110,84,111,110,101,67,117,114,118,101,0,40,89,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,69,118,97,108,84,111,110,101,67,117,114,118,101,70,108,111,97,116,0,99,109,115,69,118,97,108,84,111,110,101,67,117,114,118,101,49,54,0,40,73,110,67,117,114,118,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,82,101,118,101,114,115,101,84,111,110,101,67,117,114,118,101,69,120,0,99,109,115,73,115,84,111,110,101,67,117,114,118,101,68,101,115,99,101,110,100,105,110,103,0,40,73,110,71,97,109,109,97,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,82,101,118,101,114,115,101,84,111,110,101,67,117,114,118,101,0,99,109,115,73,115,84,111,110,101,67,117,114,118,101,76,105,110,101,97,114,0,99,109,115,73,115,84,111,110,101,67,117,114,118,101,77,111,110,111,116,111,110,105,99,0,99,109,115,71,101,116,84,111,110,101,67,117,114,118,101,80,97,114,97,109,101,116,114,105,99,84,121,112,101,0,87,114,111,110,103,32,112,111,115,105,116,105,111,110,32,111,102,32,80,67,83,46,32,49,46,46,50,53,53,32,101,120,112,101,99,116,101,100,44,32,37,100,32,102,111,117,110,100,46,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,22,21,20,19,18,17,16,15,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,13,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,22,21,20,19,18,17,16,15,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,13,85,110,115,117,112,112,111,114,116,101,100,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,40,37,100,45,62,37,100,32,99,104,97,110,110,101,108,115,41,0,40,65,99,99,101,115,115,77,111,100,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,105,111,48,46,99,0,99,109,115,79,112,101,110,73,79,104,97,110,100,108,101,114,70,114,111,109,77,101,109,0,67,111,117,108,100,110,39,116,32,114,101,97,100,32,112,114,111,102,105,108,101,32,102,114,111,109,32,78,85,76,76,32,112,111,105,110,116,101,114,0,67,111,117,108,100,110,39,116,32,97,108,108,111,99,97,116,101,32,37,108,100,32,98,121,116,101,115,32,102,111,114,32,112,114,111,102,105,108,101,0,85,110,107,110,111,119,110,32,97,99,99,101,115,115,32,109,111,100,101,32,39,37,99,39,0,84,111,111,32,102,101,119,32,100,97,116,97,59,32,112,114,111,98,97,98,108,121,32,99,111,114,114,117,112,116,101,100,32,112,114,111,102,105,108,101,0,82,101,97,100,32,102,114,111,109,32,109,101,109,111,114,121,32,101,114,114,111,114,46,32,71,111,116,32,37,100,32,98,121,116,101,115,44,32,98,108,111,99,107,32,115,104,111,117,108,100,32,98,101,32,111,102,32,37,100,32,98,121,116,101,115,0,40,70,105,108,101,78,97,109,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,79,112,101,110,73,79,104,97,110,100,108,101,114,70,114,111,109,70,105,108,101,0,114,98,0,70,105,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,0,67,97,110,110,111,116,32,103,101,116,32,115,105,122,101,32,111,102,32,102,105,108,101,32,39,37,115,39,0,119,98,0,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,39,37,115,39,0,84,101,108,108,32,101,114,114,111,114,59,32,112,114,111,98,97,98,108,121,32,99,111,114,114,117,112,116,101,100,32,102,105,108,101,0,83,101,101,107,32,101,114,114,111,114,59,32,112,114,111,98,97,98,108,121,32,99,111,114,114,117,112,116,101,100,32,102,105,108,101,0,82,101,97,100,32,101,114,114,111,114,46,32,71,111,116,32,37,100,32,98,121,116,101,115,44,32,98,108,111,99,107,32,115,104,111,117,108,100,32,98,101,32,111,102,32,37,100,32,98,121,116,101,115,0,110,111,116,32,97,110,32,73,67,67,32,112,114,111,102,105,108,101,44,32,105,110,118,97,108,105,100,32,115,105,103,110,97,116,117,114,101,0,84,111,111,32,109,97,110,121,32,116,97,103,115,32,40,37,100,41,0,119,0,40,104,80,114,111,102,105,108,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,83,97,118,101,80,114,111,102,105,108,101,84,111,73,79,104,97,110,100,108,101,114,0,40,73,110,116,101,114,110,97,108,41,32,110,111,32,104,97,110,100,108,101,114,32,102,111,114,32,116,97,103,32,37,120,0,67,111,117,108,100,110,39,116,32,119,114,105,116,101,32,116,121,112,101,32,39,37,115,39,0,114,0,85,110,107,110,111,119,110,32,116,97,103,32,116,121,112,101,32,39,37,115,39,32,102,111,117,110,100,46,0,67,111,114,114,117,112,116,101,100,32,116,97,103,32,39,37,115,39,0,39,37,115,39,32,73,110,99,111,110,115,105,115,116,101,110,116,32,110,117,109,98,101,114,32,111,102,32,105,116,101,109,115,58,32,101,120,112,101,99,116,101,100,32,37,100,44,32,103,111,116,32,37,100,0,85,110,115,117,112,112,111,114,116,101,100,32,116,97,103,32,39,37,120,39,0,85,110,115,117,112,112,111,114,116,101,100,32,116,121,112,101,32,39,37,115,39,32,102,111,114,32,116,97,103,32,39,37,115,39,0,77,97,108,102,111,114,109,101,100,32,115,116,114,117,99,116,32,105,110,32,116,121,112,101,32,39,37,115,39,32,102,111,114,32,116,97,103,32,39,37,115,39,0,40,73,99,99,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,95,99,109,115,68,101,108,101,116,101,84,97,103,66,121,80,111,115,0,40,105,32,62,61,32,48,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,105,111,49,46,99,0,95,99,109,115,82,101,97,100,77,101,100,105,97,87,104,105,116,101,80,111,105,110,116,0,95,99,109,115,82,101,97,100,67,72,65,68,0,40,114,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,82,101,97,100,73,67,67,77,97,116,114,105,120,82,71,66,50,88,89,90,0,85,110,101,120,112,101,99,116,101,100,32,100,105,114,101,99,116,105,111,110,32,40,37,100,41,0,40,109,112,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,108,117,116,46,99,0,67,117,114,118,101,83,101,116,69,108,101,109,84,121,112,101,70,114,101,101,0,69,118,97,108,117,97,116,101,67,117,114,118,101,115,0,40,99,108,117,116,80,111,105,110,116,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,83,116,97,103,101,65,108,108,111,99,67,76,117,116,49,54,98,105,116,71,114,97,110,117,108,97,114,0,84,111,111,32,109,97,110,121,32,105,110,112,117,116,32,99,104,97,110,110,101,108,115,32,40,37,100,32,99,104,97,110,110,101,108,115,44,32,109,97,120,61,37,100,41,0,40,68,105,109,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,67,117,98,101,83,105,122,101,0,40,109,112,101,32,45,62,73,110,112,117,116,67,104,97,110,110,101,108,115,32,60,61,32,49,50,56,41,0,69,118,97,108,117,97,116,101,67,76,85,84,102,108,111,97,116,73,110,49,54,0,40,109,112,101,32,45,62,79,117,116,112,117,116,67,104,97,110,110,101,108,115,32,60,61,32,49,50,56,41,0,99,109,115,83,116,97,103,101,65,108,108,111,99,67,76,117,116,70,108,111,97,116,71,114,97,110,117,108,97,114,0,40,108,117,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,80,105,112,101,108,105,110,101,73,110,112,117,116,67,104,97,110,110,101,108,115,0,99,109,115,80,105,112,101,108,105,110,101,79,117,116,112,117,116,67,104,97,110,110,101,108,115,0,99,109,115,80,105,112,101,108,105,110,101,69,118,97,108,49,54,0,99,109,115,80,105,112,101,108,105,110,101,69,118,97,108,70,108,111,97,116,0,67,111,108,111,114,32,37,100,32,111,117,116,32,111,102,32,114,97,110,103,101,0,40,100,105,99,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,110,97,109,101,100,46,99,0,99,109,115,68,105,99,116,70,114,101,101,0,99,109,115,68,105,99,116,65,100,100,69,110,116,114,121,0,40,78,97,109,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,40,111,108,100,95,100,105,99,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,68,105,99,116,68,117,112,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,111,112,116,46,99,0,40,105,110,116,101,114,110,97,108,41,32,65,116,116,101,109,112,116,32,116,111,32,80,97,116,99,104,76,85,84,32,111,110,32,110,111,110,45,108,117,116,32,115,116,97,103,101,0,40,105,110,116,101,114,110,97,108,41,32,37,100,32,67,104,97,110,110,101,108,115,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,111,110,32,80,97,116,99,104,76,85,84,0,40,76,117,116,32,45,62,32,73,110,112,117,116,67,104,97,110,110,101,108,115,32,60,32,49,54,41,0,88,70,111,114,109,83,97,109,112,108,101,114,49,54,0,40,76,117,116,32,45,62,32,79,117,116,112,117,116,67,104,97,110,110,101,108,115,32,60,32,49,54,41,0,79,112,116,105,109,105,122,101,66,121,82,101,115,97,109,112,108,105,110,103,0,40,82,101,115,117,108,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,112,108,117,103,105,110,46,99,0,95,99,109,115,65,100,106,117,115,116,69,110,100,105,97,110,101,115,115,54,52,0,95,99,109,115,82,101,97,100,85,73,110,116,56,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,85,73,110,116,49,54,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,85,73,110,116,49,54,65,114,114,97,121,0,95,99,109,115,82,101,97,100,85,73,110,116,51,50,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,70,108,111,97,116,51,50,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,85,73,110,116,54,52,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,49,53,70,105,120,101,100,49,54,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,88,89,90,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,85,73,110,116,56,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,85,73,110,116,49,54,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,85,73,110,116,49,54,65,114,114,97,121,0,40,65,114,114,97,121,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,95,99,109,115,87,114,105,116,101,85,73,110,116,51,50,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,70,108,111,97,116,51,50,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,85,73,110,116,54,52,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,49,53,70,105,120,101,100,49,54,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,88,89,90,78,117,109,98,101,114,0,40,88,89,90,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,40,68,101,115,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,95,99,109,115,68,101,99,111,100,101,68,97,116,101,84,105,109,101,78,117,109,98,101,114,0,40,83,111,117,114,99,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,95,99,109,115,69,110,99,111,100,101,68,97,116,101,84,105,109,101,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,84,121,112,101,66,97,115,101,0,95,99,109,115,87,114,105,116,101,84,121,112,101,66,97,115,101,0,95,99,109,115,82,101,97,100,65,108,105,103,110,109,101,110,116,0,95,99,109,115,87,114,105,116,101,65,108,105,103,110,109,101,110,116,0,66,97,100,32,99,111,110,116,101,120,116,32,99,108,105,101,110,116,32,45,45,32,112,111,115,115,105,98,108,101,32,99,111,114,114,117,112,116,105,111,110,0,40,48,41,0,95,99,109,115,67,111,110,116,101,120,116,71,101,116,67,108,105,101,110,116,67,104,117,110,107,0,85,110,115,117,112,112,111,114,116,101,100,32,110,117,109,98,101,114,32,111,102,32,99,104,97,110,110,101,108,115,32,102,111,114,32,86,67,71,84,32,39,37,100,39,0,85,110,115,117,112,112,111,114,116,101,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,86,67,71,84,32,39,37,100,39,0,85,110,115,117,112,112,111,114,116,101,100,32,116,97,103,32,116,121,112,101,32,102,111,114,32,86,67,71,84,32,39,37,100,39,0,40,105,111,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,116,121,112,101,115,46,99,0,95,99,109,115,87,114,105,116,101,87,67,104,97,114,65,114,114,97,121,0,40,33,40,65,114,114,97,121,32,61,61,32,40,40,118,111,105,100,42,41,48,41,32,38,38,32,110,32,62,32,48,41,41,0,85,110,107,110,111,119,110,32,114,101,99,111,114,100,32,108,101,110,103,116,104,32,105,110,32,100,105,99,116,105,111,110,97,114,121,32,39,37,100,39,0,66,97,100,32,100,105,99,116,105,111,110,97,114,121,32,78,97,109,101,47,86,97,108,117,101,0,95,99,109,115,82,101,97,100,87,67,104,97,114,65,114,114,97,121,0,70,111,117,110,100,32,117,110,107,110,111,119,110,32,77,80,69,32,116,121,112,101,32,39,37,115,39,0,85,110,107,110,111,119,110,32,99,117,114,118,101,32,101,108,101,109,101,110,116,32,116,121,112,101,32,39,37,115,39,32,102,111,117,110,100,46,0,85,110,107,110,111,119,110,32,77,80,69,32,116,121,112,101,32,39,37,115,39,32,102,111,117,110,100,46,0,110,109,0,35,48,0,35,49,0,35,50,0,35,51,0,80,83,0,76,85,84,32,105,115,32,110,111,116,32,115,117,105,116,97,98,108,101,32,116,111,32,98,101,32,115,97,118,101,100,32,97,115,32,76,117,116,66,84,111,65,0,67,97,110,110,111,116,32,115,97,118,101,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,100,97,116,97,44,32,67,76,85,84,32,97,114,101,32,56,32,111,114,32,49,54,32,98,105,116,32,111,110,108,121,0,85,110,107,110,111,119,110,32,112,114,101,99,105,115,105,111,110,32,111,102,32,39,37,100,39,0,85,110,107,110,111,119,110,32,99,117,114,118,101,32,116,121,112,101,32,39,37,115,39,0,76,85,84,32,105,115,32,110,111,116,32,115,117,105,116,97,98,108,101,32,116,111,32,98,101,32,115,97,118,101,100,32,97,115,32,76,117,116,65,84,111,66,0,109,117,108,116,105,76,111,99,97,108,105,122,101,100,85,110,105,99,111,100,101,84,121,112,101,32,111,102,32,108,101,110,32,33,61,32,49,50,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,84,111,111,32,109,97,110,121,32,110,97,109,101,100,32,99,111,108,111,114,115,32,39,37,100,39,0,84,111,111,32,109,97,110,121,32,100,101,118,105,99,101,32,99,111,111,114,100,105,110,97,116,101,115,32,39,37,100,39,0,84,111,111,32,109,97,110,121,32,99,111,108,111,114,97,110,116,115,32,39,37,100,39,0,76,85,84,32,105,115,32,110,111,116,32,115,117,105,116,97,98,108,101,32,116,111,32,98,101,32,115,97,118,101,100,32,97,115,32,76,85,84,49,54,0,40,84,97,98,108,101,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,87,114,105,116,101,49,54,98,105,116,84,97,98,108,101,115,0,76,85,84,32,105,115,32,110,111,116,32,115,117,105,116,97,98,108,101,32,116,111,32,98,101,32,115,97,118,101,100,32,97,115,32,76,85,84,56,0,76,85,84,56,32,110,101,101,100,115,32,50,53,54,32,101,110,116,114,105,101,115,32,111,110,32,112,114,101,108,105,110,101,97,114,105,122,97,116,105,111,110,0,77,117,108,116,105,115,101,103,109,101,110,116,32,111,114,32,73,110,118,101,114,116,101,100,32,112,97,114,97,109,101,116,114,105,99,32,99,117,114,118,101,115,32,99,97,110,110,111,116,32,98,101,32,119,114,105,116,116,101,110,0,85,110,115,117,112,112,111,114,116,101,100,32,112,97,114,97,109,101,116,114,105,99,32,99,117,114,118,101,0,85,110,107,110,111,119,110,32,112,97,114,97,109,101,116,114,105,99,32,99,117,114,118,101,32,116,121,112,101,32,39,37,100,39,0,101,110,0,85,83,0,40,87,104,105,116,101,80,111,105,110,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,119,116,112,110,116,46,99,0,99,109,115,87,104,105,116,101,80,111,105,110,116,70,114,111,109,84,101,109,112,0,99,109,115,87,104,105,116,101,80,111,105,110,116,70,114,111,109,84,101,109,112,58,32,105,110,118,97,108,105,100,32,116,101,109,112,0,99,109,115,84,101,109,112,70,114,111,109,87,104,105,116,101,80,111,105,110,116,0,40,84,101,109,112,75,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,120,102,111,114,109,46,99,0,40,112,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,68,101,108,101,116,101,84,114,97,110,115,102,111,114,109,0,78,85,76,76,32,105,110,112,117,116,32,112,114,111,102,105,108,101,115,32,111,110,32,116,114,97,110,115,102,111,114,109,0,87,114,111,110,103,32,105,110,112,117,116,32,99,111,108,111,114,32,115,112,97,99,101,32,111,110,32,116,114,97,110,115,102,111,114,109,0,87,114,111,110,103,32,111,117,116,112,117,116,32,99,111,108,111,114,32,115,112,97,99,101,32,111,110,32,116,114,97,110,115,102,111,114,109,0,67,111,117,108,100,110,39,116,32,108,105,110,107,32,116,104,101,32,112,114,111,102,105,108,101,115,0,67,104,97,110,110,101,108,32,99,111,117,110,116,32,100,111,101,115,110,39,116,32,109,97,116,99,104,46,32,80,114,111,102,105,108,101,32,105,115,32,99,111,114,114,117,112,116,101,100,0,85,110,115,117,112,112,111,114,116,101,100,32,114,97,115,116,101,114,32,102,111,114,109,97,116,0,87,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,112,114,111,102,105,108,101,115,46,32,49,46,46,50,53,53,32,101,120,112,101,99,116,101,100,44,32,37,100,32,102,111,117,110,100,46,0,114,119,97,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

   
  Module["_memset"] = _memset;

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function _pthread_mutex_destroy() {}

  function ___lock() {}

  function ___unlock() {}

   
  Module["_i64Add"] = _i64Add;

  function _pthread_mutex_init() {}

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  var _llvm_pow_f64=Math_pow;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_memmove"] = _memmove;

   
  Module["___uremdi3"] = ___uremdi3;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diid(x) { Module["printErr"]("Invalid function pointer called with signature 'diid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_idi(x) { Module["printErr"]("Invalid function pointer called with signature 'idi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_diid(index,a1,a2,a3) {
  try {
    return Module["dynCall_diid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_idi(index,a1,a2) {
  try {
    return Module["dynCall_idi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_diid": nullFunc_diid, "nullFunc_viii": nullFunc_viii, "nullFunc_idi": nullFunc_idi, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_diid": invoke_diid, "invoke_viii": invoke_viii, "invoke_idi": invoke_idi, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "___syscall221": ___syscall221, "___syscall140": ___syscall140, "_pthread_mutex_init": _pthread_mutex_init, "_gmtime_r": _gmtime_r, "_gmtime": _gmtime, "___lock": ___lock, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_abort": _abort, "___setErrNo": ___setErrNo, "___syscall6": ___syscall6, "___syscall40": ___syscall40, "_time": _time, "___syscall5": ___syscall5, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "_llvm_pow_f64": _llvm_pow_f64, "___assert_fail": ___assert_fail, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall10": ___syscall10, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_diid=env.nullFunc_diid;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_idi=env.nullFunc_idi;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_diid=env.invoke_diid;
  var invoke_viii=env.invoke_viii;
  var invoke_idi=env.invoke_idi;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var ___syscall140=env.___syscall140;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _gmtime_r=env._gmtime_r;
  var _gmtime=env._gmtime;
  var ___lock=env.___lock;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var ___syscall6=env.___syscall6;
  var ___syscall40=env.___syscall40;
  var _time=env._time;
  var ___syscall5=env.___syscall5;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var ___assert_fail=env.___assert_fail;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall10=env.___syscall10;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _from16toFLT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (+($6|0));
 $8 = $7 / 65535.0;
 $9 = $2;
 HEAPF32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function _from16toDBL($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (+($6|0));
 $8 = $7 / 65535.0;
 $9 = $8;
 $10 = $2;
 HEAPF64[$10>>3] = $9;
 STACKTOP = sp;return;
}
function __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $16 = sp + 472|0;
 $17 = sp + 408|0;
 $18 = sp + 344|0;
 $19 = sp + 280|0;
 $25 = sp + 192|0;
 $26 = sp + 128|0;
 $27 = sp + 64|0;
 $28 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $29 = $6;
 $30 = ((($29)) + 172|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 & 67108864;
 $33 = ($32|0)!=(0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $6;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($35|0)==($38|0);
 if ($39) {
  $40 = $7;
  $41 = $8;
  $42 = ($40|0)==($41|0);
  if ($42) {
   STACKTOP = sp;return;
  }
 }
 $43 = $6;
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 7;
 $46 = $45 & 7;
 $15 = $46;
 $47 = $15;
 $48 = $6;
 $49 = ((($48)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 >>> 7;
 $52 = $51 & 7;
 $53 = ($47|0)!=($52|0);
 $54 = $15;
 $55 = ($54|0)==(0);
 $or$cond = $53 | $55;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $56 = $6;
 $57 = HEAP32[$56>>2]|0;
 $58 = $11;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 _ComputeComponentIncrements($57,$60,$16,$17);
 $61 = $6;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $11;
 $65 = ((($64)) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 _ComputeComponentIncrements($63,$66,$18,$19);
 $67 = $6;
 $68 = ((($67)) + 188|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $6;
 $71 = HEAP32[$70>>2]|0;
 $72 = $6;
 $73 = ((($72)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (__cmsGetFormatterAlpha($69,$71,$74)|0);
 $20 = $75;
 $76 = $15;
 $77 = ($76|0)==(1);
 if ($77) {
  $23 = 0;
  $24 = 0;
  $12 = 0;
  while(1) {
   $78 = $12;
   $79 = $10;
   $80 = ($78>>>0)<($79>>>0);
   if (!($80)) {
    break;
   }
   $81 = $7;
   $82 = HEAP32[$16>>2]|0;
   $83 = (($81) + ($82)|0);
   $84 = $23;
   $85 = (($83) + ($84)|0);
   $21 = $85;
   $86 = $8;
   $87 = HEAP32[$18>>2]|0;
   $88 = (($86) + ($87)|0);
   $89 = $24;
   $90 = (($88) + ($89)|0);
   $22 = $90;
   $13 = 0;
   while(1) {
    $91 = $13;
    $92 = $9;
    $93 = ($91>>>0)<($92>>>0);
    if (!($93)) {
     break;
    }
    $94 = $20;
    $95 = $22;
    $96 = $21;
    FUNCTION_TABLE_vii[$94 & 511]($95,$96);
    $97 = HEAP32[$17>>2]|0;
    $98 = $21;
    $99 = (($98) + ($97)|0);
    $21 = $99;
    $100 = HEAP32[$19>>2]|0;
    $101 = $22;
    $102 = (($101) + ($100)|0);
    $22 = $102;
    $103 = $13;
    $104 = (($103) + 1)|0;
    $13 = $104;
   }
   $105 = $11;
   $106 = HEAP32[$105>>2]|0;
   $107 = $23;
   $108 = (($107) + ($106))|0;
   $23 = $108;
   $109 = $11;
   $110 = ((($109)) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $24;
   $113 = (($112) + ($111))|0;
   $24 = $113;
   $114 = $12;
   $115 = (($114) + 1)|0;
   $12 = $115;
  }
  STACKTOP = sp;return;
 }
 dest=$27; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$28; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = 0;
 while(1) {
  $116 = $12;
  $117 = $10;
  $118 = ($116>>>0)<($117>>>0);
  if (!($118)) {
   break;
  }
  $13 = 0;
  while(1) {
   $119 = $13;
   $120 = $15;
   $121 = ($119>>>0)<($120>>>0);
   if (!($121)) {
    break;
   }
   $122 = $7;
   $123 = $13;
   $124 = (($16) + ($123<<2)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($122) + ($125)|0);
   $127 = $13;
   $128 = (($27) + ($127<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($126) + ($129)|0);
   $131 = $13;
   $132 = (($25) + ($131<<2)|0);
   HEAP32[$132>>2] = $130;
   $133 = $8;
   $134 = $13;
   $135 = (($18) + ($134<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($133) + ($136)|0);
   $138 = $13;
   $139 = (($28) + ($138<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = (($137) + ($140)|0);
   $142 = $13;
   $143 = (($26) + ($142<<2)|0);
   HEAP32[$143>>2] = $141;
   $144 = $13;
   $145 = (($144) + 1)|0;
   $13 = $145;
  }
  $13 = 0;
  while(1) {
   $146 = $13;
   $147 = $9;
   $148 = ($146>>>0)<($147>>>0);
   if (!($148)) {
    break;
   }
   $14 = 0;
   while(1) {
    $149 = $14;
    $150 = $15;
    $151 = ($149>>>0)<($150>>>0);
    if (!($151)) {
     break;
    }
    $152 = $20;
    $153 = $14;
    $154 = (($26) + ($153<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $14;
    $157 = (($25) + ($156<<2)|0);
    $158 = HEAP32[$157>>2]|0;
    FUNCTION_TABLE_vii[$152 & 511]($155,$158);
    $159 = $14;
    $160 = (($17) + ($159<<2)|0);
    $161 = HEAP32[$160>>2]|0;
    $162 = $14;
    $163 = (($25) + ($162<<2)|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = (($164) + ($161)|0);
    HEAP32[$163>>2] = $165;
    $166 = $14;
    $167 = (($19) + ($166<<2)|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $14;
    $170 = (($26) + ($169<<2)|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) + ($168)|0);
    HEAP32[$170>>2] = $172;
    $173 = $14;
    $174 = (($173) + 1)|0;
    $14 = $174;
   }
   $175 = $13;
   $176 = (($175) + 1)|0;
   $13 = $176;
  }
  $13 = 0;
  while(1) {
   $177 = $13;
   $178 = $15;
   $179 = ($177>>>0)<($178>>>0);
   if (!($179)) {
    break;
   }
   $180 = $11;
   $181 = HEAP32[$180>>2]|0;
   $182 = $13;
   $183 = (($27) + ($182<<2)|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + ($181))|0;
   HEAP32[$183>>2] = $185;
   $186 = $11;
   $187 = ((($186)) + 4|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = $13;
   $190 = (($28) + ($189<<2)|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = (($191) + ($188))|0;
   HEAP32[$190>>2] = $192;
   $193 = $13;
   $194 = (($193) + 1)|0;
   $13 = $194;
  }
  $195 = $12;
  $196 = (($195) + 1)|0;
  $12 = $196;
 }
 STACKTOP = sp;return;
}
function _ComputeComponentIncrements($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $8 >>> 12;
 $10 = $9 & 1;
 $11 = ($10|0)!=(0);
 $12 = $4;
 if ($11) {
  $13 = $5;
  $14 = $6;
  $15 = $7;
  _ComputeIncrementsForPlanar($12,$13,$14,$15);
  STACKTOP = sp;return;
 } else {
  $16 = $6;
  $17 = $7;
  _ComputeIncrementsForChunky($12,$16,$17);
  STACKTOP = sp;return;
 }
}
function __cmsGetFormatterAlpha($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = (_FormatterPos($9)|0);
 $7 = $10;
 $11 = $6;
 $12 = (_FormatterPos($11)|0);
 $8 = $12;
 $13 = $7;
 $14 = ($13|0)<(0);
 $15 = $8;
 $16 = ($15|0)<(0);
 $or$cond = $14 | $16;
 $17 = $7;
 $18 = ($17|0)>(4);
 $or$cond3 = $or$cond | $18;
 $19 = $8;
 $20 = ($19|0)>(4);
 $or$cond5 = $or$cond3 | $20;
 if ($or$cond5) {
  $21 = $4;
  _cmsSignalError($21,8,24508,$vararg_buffer);
  $3 = 0;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 } else {
  $22 = $7;
  $23 = (1808 + (($22*20)|0)|0);
  $24 = $8;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $3 = $26;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _ComputeIncrementsForPlanar($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink3 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $8 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $15 = $4;
 $16 = $15 >>> 7;
 $17 = $16 & 7;
 $9 = $17;
 $18 = $4;
 $19 = $18 >>> 3;
 $20 = $19 & 15;
 $10 = $20;
 $21 = $10;
 $22 = $9;
 $23 = (($21) + ($22))|0;
 $11 = $23;
 $24 = $4;
 $25 = (_trueBytesSize($24)|0);
 $13 = $25;
 $26 = $11;
 $27 = ($26>>>0)<=(0);
 $28 = $11;
 $29 = ($28>>>0)>=(16);
 $or$cond = $27 | $29;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 dest=$8; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $12 = 0;
 while(1) {
  $30 = $12;
  $31 = $9;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $13;
  $34 = $7;
  $35 = $12;
  $36 = (($34) + ($35<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = $12;
  $38 = (($37) + 1)|0;
  $12 = $38;
 }
 $12 = 0;
 while(1) {
  $39 = $12;
  $40 = $11;
  $41 = ($39>>>0)<($40>>>0);
  $42 = $4;
  if (!($41)) {
   break;
  }
  $43 = $42 >>> 10;
  $44 = $43 & 1;
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = $11;
   $47 = $12;
   $48 = (($46) - ($47))|0;
   $49 = (($48) - 1)|0;
   $50 = $12;
   $$sink = $49;$$sink3 = $50;
  } else {
   $51 = $12;
   $52 = $12;
   $$sink = $51;$$sink3 = $52;
  }
  $53 = (($8) + ($$sink3<<2)|0);
  HEAP32[$53>>2] = $$sink;
  $54 = $12;
  $55 = (($54) + 1)|0;
  $12 = $55;
 }
 $56 = $42 >>> 14;
 $57 = $56 & 1;
 $58 = ($57|0)!=(0);
 $59 = $11;
 $60 = ($59>>>0)>(0);
 $or$cond5 = $58 & $60;
 if ($or$cond5) {
  $61 = HEAP32[$8>>2]|0;
  $14 = $61;
  $12 = 0;
  while(1) {
   $62 = $12;
   $63 = $11;
   $64 = (($63) - 1)|0;
   $65 = ($62>>>0)<($64>>>0);
   if (!($65)) {
    break;
   }
   $66 = $12;
   $67 = (($66) + 1)|0;
   $68 = (($8) + ($67<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $12;
   $71 = (($8) + ($70<<2)|0);
   HEAP32[$71>>2] = $69;
   $72 = $12;
   $73 = (($72) + 1)|0;
   $12 = $73;
  }
  $74 = $14;
  $75 = $11;
  $76 = (($75) - 1)|0;
  $77 = (($8) + ($76<<2)|0);
  HEAP32[$77>>2] = $74;
 }
 $12 = 0;
 while(1) {
  $78 = $12;
  $79 = $11;
  $80 = ($78>>>0)<($79>>>0);
  if (!($80)) {
   break;
  }
  $81 = $5;
  $82 = $12;
  $83 = (($8) + ($82<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = Math_imul($84, $81)|0;
  HEAP32[$83>>2] = $85;
  $86 = $12;
  $87 = (($86) + 1)|0;
  $12 = $87;
 }
 $12 = 0;
 while(1) {
  $88 = $12;
  $89 = $9;
  $90 = ($88>>>0)<($89>>>0);
  if (!($90)) {
   break;
  }
  $91 = $12;
  $92 = $10;
  $93 = (($91) + ($92))|0;
  $94 = (($8) + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $6;
  $97 = $12;
  $98 = (($96) + ($97<<2)|0);
  HEAP32[$98>>2] = $95;
  $99 = $12;
  $100 = (($99) + 1)|0;
  $12 = $100;
 }
 STACKTOP = sp;return;
}
function _ComputeIncrementsForChunky($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $6 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $3;
 $15 = $14 >>> 7;
 $16 = $15 & 7;
 $7 = $16;
 $17 = $3;
 $18 = $17 >>> 3;
 $19 = $18 & 15;
 $8 = $19;
 $20 = $8;
 $21 = $7;
 $22 = (($20) + ($21))|0;
 $9 = $22;
 $23 = $3;
 $24 = (_trueBytesSize($23)|0);
 $11 = $24;
 $25 = $11;
 $26 = $9;
 $27 = Math_imul($25, $26)|0;
 $12 = $27;
 $28 = $9;
 $29 = ($28>>>0)<=(0);
 $30 = $9;
 $31 = ($30>>>0)>=(16);
 $or$cond = $29 | $31;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 dest=$6; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $10 = 0;
 while(1) {
  $32 = $10;
  $33 = $7;
  $34 = ($32>>>0)<($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $12;
  $36 = $5;
  $37 = $10;
  $38 = (($36) + ($37<<2)|0);
  HEAP32[$38>>2] = $35;
  $39 = $10;
  $40 = (($39) + 1)|0;
  $10 = $40;
 }
 $10 = 0;
 while(1) {
  $41 = $10;
  $42 = $9;
  $43 = ($41>>>0)<($42>>>0);
  $44 = $3;
  if (!($43)) {
   break;
  }
  $45 = $44 >>> 10;
  $46 = $45 & 1;
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $9;
   $49 = $10;
   $50 = (($48) - ($49))|0;
   $51 = (($50) - 1)|0;
   $52 = $10;
   $$sink = $51;$$sink3 = $52;
  } else {
   $53 = $10;
   $54 = $10;
   $$sink = $53;$$sink3 = $54;
  }
  $55 = (($6) + ($$sink3<<2)|0);
  HEAP32[$55>>2] = $$sink;
  $56 = $10;
  $57 = (($56) + 1)|0;
  $10 = $57;
 }
 $58 = $44 >>> 14;
 $59 = $58 & 1;
 $60 = ($59|0)!=(0);
 $61 = $9;
 $62 = ($61>>>0)>(1);
 $or$cond5 = $60 & $62;
 if ($or$cond5) {
  $63 = HEAP32[$6>>2]|0;
  $13 = $63;
  $10 = 0;
  while(1) {
   $64 = $10;
   $65 = $9;
   $66 = (($65) - 1)|0;
   $67 = ($64>>>0)<($66>>>0);
   if (!($67)) {
    break;
   }
   $68 = $10;
   $69 = (($68) + 1)|0;
   $70 = (($6) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $10;
   $73 = (($6) + ($72<<2)|0);
   HEAP32[$73>>2] = $71;
   $74 = $10;
   $75 = (($74) + 1)|0;
   $10 = $75;
  }
  $76 = $13;
  $77 = $9;
  $78 = (($77) - 1)|0;
  $79 = (($6) + ($78<<2)|0);
  HEAP32[$79>>2] = $76;
 }
 $80 = $11;
 $81 = ($80>>>0)>(1);
 L23: do {
  if ($81) {
   $10 = 0;
   while(1) {
    $82 = $10;
    $83 = $9;
    $84 = ($82>>>0)<($83>>>0);
    if (!($84)) {
     break L23;
    }
    $85 = $11;
    $86 = $10;
    $87 = (($6) + ($86<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = Math_imul($88, $85)|0;
    HEAP32[$87>>2] = $89;
    $90 = $10;
    $91 = (($90) + 1)|0;
    $10 = $91;
   }
  }
 } while(0);
 $10 = 0;
 while(1) {
  $92 = $10;
  $93 = $7;
  $94 = ($92>>>0)<($93>>>0);
  if (!($94)) {
   break;
  }
  $95 = $10;
  $96 = $8;
  $97 = (($95) + ($96))|0;
  $98 = (($6) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $4;
  $101 = $10;
  $102 = (($100) + ($101<<2)|0);
  HEAP32[$102>>2] = $99;
  $103 = $10;
  $104 = (($103) + 1)|0;
  $10 = $104;
 }
 STACKTOP = sp;return;
}
function _trueBytesSize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = $4 & 7;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0);
 if ($7) {
  $1 = 8;
 } else {
  $8 = $3;
  $1 = $8;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _copy8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _memmove(($4|0),($5|0),1)|0;
 STACKTOP = sp;return;
}
function _from8to16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = HEAP8[$5>>0]|0;
 $4 = $6;
 $7 = $4;
 $8 = $7&255;
 $9 = $8&65535;
 $10 = $9 << 8;
 $11 = $4;
 $12 = $11&255;
 $13 = $10 | $12;
 $14 = $13&65535;
 $15 = $2;
 HEAP16[$15>>1] = $14;
 STACKTOP = sp;return;
}
function _from8toHLF($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (+($7|0));
 $9 = $8 / 255.0;
 $4 = $9;
 $10 = $4;
 $11 = (__cmsFloat2Half($10)|0);
 $12 = $2;
 HEAP16[$12>>1] = $11;
 STACKTOP = sp;return;
}
function _from8toFLT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (+($6|0));
 $8 = $7 / 255.0;
 $9 = $2;
 HEAPF32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function _from8toDBL($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (+($6|0));
 $8 = $7 / 255.0;
 $9 = $2;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _from16to8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = HEAP16[$5>>1]|0;
 $4 = $6;
 $7 = $4;
 $8 = $7&65535;
 $9 = ($8*65281)|0;
 $10 = (($9) + 8388608)|0;
 $11 = $10 >>> 24;
 $12 = $11 & 255;
 $13 = $12&255;
 $14 = $2;
 HEAP8[$14>>0] = $13;
 STACKTOP = sp;return;
}
function _copy16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _memmove(($4|0),($5|0),2)|0;
 STACKTOP = sp;return;
}
function _from16toHLF($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (+($7|0));
 $9 = $8 / 65535.0;
 $4 = $9;
 $10 = $4;
 $11 = (__cmsFloat2Half($10)|0);
 $12 = $2;
 HEAP16[$12>>1] = $11;
 STACKTOP = sp;return;
}
function _fromHLFto8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = HEAP16[$5>>1]|0;
 $7 = (+__cmsHalf2Float($6));
 $4 = $7;
 $8 = $4;
 $9 = $8 * 255.0;
 $10 = $9;
 $11 = (__cmsQuickSaturateByte($10)|0);
 $12 = $2;
 HEAP8[$12>>0] = $11;
 STACKTOP = sp;return;
}
function _fromHLFto16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = HEAP16[$5>>1]|0;
 $7 = (+__cmsHalf2Float($6));
 $4 = $7;
 $8 = $4;
 $9 = $8 * 65535.0;
 $10 = $9;
 $11 = (__cmsQuickSaturateWord($10)|0);
 $12 = $2;
 HEAP16[$12>>1] = $11;
 STACKTOP = sp;return;
}
function _fromHLFtoFLT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP16[$4>>1]|0;
 $6 = (+__cmsHalf2Float($5));
 $7 = $2;
 HEAPF32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function _fromHLFtoDBL($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP16[$4>>1]|0;
 $6 = (+__cmsHalf2Float($5));
 $7 = $6;
 $8 = $2;
 HEAPF64[$8>>3] = $7;
 STACKTOP = sp;return;
}
function _fromFLTto8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF32[$5>>2];
 $4 = $6;
 $7 = $4;
 $8 = $7 * 255.0;
 $9 = $8;
 $10 = (__cmsQuickSaturateByte($9)|0);
 $11 = $2;
 HEAP8[$11>>0] = $10;
 STACKTOP = sp;return;
}
function _fromFLTto16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF32[$5>>2];
 $4 = $6;
 $7 = $4;
 $8 = $7 * 65535.0;
 $9 = $8;
 $10 = (__cmsQuickSaturateWord($9)|0);
 $11 = $2;
 HEAP16[$11>>1] = $10;
 STACKTOP = sp;return;
}
function _fromFLTtoHLF($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF32[$5>>2];
 $4 = $6;
 $7 = $4;
 $8 = (__cmsFloat2Half($7)|0);
 $9 = $2;
 HEAP16[$9>>1] = $8;
 STACKTOP = sp;return;
}
function _copy32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _memmove(($4|0),($5|0),4)|0;
 STACKTOP = sp;return;
}
function _fromFLTtoDBL($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF32[$5>>2];
 $4 = $6;
 $7 = $4;
 $8 = $7;
 $9 = $2;
 HEAPF64[$9>>3] = $8;
 STACKTOP = sp;return;
}
function _fromDBLto8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF64[$5>>3];
 $4 = $6;
 $7 = $4;
 $8 = $7 * 255.0;
 $9 = (__cmsQuickSaturateByte($8)|0);
 $10 = $2;
 HEAP8[$10>>0] = $9;
 STACKTOP = sp;return;
}
function _fromDBLto16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF64[$5>>3];
 $4 = $6;
 $7 = $4;
 $8 = $7 * 65535.0;
 $9 = (__cmsQuickSaturateWord($8)|0);
 $10 = $2;
 HEAP16[$10>>1] = $9;
 STACKTOP = sp;return;
}
function _fromDBLtoHLF($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF64[$5>>3];
 $7 = $6;
 $4 = $7;
 $8 = $4;
 $9 = (__cmsFloat2Half($8)|0);
 $10 = $2;
 HEAP16[$10>>1] = $9;
 STACKTOP = sp;return;
}
function _fromDBLtoFLT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF64[$5>>3];
 $4 = $6;
 $7 = $4;
 $8 = $7;
 $9 = $2;
 HEAPF32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function _copy64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _memmove(($4|0),($5|0),8)|0;
 STACKTOP = sp;return;
}
function _FormatterPos($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = $4 & 7;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $2;
  $9 = $8 >>> 22;
  $10 = $9 & 1;
  $11 = ($10|0)!=(0);
  if ($11) {
   $1 = 4;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $12 = $3;
   $13 = ($12|0)==(2);
   if ($13) {
    $14 = $2;
    $15 = $14 >>> 22;
    $16 = $15 & 1;
    $17 = ($16|0)!=(0);
    if ($17) {
     $1 = 2;
     break;
    }
   }
   $18 = $3;
   $19 = ($18|0)==(4);
   if ($19) {
    $20 = $2;
    $21 = $20 >>> 22;
    $22 = $21 & 1;
    $23 = ($22|0)!=(0);
    if ($23) {
     $1 = 3;
     break;
    }
   }
   $24 = $3;
   $25 = ($24|0)==(2);
   if ($25) {
    $26 = $2;
    $27 = $26 >>> 22;
    $28 = $27 & 1;
    $29 = ($28|0)!=(0);
    if (!($29)) {
     $1 = 1;
     break;
    }
   }
   $30 = $3;
   $31 = ($30|0)==(1);
   if ($31) {
    $32 = $2;
    $33 = $32 >>> 22;
    $34 = $33 & 1;
    $35 = ($34|0)!=(0);
    if (!($35)) {
     $1 = 0;
     break;
    }
   }
   $1 = -1;
  }
 } while(0);
 $36 = $1;
 STACKTOP = sp;return ($36|0);
}
function __cmsQuickSaturateByte($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 255.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord($9)|0);
    $11 = $10&255;
    $1 = $11;
    break;
   }
  }
 } while(0);
 $12 = $1;
 STACKTOP = sp;return ($12|0);
}
function __cmsQuickFloorWord($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 32767.0;
 $4 = (__cmsQuickFloor($3)|0);
 $5 = $4&65535;
 $6 = $5&65535;
 $7 = (($6) + 32767)|0;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsQuickFloor($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function __cmsQuickSaturateWord($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 65535.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord($9)|0);
    $1 = $10;
    break;
   }
  }
 } while(0);
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function _DefaultICCintents($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer = sp + 96|0;
 $18 = sp + 24|0;
 $19 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = 0;
 $21 = 1281450528;
 $29 = $9;
 $30 = ($29|0)==(0);
 if ($30) {
  $7 = 0;
  $180 = $7;
  STACKTOP = sp;return ($180|0);
 }
 $31 = $8;
 $32 = (_cmsPipelineAlloc($31,0,0)|0);
 $16 = $32;
 $33 = $16;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $7 = 0;
  $180 = $7;
  STACKTOP = sp;return ($180|0);
 }
 $35 = $11;
 $36 = HEAP32[$35>>2]|0;
 $37 = (_cmsGetColorSpace($36)|0);
 $22 = $37;
 $24 = 0;
 L9: while(1) {
  $38 = $24;
  $39 = $9;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   label = 29;
   break;
  }
  $41 = $11;
  $42 = $24;
  $43 = (($41) + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $17 = $44;
  $45 = $17;
  $46 = (_cmsGetDeviceClass($45)|0);
  $23 = $46;
  $47 = $23;
  $48 = ($47|0)==(1818848875);
  $49 = $23;
  $50 = ($49|0)==(1633842036);
  $51 = $48 ? 1 : $50;
  $52 = $51&1;
  $26 = $52;
  $53 = $24;
  $54 = ($53|0)!=(0);
  $55 = $26;
  $56 = ($55|0)!=(0);
  $or$cond = $54 | $56;
  if ($or$cond) {
   $57 = $22;
   $58 = ($57|0)!=(1482250784);
   $59 = $22;
   $60 = ($59|0)!=(1281450528);
   $61 = $58 ? $60 : 0;
   $62 = $61&1;
   $27 = $62;
  } else {
   $27 = 1;
  }
  $63 = $10;
  $64 = $24;
  $65 = (($63) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $25 = $66;
  $67 = $27;
  $68 = ($67|0)!=(0);
  $69 = $26;
  $70 = ($69|0)!=(0);
  $or$cond3 = $68 | $70;
  $71 = $17;
  if ($or$cond3) {
   $72 = (_cmsGetColorSpace($71)|0);
   $20 = $72;
   $73 = $17;
   $74 = (_cmsGetPCS($73)|0);
   $21 = $74;
  } else {
   $75 = (_cmsGetPCS($71)|0);
   $20 = $75;
   $76 = $17;
   $77 = (_cmsGetColorSpace($76)|0);
   $21 = $77;
  }
  $78 = $20;
  $79 = $22;
  $80 = (_ColorSpaceIsCompatible($78,$79)|0);
  $81 = ($80|0)!=(0);
  if (!($81)) {
   label = 14;
   break;
  }
  $83 = $26;
  $84 = ($83|0)!=(0);
  do {
   if ($84) {
    label = 17;
   } else {
    $85 = $23;
    $86 = ($85|0)==(1852662636);
    $87 = $9;
    $88 = ($87|0)==(1);
    $or$cond5 = $86 & $88;
    if ($or$cond5) {
     label = 17;
    } else {
     $116 = $27;
     $117 = ($116|0)!=(0);
     $118 = $17;
     $119 = $25;
     if ($117) {
      $120 = (__cmsReadInputLUT($118,$119)|0);
      $15 = $120;
      $121 = $15;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break L9;
      } else {
       break;
      }
     }
     $123 = (__cmsReadOutputLUT($118,$119)|0);
     $15 = $123;
     $124 = $15;
     $125 = ($124|0)==(0|0);
     if ($125) {
      break L9;
     }
     $126 = $24;
     $127 = $11;
     $128 = $25;
     $129 = $12;
     $130 = $24;
     $131 = (($129) + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = $13;
     $134 = $24;
     $135 = (($133) + ($134<<3)|0);
     $136 = +HEAPF64[$135>>3];
     $137 = (_ComputeConversion($126,$127,$128,$132,$136,$18,$19)|0);
     $138 = ($137|0)!=(0);
     if (!($138)) {
      break L9;
     }
     $139 = $16;
     $140 = $22;
     $141 = $20;
     $142 = (_AddConversion($139,$140,$141,$18,$19)|0);
     $143 = ($142|0)!=(0);
     if (!($143)) {
      break L9;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   $89 = $17;
   $90 = $25;
   $91 = (__cmsReadDevicelinkLUT($89,$90)|0);
   $15 = $91;
   $92 = $15;
   $93 = ($92|0)==(0|0);
   if ($93) {
    break;
   }
   $94 = $23;
   $95 = ($94|0)==(1633842036);
   $96 = $24;
   $97 = ($96>>>0)>(0);
   $or$cond7 = $95 & $97;
   if ($or$cond7) {
    $98 = $24;
    $99 = $11;
    $100 = $25;
    $101 = $12;
    $102 = $24;
    $103 = (($101) + ($102<<2)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $13;
    $106 = $24;
    $107 = (($105) + ($106<<3)|0);
    $108 = +HEAPF64[$107>>3];
    $109 = (_ComputeConversion($98,$99,$100,$104,$108,$18,$19)|0);
    $110 = ($109|0)!=(0);
    if (!($110)) {
     break;
    }
   } else {
    __cmsMAT3identity($18);
    __cmsVEC3init($19,0.0,0.0,0.0);
   }
   $111 = $16;
   $112 = $22;
   $113 = $20;
   $114 = (_AddConversion($111,$112,$113,$18,$19)|0);
   $115 = ($114|0)!=(0);
   if (!($115)) {
    break;
   }
  }
  $144 = $16;
  $145 = $15;
  $146 = (_cmsPipelineCat($144,$145)|0);
  $147 = ($146|0)!=(0);
  if (!($147)) {
   break;
  }
  $148 = $15;
  _cmsPipelineFree($148);
  $15 = 0;
  $149 = $21;
  $22 = $149;
  $150 = $24;
  $151 = (($150) + 1)|0;
  $24 = $151;
 }
 do {
  if ((label|0) == 14) {
   $82 = $8;
   _cmsSignalError($82,9,24541,$vararg_buffer);
  }
  else if ((label|0) == 29) {
   $152 = $14;
   $153 = $152 & 32768;
   $154 = ($153|0)!=(0);
   if ($154) {
    $155 = $21;
    $156 = ($155|0)==(1196573017);
    $157 = $21;
    $158 = ($157|0)==(1380401696);
    $or$cond9 = $156 | $158;
    $159 = $21;
    $160 = ($159|0)==(1129142603);
    $or$cond11 = $or$cond9 | $160;
    if ($or$cond11) {
     $161 = $16;
     $162 = ((($161)) + 32|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = $21;
     $165 = (_cmsChannelsOf($164)|0);
     $166 = (__cmsStageClipNegatives($163,$165)|0);
     $28 = $166;
     $167 = $28;
     $168 = ($167|0)==(0|0);
     if ($168) {
      break;
     }
     $169 = $16;
     $170 = $28;
     $171 = (_cmsPipelineInsertStage($169,1,$170)|0);
     $172 = ($171|0)!=(0);
     if (!($172)) {
      break;
     }
    }
   }
   $173 = $16;
   $7 = $173;
   $180 = $7;
   STACKTOP = sp;return ($180|0);
  }
 } while(0);
 $174 = $15;
 $175 = ($174|0)!=(0|0);
 if ($175) {
  $176 = $15;
  _cmsPipelineFree($176);
 }
 $177 = $16;
 $178 = ($177|0)!=(0|0);
 if ($178) {
  $179 = $16;
  _cmsPipelineFree($179);
 }
 $7 = 0;
 $180 = $7;
 STACKTOP = sp;return ($180|0);
}
function _ColorSpaceIsCompatible($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $4;
 $7 = ($5|0)==($6|0);
 do {
  if ($7) {
   $2 = 1;
  } else {
   $8 = $3;
   $9 = ($8|0)==(876825682);
   $10 = $4;
   $11 = ($10|0)==(1129142603);
   $or$cond = $9 & $11;
   if ($or$cond) {
    $2 = 1;
    break;
   }
   $12 = $3;
   $13 = ($12|0)==(1129142603);
   $14 = $4;
   $15 = ($14|0)==(876825682);
   $or$cond3 = $13 & $15;
   if ($or$cond3) {
    $2 = 1;
    break;
   }
   $16 = $3;
   $17 = ($16|0)==(1482250784);
   $18 = $4;
   $19 = ($18|0)==(1281450528);
   $or$cond5 = $17 & $19;
   if ($or$cond5) {
    $2 = 1;
    break;
   }
   $20 = $3;
   $21 = ($20|0)==(1281450528);
   $22 = $4;
   $23 = ($22|0)==(1482250784);
   $or$cond7 = $21 & $23;
   if ($or$cond7) {
    $2 = 1;
    break;
   } else {
    $2 = 0;
    break;
   }
  }
 } while(0);
 $24 = $2;
 STACKTOP = sp;return ($24|0);
}
function _ComputeConversion($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $16 = sp + 216|0;
 $17 = sp + 192|0;
 $18 = sp + 120|0;
 $19 = sp + 48|0;
 $20 = sp + 24|0;
 $21 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $22 = $13;
 __cmsMAT3identity($22);
 $23 = $14;
 __cmsVEC3init($23,0.0,0.0,0.0);
 $24 = $10;
 $25 = ($24|0)==(3);
 do {
  if ($25) {
   $26 = $9;
   $27 = $8;
   $28 = (($27) - 1)|0;
   $29 = (($26) + ($28<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   (__cmsReadMediaWhitePoint($16,$30)|0);
   $31 = $9;
   $32 = $8;
   $33 = (($32) - 1)|0;
   $34 = (($31) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   (__cmsReadCHAD($18,$35)|0);
   $36 = $9;
   $37 = $8;
   $38 = (($36) + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   (__cmsReadMediaWhitePoint($17,$39)|0);
   $40 = $9;
   $41 = $8;
   $42 = (($40) + ($41<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   (__cmsReadCHAD($19,$43)|0);
   $44 = $12;
   $45 = $13;
   $46 = (_ComputeAbsoluteIntent($44,$16,$18,$17,$19,$45)|0);
   $47 = ($46|0)!=(0);
   if (!($47)) {
    $7 = 0;
    $85 = $7;
    STACKTOP = sp;return ($85|0);
   }
  } else {
   $48 = $11;
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = $9;
    $51 = $8;
    $52 = (($51) - 1)|0;
    $53 = (($50) + ($52<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $10;
    (_cmsDetectBlackPoint($20,$54,$55,0)|0);
    $56 = $9;
    $57 = $8;
    $58 = (($56) + ($57<<2)|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $10;
    (_cmsDetectDestinationBlackPoint($21,$59,$60,0)|0);
    $61 = +HEAPF64[$20>>3];
    $62 = +HEAPF64[$21>>3];
    $63 = $61 != $62;
    if (!($63)) {
     $64 = ((($20)) + 8|0);
     $65 = +HEAPF64[$64>>3];
     $66 = ((($21)) + 8|0);
     $67 = +HEAPF64[$66>>3];
     $68 = $65 != $67;
     if (!($68)) {
      $69 = ((($20)) + 16|0);
      $70 = +HEAPF64[$69>>3];
      $71 = ((($21)) + 16|0);
      $72 = +HEAPF64[$71>>3];
      $73 = $70 != $72;
      if (!($73)) {
       break;
      }
     }
    }
    $74 = $13;
    $75 = $14;
    _ComputeBlackPointCompensation($20,$21,$74,$75);
   }
  }
 } while(0);
 $15 = 0;
 while(1) {
  $76 = $15;
  $77 = ($76|0)<(3);
  if (!($77)) {
   break;
  }
  $78 = $14;
  $79 = $15;
  $80 = (($78) + ($79<<3)|0);
  $81 = +HEAPF64[$80>>3];
  $82 = $81 / 1.999969482421875;
  HEAPF64[$80>>3] = $82;
  $83 = $15;
  $84 = (($83) + 1)|0;
  $15 = $84;
 }
 $7 = 1;
 $85 = $7;
 STACKTOP = sp;return ($85|0);
}
function _AddConversion($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $switch$split112D = 0, $switch$split2D = 0, $switch$split82D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $11 = $13;
 $14 = $10;
 $12 = $14;
 $15 = $7;
 $switch$split2D = ($15|0)<(1482250784);
 L1: do {
  if ($switch$split2D) {
   switch ($15|0) {
   case 1281450528:  {
    break;
   }
   default: {
    label = 24;
    break L1;
   }
   }
   $50 = $8;
   $switch$split112D = ($50|0)<(1482250784);
   L4: do {
    if ($switch$split112D) {
     switch ($50|0) {
     case 1281450528:  {
      break;
     }
     default: {
      break L4;
     }
     }
     $71 = $9;
     $72 = $10;
     $73 = (_IsEmptyLayer($71,$72)|0);
     $74 = ($73|0)!=(0);
     if ($74) {
      break L1;
     }
     $75 = $6;
     $76 = $6;
     $77 = ((($76)) + 32|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (__cmsStageAllocLab2XYZ($78)|0);
     $80 = (_cmsPipelineInsertStage($75,1,$79)|0);
     $81 = ($80|0)!=(0);
     if ($81) {
      $82 = $6;
      $83 = $6;
      $84 = ((($83)) + 32|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = $11;
      $87 = $12;
      $88 = (_cmsStageAllocMatrix($85,3,3,$86,$87)|0);
      $89 = (_cmsPipelineInsertStage($82,1,$88)|0);
      $90 = ($89|0)!=(0);
      if ($90) {
       $91 = $6;
       $92 = $6;
       $93 = ((($92)) + 32|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = (__cmsStageAllocXYZ2Lab($94)|0);
       $96 = (_cmsPipelineInsertStage($91,1,$95)|0);
       $97 = ($96|0)!=(0);
       if ($97) {
        break L1;
       }
      }
     }
     $5 = 0;
     $101 = $5;
     STACKTOP = sp;return ($101|0);
    } else {
     switch ($50|0) {
     case 1482250784:  {
      break;
     }
     default: {
      break L4;
     }
     }
     $51 = $6;
     $52 = $6;
     $53 = ((($52)) + 32|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (__cmsStageAllocLab2XYZ($54)|0);
     $56 = (_cmsPipelineInsertStage($51,1,$55)|0);
     $57 = ($56|0)!=(0);
     if (!($57)) {
      $5 = 0;
      $101 = $5;
      STACKTOP = sp;return ($101|0);
     }
     $58 = $9;
     $59 = $10;
     $60 = (_IsEmptyLayer($58,$59)|0);
     $61 = ($60|0)!=(0);
     if ($61) {
      break L1;
     }
     $62 = $6;
     $63 = $6;
     $64 = ((($63)) + 32|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = $11;
     $67 = $12;
     $68 = (_cmsStageAllocMatrix($65,3,3,$66,$67)|0);
     $69 = (_cmsPipelineInsertStage($62,1,$68)|0);
     $70 = ($69|0)!=(0);
     if ($70) {
      break L1;
     }
     $5 = 0;
     $101 = $5;
     STACKTOP = sp;return ($101|0);
    }
   } while(0);
   $5 = 0;
   $101 = $5;
   STACKTOP = sp;return ($101|0);
  } else {
   switch ($15|0) {
   case 1482250784:  {
    break;
   }
   default: {
    label = 24;
    break L1;
   }
   }
   $16 = $8;
   $switch$split82D = ($16|0)<(1482250784);
   L26: do {
    if ($switch$split82D) {
     switch ($16|0) {
     case 1281450528:  {
      break;
     }
     default: {
      break L26;
     }
     }
     $30 = $9;
     $31 = $10;
     $32 = (_IsEmptyLayer($30,$31)|0);
     $33 = ($32|0)!=(0);
     if (!($33)) {
      $34 = $6;
      $35 = $6;
      $36 = ((($35)) + 32|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $11;
      $39 = $12;
      $40 = (_cmsStageAllocMatrix($37,3,3,$38,$39)|0);
      $41 = (_cmsPipelineInsertStage($34,1,$40)|0);
      $42 = ($41|0)!=(0);
      if (!($42)) {
       $5 = 0;
       $101 = $5;
       STACKTOP = sp;return ($101|0);
      }
     }
     $43 = $6;
     $44 = $6;
     $45 = ((($44)) + 32|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (__cmsStageAllocXYZ2Lab($46)|0);
     $48 = (_cmsPipelineInsertStage($43,1,$47)|0);
     $49 = ($48|0)!=(0);
     if ($49) {
      break L1;
     }
     $5 = 0;
     $101 = $5;
     STACKTOP = sp;return ($101|0);
    } else {
     switch ($16|0) {
     case 1482250784:  {
      break;
     }
     default: {
      break L26;
     }
     }
     $17 = $9;
     $18 = $10;
     $19 = (_IsEmptyLayer($17,$18)|0);
     $20 = ($19|0)!=(0);
     if ($20) {
      break L1;
     }
     $21 = $6;
     $22 = $6;
     $23 = ((($22)) + 32|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $11;
     $26 = $12;
     $27 = (_cmsStageAllocMatrix($24,3,3,$25,$26)|0);
     $28 = (_cmsPipelineInsertStage($21,1,$27)|0);
     $29 = ($28|0)!=(0);
     if ($29) {
      break L1;
     }
     $5 = 0;
     $101 = $5;
     STACKTOP = sp;return ($101|0);
    }
   } while(0);
   $5 = 0;
   $101 = $5;
   STACKTOP = sp;return ($101|0);
  }
 } while(0);
 if ((label|0) == 24) {
  $98 = $7;
  $99 = $8;
  $100 = ($98|0)!=($99|0);
  if ($100) {
   $5 = 0;
   $101 = $5;
   STACKTOP = sp;return ($101|0);
  }
 }
 $5 = 1;
 $101 = $5;
 STACKTOP = sp;return ($101|0);
}
function _IsEmptyLayer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $5 = 0.0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0.0;
 $8 = $3;
 $9 = ($8|0)==(0|0);
 $10 = $4;
 $11 = ($10|0)==(0|0);
 $or$cond = $9 & $11;
 if ($or$cond) {
  $2 = 1;
  $45 = $2;
  STACKTOP = sp;return ($45|0);
 }
 $12 = $3;
 $13 = ($12|0)==(0|0);
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 $or$cond3 = $13 & $15;
 if ($or$cond3) {
  $2 = 0;
  $45 = $2;
  STACKTOP = sp;return ($45|0);
 }
 __cmsMAT3identity($6);
 $7 = 0;
 while(1) {
  $16 = $7;
  $17 = ($16|0)<(9);
  if (!($17)) {
   break;
  }
  $18 = $3;
  $19 = $7;
  $20 = (($18) + ($19<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $7;
  $23 = (($6) + ($22<<3)|0);
  $24 = +HEAPF64[$23>>3];
  $25 = $21 - $24;
  $26 = (+Math_abs((+$25)));
  $27 = $5;
  $28 = $27 + $26;
  $5 = $28;
  $29 = $7;
  $30 = (($29) + 1)|0;
  $7 = $30;
 }
 $7 = 0;
 while(1) {
  $31 = $7;
  $32 = ($31|0)<(3);
  if (!($32)) {
   break;
  }
  $33 = $4;
  $34 = $7;
  $35 = (($33) + ($34<<3)|0);
  $36 = +HEAPF64[$35>>3];
  $37 = (+Math_abs((+$36)));
  $38 = $5;
  $39 = $38 + $37;
  $5 = $39;
  $40 = $7;
  $41 = (($40) + 1)|0;
  $7 = $41;
 }
 $42 = $5;
 $43 = $42 < 0.002;
 $44 = $43&1;
 $2 = $44;
 $45 = $2;
 STACKTOP = sp;return ($45|0);
}
function _ComputeAbsoluteIntent($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0;
 var $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0.0;
 var $98 = 0.0, $99 = 0.0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $13 = sp + 384|0;
 $14 = sp + 312|0;
 $15 = sp + 240|0;
 $16 = sp + 168|0;
 $17 = sp + 96|0;
 $18 = sp + 24|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $22 = $7;
 $23 = $22 == 1.0;
 do {
  if ($23) {
   $24 = $12;
   $25 = $8;
   $26 = +HEAPF64[$25>>3];
   $27 = $10;
   $28 = +HEAPF64[$27>>3];
   $29 = $26 / $28;
   __cmsVEC3init($24,$29,0.0,0.0);
   $30 = $12;
   $31 = ((($30)) + 24|0);
   $32 = $8;
   $33 = ((($32)) + 8|0);
   $34 = +HEAPF64[$33>>3];
   $35 = $10;
   $36 = ((($35)) + 8|0);
   $37 = +HEAPF64[$36>>3];
   $38 = $34 / $37;
   __cmsVEC3init($31,0.0,$38,0.0);
   $39 = $12;
   $40 = ((($39)) + 48|0);
   $41 = $8;
   $42 = ((($41)) + 16|0);
   $43 = +HEAPF64[$42>>3];
   $44 = $10;
   $45 = ((($44)) + 16|0);
   $46 = +HEAPF64[$45>>3];
   $47 = $43 / $46;
   __cmsVEC3init($40,0.0,0.0,$47);
  } else {
   $48 = $8;
   $49 = +HEAPF64[$48>>3];
   $50 = $10;
   $51 = +HEAPF64[$50>>3];
   $52 = $49 / $51;
   __cmsVEC3init($13,$52,0.0,0.0);
   $53 = ((($13)) + 24|0);
   $54 = $8;
   $55 = ((($54)) + 8|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $10;
   $58 = ((($57)) + 8|0);
   $59 = +HEAPF64[$58>>3];
   $60 = $56 / $59;
   __cmsVEC3init($53,0.0,$60,0.0);
   $61 = ((($13)) + 48|0);
   $62 = $8;
   $63 = ((($62)) + 16|0);
   $64 = +HEAPF64[$63>>3];
   $65 = $10;
   $66 = ((($65)) + 16|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $64 / $67;
   __cmsVEC3init($61,0.0,0.0,$68);
   $69 = $7;
   $70 = $69 == 0.0;
   if ($70) {
    $71 = $11;
    dest=$14; src=$71; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    __cmsMAT3per($15,$14,$13);
    $72 = $12;
    $73 = $11;
    __cmsMAT3per($72,$15,$73);
    $74 = $9;
    dest=$16; src=$74; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $75 = (__cmsMAT3inverse($16,$17)|0);
    $76 = ($75|0)!=(0);
    if ($76) {
     $77 = $12;
     __cmsMAT3per($77,$15,$17);
     break;
    }
    $6 = 0;
    $107 = $6;
    STACKTOP = sp;return ($107|0);
   }
   $78 = $9;
   dest=$14; src=$78; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $79 = (__cmsMAT3inverse($14,$15)|0);
   $80 = ($79|0)!=(0);
   if (!($80)) {
    $6 = 0;
    $107 = $6;
    STACKTOP = sp;return ($107|0);
   }
   __cmsMAT3per($16,$15,$13);
   $81 = $9;
   $82 = (+_CHAD2Temp($81));
   $19 = $82;
   $83 = $11;
   $84 = (+_CHAD2Temp($83));
   $20 = $84;
   $85 = $19;
   $86 = $85 < 0.0;
   $87 = $20;
   $88 = $87 < 0.0;
   $or$cond = $86 | $88;
   if ($or$cond) {
    $6 = 0;
    $107 = $6;
    STACKTOP = sp;return ($107|0);
   }
   $89 = (__cmsMAT3isIdentity($13)|0);
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = $19;
    $92 = $20;
    $93 = $91 - $92;
    $94 = (+Math_abs((+$93)));
    $95 = $94 < 0.01;
    if ($95) {
     $96 = $12;
     __cmsMAT3identity($96);
     $6 = 1;
     $107 = $6;
     STACKTOP = sp;return ($107|0);
    }
   }
   $97 = $7;
   $98 = 1.0 - $97;
   $99 = $20;
   $100 = $98 * $99;
   $101 = $7;
   $102 = $19;
   $103 = $101 * $102;
   $104 = $100 + $103;
   $21 = $104;
   $105 = $21;
   _Temp2CHAD($18,$105);
   $106 = $12;
   __cmsMAT3per($106,$16,$18);
  }
 } while(0);
 $6 = 1;
 $107 = $6;
 STACKTOP = sp;return ($107|0);
}
function _ComputeBlackPointCompensation($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0;
 var $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0;
 var $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0;
 var $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0;
 var $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $17 = $4;
 $18 = +HEAPF64[$17>>3];
 $19 = (_cmsD50_XYZ()|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $18 - $20;
 $14 = $21;
 $22 = $4;
 $23 = ((($22)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = (_cmsD50_XYZ()|0);
 $26 = ((($25)) + 8|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $24 - $27;
 $15 = $28;
 $29 = $4;
 $30 = ((($29)) + 16|0);
 $31 = +HEAPF64[$30>>3];
 $32 = (_cmsD50_XYZ()|0);
 $33 = ((($32)) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $31 - $34;
 $16 = $35;
 $36 = $5;
 $37 = +HEAPF64[$36>>3];
 $38 = (_cmsD50_XYZ()|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $37 - $39;
 $41 = $14;
 $42 = $40 / $41;
 $8 = $42;
 $43 = $5;
 $44 = ((($43)) + 8|0);
 $45 = +HEAPF64[$44>>3];
 $46 = (_cmsD50_XYZ()|0);
 $47 = ((($46)) + 8|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $45 - $48;
 $50 = $15;
 $51 = $49 / $50;
 $9 = $51;
 $52 = $5;
 $53 = ((($52)) + 16|0);
 $54 = +HEAPF64[$53>>3];
 $55 = (_cmsD50_XYZ()|0);
 $56 = ((($55)) + 16|0);
 $57 = +HEAPF64[$56>>3];
 $58 = $54 - $57;
 $59 = $16;
 $60 = $58 / $59;
 $10 = $60;
 $61 = (_cmsD50_XYZ()|0);
 $62 = +HEAPF64[$61>>3];
 $63 = -$62;
 $64 = $5;
 $65 = +HEAPF64[$64>>3];
 $66 = $4;
 $67 = +HEAPF64[$66>>3];
 $68 = $65 - $67;
 $69 = $63 * $68;
 $70 = $14;
 $71 = $69 / $70;
 $11 = $71;
 $72 = (_cmsD50_XYZ()|0);
 $73 = ((($72)) + 8|0);
 $74 = +HEAPF64[$73>>3];
 $75 = -$74;
 $76 = $5;
 $77 = ((($76)) + 8|0);
 $78 = +HEAPF64[$77>>3];
 $79 = $4;
 $80 = ((($79)) + 8|0);
 $81 = +HEAPF64[$80>>3];
 $82 = $78 - $81;
 $83 = $75 * $82;
 $84 = $15;
 $85 = $83 / $84;
 $12 = $85;
 $86 = (_cmsD50_XYZ()|0);
 $87 = ((($86)) + 16|0);
 $88 = +HEAPF64[$87>>3];
 $89 = -$88;
 $90 = $5;
 $91 = ((($90)) + 16|0);
 $92 = +HEAPF64[$91>>3];
 $93 = $4;
 $94 = ((($93)) + 16|0);
 $95 = +HEAPF64[$94>>3];
 $96 = $92 - $95;
 $97 = $89 * $96;
 $98 = $16;
 $99 = $97 / $98;
 $13 = $99;
 $100 = $6;
 $101 = $8;
 __cmsVEC3init($100,$101,0.0,0.0);
 $102 = $6;
 $103 = ((($102)) + 24|0);
 $104 = $9;
 __cmsVEC3init($103,0.0,$104,0.0);
 $105 = $6;
 $106 = ((($105)) + 48|0);
 $107 = $10;
 __cmsVEC3init($106,0.0,0.0,$107);
 $108 = $7;
 $109 = $11;
 $110 = $12;
 $111 = $13;
 __cmsVEC3init($108,$109,$110,$111);
 STACKTOP = sp;return;
}
function _CHAD2Temp($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $3 = sp + 224|0;
 $4 = sp + 200|0;
 $5 = sp + 176|0;
 $6 = sp + 152|0;
 $7 = sp + 144|0;
 $8 = sp + 72|0;
 $9 = sp;
 $2 = $0;
 $10 = $2;
 dest=$8; src=$10; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $11 = (__cmsMAT3inverse($8,$9)|0);
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $1 = 0.0;
  $33 = $1;
  STACKTOP = sp;return (+$33);
 }
 $13 = (_cmsD50_XYZ()|0);
 $14 = +HEAPF64[$13>>3];
 HEAPF64[$4>>3] = $14;
 $15 = (_cmsD50_XYZ()|0);
 $16 = ((($15)) + 8|0);
 $17 = +HEAPF64[$16>>3];
 $18 = ((($4)) + 8|0);
 HEAPF64[$18>>3] = $17;
 $19 = (_cmsD50_XYZ()|0);
 $20 = ((($19)) + 16|0);
 $21 = +HEAPF64[$20>>3];
 $22 = ((($4)) + 16|0);
 HEAPF64[$22>>3] = $21;
 __cmsMAT3eval($3,$9,$4);
 $23 = +HEAPF64[$3>>3];
 HEAPF64[$5>>3] = $23;
 $24 = ((($3)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = ((($5)) + 8|0);
 HEAPF64[$26>>3] = $25;
 $27 = ((($3)) + 16|0);
 $28 = +HEAPF64[$27>>3];
 $29 = ((($5)) + 16|0);
 HEAPF64[$29>>3] = $28;
 _cmsXYZ2xyY($6,$5);
 $30 = (_cmsTempFromWhitePoint($7,$6)|0);
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = +HEAPF64[$7>>3];
  $1 = $32;
  $33 = $1;
  STACKTOP = sp;return (+$33);
 } else {
  $1 = -1.0;
  $33 = $1;
  STACKTOP = sp;return (+$33);
 }
 return +(0.0);
}
function _Temp2CHAD($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 24|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $3;
 (_cmsWhitePointFromTemp($5,$6)|0);
 _cmsxyY2XYZ($4,$5);
 $7 = $2;
 $8 = (_cmsD50_XYZ()|0);
 (__cmsAdaptationMatrix($7,0,$4,$8)|0);
 STACKTOP = sp;return;
}
function __cmsLinkProfiles($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = $9;
 $18 = ($17>>>0)<=(0);
 $19 = $9;
 $20 = ($19>>>0)>(255);
 $or$cond = $18 | $20;
 if ($or$cond) {
  $21 = $8;
  $22 = $9;
  HEAP32[$vararg_buffer>>2] = $22;
  _cmsSignalError($21,2,24561,$vararg_buffer);
  $7 = 0;
  $75 = $7;
  STACKTOP = sp;return ($75|0);
 }
 $15 = 0;
 while(1) {
  $23 = $15;
  $24 = $9;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $10;
  $27 = $15;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(3);
  if ($30) {
   $31 = $12;
   $32 = $15;
   $33 = (($31) + ($32<<2)|0);
   HEAP32[$33>>2] = 0;
  }
  $34 = $10;
  $35 = $15;
  $36 = (($34) + ($35<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0);
  if ($38) {
   label = 9;
  } else {
   $39 = $10;
   $40 = $15;
   $41 = (($39) + ($40<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(2);
   if ($43) {
    label = 9;
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $44 = $11;
   $45 = $15;
   $46 = (($44) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_cmsGetEncodedICCversion($47)|0);
   $49 = ($48>>>0)>=(67108864);
   if ($49) {
    $50 = $12;
    $51 = $15;
    $52 = (($50) + ($51<<2)|0);
    HEAP32[$52>>2] = 1;
   }
  }
  $53 = $15;
  $54 = (($53) + 1)|0;
  $15 = $54;
 }
 $55 = $8;
 $56 = $10;
 $57 = HEAP32[$56>>2]|0;
 $58 = (_SearchIntent($55,$57)|0);
 $16 = $58;
 $59 = $16;
 $60 = ($59|0)==(0|0);
 if ($60) {
  $61 = $8;
  $62 = $10;
  $63 = HEAP32[$62>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $63;
  _cmsSignalError($61,8,24589,$vararg_buffer2);
  $7 = 0;
  $75 = $7;
  STACKTOP = sp;return ($75|0);
 } else {
  $64 = $16;
  $65 = ((($64)) + 260|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $8;
  $68 = $9;
  $69 = $10;
  $70 = $11;
  $71 = $12;
  $72 = $13;
  $73 = $14;
  $74 = (FUNCTION_TABLE_iiiiiiii[$66 & 31]($67,$68,$69,$70,$71,$72,$73)|0);
  $7 = $74;
  $75 = $7;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _SearchIntent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = (__cmsContextGetClientChunk($7,10)|0);
 $5 = $8;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 while(1) {
  $11 = $6;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $6;
  $14 = HEAP32[$13>>2]|0;
  $15 = $4;
  $16 = ($14|0)==($15|0);
  $17 = $6;
  if ($16) {
   label = 4;
   break;
  }
  $18 = ((($17)) + 264|0);
  $19 = HEAP32[$18>>2]|0;
  $6 = $19;
 }
 if ((label|0) == 4) {
  $2 = $17;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 $6 = 1908;
 while(1) {
  $20 = $6;
  $21 = ($20|0)!=(0|0);
  if (!($21)) {
   label = 11;
   break;
  }
  $22 = $6;
  $23 = HEAP32[$22>>2]|0;
  $24 = $4;
  $25 = ($23|0)==($24|0);
  $26 = $6;
  if ($25) {
   label = 9;
   break;
  }
  $27 = ((($26)) + 264|0);
  $28 = HEAP32[$27>>2]|0;
  $6 = $28;
 }
 if ((label|0) == 9) {
  $2 = $26;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 11) {
  $2 = 0;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _BlackPreservingKOnlyIntents($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1088|0);
 $15 = sp + 1048|0;
 $17 = sp + 16|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $21 = $9;
 $22 = ($21>>>0)<(1);
 $23 = $9;
 $24 = ($23>>>0)>(255);
 $or$cond = $22 | $24;
 if ($or$cond) {
  $7 = 0;
  $108 = $7;
  STACKTOP = sp;return ($108|0);
 }
 $19 = 0;
 while(1) {
  $25 = $19;
  $26 = $9;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $10;
  $29 = $19;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_TranslateNonICCIntents($31)|0);
  $33 = $19;
  $34 = (($17) + ($33<<2)|0);
  HEAP32[$34>>2] = $32;
  $35 = $19;
  $36 = (($35) + 1)|0;
  $19 = $36;
 }
 $37 = $11;
 $38 = HEAP32[$37>>2]|0;
 $39 = (_cmsGetColorSpace($38)|0);
 $40 = ($39|0)!=(1129142603);
 if (!($40)) {
  $41 = $11;
  $42 = $9;
  $43 = (($42) - 1)|0;
  $44 = (($41) + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_cmsGetColorSpace($45)|0);
  $47 = ($46|0)!=(1129142603);
  if (!($47)) {
   ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;
   $55 = $8;
   $56 = (_cmsPipelineAlloc($55,4,4)|0);
   $16 = $56;
   $57 = $16;
   $58 = ($57|0)==(0|0);
   if ($58) {
    $7 = 0;
    $108 = $7;
    STACKTOP = sp;return ($108|0);
   }
   $59 = $8;
   $60 = $9;
   $61 = $11;
   $62 = $12;
   $63 = $13;
   $64 = $14;
   $65 = (_DefaultICCintents($59,$60,$17,$61,$62,$63,$64)|0);
   HEAP32[$15>>2] = $65;
   $66 = HEAP32[$15>>2]|0;
   $67 = ($66|0)==(0|0);
   if (!($67)) {
    $68 = $8;
    $69 = $9;
    $70 = $11;
    $71 = $12;
    $72 = $13;
    $73 = $14;
    $74 = (__cmsBuildKToneCurve($68,4096,$69,$17,$70,$71,$72,$73)|0);
    $75 = ((($15)) + 4|0);
    HEAP32[$75>>2] = $74;
    $76 = ((($15)) + 4|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(0|0);
    if (!($78)) {
     $79 = $14;
     $80 = (__cmsReasonableGridpointsByColorspace(1129142603,$79)|0);
     $20 = $80;
     $81 = $8;
     $82 = $20;
     $83 = (_cmsStageAllocCLut16bit($81,$82,4,4,0)|0);
     $18 = $83;
     $84 = $18;
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      $86 = $16;
      $87 = $18;
      $88 = (_cmsPipelineInsertStage($86,0,$87)|0);
      $89 = ($88|0)!=(0);
      if ($89) {
       $90 = $18;
       $91 = (_cmsStageSampleCLut16bit($90,290,$15,0)|0);
       $92 = ($91|0)!=(0);
       if ($92) {
        $93 = HEAP32[$15>>2]|0;
        _cmsPipelineFree($93);
        $94 = ((($15)) + 4|0);
        $95 = HEAP32[$94>>2]|0;
        _cmsFreeToneCurve($95);
        $96 = $16;
        $7 = $96;
        $108 = $7;
        STACKTOP = sp;return ($108|0);
       }
      }
     }
    }
   }
   $97 = HEAP32[$15>>2]|0;
   $98 = ($97|0)!=(0|0);
   if ($98) {
    $99 = HEAP32[$15>>2]|0;
    _cmsPipelineFree($99);
   }
   $100 = ((($15)) + 4|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)!=(0|0);
   if ($102) {
    $103 = ((($15)) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    _cmsFreeToneCurve($104);
   }
   $105 = $16;
   $106 = ($105|0)!=(0|0);
   if ($106) {
    $107 = $16;
    _cmsPipelineFree($107);
   }
   $7 = 0;
   $108 = $7;
   STACKTOP = sp;return ($108|0);
  }
 }
 $48 = $8;
 $49 = $9;
 $50 = $11;
 $51 = $12;
 $52 = $13;
 $53 = $14;
 $54 = (_DefaultICCintents($48,$49,$17,$50,$51,$52,$53)|0);
 $7 = $54;
 $108 = $7;
 STACKTOP = sp;return ($108|0);
}
function _BlackPreservingKPlaneIntents($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $15 = sp;
 $17 = sp + 64|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $16 = 0;
 $22 = $9;
 $23 = ($22>>>0)<(1);
 $24 = $9;
 $25 = ($24>>>0)>(255);
 $or$cond = $23 | $25;
 if ($or$cond) {
  $7 = 0;
  $172 = $7;
  STACKTOP = sp;return ($172|0);
 }
 $19 = 0;
 while(1) {
  $26 = $19;
  $27 = $9;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $10;
  $30 = $19;
  $31 = (($29) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_TranslateNonICCIntents($32)|0);
  $34 = $19;
  $35 = (($17) + ($34<<2)|0);
  HEAP32[$35>>2] = $33;
  $36 = $19;
  $37 = (($36) + 1)|0;
  $19 = $37;
 }
 $38 = $11;
 $39 = HEAP32[$38>>2]|0;
 $40 = (_cmsGetColorSpace($39)|0);
 $41 = ($40|0)!=(1129142603);
 do {
  if (!($41)) {
   $42 = $11;
   $43 = $9;
   $44 = (($43) - 1)|0;
   $45 = (($42) + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (_cmsGetColorSpace($46)|0);
   $48 = ($47|0)==(1129142603);
   if (!($48)) {
    $49 = $11;
    $50 = $9;
    $51 = (($50) - 1)|0;
    $52 = (($49) + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_cmsGetDeviceClass($53)|0);
    $55 = ($54|0)==(1886549106);
    if (!($55)) {
     break;
    }
   }
   $63 = $8;
   $64 = (_cmsPipelineAlloc($63,4,4)|0);
   $16 = $64;
   $65 = $16;
   $66 = ($65|0)==(0|0);
   if ($66) {
    $7 = 0;
    $172 = $7;
    STACKTOP = sp;return ($172|0);
   }
   dest=$15; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $67 = $11;
   $68 = $9;
   $69 = (($68) - 1)|0;
   $70 = (($67) + ($69<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (__cmsReadInputLUT($71,1)|0);
   $73 = ((($15)) + 16|0);
   HEAP32[$73>>2] = $72;
   $74 = ((($15)) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)==(0|0);
   if (!($76)) {
    $77 = $11;
    $78 = $9;
    $79 = (($78) - 1)|0;
    $80 = (($77) + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (+_cmsDetectTAC($81));
    $83 = $82 / 100.0;
    $84 = ((($15)) + 40|0);
    HEAPF64[$84>>3] = $83;
    $85 = ((($15)) + 40|0);
    $86 = +HEAPF64[$85>>3];
    $87 = $86 <= 0.0;
    if (!($87)) {
     $88 = $8;
     $89 = $9;
     $90 = $11;
     $91 = $12;
     $92 = $13;
     $93 = $14;
     $94 = (_DefaultICCintents($88,$89,$17,$90,$91,$92,$93)|0);
     HEAP32[$15>>2] = $94;
     $95 = HEAP32[$15>>2]|0;
     $96 = ($95|0)==(0|0);
     if (!($96)) {
      $97 = $8;
      $98 = $9;
      $99 = $11;
      $100 = $12;
      $101 = $13;
      $102 = $14;
      $103 = (__cmsBuildKToneCurve($97,4096,$98,$17,$99,$100,$101,$102)|0);
      $104 = ((($15)) + 12|0);
      HEAP32[$104>>2] = $103;
      $105 = ((($15)) + 12|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ($106|0)==(0|0);
      if (!($107)) {
       $108 = $8;
       $109 = (_cmsCreateLab4ProfileTHR($108,0)|0);
       $21 = $109;
       $110 = $8;
       $111 = $11;
       $112 = $9;
       $113 = (($112) - 1)|0;
       $114 = (($111) + ($113<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = $21;
       $117 = (_cmsCreateTransformTHR($110,$115,34,$116,4849688,1,320)|0);
       $118 = ((($15)) + 4|0);
       HEAP32[$118>>2] = $117;
       $119 = ((($15)) + 4|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = ($120|0)==(0|0);
       if (!($121)) {
        $122 = $8;
        $123 = $11;
        $124 = $9;
        $125 = (($124) - 1)|0;
        $126 = (($123) + ($125<<2)|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = $21;
        $129 = (_cmsCreateTransformTHR($122,$127,4194340,$128,4194332,1,320)|0);
        $130 = ((($15)) + 8|0);
        HEAP32[$130>>2] = $129;
        $131 = ((($15)) + 8|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = ($132|0)==(0|0);
        if (!($133)) {
         $134 = $21;
         (_cmsCloseProfile($134)|0);
         $135 = ((($15)) + 24|0);
         HEAPF64[$135>>3] = 0.0;
         $136 = $14;
         $137 = (__cmsReasonableGridpointsByColorspace(1129142603,$136)|0);
         $20 = $137;
         $138 = $8;
         $139 = $20;
         $140 = (_cmsStageAllocCLut16bit($138,$139,4,4,0)|0);
         $18 = $140;
         $141 = $18;
         $142 = ($141|0)==(0|0);
         if (!($142)) {
          $143 = $16;
          $144 = $18;
          $145 = (_cmsPipelineInsertStage($143,0,$144)|0);
          $146 = ($145|0)!=(0);
          if ($146) {
           $147 = $18;
           (_cmsStageSampleCLut16bit($147,291,$15,0)|0);
          }
         }
        }
       }
      }
     }
    }
   }
   $148 = HEAP32[$15>>2]|0;
   $149 = ($148|0)!=(0|0);
   if ($149) {
    $150 = HEAP32[$15>>2]|0;
    _cmsPipelineFree($150);
   }
   $151 = ((($15)) + 8|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($152|0)!=(0|0);
   if ($153) {
    $154 = ((($15)) + 8|0);
    $155 = HEAP32[$154>>2]|0;
    _cmsDeleteTransform($155);
   }
   $156 = ((($15)) + 4|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($157|0)!=(0|0);
   if ($158) {
    $159 = ((($15)) + 4|0);
    $160 = HEAP32[$159>>2]|0;
    _cmsDeleteTransform($160);
   }
   $161 = ((($15)) + 12|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = ($162|0)!=(0|0);
   if ($163) {
    $164 = ((($15)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    _cmsFreeToneCurve($165);
   }
   $166 = ((($15)) + 16|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($167|0)!=(0|0);
   if ($168) {
    $169 = ((($15)) + 16|0);
    $170 = HEAP32[$169>>2]|0;
    _cmsPipelineFree($170);
   }
   $171 = $16;
   $7 = $171;
   $172 = $7;
   STACKTOP = sp;return ($172|0);
  }
 } while(0);
 $56 = $8;
 $57 = $9;
 $58 = $11;
 $59 = $12;
 $60 = $13;
 $61 = $14;
 $62 = (_DefaultICCintents($56,$57,$17,$58,$59,$60,$61)|0);
 $7 = $62;
 $172 = $7;
 STACKTOP = sp;return ($172|0);
}
function _TranslateNonICCIntents($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 switch ($3|0) {
 case 13: case 10:  {
  $1 = 0;
  break;
 }
 case 14: case 11:  {
  $1 = 1;
  break;
 }
 case 15: case 12:  {
  $1 = 2;
  break;
 }
 default: {
  $4 = $2;
  $1 = $4;
 }
 }
 $5 = $1;
 STACKTOP = sp;return ($5|0);
}
function _BlackPreservingSampler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0;
 var $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $8 = sp + 120|0;
 $9 = sp + 104|0;
 $10 = sp + 88|0;
 $15 = sp + 24|0;
 $16 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $18 = $6;
 $17 = $18;
 $7 = 0;
 while(1) {
  $19 = $7;
  $20 = ($19|0)<(4);
  if (!($20)) {
   break;
  }
  $21 = $4;
  $22 = $7;
  $23 = (($21) + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = (+($25|0));
  $27 = $26 / 65535.0;
  $28 = $27;
  $29 = $7;
  $30 = (($8) + ($29<<2)|0);
  HEAPF32[$30>>2] = $28;
  $31 = $7;
  $32 = (($31) + 1)|0;
  $7 = $32;
 }
 $33 = $17;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($8)) + 12|0);
 $37 = +HEAPF32[$36>>2];
 $38 = (+_cmsEvalToneCurveFloat($35,$37));
 $39 = ((($10)) + 12|0);
 HEAPF32[$39>>2] = $38;
 $40 = $4;
 $41 = HEAP16[$40>>1]|0;
 $42 = $41&65535;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = $4;
  $45 = ((($44)) + 2|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = ($47|0)==(0);
  if ($48) {
   $49 = $4;
   $50 = ((($49)) + 4|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = ($52|0)==(0);
   if ($53) {
    $54 = $5;
    $55 = ((($54)) + 4|0);
    HEAP16[$55>>1] = 0;
    $56 = $5;
    $57 = ((($56)) + 2|0);
    HEAP16[$57>>1] = 0;
    $58 = $5;
    HEAP16[$58>>1] = 0;
    $59 = ((($10)) + 12|0);
    $60 = +HEAPF32[$59>>2];
    $61 = $60;
    $62 = $61 * 65535.0;
    $63 = (__cmsQuickSaturateWord_145($62)|0);
    $64 = $5;
    $65 = ((($64)) + 6|0);
    HEAP16[$65>>1] = $63;
    $3 = 1;
    $177 = $3;
    STACKTOP = sp;return ($177|0);
   }
  }
 }
 $66 = $17;
 $67 = HEAP32[$66>>2]|0;
 _cmsPipelineEvalFloat($8,$9,$67);
 $7 = 0;
 while(1) {
  $68 = $7;
  $69 = ($68|0)<(4);
  if (!($69)) {
   break;
  }
  $70 = $7;
  $71 = (($9) + ($70<<2)|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $72;
  $74 = $73 * 65535.0;
  $75 = (__cmsQuickSaturateWord_145($74)|0);
  $76 = $5;
  $77 = $7;
  $78 = (($76) + ($77<<1)|0);
  HEAP16[$78>>1] = $75;
  $79 = $7;
  $80 = (($79) + 1)|0;
  $7 = $80;
 }
 $81 = ((($9)) + 12|0);
 $82 = +HEAPF32[$81>>2];
 $83 = ((($10)) + 12|0);
 $84 = +HEAPF32[$83>>2];
 $85 = $82 - $84;
 $86 = $85;
 $87 = (+Math_abs((+$86)));
 $88 = $87 < 4.5777065690089265E-5;
 if ($88) {
  $3 = 1;
  $177 = $3;
  STACKTOP = sp;return ($177|0);
 }
 $89 = $17;
 $90 = ((($89)) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $5;
 _cmsDoTransform($91,$92,$15,1);
 $93 = $17;
 $94 = ((($93)) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 _cmsDoTransform($95,$9,$10,1);
 $96 = $17;
 $97 = ((($96)) + 16|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = (_cmsPipelineEvalReverseFloat($10,$9,$9,$98)|0);
 $100 = ($99|0)!=(0);
 if (!($100)) {
  $3 = 1;
  $177 = $3;
  STACKTOP = sp;return ($177|0);
 }
 $101 = ((($10)) + 12|0);
 $102 = +HEAPF32[$101>>2];
 $103 = ((($9)) + 12|0);
 HEAPF32[$103>>2] = $102;
 $104 = +HEAPF32[$9>>2];
 $105 = ((($9)) + 4|0);
 $106 = +HEAPF32[$105>>2];
 $107 = $104 + $106;
 $108 = ((($9)) + 8|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $107 + $109;
 $111 = $110;
 $11 = $111;
 $112 = $11;
 $113 = ((($9)) + 12|0);
 $114 = +HEAPF32[$113>>2];
 $115 = $114;
 $116 = $112 + $115;
 $12 = $116;
 $117 = $12;
 $118 = $17;
 $119 = ((($118)) + 40|0);
 $120 = +HEAPF64[$119>>3];
 $121 = $117 > $120;
 if ($121) {
  $122 = $12;
  $123 = $17;
  $124 = ((($123)) + 40|0);
  $125 = +HEAPF64[$124>>3];
  $126 = $122 - $125;
  $127 = $11;
  $128 = $126 / $127;
  $129 = 1.0 - $128;
  $14 = $129;
  $130 = $14;
  $131 = $130 < 0.0;
  if ($131) {
   $14 = 0.0;
  }
 } else {
  $14 = 1.0;
 }
 $132 = +HEAPF32[$9>>2];
 $133 = $132;
 $134 = $14;
 $135 = $133 * $134;
 $136 = $135 * 65535.0;
 $137 = (__cmsQuickSaturateWord_145($136)|0);
 $138 = $5;
 HEAP16[$138>>1] = $137;
 $139 = ((($9)) + 4|0);
 $140 = +HEAPF32[$139>>2];
 $141 = $140;
 $142 = $14;
 $143 = $141 * $142;
 $144 = $143 * 65535.0;
 $145 = (__cmsQuickSaturateWord_145($144)|0);
 $146 = $5;
 $147 = ((($146)) + 2|0);
 HEAP16[$147>>1] = $145;
 $148 = ((($9)) + 8|0);
 $149 = +HEAPF32[$148>>2];
 $150 = $149;
 $151 = $14;
 $152 = $150 * $151;
 $153 = $152 * 65535.0;
 $154 = (__cmsQuickSaturateWord_145($153)|0);
 $155 = $5;
 $156 = ((($155)) + 4|0);
 HEAP16[$156>>1] = $154;
 $157 = ((($9)) + 12|0);
 $158 = +HEAPF32[$157>>2];
 $159 = $158;
 $160 = $159 * 65535.0;
 $161 = (__cmsQuickSaturateWord_145($160)|0);
 $162 = $5;
 $163 = ((($162)) + 6|0);
 HEAP16[$163>>1] = $161;
 $164 = $17;
 $165 = ((($164)) + 4|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = $5;
 _cmsDoTransform($166,$167,$16,1);
 $168 = (+_cmsDeltaE($15,$16));
 $13 = $168;
 $169 = $13;
 $170 = $17;
 $171 = ((($170)) + 24|0);
 $172 = +HEAPF64[$171>>3];
 $173 = $169 > $172;
 if ($173) {
  $174 = $13;
  $175 = $17;
  $176 = ((($175)) + 24|0);
  HEAPF64[$176>>3] = $174;
 }
 $3 = 1;
 $177 = $3;
 STACKTOP = sp;return ($177|0);
}
function __cmsQuickSaturateWord_145($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 65535.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord_146($9)|0);
    $1 = $10;
    break;
   }
  }
 } while(0);
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function __cmsQuickFloorWord_146($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 32767.0;
 $4 = (__cmsQuickFloor_147($3)|0);
 $5 = $4&65535;
 $6 = $5&65535;
 $7 = (($6) + 32767)|0;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsQuickFloor_147($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function _BlackPreservingGrayOnlySampler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $7 = $8;
 $9 = $4;
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $4;
  $14 = ((($13)) + 2|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = ($16|0)==(0);
  if ($17) {
   $18 = $4;
   $19 = ((($18)) + 4|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20&65535;
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = $5;
    $24 = ((($23)) + 4|0);
    HEAP16[$24>>1] = 0;
    $25 = $5;
    $26 = ((($25)) + 2|0);
    HEAP16[$26>>1] = 0;
    $27 = $5;
    HEAP16[$27>>1] = 0;
    $28 = $7;
    $29 = ((($28)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $4;
    $32 = ((($31)) + 6|0);
    $33 = HEAP16[$32>>1]|0;
    $34 = (_cmsEvalToneCurve16($30,$33)|0);
    $35 = $5;
    $36 = ((($35)) + 6|0);
    HEAP16[$36>>1] = $34;
    $3 = 1;
    $47 = $3;
    STACKTOP = sp;return ($47|0);
   }
  }
 }
 $37 = $7;
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $4;
 $42 = $5;
 $43 = $7;
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 FUNCTION_TABLE_viii[$40 & 511]($41,$42,$46);
 $3 = 1;
 $47 = $3;
 STACKTOP = sp;return ($47|0);
}
function __cmsMallocDefaultFn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5>>>0)>(536870912);
 if ($6) {
  $2 = 0;
 } else {
  $7 = $4;
  $8 = (_malloc($7)|0);
  $2 = $8;
 }
 $9 = $2;
 STACKTOP = sp;return ($9|0);
}
function __cmsMallocZeroDefaultFn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (__cmsMalloc($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $11 = $5;
  $12 = $4;
  _memset(($11|0),0,($12|0))|0;
  $13 = $5;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __cmsFreeDefaultFn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $3;
  _free($6);
 }
 STACKTOP = sp;return;
}
function __cmsReallocDefaultFn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = ($7>>>0)>(536870912);
 if ($8) {
  $3 = 0;
 } else {
  $9 = $5;
  $10 = $6;
  $11 = (_realloc($9,$10)|0);
  $3 = $11;
 }
 $12 = $3;
 STACKTOP = sp;return ($12|0);
}
function __cmsCallocDefaultFn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = $6;
 $10 = Math_imul($8, $9)|0;
 $7 = $10;
 $11 = $7;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $3 = 0;
  } else {
   $13 = $5;
   $14 = $6;
   $15 = (4294967295 / ($14>>>0))&-1;
   $16 = ($13>>>0)>=($15>>>0);
   if ($16) {
    $3 = 0;
    break;
   }
   $17 = $7;
   $18 = $5;
   $19 = ($17>>>0)<($18>>>0);
   if (!($19)) {
    $20 = $7;
    $21 = $6;
    $22 = ($20>>>0)<($21>>>0);
    if (!($22)) {
     $23 = $7;
     $24 = ($23>>>0)>(536870912);
     if ($24) {
      $3 = 0;
      break;
     } else {
      $25 = $4;
      $26 = $7;
      $27 = (__cmsMallocZero($25,$26)|0);
      $3 = $27;
      break;
     }
    }
   }
   $3 = 0;
  }
 } while(0);
 $28 = $3;
 STACKTOP = sp;return ($28|0);
}
function __cmsDupDefaultFn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8>>>0)>(536870912);
 if ($9) {
  $3 = 0;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 $10 = $4;
 $11 = $6;
 $12 = (__cmsMalloc($10,$11)|0);
 $7 = $12;
 $13 = $7;
 $14 = ($13|0)!=(0|0);
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 $or$cond = $14 & $16;
 if ($or$cond) {
  $17 = $7;
  $18 = $5;
  $19 = $6;
  _memmove(($17|0),($18|0),($19|0))|0;
 }
 $20 = $7;
 $3 = $20;
 $21 = $3;
 STACKTOP = sp;return ($21|0);
}
function __cmsMalloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (__cmsContextGetClientChunk($5,4)|0);
 $4 = $6;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = $3;
 $11 = (FUNCTION_TABLE_iii[$8 & 511]($9,$10)|0);
 STACKTOP = sp;return ($11|0);
}
function __cmsMallocZero($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (__cmsContextGetClientChunk($5,4)|0);
 $4 = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = $3;
 $12 = (FUNCTION_TABLE_iii[$9 & 511]($10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _DefaultLogErrorHandlerFunction($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 STACKTOP = sp;return;
}
function _defMtxCreate($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__cmsMalloc($3,28)|0);
 $2 = $4;
 $5 = $2;
 (__cmsInitMutexPrimitive($5)|0);
 $6 = $2;
 STACKTOP = sp;return ($6|0);
}
function _defMtxDestroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 (__cmsDestroyMutexPrimitive($4)|0);
 $5 = $2;
 $6 = $3;
 __cmsFree($5,$6);
 STACKTOP = sp;return;
}
function _defMtxLock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = (__cmsLockPrimitive($4)|0);
 $6 = ($5|0)==(0);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _defMtxUnlock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 (__cmsUnlockPrimitive($4)|0);
 STACKTOP = sp;return;
}
function __cmsUnlockPrimitive($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pthread_mutex_unlock(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __cmsLockPrimitive($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pthread_mutex_lock(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __cmsDestroyMutexPrimitive($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pthread_mutex_destroy(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __cmsFree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $2;
 $8 = (__cmsContextGetClientChunk($7,4)|0);
 $4 = $8;
 $9 = $4;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = $3;
 FUNCTION_TABLE_vii[$11 & 511]($12,$13);
 STACKTOP = sp;return;
}
function __cmsInitMutexPrimitive($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_pthread_mutex_init(($2|0),(0|0))|0);
 STACKTOP = sp;return ($3|0);
}
function _cmsfilelength($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = (_ftell($5)|0);
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==(-1);
 do {
  if ($8) {
   $1 = -1;
  } else {
   $9 = $2;
   $10 = (_fseek($9,0,2)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $1 = -1;
    break;
   } else {
    $12 = $2;
    $13 = (_ftell($12)|0);
    $4 = $13;
    $14 = $2;
    $15 = $3;
    (_fseek($14,$15,0)|0);
    $16 = $4;
    $1 = $16;
    break;
   }
  }
 } while(0);
 $17 = $1;
 STACKTOP = sp;return ($17|0);
}
function __cmsCalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (__cmsContextGetClientChunk($7,4)|0);
 $6 = $8;
 $9 = $6;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = (FUNCTION_TABLE_iiii[$11 & 511]($12,$13,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function __cmsRealloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (__cmsContextGetClientChunk($7,4)|0);
 $6 = $8;
 $9 = $6;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = (FUNCTION_TABLE_iiii[$11 & 511]($12,$13,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function __cmsDupMem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = (__cmsContextGetClientChunk($7,4)|0);
 $6 = $8;
 $9 = $6;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = (FUNCTION_TABLE_iiii[$11 & 511]($12,$13,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function _cmsSignalError($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $6 = sp + 8|0;
 $7 = sp + 40|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAP32[$6>>2] = $varargs;
 $9 = $5;
 (_vsnprintf($7,1023,$9,$6)|0);
 $10 = $3;
 $11 = (__cmsContextGetClientChunk($10,1)|0);
 $8 = $11;
 $12 = $8;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $8;
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = $4;
 FUNCTION_TABLE_viii[$16 & 511]($17,$18,$7);
 STACKTOP = sp;return;
}
function __cmsTagSignature2String($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (__cmsAdjustEndianess32($5)|0);
 HEAP32[$4>>2] = $6;
 $7 = $2;
 _memmove(($7|0),($4|0),4)|0;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 HEAP8[$9>>0] = 0;
 STACKTOP = sp;return;
}
function __cmsCreateMutex($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (__cmsContextGetClientChunk($4,14)|0);
 $3 = $5;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $1 = 0;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $9 = $3;
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (FUNCTION_TABLE_ii[$10 & 511]($11)|0);
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __cmsDestroyMutex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (__cmsContextGetClientChunk($5,14)|0);
 $4 = $6;
 $7 = $4;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = $3;
 FUNCTION_TABLE_vii[$13 & 511]($14,$15);
 STACKTOP = sp;return;
}
function __cmsLockMutex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (__cmsContextGetClientChunk($6,14)|0);
 $5 = $7;
 $8 = $5;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $2 = 1;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 } else {
  $12 = $5;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $3;
  $16 = $4;
  $17 = (FUNCTION_TABLE_iii[$14 & 511]($15,$16)|0);
  $2 = $17;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __cmsUnlockMutex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (__cmsContextGetClientChunk($5,14)|0);
 $4 = $6;
 $7 = $4;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = $4;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = $3;
 FUNCTION_TABLE_vii[$13 & 511]($14,$15);
 STACKTOP = sp;return;
}
function _cmsBuildTabulatedToneCurve16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = (_AllocateToneCurveStruct($6,$7,0,0,$8)|0);
 STACKTOP = sp;return ($9|0);
}
function _AllocateToneCurveStruct($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $14 = $7;
 $15 = ($14>>>0)>(65530);
 if ($15) {
  $16 = $6;
  _cmsSignalError($16,2,24661,$vararg_buffer);
  $5 = 0;
  $222 = $5;
  STACKTOP = sp;return ($222|0);
 }
 $17 = $7;
 $18 = ($17|0)==(0);
 $19 = $8;
 $20 = ($19|0)==(0);
 $or$cond = $18 & $20;
 $21 = $6;
 if ($or$cond) {
  _cmsSignalError($21,2,24715,$vararg_buffer8);
  $5 = 0;
  $222 = $5;
  STACKTOP = sp;return ($222|0);
 }
 $22 = (__cmsMallocZero($21,28)|0);
 $11 = $22;
 $23 = $11;
 $24 = ($23|0)!=(0|0);
 if (!($24)) {
  $5 = 0;
  $222 = $5;
  STACKTOP = sp;return ($222|0);
 }
 $25 = $8;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = $11;
  $28 = ((($27)) + 8|0);
  HEAP32[$28>>2] = 0;
  $29 = $11;
  $30 = ((($29)) + 16|0);
  HEAP32[$30>>2] = 0;
  label = 11;
 } else {
  $31 = $6;
  $32 = $8;
  $33 = (__cmsCalloc($31,$32,104)|0);
  $34 = $11;
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = $33;
  $36 = $11;
  $37 = ((($36)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   $40 = $6;
   $41 = $8;
   $42 = (__cmsCalloc($40,$41,4)|0);
   $43 = $11;
   $44 = ((($43)) + 16|0);
   HEAP32[$44>>2] = $42;
   $45 = $11;
   $46 = ((($45)) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if (!($48)) {
    label = 11;
   }
  }
 }
 L17: do {
  if ((label|0) == 11) {
   $49 = $8;
   $50 = $11;
   $51 = ((($50)) + 4|0);
   HEAP32[$51>>2] = $49;
   $52 = $7;
   $53 = ($52|0)==(0);
   if ($53) {
    $54 = $11;
    $55 = ((($54)) + 24|0);
    HEAP32[$55>>2] = 0;
   } else {
    $56 = $6;
    $57 = $7;
    $58 = (__cmsCalloc($56,$57,2)|0);
    $59 = $11;
    $60 = ((($59)) + 24|0);
    HEAP32[$60>>2] = $58;
    $61 = $11;
    $62 = ((($61)) + 24|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(0|0);
    if ($64) {
     break;
    }
   }
   $65 = $7;
   $66 = $11;
   $67 = ((($66)) + 20|0);
   HEAP32[$67>>2] = $65;
   $68 = $10;
   $69 = ($68|0)!=(0|0);
   $70 = $7;
   $71 = ($70>>>0)>(0);
   $or$cond3 = $69 & $71;
   L23: do {
    if ($or$cond3) {
     $12 = 0;
     while(1) {
      $72 = $12;
      $73 = $7;
      $74 = ($72>>>0)<($73>>>0);
      if (!($74)) {
       break L23;
      }
      $75 = $10;
      $76 = $12;
      $77 = (($75) + ($76<<1)|0);
      $78 = HEAP16[$77>>1]|0;
      $79 = $11;
      $80 = ((($79)) + 24|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $12;
      $83 = (($81) + ($82<<1)|0);
      HEAP16[$83>>1] = $78;
      $84 = $12;
      $85 = (($84) + 1)|0;
      $12 = $85;
     }
    }
   } while(0);
   $86 = $9;
   $87 = ($86|0)!=(0|0);
   $88 = $8;
   $89 = ($88>>>0)>(0);
   $or$cond5 = $87 & $89;
   L29: do {
    if ($or$cond5) {
     $90 = $6;
     $91 = $8;
     $92 = (__cmsCalloc($90,$91,4)|0);
     $93 = $11;
     $94 = ((($93)) + 12|0);
     HEAP32[$94>>2] = $92;
     $95 = $11;
     $96 = ((($95)) + 12|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)==(0|0);
     if ($98) {
      break L17;
     }
     $12 = 0;
     while(1) {
      $99 = $12;
      $100 = $8;
      $101 = ($99>>>0)<($100>>>0);
      if (!($101)) {
       break L29;
      }
      $102 = $9;
      $103 = $12;
      $104 = (($102) + (($103*104)|0)|0);
      $105 = ((($104)) + 8|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = ($106|0)==(0);
      if ($107) {
       $108 = $6;
       $109 = $9;
       $110 = $12;
       $111 = (($109) + (($110*104)|0)|0);
       $112 = ((($111)) + 96|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (__cmsComputeInterpParams($108,$113,1,1,0,1)|0);
       $115 = $11;
       $116 = ((($115)) + 12|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = $12;
       $119 = (($117) + ($118<<2)|0);
       HEAP32[$119>>2] = $114;
      }
      $120 = $11;
      $121 = ((($120)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = $12;
      $124 = (($122) + (($123*104)|0)|0);
      $125 = $9;
      $126 = $12;
      $127 = (($125) + (($126*104)|0)|0);
      _memmove(($124|0),($127|0),104)|0;
      $128 = $9;
      $129 = $12;
      $130 = (($128) + (($129*104)|0)|0);
      $131 = ((($130)) + 8|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = ($132|0)==(0);
      if ($133) {
       $134 = $9;
       $135 = $12;
       $136 = (($134) + (($135*104)|0)|0);
       $137 = ((($136)) + 100|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = ($138|0)!=(0|0);
       if ($139) {
        $140 = $6;
        $141 = $9;
        $142 = $12;
        $143 = (($141) + (($142*104)|0)|0);
        $144 = ((($143)) + 100|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = $9;
        $147 = $12;
        $148 = (($146) + (($147*104)|0)|0);
        $149 = ((($148)) + 96|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = $150<<2;
        $152 = (__cmsDupMem($140,$145,$151)|0);
        $153 = $11;
        $154 = ((($153)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = $12;
        $157 = (($155) + (($156*104)|0)|0);
        $$sink = $152;$$sink7 = $157;
       } else {
        label = 27;
       }
      } else {
       label = 27;
      }
      if ((label|0) == 27) {
       label = 0;
       $158 = $11;
       $159 = ((($158)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = $12;
       $162 = (($160) + (($161*104)|0)|0);
       $$sink = 0;$$sink7 = $162;
      }
      $163 = ((($$sink7)) + 100|0);
      HEAP32[$163>>2] = $$sink;
      $164 = $6;
      $165 = $9;
      $166 = $12;
      $167 = (($165) + (($166*104)|0)|0);
      $168 = ((($167)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (_GetParametricCurveByType($164,$169,0)|0);
      $13 = $170;
      $171 = $13;
      $172 = ($171|0)!=(0|0);
      if ($172) {
       $173 = $13;
       $174 = ((($173)) + 164|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = $11;
       $177 = ((($176)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = $12;
       $180 = (($178) + ($179<<2)|0);
       HEAP32[$180>>2] = $175;
      }
      $181 = $12;
      $182 = (($181) + 1)|0;
      $12 = $182;
     }
    }
   } while(0);
   $183 = $6;
   $184 = $11;
   $185 = ((($184)) + 20|0);
   $186 = HEAP32[$185>>2]|0;
   $187 = $11;
   $188 = ((($187)) + 24|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = (__cmsComputeInterpParams($183,$186,1,1,$189,0)|0);
   $191 = $11;
   HEAP32[$191>>2] = $190;
   $192 = $11;
   $193 = HEAP32[$192>>2]|0;
   $194 = ($193|0)!=(0|0);
   if ($194) {
    $195 = $11;
    $5 = $195;
    $222 = $5;
    STACKTOP = sp;return ($222|0);
   }
  }
 } while(0);
 $196 = $11;
 $197 = ((($196)) + 8|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ($198|0)!=(0|0);
 if ($199) {
  $200 = $6;
  $201 = $11;
  $202 = ((($201)) + 8|0);
  $203 = HEAP32[$202>>2]|0;
  __cmsFree($200,$203);
 }
 $204 = $11;
 $205 = ((($204)) + 16|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ($206|0)!=(0|0);
 if ($207) {
  $208 = $6;
  $209 = $11;
  $210 = ((($209)) + 16|0);
  $211 = HEAP32[$210>>2]|0;
  __cmsFree($208,$211);
 }
 $212 = $11;
 $213 = ((($212)) + 24|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ($214|0)!=(0|0);
 if ($215) {
  $216 = $6;
  $217 = $11;
  $218 = ((($217)) + 24|0);
  $219 = HEAP32[$218>>2]|0;
  __cmsFree($216,$219);
 }
 $220 = $6;
 $221 = $11;
 __cmsFree($220,$221);
 $5 = 0;
 $222 = $5;
 STACKTOP = sp;return ($222|0);
}
function _GetParametricCurveByType($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = (__cmsContextGetClientChunk($10,6)|0);
 $9 = $11;
 $12 = $9;
 $13 = HEAP32[$12>>2]|0;
 $7 = $13;
 while(1) {
  $14 = $7;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   break;
  }
  $16 = $5;
  $17 = $7;
  $18 = (_IsInSet($16,$17)|0);
  $8 = $18;
  $19 = $8;
  $20 = ($19|0)!=(-1);
  if ($20) {
   label = 4;
   break;
  }
  $26 = $7;
  $27 = ((($26)) + 168|0);
  $28 = HEAP32[$27>>2]|0;
  $7 = $28;
 }
 if ((label|0) == 4) {
  $21 = $6;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $8;
   $24 = $6;
   HEAP32[$24>>2] = $23;
  }
  $25 = $7;
  $3 = $25;
  $44 = $3;
  STACKTOP = sp;return ($44|0);
 }
 $7 = 4632;
 while(1) {
  $29 = $7;
  $30 = ($29|0)!=(0|0);
  if (!($30)) {
   label = 15;
   break;
  }
  $31 = $5;
  $32 = $7;
  $33 = (_IsInSet($31,$32)|0);
  $8 = $33;
  $34 = $8;
  $35 = ($34|0)!=(-1);
  if ($35) {
   break;
  }
  $41 = $7;
  $42 = ((($41)) + 168|0);
  $43 = HEAP32[$42>>2]|0;
  $7 = $43;
 }
 if ((label|0) == 15) {
  $3 = 0;
  $44 = $3;
  STACKTOP = sp;return ($44|0);
 }
 $36 = $6;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $8;
  $39 = $6;
  HEAP32[$39>>2] = $38;
 }
 $40 = $7;
 $3 = $40;
 $44 = $3;
 STACKTOP = sp;return ($44|0);
}
function _IsInSet($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $4;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)<($8|0);
  if (!($9)) {
   label = 6;
   break;
  }
  $10 = $3;
  $11 = (Math_abs(($10|0))|0);
  $12 = $4;
  $13 = ((($12)) + 4|0);
  $14 = $5;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($11|0)==($16|0);
  $18 = $5;
  if ($17) {
   label = 4;
   break;
  }
  $19 = (($18) + 1)|0;
  $5 = $19;
 }
 if ((label|0) == 4) {
  $2 = $18;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $2 = -1;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _DefaultEvalParametricFn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0, $188 = 0.0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0;
 var $209 = 0.0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0.0;
 var $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0.0, $244 = 0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0;
 var $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0.0, $280 = 0;
 var $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0.0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0;
 var $3 = 0.0, $30 = 0.0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0.0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0.0, $315 = 0, $316 = 0.0;
 var $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0.0, $327 = 0, $328 = 0.0, $329 = 0.0, $33 = 0.0, $330 = 0, $331 = 0, $332 = 0.0, $333 = 0.0, $334 = 0;
 var $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0.0, $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0.0, $351 = 0.0, $352 = 0;
 var $353 = 0, $354 = 0.0, $355 = 0.0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0, $368 = 0.0, $369 = 0, $37 = 0.0, $370 = 0.0;
 var $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0.0, $384 = 0.0, $385 = 0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0.0, $400 = 0.0, $401 = 0.0, $402 = 0.0, $403 = 0, $404 = 0, $405 = 0.0, $406 = 0.0;
 var $407 = 0, $408 = 0.0, $409 = 0.0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0.0;
 var $425 = 0.0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0.0, $434 = 0.0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0.0;
 var $443 = 0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0.0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0, $455 = 0.0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0, $46 = 0.0, $460 = 0;
 var $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0.0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0.0, $472 = 0.0, $473 = 0, $474 = 0, $475 = 0, $476 = 0.0, $477 = 0.0, $478 = 0, $479 = 0.0;
 var $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0.0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0.0, $497 = 0;
 var $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0, $514 = 0.0;
 var $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0.0, $519 = 0.0, $52 = 0.0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0;
 var $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 L1: do {
  switch ($10|0) {
  case 1:  {
   $11 = $6;
   $12 = $11 < 0.0;
   if (!($12)) {
    $19 = $6;
    $20 = $5;
    $21 = +HEAPF64[$20>>3];
    $22 = (+Math_pow((+$19),(+$21)));
    $8 = $22;
    break L1;
   }
   $13 = $5;
   $14 = +HEAPF64[$13>>3];
   $15 = $14 - 1.0;
   $16 = (+Math_abs((+$15)));
   $17 = $16 < 1.0E-4;
   if ($17) {
    $18 = $6;
    $8 = $18;
    break L1;
   } else {
    $8 = 0.0;
    break L1;
   }
   break;
  }
  case -1:  {
   $23 = $6;
   $24 = $23 < 0.0;
   $25 = $5;
   $26 = +HEAPF64[$25>>3];
   if ($24) {
    $27 = $26 - 1.0;
    $28 = (+Math_abs((+$27)));
    $29 = $28 < 1.0E-4;
    if ($29) {
     $30 = $6;
     $8 = $30;
     break L1;
    } else {
     $8 = 0.0;
     break L1;
    }
   } else {
    $31 = (+Math_abs((+$26)));
    $32 = $31 < 1.0E-4;
    if ($32) {
     $8 = 9.9999997781963083E+21;
     break L1;
    } else {
     $33 = $6;
     $34 = $5;
     $35 = +HEAPF64[$34>>3];
     $36 = 1.0 / $35;
     $37 = (+Math_pow((+$33),(+$36)));
     $8 = $37;
     break L1;
    }
   }
   break;
  }
  case 2:  {
   $38 = $5;
   $39 = ((($38)) + 8|0);
   $40 = +HEAPF64[$39>>3];
   $41 = (+Math_abs((+$40)));
   $42 = $41 < 1.0E-4;
   if ($42) {
    $8 = 0.0;
    break L1;
   }
   $43 = $5;
   $44 = ((($43)) + 16|0);
   $45 = +HEAPF64[$44>>3];
   $46 = -$45;
   $47 = $5;
   $48 = ((($47)) + 8|0);
   $49 = +HEAPF64[$48>>3];
   $50 = $46 / $49;
   $9 = $50;
   $51 = $6;
   $52 = $9;
   $53 = $51 >= $52;
   if (!($53)) {
    $8 = 0.0;
    break L1;
   }
   $54 = $5;
   $55 = ((($54)) + 8|0);
   $56 = +HEAPF64[$55>>3];
   $57 = $6;
   $58 = $56 * $57;
   $59 = $5;
   $60 = ((($59)) + 16|0);
   $61 = +HEAPF64[$60>>3];
   $62 = $58 + $61;
   $7 = $62;
   $63 = $7;
   $64 = $63 > 0.0;
   if ($64) {
    $65 = $7;
    $66 = $5;
    $67 = +HEAPF64[$66>>3];
    $68 = (+Math_pow((+$65),(+$67)));
    $8 = $68;
    break L1;
   } else {
    $8 = 0.0;
    break L1;
   }
   break;
  }
  case -2:  {
   $69 = $5;
   $70 = +HEAPF64[$69>>3];
   $71 = (+Math_abs((+$70)));
   $72 = $71 < 1.0E-4;
   if (!($72)) {
    $73 = $5;
    $74 = ((($73)) + 8|0);
    $75 = +HEAPF64[$74>>3];
    $76 = (+Math_abs((+$75)));
    $77 = $76 < 1.0E-4;
    if (!($77)) {
     $78 = $6;
     $79 = $78 < 0.0;
     if ($79) {
      $8 = 0.0;
     } else {
      $80 = $6;
      $81 = $5;
      $82 = +HEAPF64[$81>>3];
      $83 = 1.0 / $82;
      $84 = (+Math_pow((+$80),(+$83)));
      $85 = $5;
      $86 = ((($85)) + 16|0);
      $87 = +HEAPF64[$86>>3];
      $88 = $84 - $87;
      $89 = $5;
      $90 = ((($89)) + 8|0);
      $91 = +HEAPF64[$90>>3];
      $92 = $88 / $91;
      $8 = $92;
     }
     $93 = $8;
     $94 = $93 < 0.0;
     if (!($94)) {
      break L1;
     }
     $8 = 0.0;
     break L1;
    }
   }
   $8 = 0.0;
   break;
  }
  case 3:  {
   $95 = $5;
   $96 = ((($95)) + 8|0);
   $97 = +HEAPF64[$96>>3];
   $98 = (+Math_abs((+$97)));
   $99 = $98 < 1.0E-4;
   if ($99) {
    $8 = 0.0;
    break L1;
   }
   $100 = $5;
   $101 = ((($100)) + 16|0);
   $102 = +HEAPF64[$101>>3];
   $103 = -$102;
   $104 = $5;
   $105 = ((($104)) + 8|0);
   $106 = +HEAPF64[$105>>3];
   $107 = $103 / $106;
   $9 = $107;
   $108 = $9;
   $109 = $108 < 0.0;
   if ($109) {
    $9 = 0.0;
   }
   $110 = $6;
   $111 = $9;
   $112 = $110 >= $111;
   $113 = $5;
   if (!($112)) {
    $132 = ((($113)) + 24|0);
    $133 = +HEAPF64[$132>>3];
    $8 = $133;
    break L1;
   }
   $114 = ((($113)) + 8|0);
   $115 = +HEAPF64[$114>>3];
   $116 = $6;
   $117 = $115 * $116;
   $118 = $5;
   $119 = ((($118)) + 16|0);
   $120 = +HEAPF64[$119>>3];
   $121 = $117 + $120;
   $7 = $121;
   $122 = $7;
   $123 = $122 > 0.0;
   if ($123) {
    $124 = $7;
    $125 = $5;
    $126 = +HEAPF64[$125>>3];
    $127 = (+Math_pow((+$124),(+$126)));
    $128 = $5;
    $129 = ((($128)) + 24|0);
    $130 = +HEAPF64[$129>>3];
    $131 = $127 + $130;
    $8 = $131;
    break L1;
   } else {
    $8 = 0.0;
    break L1;
   }
   break;
  }
  case -3:  {
   $134 = $5;
   $135 = ((($134)) + 8|0);
   $136 = +HEAPF64[$135>>3];
   $137 = (+Math_abs((+$136)));
   $138 = $137 < 1.0E-4;
   if ($138) {
    $8 = 0.0;
    break L1;
   }
   $139 = $6;
   $140 = $5;
   $141 = ((($140)) + 24|0);
   $142 = +HEAPF64[$141>>3];
   $143 = $139 >= $142;
   if (!($143)) {
    $164 = $5;
    $165 = ((($164)) + 16|0);
    $166 = +HEAPF64[$165>>3];
    $167 = -$166;
    $168 = $5;
    $169 = ((($168)) + 8|0);
    $170 = +HEAPF64[$169>>3];
    $171 = $167 / $170;
    $8 = $171;
    break L1;
   }
   $144 = $6;
   $145 = $5;
   $146 = ((($145)) + 24|0);
   $147 = +HEAPF64[$146>>3];
   $148 = $144 - $147;
   $7 = $148;
   $149 = $7;
   $150 = $149 > 0.0;
   if ($150) {
    $151 = $7;
    $152 = $5;
    $153 = +HEAPF64[$152>>3];
    $154 = 1.0 / $153;
    $155 = (+Math_pow((+$151),(+$154)));
    $156 = $5;
    $157 = ((($156)) + 16|0);
    $158 = +HEAPF64[$157>>3];
    $159 = $155 - $158;
    $160 = $5;
    $161 = ((($160)) + 8|0);
    $162 = +HEAPF64[$161>>3];
    $163 = $159 / $162;
    $8 = $163;
    break L1;
   } else {
    $8 = 0.0;
    break L1;
   }
   break;
  }
  case 4:  {
   $172 = $6;
   $173 = $5;
   $174 = ((($173)) + 32|0);
   $175 = +HEAPF64[$174>>3];
   $176 = $172 >= $175;
   if (!($176)) {
    $192 = $6;
    $193 = $5;
    $194 = ((($193)) + 24|0);
    $195 = +HEAPF64[$194>>3];
    $196 = $192 * $195;
    $8 = $196;
    break L1;
   }
   $177 = $5;
   $178 = ((($177)) + 8|0);
   $179 = +HEAPF64[$178>>3];
   $180 = $6;
   $181 = $179 * $180;
   $182 = $5;
   $183 = ((($182)) + 16|0);
   $184 = +HEAPF64[$183>>3];
   $185 = $181 + $184;
   $7 = $185;
   $186 = $7;
   $187 = $186 > 0.0;
   if ($187) {
    $188 = $7;
    $189 = $5;
    $190 = +HEAPF64[$189>>3];
    $191 = (+Math_pow((+$188),(+$190)));
    $8 = $191;
    break L1;
   } else {
    $8 = 0.0;
    break L1;
   }
   break;
  }
  case -4:  {
   $197 = $5;
   $198 = +HEAPF64[$197>>3];
   $199 = (+Math_abs((+$198)));
   $200 = $199 < 1.0E-4;
   if (!($200)) {
    $201 = $5;
    $202 = ((($201)) + 8|0);
    $203 = +HEAPF64[$202>>3];
    $204 = (+Math_abs((+$203)));
    $205 = $204 < 1.0E-4;
    if (!($205)) {
     $206 = $5;
     $207 = ((($206)) + 24|0);
     $208 = +HEAPF64[$207>>3];
     $209 = (+Math_abs((+$208)));
     $210 = $209 < 1.0E-4;
     if (!($210)) {
      $211 = $5;
      $212 = ((($211)) + 8|0);
      $213 = +HEAPF64[$212>>3];
      $214 = $5;
      $215 = ((($214)) + 32|0);
      $216 = +HEAPF64[$215>>3];
      $217 = $213 * $216;
      $218 = $5;
      $219 = ((($218)) + 16|0);
      $220 = +HEAPF64[$219>>3];
      $221 = $217 + $220;
      $7 = $221;
      $222 = $7;
      $223 = $222 < 0.0;
      if ($223) {
       $9 = 0.0;
      } else {
       $224 = $7;
       $225 = $5;
       $226 = +HEAPF64[$225>>3];
       $227 = (+Math_pow((+$224),(+$226)));
       $9 = $227;
      }
      $228 = $6;
      $229 = $9;
      $230 = $228 >= $229;
      $231 = $6;
      $232 = $5;
      if ($230) {
       $233 = +HEAPF64[$232>>3];
       $234 = 1.0 / $233;
       $235 = (+Math_pow((+$231),(+$234)));
       $236 = $5;
       $237 = ((($236)) + 16|0);
       $238 = +HEAPF64[$237>>3];
       $239 = $235 - $238;
       $240 = $5;
       $241 = ((($240)) + 8|0);
       $242 = +HEAPF64[$241>>3];
       $243 = $239 / $242;
       $8 = $243;
       break L1;
      } else {
       $244 = ((($232)) + 24|0);
       $245 = +HEAPF64[$244>>3];
       $246 = $231 / $245;
       $8 = $246;
       break L1;
      }
     }
    }
   }
   $8 = 0.0;
   break;
  }
  case 5:  {
   $247 = $6;
   $248 = $5;
   $249 = ((($248)) + 32|0);
   $250 = +HEAPF64[$249>>3];
   $251 = $247 >= $250;
   if (!($251)) {
    $274 = $6;
    $275 = $5;
    $276 = ((($275)) + 24|0);
    $277 = +HEAPF64[$276>>3];
    $278 = $274 * $277;
    $279 = $5;
    $280 = ((($279)) + 48|0);
    $281 = +HEAPF64[$280>>3];
    $282 = $278 + $281;
    $8 = $282;
    break L1;
   }
   $252 = $5;
   $253 = ((($252)) + 8|0);
   $254 = +HEAPF64[$253>>3];
   $255 = $6;
   $256 = $254 * $255;
   $257 = $5;
   $258 = ((($257)) + 16|0);
   $259 = +HEAPF64[$258>>3];
   $260 = $256 + $259;
   $7 = $260;
   $261 = $7;
   $262 = $261 > 0.0;
   if ($262) {
    $263 = $7;
    $264 = $5;
    $265 = +HEAPF64[$264>>3];
    $266 = (+Math_pow((+$263),(+$265)));
    $267 = $5;
    $268 = ((($267)) + 40|0);
    $269 = +HEAPF64[$268>>3];
    $270 = $266 + $269;
    $8 = $270;
    break L1;
   } else {
    $271 = $5;
    $272 = ((($271)) + 40|0);
    $273 = +HEAPF64[$272>>3];
    $8 = $273;
    break L1;
   }
   break;
  }
  case -5:  {
   $283 = $5;
   $284 = ((($283)) + 8|0);
   $285 = +HEAPF64[$284>>3];
   $286 = (+Math_abs((+$285)));
   $287 = $286 < 1.0E-4;
   if (!($287)) {
    $288 = $5;
    $289 = ((($288)) + 24|0);
    $290 = +HEAPF64[$289>>3];
    $291 = (+Math_abs((+$290)));
    $292 = $291 < 1.0E-4;
    if (!($292)) {
     $293 = $5;
     $294 = ((($293)) + 24|0);
     $295 = +HEAPF64[$294>>3];
     $296 = $5;
     $297 = ((($296)) + 32|0);
     $298 = +HEAPF64[$297>>3];
     $299 = $295 * $298;
     $300 = $5;
     $301 = ((($300)) + 48|0);
     $302 = +HEAPF64[$301>>3];
     $303 = $299 + $302;
     $9 = $303;
     $304 = $6;
     $305 = $9;
     $306 = $304 >= $305;
     $307 = $6;
     $308 = $5;
     if (!($306)) {
      $327 = ((($308)) + 48|0);
      $328 = +HEAPF64[$327>>3];
      $329 = $307 - $328;
      $330 = $5;
      $331 = ((($330)) + 24|0);
      $332 = +HEAPF64[$331>>3];
      $333 = $329 / $332;
      $8 = $333;
      break L1;
     }
     $309 = ((($308)) + 40|0);
     $310 = +HEAPF64[$309>>3];
     $311 = $307 - $310;
     $7 = $311;
     $312 = $7;
     $313 = $312 < 0.0;
     if ($313) {
      $8 = 0.0;
      break L1;
     } else {
      $314 = $7;
      $315 = $5;
      $316 = +HEAPF64[$315>>3];
      $317 = 1.0 / $316;
      $318 = (+Math_pow((+$314),(+$317)));
      $319 = $5;
      $320 = ((($319)) + 16|0);
      $321 = +HEAPF64[$320>>3];
      $322 = $318 - $321;
      $323 = $5;
      $324 = ((($323)) + 8|0);
      $325 = +HEAPF64[$324>>3];
      $326 = $322 / $325;
      $8 = $326;
      break L1;
     }
    }
   }
   $8 = 0.0;
   break;
  }
  case 6:  {
   $334 = $5;
   $335 = ((($334)) + 8|0);
   $336 = +HEAPF64[$335>>3];
   $337 = $6;
   $338 = $336 * $337;
   $339 = $5;
   $340 = ((($339)) + 16|0);
   $341 = +HEAPF64[$340>>3];
   $342 = $338 + $341;
   $7 = $342;
   $343 = $7;
   $344 = $343 < 0.0;
   if ($344) {
    $345 = $5;
    $346 = ((($345)) + 24|0);
    $347 = +HEAPF64[$346>>3];
    $8 = $347;
    break L1;
   } else {
    $348 = $7;
    $349 = $5;
    $350 = +HEAPF64[$349>>3];
    $351 = (+Math_pow((+$348),(+$350)));
    $352 = $5;
    $353 = ((($352)) + 24|0);
    $354 = +HEAPF64[$353>>3];
    $355 = $351 + $354;
    $8 = $355;
    break L1;
   }
   break;
  }
  case -6:  {
   $356 = $5;
   $357 = ((($356)) + 8|0);
   $358 = +HEAPF64[$357>>3];
   $359 = (+Math_abs((+$358)));
   $360 = $359 < 1.0E-4;
   if ($360) {
    $8 = 0.0;
    break L1;
   }
   $361 = $6;
   $362 = $5;
   $363 = ((($362)) + 24|0);
   $364 = +HEAPF64[$363>>3];
   $365 = $361 - $364;
   $7 = $365;
   $366 = $7;
   $367 = $366 < 0.0;
   if ($367) {
    $8 = 0.0;
    break L1;
   } else {
    $368 = $7;
    $369 = $5;
    $370 = +HEAPF64[$369>>3];
    $371 = 1.0 / $370;
    $372 = (+Math_pow((+$368),(+$371)));
    $373 = $5;
    $374 = ((($373)) + 16|0);
    $375 = +HEAPF64[$374>>3];
    $376 = $372 - $375;
    $377 = $5;
    $378 = ((($377)) + 8|0);
    $379 = +HEAPF64[$378>>3];
    $380 = $376 / $379;
    $8 = $380;
    break L1;
   }
   break;
  }
  case 7:  {
   $381 = $5;
   $382 = ((($381)) + 16|0);
   $383 = +HEAPF64[$382>>3];
   $384 = $6;
   $385 = $5;
   $386 = +HEAPF64[$385>>3];
   $387 = (+Math_pow((+$384),(+$386)));
   $388 = $383 * $387;
   $389 = $5;
   $390 = ((($389)) + 24|0);
   $391 = +HEAPF64[$390>>3];
   $392 = $388 + $391;
   $7 = $392;
   $393 = $7;
   $394 = $393 <= 0.0;
   $395 = $5;
   if ($394) {
    $396 = ((($395)) + 32|0);
    $397 = +HEAPF64[$396>>3];
    $8 = $397;
    break L1;
   } else {
    $398 = ((($395)) + 8|0);
    $399 = +HEAPF64[$398>>3];
    $400 = $7;
    $401 = (+_log10($400));
    $402 = $399 * $401;
    $403 = $5;
    $404 = ((($403)) + 32|0);
    $405 = +HEAPF64[$404>>3];
    $406 = $402 + $405;
    $8 = $406;
    break L1;
   }
   break;
  }
  case -7:  {
   $407 = $5;
   $408 = +HEAPF64[$407>>3];
   $409 = (+Math_abs((+$408)));
   $410 = $409 < 1.0E-4;
   if (!($410)) {
    $411 = $5;
    $412 = ((($411)) + 8|0);
    $413 = +HEAPF64[$412>>3];
    $414 = (+Math_abs((+$413)));
    $415 = $414 < 1.0E-4;
    if (!($415)) {
     $416 = $5;
     $417 = ((($416)) + 16|0);
     $418 = +HEAPF64[$417>>3];
     $419 = (+Math_abs((+$418)));
     $420 = $419 < 1.0E-4;
     if (!($420)) {
      $421 = $6;
      $422 = $5;
      $423 = ((($422)) + 32|0);
      $424 = +HEAPF64[$423>>3];
      $425 = $421 - $424;
      $426 = $5;
      $427 = ((($426)) + 8|0);
      $428 = +HEAPF64[$427>>3];
      $429 = $425 / $428;
      $430 = (+Math_pow(10.0,(+$429)));
      $431 = $5;
      $432 = ((($431)) + 24|0);
      $433 = +HEAPF64[$432>>3];
      $434 = $430 - $433;
      $435 = $5;
      $436 = ((($435)) + 16|0);
      $437 = +HEAPF64[$436>>3];
      $438 = $434 / $437;
      $439 = $5;
      $440 = +HEAPF64[$439>>3];
      $441 = 1.0 / $440;
      $442 = (+Math_pow((+$438),(+$441)));
      $8 = $442;
      break L1;
     }
    }
   }
   $8 = 0.0;
   break;
  }
  case 8:  {
   $443 = $5;
   $444 = +HEAPF64[$443>>3];
   $445 = $5;
   $446 = ((($445)) + 8|0);
   $447 = +HEAPF64[$446>>3];
   $448 = $5;
   $449 = ((($448)) + 16|0);
   $450 = +HEAPF64[$449>>3];
   $451 = $6;
   $452 = $450 * $451;
   $453 = $5;
   $454 = ((($453)) + 24|0);
   $455 = +HEAPF64[$454>>3];
   $456 = $452 + $455;
   $457 = (+Math_pow((+$447),(+$456)));
   $458 = $444 * $457;
   $459 = $5;
   $460 = ((($459)) + 32|0);
   $461 = +HEAPF64[$460>>3];
   $462 = $458 + $461;
   $8 = $462;
   break;
  }
  case -8:  {
   $463 = $6;
   $464 = $5;
   $465 = ((($464)) + 32|0);
   $466 = +HEAPF64[$465>>3];
   $467 = $463 - $466;
   $9 = $467;
   $468 = $9;
   $469 = $468 < 0.0;
   if ($469) {
    $8 = 0.0;
    break L1;
   }
   $470 = $5;
   $471 = +HEAPF64[$470>>3];
   $472 = (+Math_abs((+$471)));
   $473 = $472 < 1.0E-4;
   if (!($473)) {
    $474 = $5;
    $475 = ((($474)) + 16|0);
    $476 = +HEAPF64[$475>>3];
    $477 = (+Math_abs((+$476)));
    $478 = $477 < 1.0E-4;
    if (!($478)) {
     $479 = $9;
     $480 = $5;
     $481 = +HEAPF64[$480>>3];
     $482 = $479 / $481;
     $483 = (+Math_log((+$482)));
     $484 = $5;
     $485 = ((($484)) + 8|0);
     $486 = +HEAPF64[$485>>3];
     $487 = (+Math_log((+$486)));
     $488 = $483 / $487;
     $489 = $5;
     $490 = ((($489)) + 24|0);
     $491 = +HEAPF64[$490>>3];
     $492 = $488 - $491;
     $493 = $5;
     $494 = ((($493)) + 16|0);
     $495 = +HEAPF64[$494>>3];
     $496 = $492 / $495;
     $8 = $496;
     break L1;
    }
   }
   $8 = 0.0;
   break;
  }
  case 108:  {
   $497 = $5;
   $498 = +HEAPF64[$497>>3];
   $499 = (+Math_abs((+$498)));
   $500 = $499 < 1.0E-4;
   if ($500) {
    $8 = 0.0;
    break L1;
   } else {
    $501 = $6;
    $502 = 1.0 - $501;
    $503 = $5;
    $504 = +HEAPF64[$503>>3];
    $505 = 1.0 / $504;
    $506 = (+Math_pow((+$502),(+$505)));
    $507 = 1.0 - $506;
    $508 = $5;
    $509 = +HEAPF64[$508>>3];
    $510 = 1.0 / $509;
    $511 = (+Math_pow((+$507),(+$510)));
    $8 = $511;
    break L1;
   }
   break;
  }
  case -108:  {
   $512 = $6;
   $513 = $5;
   $514 = +HEAPF64[$513>>3];
   $515 = (+Math_pow((+$512),(+$514)));
   $516 = 1.0 - $515;
   $517 = $5;
   $518 = +HEAPF64[$517>>3];
   $519 = (+Math_pow((+$516),(+$518)));
   $520 = 1.0 - $519;
   $8 = $520;
   break;
  }
  default: {
   $3 = 0.0;
   $522 = $3;
   STACKTOP = sp;return (+$522);
  }
  }
 } while(0);
 $521 = $8;
 $3 = $521;
 $522 = $3;
 STACKTOP = sp;return (+$522);
}
function _cmsBuildSegmentedToneCurve($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = 4096;
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((24774|0),(24613|0),750,(24799|0));
  // unreachable;
 }
 $14 = $5;
 $15 = ($14|0)==(1);
 if ($15) {
  $16 = $6;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(1);
  if ($19) {
   $20 = $6;
   $21 = ((($20)) + 16|0);
   $22 = +HEAPF64[$21>>3];
   $23 = (_EntriesByGamma($22)|0);
   $11 = $23;
  }
 }
 $24 = $4;
 $25 = $11;
 $26 = $5;
 $27 = $6;
 $28 = (_AllocateToneCurveStruct($24,$25,$26,$27,0)|0);
 $10 = $28;
 $29 = $10;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $3 = 0;
  $54 = $3;
  STACKTOP = sp;return ($54|0);
 }
 $7 = 0;
 while(1) {
  $31 = $7;
  $32 = $11;
  $33 = ($31>>>0)<($32>>>0);
  if (!($33)) {
   break;
  }
  $34 = $7;
  $35 = (+($34>>>0));
  $36 = $11;
  $37 = (($36) - 1)|0;
  $38 = (+($37>>>0));
  $39 = $35 / $38;
  $8 = $39;
  $40 = $10;
  $41 = $8;
  $42 = (+_EvalSegmentedFn($40,$41));
  $9 = $42;
  $43 = $9;
  $44 = $43 * 65535.0;
  $45 = (__cmsQuickSaturateWord_169($44)|0);
  $46 = $10;
  $47 = ((($46)) + 24|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $7;
  $50 = (($48) + ($49<<1)|0);
  HEAP16[$50>>1] = $45;
  $51 = $7;
  $52 = (($51) + 1)|0;
  $7 = $52;
 }
 $53 = $10;
 $3 = $53;
 $54 = $3;
 STACKTOP = sp;return ($54|0);
}
function _EntriesByGamma($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 - 1.0;
 $5 = (+Math_abs((+$4)));
 $6 = $5 < 0.001;
 if ($6) {
  $1 = 2;
 } else {
  $1 = 4096;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _EvalSegmentedFn($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 28|0;
 $8 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) - 1)|0;
 $5 = $12;
 while(1) {
  $13 = $5;
  $14 = ($13|0)>=(0);
  if (!($14)) {
   label = 14;
   break;
  }
  $15 = $4;
  $16 = $3;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $5;
  $20 = (($18) + (($19*104)|0)|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $21;
  $23 = $15 > $22;
  if ($23) {
   $24 = $4;
   $25 = $3;
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $5;
   $29 = (($27) + (($28*104)|0)|0);
   $30 = ((($29)) + 4|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $31;
   $33 = $24 <= $32;
   if ($33) {
    break;
   }
  }
  $134 = $5;
  $135 = (($134) + -1)|0;
  $5 = $135;
 }
 if ((label|0) == 14) {
  $2 = -9.9999997781963083E+21;
  $136 = $2;
  STACKTOP = sp;return (+$136);
 }
 $34 = $3;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $5;
 $38 = (($36) + (($37*104)|0)|0);
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 if ($41) {
  $42 = $4;
  $43 = $3;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $5;
  $47 = (($45) + (($46*104)|0)|0);
  $48 = +HEAPF32[$47>>2];
  $49 = $48;
  $50 = $42 - $49;
  $51 = $50;
  $52 = $3;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $5;
  $56 = (($54) + (($55*104)|0)|0);
  $57 = ((($56)) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $3;
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $5;
  $63 = (($61) + (($62*104)|0)|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $58 - $64;
  $66 = $51 / $65;
  HEAPF32[$8>>2] = $66;
  $67 = $3;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $5;
  $71 = (($69) + (($70*104)|0)|0);
  $72 = ((($71)) + 100|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $3;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $5;
  $78 = (($76) + ($77<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($79)) + 112|0);
  HEAP32[$80>>2] = $73;
  $81 = $3;
  $82 = ((($81)) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $5;
  $85 = (($83) + ($84<<2)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($86)) + 116|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = ((($89)) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $5;
  $93 = (($91) + ($92<<2)|0);
  $94 = HEAP32[$93>>2]|0;
  FUNCTION_TABLE_viii[$88 & 511]($8,$6,$94);
  $95 = +HEAPF32[$6>>2];
  $96 = $95;
  $7 = $96;
 } else {
  $97 = $3;
  $98 = ((($97)) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $5;
  $101 = (($99) + ($100<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $3;
  $104 = ((($103)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $5;
  $107 = (($105) + (($106*104)|0)|0);
  $108 = ((($107)) + 8|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $3;
  $111 = ((($110)) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $5;
  $114 = (($112) + (($113*104)|0)|0);
  $115 = ((($114)) + 16|0);
  $116 = $4;
  $117 = (+FUNCTION_TABLE_diid[$102 & 63]($109,$115,$116));
  $7 = $117;
 }
 $118 = $7;
 $119 = (___DOUBLE_BITS($118)|0);
 $120 = tempRet0;
 $121 = $120 & 2147483647;
 $122 = ($119|0)==(0);
 $123 = ($121|0)==(2146435072);
 $124 = $122 & $123;
 if ($124) {
  $2 = 9.9999997781963083E+21;
  $136 = $2;
  STACKTOP = sp;return (+$136);
 }
 $125 = $7;
 $126 = -$125;
 $127 = (___DOUBLE_BITS($126)|0);
 $128 = tempRet0;
 $129 = $128 & 2147483647;
 $130 = ($127|0)==(0);
 $131 = ($129|0)==(2146435072);
 $132 = $130 & $131;
 if ($132) {
  $2 = -9.9999997781963083E+21;
  $136 = $2;
  STACKTOP = sp;return (+$136);
 } else {
  $133 = $7;
  $2 = $133;
  $136 = $2;
  STACKTOP = sp;return (+$136);
 }
 return +(0.0);
}
function __cmsQuickSaturateWord_169($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 65535.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord_170($9)|0);
    $1 = $10;
    break;
   }
  }
 } while(0);
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function __cmsQuickFloorWord_170($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 32767.0;
 $4 = (__cmsQuickFloor_171($3)|0);
 $5 = $4&65535;
 $6 = $5&65535;
 $7 = (($6) + 32767)|0;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsQuickFloor_171($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function ___FLOAT_BITS($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 HEAPF32[$2>>2] = $3;
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 HEAPF64[$2>>3] = $3;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 tempRet0 = ($9);
 STACKTOP = sp;return ($6|0);
}
function _cmsBuildTabulatedToneCurveFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 HEAPF32[$6>>2] = -9.9999997781963083E+21;
 $7 = ((($6)) + 4|0);
 HEAPF32[$7>>2] = 0.0;
 $8 = ((($6)) + 8|0);
 HEAP32[$8>>2] = 6;
 $9 = ((($6)) + 16|0);
 HEAPF64[$9>>3] = 1.0;
 $10 = ((($6)) + 16|0);
 $11 = ((($10)) + 8|0);
 HEAPF64[$11>>3] = 0.0;
 $12 = ((($6)) + 16|0);
 $13 = ((($12)) + 16|0);
 HEAPF64[$13>>3] = 0.0;
 $14 = $5;
 $15 = +HEAPF32[$14>>2];
 $16 = $15;
 $17 = ((($6)) + 16|0);
 $18 = ((($17)) + 24|0);
 HEAPF64[$18>>3] = $16;
 $19 = ((($6)) + 16|0);
 $20 = ((($19)) + 32|0);
 HEAPF64[$20>>3] = 0.0;
 $21 = ((($6)) + 104|0);
 HEAPF32[$21>>2] = 0.0;
 $22 = ((($6)) + 104|0);
 $23 = ((($22)) + 4|0);
 HEAPF32[$23>>2] = 1.0;
 $24 = ((($6)) + 104|0);
 $25 = ((($24)) + 8|0);
 HEAP32[$25>>2] = 0;
 $26 = $4;
 $27 = ((($6)) + 104|0);
 $28 = ((($27)) + 96|0);
 HEAP32[$28>>2] = $26;
 $29 = $5;
 $30 = ((($6)) + 104|0);
 $31 = ((($30)) + 100|0);
 HEAP32[$31>>2] = $29;
 $32 = ((($6)) + 208|0);
 HEAPF32[$32>>2] = 1.0;
 $33 = ((($6)) + 208|0);
 $34 = ((($33)) + 4|0);
 HEAPF32[$34>>2] = 9.9999997781963083E+21;
 $35 = ((($6)) + 208|0);
 $36 = ((($35)) + 8|0);
 HEAP32[$36>>2] = 6;
 $37 = ((($6)) + 208|0);
 $38 = ((($37)) + 16|0);
 HEAPF64[$38>>3] = 1.0;
 $39 = ((($6)) + 208|0);
 $40 = ((($39)) + 16|0);
 $41 = ((($40)) + 8|0);
 HEAPF64[$41>>3] = 0.0;
 $42 = ((($6)) + 208|0);
 $43 = ((($42)) + 16|0);
 $44 = ((($43)) + 16|0);
 HEAPF64[$44>>3] = 0.0;
 $45 = $5;
 $46 = $4;
 $47 = (($46) - 1)|0;
 $48 = (($45) + ($47<<2)|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $49;
 $51 = ((($6)) + 208|0);
 $52 = ((($51)) + 16|0);
 $53 = ((($52)) + 24|0);
 HEAPF64[$53>>3] = $50;
 $54 = ((($6)) + 208|0);
 $55 = ((($54)) + 16|0);
 $56 = ((($55)) + 32|0);
 HEAPF64[$56>>3] = 0.0;
 $57 = $3;
 $58 = (_cmsBuildSegmentedToneCurve($57,3,$6)|0);
 STACKTOP = sp;return ($58|0);
}
function _cmsBuildParametricToneCurve($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $vararg_buffer = sp + 104|0;
 $7 = sp;
 $8 = sp + 116|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$8>>2] = 0;
 $11 = $4;
 $12 = $5;
 $13 = (_GetParametricCurveByType($11,$12,$8)|0);
 $10 = $13;
 $14 = $6;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((24826|0),(24613|0),828,(24849|0));
  // unreachable;
 }
 $16 = $10;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $4;
  $19 = $5;
  HEAP32[$vararg_buffer>>2] = $19;
  _cmsSignalError($18,8,24877,$vararg_buffer);
  $3 = 0;
  $34 = $3;
  STACKTOP = sp;return ($34|0);
 } else {
  dest=$7; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAPF32[$7>>2] = -9.9999997781963083E+21;
  $20 = ((($7)) + 4|0);
  HEAPF32[$20>>2] = 9.9999997781963083E+21;
  $21 = $5;
  $22 = ((($7)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = $10;
  $24 = ((($23)) + 84|0);
  $25 = HEAP32[$8>>2]|0;
  $26 = (($24) + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27<<3;
  $9 = $28;
  $29 = ((($7)) + 16|0);
  $30 = $6;
  $31 = $9;
  _memmove(($29|0),($30|0),($31|0))|0;
  $32 = $4;
  $33 = (_cmsBuildSegmentedToneCurve($32,1,$7)|0);
  $3 = $33;
  $34 = $3;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _cmsBuildGamma($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $0;
 HEAPF64[$3>>3] = $1;
 $4 = $2;
 $5 = (_cmsBuildParametricToneCurve($4,1,$3)|0);
 STACKTOP = sp;return ($5|0);
}
function _cmsFreeToneCurve($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 __cmsFreeInterpParams($10);
 $11 = $1;
 $12 = ((($11)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $2;
  $16 = $1;
  $17 = ((($16)) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  __cmsFree($15,$18);
 }
 $19 = $1;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $3 = 0;
  while(1) {
   $23 = $3;
   $24 = $1;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($23>>>0)<($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = $1;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $3;
   $32 = (($30) + (($31*104)|0)|0);
   $33 = ((($32)) + 100|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)!=(0|0);
   if ($35) {
    $36 = $2;
    $37 = $1;
    $38 = ((($37)) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $3;
    $41 = (($39) + (($40*104)|0)|0);
    $42 = ((($41)) + 100|0);
    $43 = HEAP32[$42>>2]|0;
    __cmsFree($36,$43);
   }
   $44 = $1;
   $45 = ((($44)) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $3;
   $48 = (($46) + ($47<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(0|0);
   if ($50) {
    $51 = $1;
    $52 = ((($51)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = $3;
    $55 = (($53) + ($54<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    __cmsFreeInterpParams($56);
   }
   $57 = $3;
   $58 = (($57) + 1)|0;
   $3 = $58;
  }
  $59 = $2;
  $60 = $1;
  $61 = ((($60)) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  __cmsFree($59,$62);
  $63 = $2;
  $64 = $1;
  $65 = ((($64)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  __cmsFree($63,$66);
 }
 $67 = $1;
 $68 = ((($67)) + 16|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0|0);
 if ($70) {
  $71 = $2;
  $72 = $1;
  $73 = ((($72)) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  __cmsFree($71,$74);
 }
 $75 = $1;
 $76 = ($75|0)!=(0|0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = $2;
 $78 = $1;
 __cmsFree($77,$78);
 STACKTOP = sp;return;
}
function _cmsFreeToneCurveTriple($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  ___assert_fail((24910|0),(24613|0),898,(24932|0));
  // unreachable;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $1;
  $8 = HEAP32[$7>>2]|0;
  _cmsFreeToneCurve($8);
 }
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  _cmsFreeToneCurve($15);
 }
 $16 = $1;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $1;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  _cmsFreeToneCurve($22);
 }
 $23 = $1;
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = 0;
 $25 = $1;
 $26 = ((($25)) + 4|0);
 HEAP32[$26>>2] = 0;
 $27 = $1;
 HEAP32[$27>>2] = 0;
 STACKTOP = sp;return;
}
function _cmsDupToneCurve($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = ((($8)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $2;
  $18 = ((($17)) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_AllocateToneCurveStruct($7,$10,$13,$16,$19)|0);
  $1 = $20;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _cmsJoinToneCurve($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 $9 = 0;
 $12 = 0;
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((24955|0),(24613|0),932,(24973|0));
  // unreachable;
 }
 $16 = $6;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((24990|0),(24613|0),933,(24973|0));
  // unreachable;
 }
 $18 = $7;
 $19 = $6;
 $20 = (_cmsReverseToneCurveEx($18,$19)|0);
 $9 = $20;
 $21 = $9;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = $4;
  $24 = $7;
  $25 = (__cmsCalloc($23,$24,4)|0);
  $12 = $25;
  $26 = $12;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   $13 = 0;
   while(1) {
    $28 = $13;
    $29 = $7;
    $30 = ($28>>>0)<($29>>>0);
    if (!($30)) {
     break;
    }
    $31 = $13;
    $32 = (+($31>>>0));
    $33 = $7;
    $34 = (($33) - 1)|0;
    $35 = (+($34>>>0));
    $36 = $32 / $35;
    $10 = $36;
    $37 = $5;
    $38 = $10;
    $39 = (+_cmsEvalToneCurveFloat($37,$38));
    $11 = $39;
    $40 = $9;
    $41 = $11;
    $42 = (+_cmsEvalToneCurveFloat($40,$41));
    $43 = $12;
    $44 = $13;
    $45 = (($43) + ($44<<2)|0);
    HEAPF32[$45>>2] = $42;
    $46 = $13;
    $47 = (($46) + 1)|0;
    $13 = $47;
   }
   $48 = $4;
   $49 = $7;
   $50 = $12;
   $51 = (_cmsBuildTabulatedToneCurveFloat($48,$49,$50)|0);
   $8 = $51;
  }
 }
 $52 = $12;
 $53 = ($52|0)!=(0|0);
 if ($53) {
  $54 = $4;
  $55 = $12;
  __cmsFree($54,$55);
 }
 $56 = $9;
 $57 = ($56|0)!=(0|0);
 if (!($57)) {
  $59 = $8;
  STACKTOP = sp;return ($59|0);
 }
 $58 = $9;
 _cmsFreeToneCurve($58);
 $59 = $8;
 STACKTOP = sp;return ($59|0);
}
function _cmsReverseToneCurveEx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0.0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = $0;
 $4 = $1;
 $6 = 0.0;
 $7 = 0.0;
 $16 = $4;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((25049|0),(24613|0),1018,(25073|0));
  // unreachable;
 }
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 if ($21) {
  $22 = $4;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)>(0);
  if ($27) {
   $28 = $4;
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = $4;
   $32 = ((($31)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_GetParametricCurveByType($30,$35,0)|0);
   $37 = ($36|0)!=(0|0);
   if ($37) {
    $38 = $4;
    $39 = HEAP32[$38>>2]|0;
    $40 = HEAP32[$39>>2]|0;
    $41 = $4;
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($43)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (0 - ($45))|0;
    $47 = $4;
    $48 = ((($47)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + 16|0);
    $51 = (_cmsBuildParametricToneCurve($40,$46,$50)|0);
    $2 = $51;
    $157 = $2;
    STACKTOP = sp;return ($157|0);
   }
  }
 }
 $52 = $4;
 $53 = HEAP32[$52>>2]|0;
 $54 = HEAP32[$53>>2]|0;
 $55 = $3;
 $56 = (_cmsBuildTabulatedToneCurve16($54,$55,0)|0);
 $5 = $56;
 $57 = $5;
 $58 = ($57|0)==(0|0);
 if ($58) {
  $2 = 0;
  $157 = $2;
  STACKTOP = sp;return ($157|0);
 }
 $59 = $4;
 $60 = (_cmsIsToneCurveDescending($59)|0);
 $61 = ($60|0)!=(0);
 $62 = $61 ^ 1;
 $63 = $62&1;
 $15 = $63;
 $13 = 0;
 while(1) {
  $64 = $13;
  $65 = $3;
  $66 = ($64|0)<($65|0);
  if (!($66)) {
   break;
  }
  $67 = $13;
  $68 = (+($67|0));
  $69 = $68 * 65535.0;
  $70 = $3;
  $71 = (($70) - 1)|0;
  $72 = (+($71>>>0));
  $73 = $69 / $72;
  $8 = $73;
  $74 = $8;
  $75 = $4;
  $76 = ((($75)) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $4;
  $79 = HEAP32[$78>>2]|0;
  $80 = (_GetInterval($74,$77,$79)|0);
  $14 = $80;
  $81 = $14;
  $82 = ($81|0)>=(0);
  do {
   if ($82) {
    $83 = $4;
    $84 = ((($83)) + 24|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $14;
    $87 = (($85) + ($86<<1)|0);
    $88 = HEAP16[$87>>1]|0;
    $89 = (+($88&65535));
    $9 = $89;
    $90 = $4;
    $91 = ((($90)) + 24|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $14;
    $94 = (($93) + 1)|0;
    $95 = (($92) + ($94<<1)|0);
    $96 = HEAP16[$95>>1]|0;
    $97 = (+($96&65535));
    $11 = $97;
    $98 = $14;
    $99 = (+($98|0));
    $100 = $99 * 65535.0;
    $101 = $4;
    $102 = ((($101)) + 20|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (($103) - 1)|0;
    $105 = (+($104>>>0));
    $106 = $100 / $105;
    $10 = $106;
    $107 = $14;
    $108 = (($107) + 1)|0;
    $109 = (+($108|0));
    $110 = $109 * 65535.0;
    $111 = $4;
    $112 = ((($111)) + 20|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($113) - 1)|0;
    $115 = (+($114>>>0));
    $116 = $110 / $115;
    $12 = $116;
    $117 = $9;
    $118 = $11;
    $119 = $117 == $118;
    if ($119) {
     $120 = $15;
     $121 = ($120|0)!=(0);
     $122 = $12;
     $123 = $10;
     $124 = $121 ? $122 : $123;
     $125 = (__cmsQuickSaturateWord_169($124)|0);
     $126 = $5;
     $127 = ((($126)) + 24|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $13;
     $130 = (($128) + ($129<<1)|0);
     $$sink = $125;$$sink1 = $130;
     break;
    } else {
     $131 = $12;
     $132 = $10;
     $133 = $131 - $132;
     $134 = $11;
     $135 = $9;
     $136 = $134 - $135;
     $137 = $133 / $136;
     $6 = $137;
     $138 = $12;
     $139 = $6;
     $140 = $11;
     $141 = $139 * $140;
     $142 = $138 - $141;
     $7 = $142;
     label = 15;
     break;
    }
   } else {
    label = 15;
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   $143 = $6;
   $144 = $8;
   $145 = $143 * $144;
   $146 = $7;
   $147 = $145 + $146;
   $148 = (__cmsQuickSaturateWord_169($147)|0);
   $149 = $5;
   $150 = ((($149)) + 24|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = $13;
   $153 = (($151) + ($152<<1)|0);
   $$sink = $148;$$sink1 = $153;
  }
  HEAP16[$$sink1>>1] = $$sink;
  $154 = $13;
  $155 = (($154) + 1)|0;
  $13 = $155;
 }
 $156 = $5;
 $2 = $156;
 $157 = $2;
 STACKTOP = sp;return ($157|0);
}
function _cmsEvalToneCurveFloat($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((24910|0),(24613|0),1353,(25008|0));
  // unreachable;
 }
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = $4;
  $14 = $13;
  $15 = $14 * 65535.0;
  $16 = (__cmsQuickSaturateWord_169($15)|0);
  $5 = $16;
  $17 = $3;
  $18 = $5;
  $19 = (_cmsEvalToneCurve16($17,$18)|0);
  $6 = $19;
  $20 = $6;
  $21 = $20&65535;
  $22 = (+($21|0));
  $23 = $22 / 65535.0;
  $24 = $23;
  $2 = $24;
  $30 = $2;
  STACKTOP = sp;return (+$30);
 } else {
  $25 = $3;
  $26 = $4;
  $27 = $26;
  $28 = (+_EvalSegmentedFn($25,$27));
  $29 = $28;
  $2 = $29;
  $30 = $2;
  STACKTOP = sp;return (+$30);
 }
 return +(0.0);
}
function _cmsEvalToneCurve16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 6|0;
 $4 = sp + 4|0;
 $2 = $0;
 HEAP16[$3>>1] = $1;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 116|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_viii[$10 & 511]($3,$4,$12);
  $13 = HEAP16[$4>>1]|0;
  STACKTOP = sp;return ($13|0);
 } else {
  ___assert_fail((24910|0),(24613|0),1374,(25030|0));
  // unreachable;
 }
 return (0)|0;
}
function _cmsIsToneCurveDescending($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = ((($4)) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $1;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $1;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) - 1)|0;
  $16 = (($11) + ($15<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($8|0)>($18|0);
  $20 = $19&1;
  STACKTOP = sp;return ($20|0);
 } else {
  ___assert_fail((24643|0),(24613|0),1328,(25095|0));
  // unreachable;
 }
 return (0)|0;
}
function _GetInterval($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $6;
 $11 = ((($10)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12>>>0)<(1);
 if ($13) {
  $3 = -1;
  $110 = $3;
  STACKTOP = sp;return ($110|0);
 }
 $14 = $5;
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $5;
 $18 = $6;
 $19 = ((($18)) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($17) + ($20<<1)|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = ($16|0)<($23|0);
 L5: do {
  if ($24) {
   $25 = $6;
   $26 = ((($25)) + 48|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) - 1)|0;
   $7 = $28;
   while(1) {
    $29 = $7;
    $30 = ($29|0)>=(0);
    if (!($30)) {
     break L5;
    }
    $31 = $5;
    $32 = $7;
    $33 = (($31) + ($32<<1)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34&65535;
    $8 = $35;
    $36 = $5;
    $37 = $7;
    $38 = (($37) + 1)|0;
    $39 = (($36) + ($38<<1)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40&65535;
    $9 = $41;
    $42 = $8;
    $43 = $9;
    $44 = ($42|0)<=($43|0);
    if ($44) {
     $45 = $4;
     $46 = $8;
     $47 = (+($46|0));
     $48 = $45 >= $47;
     if ($48) {
      $49 = $4;
      $50 = $9;
      $51 = (+($50|0));
      $52 = $49 <= $51;
      if ($52) {
       label = 9;
       break;
      }
     }
    } else {
     $54 = $9;
     $55 = $8;
     $56 = ($54|0)<($55|0);
     if ($56) {
      $57 = $4;
      $58 = $9;
      $59 = (+($58|0));
      $60 = $57 >= $59;
      if ($60) {
       $61 = $4;
       $62 = $8;
       $63 = (+($62|0));
       $64 = $61 <= $63;
       if ($64) {
        label = 13;
        break;
       }
      }
     }
    }
    $66 = $7;
    $67 = (($66) + -1)|0;
    $7 = $67;
   }
   if ((label|0) == 9) {
    $53 = $7;
    $3 = $53;
    $110 = $3;
    STACKTOP = sp;return ($110|0);
   }
   else if ((label|0) == 13) {
    $65 = $7;
    $3 = $65;
    $110 = $3;
    STACKTOP = sp;return ($110|0);
   }
  } else {
   $7 = 0;
   while(1) {
    $68 = $7;
    $69 = $6;
    $70 = ((($69)) + 48|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($68|0)<($71|0);
    if (!($72)) {
     break L5;
    }
    $73 = $5;
    $74 = $7;
    $75 = (($73) + ($74<<1)|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = $76&65535;
    $8 = $77;
    $78 = $5;
    $79 = $7;
    $80 = (($79) + 1)|0;
    $81 = (($78) + ($80<<1)|0);
    $82 = HEAP16[$81>>1]|0;
    $83 = $82&65535;
    $9 = $83;
    $84 = $8;
    $85 = $9;
    $86 = ($84|0)<=($85|0);
    if ($86) {
     $87 = $4;
     $88 = $8;
     $89 = (+($88|0));
     $90 = $87 >= $89;
     if ($90) {
      $91 = $4;
      $92 = $9;
      $93 = (+($92|0));
      $94 = $91 <= $93;
      if ($94) {
       label = 20;
       break;
      }
     }
    } else {
     $96 = $9;
     $97 = $8;
     $98 = ($96|0)<($97|0);
     if ($98) {
      $99 = $4;
      $100 = $9;
      $101 = (+($100|0));
      $102 = $99 >= $101;
      if ($102) {
       $103 = $4;
       $104 = $8;
       $105 = (+($104|0));
       $106 = $103 <= $105;
       if ($106) {
        label = 24;
        break;
       }
      }
     }
    }
    $108 = $7;
    $109 = (($108) + 1)|0;
    $7 = $109;
   }
   if ((label|0) == 20) {
    $95 = $7;
    $3 = $95;
    $110 = $3;
    STACKTOP = sp;return ($110|0);
   }
   else if ((label|0) == 24) {
    $107 = $7;
    $3 = $107;
    $110 = $3;
    STACKTOP = sp;return ($110|0);
   }
  }
 } while(0);
 $3 = -1;
 $110 = $3;
 STACKTOP = sp;return ($110|0);
}
function _cmsReverseToneCurve($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = (_cmsReverseToneCurveEx(4096,$4)|0);
  STACKTOP = sp;return ($5|0);
 } else {
  ___assert_fail((25120|0),(24613|0),1080,(25144|0));
  // unreachable;
 }
 return (0)|0;
}
function _cmsIsToneCurveLinear($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((24910|0),(24613|0),1267,(25164|0));
  // unreachable;
 }
 $3 = 0;
 while(1) {
  $7 = $3;
  $8 = $2;
  $9 = ((($8)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   label = 8;
   break;
  }
  $12 = $2;
  $13 = ((($12)) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $3;
  $16 = (($14) + ($15<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = $3;
  $20 = (+($19|0));
  $21 = $2;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (__cmsQuantizeVal($20,$23)|0);
  $25 = $24&65535;
  $26 = (($18) - ($25))|0;
  $27 = (Math_abs(($26|0))|0);
  $4 = $27;
  $28 = $4;
  $29 = ($28|0)>(15);
  if ($29) {
   label = 6;
   break;
  }
  $30 = $3;
  $31 = (($30) + 1)|0;
  $3 = $31;
 }
 if ((label|0) == 6) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 8) {
  $1 = 1;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _cmsIsToneCurveMonotonic($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((24643|0),(24613|0),1286,(25185|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $3 = $11;
 $12 = $3;
 $13 = ($12>>>0)<(2);
 if ($13) {
  $1 = 1;
  $73 = $1;
  STACKTOP = sp;return ($73|0);
 }
 $14 = $2;
 $15 = (_cmsIsToneCurveDescending($14)|0);
 $6 = $15;
 $16 = $6;
 $17 = ($16|0)!=(0);
 $18 = $2;
 $19 = ((($18)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 L8: do {
  if ($17) {
   $21 = HEAP16[$20>>1]|0;
   $22 = $21&65535;
   $5 = $22;
   $4 = 1;
   while(1) {
    $23 = $4;
    $24 = $3;
    $25 = ($23|0)<($24|0);
    if (!($25)) {
     break L8;
    }
    $26 = $2;
    $27 = ((($26)) + 24|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = $4;
    $30 = (($28) + ($29<<1)|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = $31&65535;
    $33 = $5;
    $34 = (($32) - ($33))|0;
    $35 = ($34|0)>(2);
    if ($35) {
     break;
    }
    $36 = $2;
    $37 = ((($36)) + 24|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $4;
    $40 = (($38) + ($39<<1)|0);
    $41 = HEAP16[$40>>1]|0;
    $42 = $41&65535;
    $5 = $42;
    $43 = $4;
    $44 = (($43) + 1)|0;
    $4 = $44;
   }
   $1 = 0;
   $73 = $1;
   STACKTOP = sp;return ($73|0);
  } else {
   $45 = $3;
   $46 = (($45) - 1)|0;
   $47 = (($20) + ($46<<1)|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = $48&65535;
   $5 = $49;
   $50 = $3;
   $51 = (($50) - 2)|0;
   $4 = $51;
   while(1) {
    $52 = $4;
    $53 = ($52|0)>=(0);
    if (!($53)) {
     break L8;
    }
    $54 = $2;
    $55 = ((($54)) + 24|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $4;
    $58 = (($56) + ($57<<1)|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = $59&65535;
    $61 = $5;
    $62 = (($60) - ($61))|0;
    $63 = ($62|0)>(2);
    if ($63) {
     break;
    }
    $64 = $2;
    $65 = ((($64)) + 24|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $4;
    $68 = (($66) + ($67<<1)|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = $69&65535;
    $5 = $70;
    $71 = $4;
    $72 = (($71) + -1)|0;
    $4 = $72;
   }
   $1 = 0;
   $73 = $1;
   STACKTOP = sp;return ($73|0);
  }
 } while(0);
 $1 = 1;
 $73 = $1;
 STACKTOP = sp;return ($73|0);
}
function _cmsGetToneCurveParametricType($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  ___assert_fail((24643|0),(24613|0),1344,(25209|0));
  // unreachable;
 }
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(1);
 if ($8) {
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __cmsChain2Lab($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5184|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5184|0);
 $21 = sp + 4104|0;
 $22 = sp + 3080|0;
 $23 = sp;
 $24 = sp + 2056|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $26 = $11;
 $27 = ($26>>>0)>(254);
 if ($27) {
  $9 = 0;
  $79 = $9;
  STACKTOP = sp;return ($79|0);
 }
 $28 = $10;
 $29 = (_cmsCreateLab4ProfileTHR($28,0)|0);
 $20 = $29;
 $30 = $20;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $9 = 0;
  $79 = $9;
  STACKTOP = sp;return ($79|0);
 }
 $25 = 0;
 while(1) {
  $32 = $25;
  $33 = $11;
  $34 = ($32>>>0)<($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $15;
  $36 = $25;
  $37 = (($35) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $25;
  $40 = (($21) + ($39<<2)|0);
  HEAP32[$40>>2] = $38;
  $41 = $16;
  $42 = $25;
  $43 = (($41) + ($42<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $25;
  $46 = (($22) + ($45<<2)|0);
  HEAP32[$46>>2] = $44;
  $47 = $17;
  $48 = $25;
  $49 = (($47) + ($48<<3)|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $25;
  $52 = (($23) + ($51<<3)|0);
  HEAPF64[$52>>3] = $50;
  $53 = $14;
  $54 = $25;
  $55 = (($53) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $25;
  $58 = (($24) + ($57<<2)|0);
  HEAP32[$58>>2] = $56;
  $59 = $25;
  $60 = (($59) + 1)|0;
  $25 = $60;
 }
 $61 = $20;
 $62 = $11;
 $63 = (($21) + ($62<<2)|0);
 HEAP32[$63>>2] = $61;
 $64 = $11;
 $65 = (($22) + ($64<<2)|0);
 HEAP32[$65>>2] = 0;
 $66 = $11;
 $67 = (($23) + ($66<<3)|0);
 HEAPF64[$67>>3] = 1.0;
 $68 = $11;
 $69 = (($24) + ($68<<2)|0);
 HEAP32[$69>>2] = 1;
 $70 = $10;
 $71 = $11;
 $72 = (($71) + 1)|0;
 $73 = $12;
 $74 = $13;
 $75 = $18;
 $76 = (_cmsCreateExtendedTransform($70,$72,$21,$22,$24,$23,0,0,$73,$74,$75)|0);
 $19 = $76;
 $77 = $20;
 (_cmsCloseProfile($77)|0);
 $78 = $19;
 $9 = $78;
 $79 = $9;
 STACKTOP = sp;return ($79|0);
}
function __cmsBuildKToneCurve($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $20 = $13;
 $21 = HEAP32[$20>>2]|0;
 $22 = (_cmsGetColorSpace($21)|0);
 $23 = ($22|0)!=(1129142603);
 if (!($23)) {
  $24 = $13;
  $25 = $11;
  $26 = (($25) - 1)|0;
  $27 = (($24) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_cmsGetColorSpace($28)|0);
  $30 = ($29|0)!=(1129142603);
  if (!($30)) {
   $31 = $13;
   $32 = $11;
   $33 = (($32) - 1)|0;
   $34 = (($31) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_cmsGetDeviceClass($35)|0);
   $37 = ($36|0)!=(1886549106);
   if ($37) {
    $8 = 0;
    $86 = $8;
    STACKTOP = sp;return ($86|0);
   }
   $38 = $9;
   $39 = $10;
   $40 = $11;
   $41 = (($40) - 1)|0;
   $42 = $12;
   $43 = $13;
   $44 = $14;
   $45 = $15;
   $46 = $16;
   $47 = (_ComputeKToLstar($38,$39,$41,$42,$43,$44,$45,$46)|0);
   $17 = $47;
   $48 = $17;
   $49 = ($48|0)==(0|0);
   if ($49) {
    $8 = 0;
    $86 = $8;
    STACKTOP = sp;return ($86|0);
   }
   $50 = $9;
   $51 = $10;
   $52 = $12;
   $53 = $11;
   $54 = (($53) - 1)|0;
   $55 = (($52) + ($54<<2)|0);
   $56 = $13;
   $57 = $11;
   $58 = (($57) - 1)|0;
   $59 = (($56) + ($58<<2)|0);
   $60 = $14;
   $61 = $11;
   $62 = (($61) - 1)|0;
   $63 = (($60) + ($62<<2)|0);
   $64 = $15;
   $65 = $11;
   $66 = (($65) - 1)|0;
   $67 = (($64) + ($66<<3)|0);
   $68 = $16;
   $69 = (_ComputeKToLstar($50,$51,1,$55,$59,$63,$67,$68)|0);
   $18 = $69;
   $70 = $18;
   $71 = ($70|0)==(0|0);
   if ($71) {
    $72 = $17;
    _cmsFreeToneCurve($72);
    $8 = 0;
    $86 = $8;
    STACKTOP = sp;return ($86|0);
   }
   $73 = $9;
   $74 = $17;
   $75 = $18;
   $76 = $10;
   $77 = (_cmsJoinToneCurve($73,$74,$75,$76)|0);
   $19 = $77;
   $78 = $17;
   _cmsFreeToneCurve($78);
   $79 = $18;
   _cmsFreeToneCurve($79);
   $80 = $19;
   $81 = ($80|0)==(0|0);
   if ($81) {
    $8 = 0;
    $86 = $8;
    STACKTOP = sp;return ($86|0);
   }
   $82 = $19;
   $83 = (_cmsIsToneCurveMonotonic($82)|0);
   $84 = ($83|0)!=(0);
   $85 = $19;
   if ($84) {
    $8 = $85;
    $86 = $8;
    STACKTOP = sp;return ($86|0);
   } else {
    _cmsFreeToneCurve($85);
    $8 = 0;
    $86 = $8;
    STACKTOP = sp;return ($86|0);
   }
  }
 }
 $8 = 0;
 $86 = $8;
 STACKTOP = sp;return ($86|0);
}
function _ComputeKToLstar($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0;
 var $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $20 = sp;
 $21 = sp + 32|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = 0;
 $23 = $9;
 $24 = $11;
 $25 = $12;
 $26 = $13;
 $27 = $14;
 $28 = $15;
 $29 = $16;
 $30 = (__cmsChain2Lab($23,$24,4587556,4849688,$25,$26,$27,$28,$29)|0);
 $19 = $30;
 $31 = $19;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $8 = 0;
  $72 = $8;
  STACKTOP = sp;return ($72|0);
 }
 $33 = $9;
 $34 = $10;
 $35 = (__cmsCalloc($33,$34,4)|0);
 $22 = $35;
 $36 = $22;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $18 = 0;
  while(1) {
   $38 = $18;
   $39 = $10;
   $40 = ($38>>>0)<($39>>>0);
   if (!($40)) {
    break;
   }
   HEAPF32[$21>>2] = 0.0;
   $41 = ((($21)) + 4|0);
   HEAPF32[$41>>2] = 0.0;
   $42 = ((($21)) + 8|0);
   HEAPF32[$42>>2] = 0.0;
   $43 = $18;
   $44 = (+($43>>>0));
   $45 = $44 * 100.0;
   $46 = $10;
   $47 = (($46) - 1)|0;
   $48 = (+($47>>>0));
   $49 = $45 / $48;
   $50 = $49;
   $51 = ((($21)) + 12|0);
   HEAPF32[$51>>2] = $50;
   $52 = $19;
   _cmsDoTransform($52,$21,$20,1);
   $53 = +HEAPF64[$20>>3];
   $54 = $53 / 100.0;
   $55 = 1.0 - $54;
   $56 = $55;
   $57 = $22;
   $58 = $18;
   $59 = (($57) + ($58<<2)|0);
   HEAPF32[$59>>2] = $56;
   $60 = $18;
   $61 = (($60) + 1)|0;
   $18 = $61;
  }
  $62 = $9;
  $63 = $10;
  $64 = $22;
  $65 = (_cmsBuildTabulatedToneCurveFloat($62,$63,$64)|0);
  $17 = $65;
 }
 $66 = $19;
 _cmsDeleteTransform($66);
 $67 = $22;
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $69 = $9;
  $70 = $22;
  __cmsFree($69,$70);
 }
 $71 = $17;
 $8 = $71;
 $72 = $8;
 STACKTOP = sp;return ($72|0);
}
function __cmsCreateGamutCheckPipeline($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sink = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5216|0);
 $vararg_buffer = sp + 2072|0;
 $19 = sp + 2048|0;
 $24 = sp + 4128|0;
 $25 = sp + 3104|0;
 $26 = sp;
 $27 = sp + 2080|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;HEAP32[$19+12>>2]=0|0;HEAP32[$19+16>>2]=0|0;HEAP32[$19+20>>2]=0|0;
 $28 = $13;
 $29 = ($28>>>0)<=(0);
 $30 = $13;
 $31 = ($30>>>0)>(255);
 $or$cond = $29 | $31;
 $32 = $8;
 if ($or$cond) {
  $33 = $13;
  HEAP32[$vararg_buffer>>2] = $33;
  _cmsSignalError($32,2,25239,$vararg_buffer);
  $7 = 0;
  $147 = $7;
  STACKTOP = sp;return ($147|0);
 }
 $34 = (_cmsCreateLab4ProfileTHR($32,0)|0);
 $15 = $34;
 $35 = $15;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $7 = 0;
  $147 = $7;
  STACKTOP = sp;return ($147|0);
 }
 $37 = $14;
 $38 = (_cmsIsMatrixShaper($37)|0);
 $39 = ($38|0)!=(0);
 $40 = ((($19)) + 16|0);
 $$sink = $39 ? 1.0 : 5.0;
 HEAPF64[$40>>3] = $$sink;
 $23 = 0;
 while(1) {
  $41 = $23;
  $42 = $13;
  $43 = ($41>>>0)<($42>>>0);
  if (!($43)) {
   break;
  }
  $44 = $9;
  $45 = $23;
  $46 = (($44) + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $49 = (($24) + ($48<<2)|0);
  HEAP32[$49>>2] = $47;
  $50 = $10;
  $51 = $23;
  $52 = (($50) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $23;
  $55 = (($25) + ($54<<2)|0);
  HEAP32[$55>>2] = $53;
  $56 = $12;
  $57 = $23;
  $58 = (($56) + ($57<<3)|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $23;
  $61 = (($26) + ($60<<3)|0);
  HEAPF64[$61>>3] = $59;
  $62 = $11;
  $63 = $23;
  $64 = (($62) + ($63<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $23;
  $67 = (($27) + ($66<<2)|0);
  HEAP32[$67>>2] = $65;
  $68 = $23;
  $69 = (($68) + 1)|0;
  $23 = $69;
 }
 $70 = $15;
 $71 = $13;
 $72 = (($24) + ($71<<2)|0);
 HEAP32[$72>>2] = $70;
 $73 = $13;
 $74 = (($25) + ($73<<2)|0);
 HEAP32[$74>>2] = 0;
 $75 = $13;
 $76 = (($26) + ($75<<3)|0);
 HEAPF64[$76>>3] = 1.0;
 $77 = $13;
 $78 = (($27) + ($77<<2)|0);
 HEAP32[$78>>2] = 1;
 $79 = $14;
 $80 = (_cmsGetColorSpace($79)|0);
 $22 = $80;
 $81 = $22;
 $82 = (_cmsChannelsOf($81)|0);
 $20 = $82;
 $83 = $22;
 $84 = (__cmsReasonableGridpointsByColorspace($83,1024)|0);
 $21 = $84;
 $85 = $20;
 $86 = $85 << 3;
 $87 = $86 | 2;
 $18 = $87;
 $88 = $8;
 $89 = $13;
 $90 = (($89) + 1)|0;
 $91 = $18;
 $92 = (_cmsCreateExtendedTransform($88,$90,$24,$25,$27,$26,0,0,$91,4849688,64)|0);
 HEAP32[$19>>2] = $92;
 $93 = $20;
 $94 = $93 << 3;
 $95 = $94 | 2;
 $18 = $95;
 $96 = $8;
 $97 = $15;
 $98 = $14;
 $99 = $18;
 $100 = (_cmsCreateTransformTHR($96,$97,4849688,$98,$99,1,64)|0);
 $101 = ((($19)) + 4|0);
 HEAP32[$101>>2] = $100;
 $102 = $8;
 $103 = $14;
 $104 = $18;
 $105 = $15;
 $106 = (_cmsCreateTransformTHR($102,$103,$104,$105,4849688,1,64)|0);
 $107 = ((($19)) + 8|0);
 HEAP32[$107>>2] = $106;
 $108 = HEAP32[$19>>2]|0;
 $109 = ($108|0)!=(0|0);
 do {
  if ($109) {
   $110 = ((($19)) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($111|0)!=(0|0);
   if ($112) {
    $113 = ((($19)) + 8|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)!=(0|0);
    if ($115) {
     $116 = $8;
     $117 = (_cmsPipelineAlloc($116,3,1)|0);
     $16 = $117;
     $118 = $16;
     $119 = ($118|0)!=(0|0);
     if ($119) {
      $120 = $8;
      $121 = $21;
      $122 = $20;
      $123 = (_cmsStageAllocCLut16bit($120,$121,$122,1,0)|0);
      $17 = $123;
      $124 = $16;
      $125 = $17;
      $126 = (_cmsPipelineInsertStage($124,0,$125)|0);
      $127 = ($126|0)!=(0);
      if ($127) {
       $129 = $17;
       (_cmsStageSampleCLut16bit($129,292,$19,0)|0);
       break;
      } else {
       $128 = $16;
       _cmsPipelineFree($128);
       $16 = 0;
       break;
      }
     }
    } else {
     label = 15;
    }
   } else {
    label = 15;
   }
  } else {
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $16 = 0;
 }
 $130 = HEAP32[$19>>2]|0;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $132 = HEAP32[$19>>2]|0;
  _cmsDeleteTransform($132);
 }
 $133 = ((($19)) + 4|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)!=(0|0);
 if ($135) {
  $136 = ((($19)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  _cmsDeleteTransform($137);
 }
 $138 = ((($19)) + 8|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)!=(0|0);
 if ($140) {
  $141 = ((($19)) + 8|0);
  $142 = HEAP32[$141>>2]|0;
  _cmsDeleteTransform($142);
 }
 $143 = $15;
 $144 = ($143|0)!=(0|0);
 if ($144) {
  $145 = $15;
  (_cmsCloseProfile($145)|0);
 }
 $146 = $16;
 $7 = $146;
 $147 = $7;
 STACKTOP = sp;return ($147|0);
}
function _GamutSampler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink$sink$sink$sink = 0, $$sink2$sink$sink$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $7 = sp + 96|0;
 $8 = sp + 72|0;
 $9 = sp + 48|0;
 $10 = sp + 24|0;
 $11 = sp + 168|0;
 $12 = sp + 136|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $16 = $5;
 $6 = $16;
 $15 = 1.0;
 $17 = $6;
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 _cmsDoTransform($18,$19,$7,1);
 $20 = $6;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 _cmsDoTransform($22,$7,$11,1);
 $23 = $6;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 _cmsDoTransform($25,$11,$8,1);
 _memmove(($9|0),($8|0),24)|0;
 $26 = $6;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 _cmsDoTransform($28,$8,$12,1);
 $29 = $6;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 _cmsDoTransform($31,$12,$10,1);
 $32 = (+_cmsDeltaE($7,$8));
 $13 = $32;
 $33 = (+_cmsDeltaE($9,$10));
 $14 = $33;
 $34 = $13;
 $35 = $6;
 $36 = ((($35)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $34 < $37;
 if ($38) {
  $39 = $14;
  $40 = $6;
  $41 = ((($40)) + 16|0);
  $42 = +HEAPF64[$41>>3];
  $43 = $39 < $42;
  if ($43) {
   $44 = $4;
   $$sink$sink$sink$sink = 0;$$sink2$sink$sink$sink = $44;
   HEAP16[$$sink2$sink$sink$sink>>1] = $$sink$sink$sink$sink;
   STACKTOP = sp;return 1;
  }
 }
 $45 = $13;
 $46 = $6;
 $47 = ((($46)) + 16|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $45 < $48;
 if ($49) {
  $50 = $14;
  $51 = $6;
  $52 = ((($51)) + 16|0);
  $53 = +HEAPF64[$52>>3];
  $54 = $50 > $53;
  if ($54) {
   $55 = $4;
   $$sink$sink$sink$sink = 0;$$sink2$sink$sink$sink = $55;
   HEAP16[$$sink2$sink$sink$sink>>1] = $$sink$sink$sink$sink;
   STACKTOP = sp;return 1;
  }
 }
 $56 = $13;
 $57 = $6;
 $58 = ((($57)) + 16|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $56 > $59;
 if ($60) {
  $61 = $14;
  $62 = $6;
  $63 = ((($62)) + 16|0);
  $64 = +HEAPF64[$63>>3];
  $65 = $61 < $64;
  if ($65) {
   $66 = $13;
   $67 = $6;
   $68 = ((($67)) + 16|0);
   $69 = +HEAPF64[$68>>3];
   $70 = $66 - $69;
   $71 = $70 + 0.5;
   $72 = (__cmsQuickFloor_194($71)|0);
   $73 = $72&65535;
   $74 = $4;
   $$sink$sink$sink$sink = $73;$$sink2$sink$sink$sink = $74;
   HEAP16[$$sink2$sink$sink$sink>>1] = $$sink$sink$sink$sink;
   STACKTOP = sp;return 1;
  }
 }
 $75 = $14;
 $76 = $75 == 0.0;
 $77 = $13;
 if ($76) {
  $15 = $77;
 } else {
  $78 = $14;
  $79 = $77 / $78;
  $15 = $79;
 }
 $80 = $15;
 $81 = $6;
 $82 = ((($81)) + 16|0);
 $83 = +HEAPF64[$82>>3];
 $84 = $80 > $83;
 if ($84) {
  $85 = $15;
  $86 = $6;
  $87 = ((($86)) + 16|0);
  $88 = +HEAPF64[$87>>3];
  $89 = $85 - $88;
  $90 = $89 + 0.5;
  $91 = (__cmsQuickFloor_194($90)|0);
  $92 = $91&65535;
  $93 = $4;
  $$sink$sink$sink$sink = $92;$$sink2$sink$sink$sink = $93;
  HEAP16[$$sink2$sink$sink$sink>>1] = $$sink$sink$sink$sink;
  STACKTOP = sp;return 1;
 } else {
  $94 = $4;
  $$sink$sink$sink$sink = 0;$$sink2$sink$sink$sink = $94;
  HEAP16[$$sink2$sink$sink$sink>>1] = $$sink$sink$sink$sink;
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __cmsQuickFloor_194($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function _cmsDetectTAC($0) {
 $0 = $0|0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = sp + 52|0;
 $5 = sp + 16|0;
 $2 = $0;
 $8 = $2;
 $9 = (_cmsGetProfileContextID($8)|0);
 $7 = $9;
 $10 = $2;
 $11 = (_cmsGetDeviceClass($10)|0);
 $12 = ($11|0)!=(1886549106);
 if ($12) {
  $1 = 0.0;
  $45 = $1;
  STACKTOP = sp;return (+$45);
 }
 $13 = $2;
 $14 = (_cmsFormatterForColorspaceOfProfile($13,4,1)|0);
 $4 = $14;
 $15 = $4;
 $16 = $15 >>> 3;
 $17 = $16 & 15;
 HEAP32[$3>>2] = $17;
 $18 = ((($3)) + 8|0);
 HEAPF32[$18>>2] = 0.0;
 $19 = HEAP32[$3>>2]|0;
 $20 = ($19>>>0)>=(16);
 if ($20) {
  $1 = 0.0;
  $45 = $1;
  STACKTOP = sp;return (+$45);
 }
 $21 = $7;
 $22 = (_cmsCreateLab4ProfileTHR($21,0)|0);
 $6 = $22;
 $23 = $6;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $1 = 0.0;
  $45 = $1;
  STACKTOP = sp;return (+$45);
 }
 $25 = $7;
 $26 = $6;
 $27 = $2;
 $28 = $4;
 $29 = (_cmsCreateTransformTHR($25,$26,655386,$27,$28,0,320)|0);
 $30 = ((($3)) + 4|0);
 HEAP32[$30>>2] = $29;
 $31 = $6;
 (_cmsCloseProfile($31)|0);
 $32 = ((($3)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $1 = 0.0;
  $45 = $1;
  STACKTOP = sp;return (+$45);
 }
 HEAP32[$5>>2] = 6;
 $35 = ((($5)) + 4|0);
 HEAP32[$35>>2] = 74;
 $36 = ((($5)) + 8|0);
 HEAP32[$36>>2] = 74;
 $37 = (_cmsSliceSpace16(3,$5,293,$3)|0);
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $39 = ((($3)) + 8|0);
  HEAPF32[$39>>2] = 0.0;
 }
 $40 = ((($3)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 _cmsDeleteTransform($41);
 $42 = ((($3)) + 8|0);
 $43 = +HEAPF32[$42>>2];
 $44 = $43;
 $1 = $44;
 $45 = $1;
 STACKTOP = sp;return (+$45);
}
function _EstimateTAC($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $5;
 $6 = $10;
 $11 = $6;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 _cmsDoTransform($13,$14,$7,1);
 $9 = 0.0;
 $8 = 0;
 while(1) {
  $15 = $8;
  $16 = $6;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = $8;
  $20 = (($7) + ($19<<2)|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $9;
  $23 = $22 + $21;
  $9 = $23;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 $26 = $9;
 $27 = $6;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $26 > $29;
 if (!($30)) {
  STACKTOP = sp;return 1;
 }
 $31 = $9;
 $32 = $6;
 $33 = ((($32)) + 8|0);
 HEAPF32[$33>>2] = $31;
 $8 = 0;
 while(1) {
  $34 = $8;
  $35 = $6;
  $36 = HEAP32[$35>>2]|0;
  $37 = ($34>>>0)<($36>>>0);
  if (!($37)) {
   break;
  }
  $38 = $3;
  $39 = $8;
  $40 = (($38) + ($39<<1)|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = (+($41&65535));
  $43 = $6;
  $44 = ((($43)) + 12|0);
  $45 = $8;
  $46 = (($44) + ($45<<2)|0);
  HEAPF32[$46>>2] = $42;
  $47 = $8;
  $48 = (($47) + 1)|0;
  $8 = $48;
 }
 STACKTOP = sp;return 1;
}
function __cmsHalf2Float($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $1 = $0;
 $4 = $1;
 $5 = $4&65535;
 $6 = $5 >> 10;
 $3 = $6;
 $7 = $1;
 $8 = $7&65535;
 $9 = $8 & 1023;
 $10 = $3;
 $11 = (23272 + ($10<<1)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (($9) + ($13))|0;
 $15 = (4804 + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = (12996 + ($17<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($16) + ($19))|0;
 HEAP32[$2>>2] = $20;
 $21 = +HEAPF32[$2>>2];
 STACKTOP = sp;return (+$21);
}
function __cmsFloat2Half($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $1 = $0;
 $5 = $1;
 HEAPF32[$2>>2] = $5;
 $6 = HEAP32[$2>>2]|0;
 $3 = $6;
 $7 = $3;
 $8 = $7 >>> 23;
 $9 = $8 & 511;
 $4 = $9;
 $10 = $4;
 $11 = (23400 + ($10<<1)|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $3;
 $15 = $14 & 8388607;
 $16 = $4;
 $17 = (25289 + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $15 >>> $19;
 $21 = (($13) + ($20))|0;
 $22 = $21&65535;
 STACKTOP = sp;return ($22|0);
}
function __cmsSetInterpolationRoutine($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 4|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (__cmsContextGetClientChunk($8,5)|0);
 $5 = $9;
 $10 = $4;
 $11 = ((($10)) + 116|0);
 HEAP32[$11>>2] = 0;
 $12 = $5;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $4;
  $16 = ((($15)) + 116|0);
  $17 = $5;
  $18 = HEAP32[$17>>2]|0;
  $19 = $4;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $4;
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $4;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_viiii[$18 & 0]($6,$21,$24,$27);
  ;HEAP32[$16>>2]=HEAP32[$6>>2]|0;
 }
 $28 = $4;
 $29 = ((($28)) + 116|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $32 = $4;
  $33 = ((($32)) + 116|0);
  $34 = $4;
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $4;
  $38 = ((($37)) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $4;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  _DefaultInterpolatorsFactory($7,$36,$39,$42);
  ;HEAP32[$33>>2]=HEAP32[$7>>2]|0;
 }
 $43 = $4;
 $44 = ((($43)) + 116|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $2 = 0;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 } else {
  $2 = 1;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _DefaultInterpolatorsFactory($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $10 = $6;
 $11 = $10 & 1;
 $8 = $11;
 $12 = $6;
 $13 = $12 & 256;
 $9 = $13;
 ;HEAP32[$7>>2]=0|0;
 $14 = $4;
 $15 = ($14>>>0)>=(4);
 $16 = $5;
 $17 = ($16>>>0)>=(128);
 $or$cond = $15 & $17;
 if ($or$cond) {
  ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;
  STACKTOP = sp;return;
 }
 $18 = $4;
 L5: do {
  switch ($18|0) {
  case 1:  {
   $19 = $5;
   $20 = ($19|0)==(1);
   $21 = $8;
   $22 = ($21|0)!=(0);
   if ($20) {
    if ($22) {
     HEAP32[$7>>2] = 294;
     break L5;
    } else {
     HEAP32[$7>>2] = 295;
     break L5;
    }
   } else {
    if ($22) {
     HEAP32[$7>>2] = 296;
     break L5;
    } else {
     HEAP32[$7>>2] = 297;
     break L5;
    }
   }
   break;
  }
  case 2:  {
   $23 = $8;
   $24 = ($23|0)!=(0);
   if ($24) {
    HEAP32[$7>>2] = 298;
    break L5;
   } else {
    HEAP32[$7>>2] = 299;
    break L5;
   }
   break;
  }
  case 3:  {
   $25 = $9;
   $26 = ($25|0)!=(0);
   $27 = $8;
   $28 = ($27|0)!=(0);
   if ($26) {
    if ($28) {
     HEAP32[$7>>2] = 300;
     break L5;
    } else {
     HEAP32[$7>>2] = 301;
     break L5;
    }
   } else {
    if ($28) {
     HEAP32[$7>>2] = 302;
     break L5;
    } else {
     HEAP32[$7>>2] = 303;
     break L5;
    }
   }
   break;
  }
  case 4:  {
   $29 = $8;
   $30 = ($29|0)!=(0);
   if ($30) {
    HEAP32[$7>>2] = 304;
    break L5;
   } else {
    HEAP32[$7>>2] = 305;
    break L5;
   }
   break;
  }
  case 5:  {
   $31 = $8;
   $32 = ($31|0)!=(0);
   if ($32) {
    HEAP32[$7>>2] = 306;
    break L5;
   } else {
    HEAP32[$7>>2] = 307;
    break L5;
   }
   break;
  }
  case 6:  {
   $33 = $8;
   $34 = ($33|0)!=(0);
   if ($34) {
    HEAP32[$7>>2] = 308;
    break L5;
   } else {
    HEAP32[$7>>2] = 309;
    break L5;
   }
   break;
  }
  case 7:  {
   $35 = $8;
   $36 = ($35|0)!=(0);
   if ($36) {
    HEAP32[$7>>2] = 310;
    break L5;
   } else {
    HEAP32[$7>>2] = 311;
    break L5;
   }
   break;
  }
  case 8:  {
   $37 = $8;
   $38 = ($37|0)!=(0);
   if ($38) {
    HEAP32[$7>>2] = 312;
    break L5;
   } else {
    HEAP32[$7>>2] = 313;
    break L5;
   }
   break;
  }
  default: {
   HEAP32[$7>>2] = 0;
  }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$7>>2]|0;
 STACKTOP = sp;return;
}
function _LinLerp1Dfloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0.0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $7 = 0.0;
 var $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $13 = $5;
 $14 = ((($13)) + 112|0);
 $15 = HEAP32[$14>>2]|0;
 $12 = $15;
 $16 = $3;
 $17 = +HEAPF32[$16>>2];
 $18 = (+_fclamp($17));
 $8 = $18;
 $19 = $8;
 $20 = $19;
 $21 = $20 == 1.0;
 if ($21) {
  $22 = $12;
  $23 = $5;
  $24 = ((($23)) + 48|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($22) + ($25<<2)|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $4;
  $$sink = $27;$$sink2 = $28;
  HEAPF32[$$sink2>>2] = $$sink;
  STACKTOP = sp;return;
 } else {
  $29 = $5;
  $30 = ((($29)) + 48|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (+($31>>>0));
  $33 = $8;
  $34 = $33 * $32;
  $8 = $34;
  $35 = $8;
  $36 = $35;
  $37 = (+Math_floor((+$36)));
  $38 = (~~(($37)));
  $10 = $38;
  $39 = $8;
  $40 = $39;
  $41 = (+Math_ceil((+$40)));
  $42 = (~~(($41)));
  $11 = $42;
  $43 = $8;
  $44 = $10;
  $45 = (+($44|0));
  $46 = $43 - $45;
  $9 = $46;
  $47 = $12;
  $48 = $10;
  $49 = (($47) + ($48<<2)|0);
  $50 = +HEAPF32[$49>>2];
  $7 = $50;
  $51 = $12;
  $52 = $11;
  $53 = (($51) + ($52<<2)|0);
  $54 = +HEAPF32[$53>>2];
  $6 = $54;
  $55 = $7;
  $56 = $6;
  $57 = $7;
  $58 = $56 - $57;
  $59 = $9;
  $60 = $58 * $59;
  $61 = $55 + $60;
  $62 = $4;
  $$sink = $61;$$sink2 = $62;
  HEAPF32[$$sink2>>2] = $$sink;
  STACKTOP = sp;return;
 }
}
function _LinLerp1D($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $5;
 $13 = ((($12)) + 112|0);
 $14 = HEAP32[$13>>2]|0;
 $11 = $14;
 $15 = $3;
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ($17|0)==(65535);
 if ($18) {
  $19 = $11;
  $20 = $5;
  $21 = ((($20)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($19) + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $4;
  $$sink = $24;$$sink2 = $25;
  HEAP16[$$sink2>>1] = $$sink;
  STACKTOP = sp;return;
 } else {
  $26 = $5;
  $27 = ((($26)) + 48|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $3;
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = Math_imul($28, $31)|0;
  $10 = $32;
  $33 = $10;
  $34 = (__cmsToFixedDomain($33)|0);
  $10 = $34;
  $35 = $10;
  $36 = $35 >> 16;
  $8 = $36;
  $37 = $10;
  $38 = $37 & 65535;
  $9 = $38;
  $39 = $11;
  $40 = $8;
  $41 = (($39) + ($40<<1)|0);
  $42 = HEAP16[$41>>1]|0;
  $7 = $42;
  $43 = $11;
  $44 = $8;
  $45 = (($44) + 1)|0;
  $46 = (($43) + ($45<<1)|0);
  $47 = HEAP16[$46>>1]|0;
  $6 = $47;
  $48 = $9;
  $49 = $7;
  $50 = $49&65535;
  $51 = $6;
  $52 = $51&65535;
  $53 = (_LinearInterp($48,$50,$52)|0);
  $54 = $4;
  $$sink = $53;$$sink2 = $54;
  HEAP16[$$sink2>>1] = $$sink;
  STACKTOP = sp;return;
 }
}
function _Eval1InputFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $14 = $5;
 $15 = ((($14)) + 112|0);
 $16 = HEAP32[$15>>2]|0;
 $13 = $16;
 $17 = $3;
 $18 = +HEAPF32[$17>>2];
 $19 = (+_fclamp($18));
 $8 = $19;
 $20 = $8;
 $21 = $20;
 $22 = $21 == 1.0;
 if ($22) {
  $23 = $13;
  $24 = $5;
  $25 = ((($24)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($23) + ($26<<2)|0);
  $28 = +HEAPF32[$27>>2];
  $7 = $28;
  $12 = 0;
  while(1) {
   $29 = $12;
   $30 = $5;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($29>>>0)<($32>>>0);
   if (!($33)) {
    break;
   }
   $34 = $7;
   $35 = $4;
   $36 = $12;
   $37 = (($35) + ($36<<2)|0);
   HEAPF32[$37>>2] = $34;
   $38 = $12;
   $39 = (($38) + 1)|0;
   $12 = $39;
  }
  STACKTOP = sp;return;
 } else {
  $40 = $5;
  $41 = ((($40)) + 48|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (+($42>>>0));
  $44 = $8;
  $45 = $44 * $43;
  $8 = $45;
  $46 = $8;
  $47 = $46;
  $48 = (+Math_floor((+$47)));
  $49 = (~~(($48)));
  $10 = $49;
  $50 = $8;
  $51 = $50;
  $52 = (+Math_ceil((+$51)));
  $53 = (~~(($52)));
  $11 = $53;
  $54 = $8;
  $55 = $10;
  $56 = (+($55|0));
  $57 = $54 - $56;
  $9 = $57;
  $58 = $5;
  $59 = ((($58)) + 80|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $10;
  $62 = Math_imul($61, $60)|0;
  $10 = $62;
  $63 = $5;
  $64 = ((($63)) + 80|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $11;
  $67 = Math_imul($66, $65)|0;
  $11 = $67;
  $12 = 0;
  while(1) {
   $68 = $12;
   $69 = $5;
   $70 = ((($69)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($68>>>0)<($71>>>0);
   if (!($72)) {
    break;
   }
   $73 = $13;
   $74 = $10;
   $75 = $12;
   $76 = (($74) + ($75))|0;
   $77 = (($73) + ($76<<2)|0);
   $78 = +HEAPF32[$77>>2];
   $7 = $78;
   $79 = $13;
   $80 = $11;
   $81 = $12;
   $82 = (($80) + ($81))|0;
   $83 = (($79) + ($82<<2)|0);
   $84 = +HEAPF32[$83>>2];
   $6 = $84;
   $85 = $7;
   $86 = $6;
   $87 = $7;
   $88 = $86 - $87;
   $89 = $9;
   $90 = $88 * $89;
   $91 = $85 + $90;
   $92 = $4;
   $93 = $12;
   $94 = (($92) + ($93<<2)|0);
   HEAPF32[$94>>2] = $91;
   $95 = $12;
   $96 = (($95) + 1)|0;
   $12 = $96;
  }
  STACKTOP = sp;return;
 }
}
function _Eval1Input($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $15 = $5;
 $16 = ((($15)) + 112|0);
 $17 = HEAP32[$16>>2]|0;
 $14 = $17;
 $18 = $3;
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = $5;
 $22 = ((($21)) + 48|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($20, $23)|0;
 $12 = $24;
 $25 = $12;
 $26 = (__cmsToFixedDomain($25)|0);
 $6 = $26;
 $27 = $6;
 $28 = $27 >> 16;
 $7 = $28;
 $29 = $6;
 $30 = $29 & 65535;
 $31 = $30&65535;
 $32 = $31&65535;
 $9 = $32;
 $33 = $7;
 $34 = $3;
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = ($36|0)!=(65535);
 $38 = $37 ? 1 : 0;
 $39 = (($33) + ($38))|0;
 $8 = $39;
 $40 = $5;
 $41 = ((($40)) + 80|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $7;
 $44 = Math_imul($42, $43)|0;
 $10 = $44;
 $45 = $5;
 $46 = ((($45)) + 80|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $8;
 $49 = Math_imul($47, $48)|0;
 $11 = $49;
 $13 = 0;
 while(1) {
  $50 = $13;
  $51 = $5;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50>>>0)<($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = $9;
  $56 = $14;
  $57 = $10;
  $58 = $13;
  $59 = (($57) + ($58))|0;
  $60 = (($56) + ($59<<1)|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61&65535;
  $63 = $14;
  $64 = $11;
  $65 = $13;
  $66 = (($64) + ($65))|0;
  $67 = (($63) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68&65535;
  $70 = (_LinearInterp($55,$62,$69)|0);
  $71 = $4;
  $72 = $13;
  $73 = (($71) + ($72<<1)|0);
  HEAP16[$73>>1] = $70;
  $74 = $13;
  $75 = (($74) + 1)|0;
  $13 = $75;
 }
 STACKTOP = sp;return;
}
function _BilinearInterpFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $26 = $5;
 $27 = ((($26)) + 112|0);
 $28 = HEAP32[$27>>2]|0;
 $6 = $28;
 $29 = $5;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $15 = $31;
 $32 = $3;
 $33 = +HEAPF32[$32>>2];
 $34 = (+_fclamp($33));
 $35 = $5;
 $36 = ((($35)) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (+($37>>>0));
 $39 = $34 * $38;
 $7 = $39;
 $40 = $3;
 $41 = ((($40)) + 4|0);
 $42 = +HEAPF32[$41>>2];
 $43 = (+_fclamp($42));
 $44 = $5;
 $45 = ((($44)) + 48|0);
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (+($47>>>0));
 $49 = $43 * $48;
 $8 = $49;
 $50 = $7;
 $51 = $50;
 $52 = (__cmsQuickFloor_205($51)|0);
 $9 = $52;
 $53 = $7;
 $54 = $9;
 $55 = (+($54|0));
 $56 = $53 - $55;
 $17 = $56;
 $57 = $8;
 $58 = $57;
 $59 = (__cmsQuickFloor_205($58)|0);
 $10 = $59;
 $60 = $8;
 $61 = $10;
 $62 = (+($61|0));
 $63 = $60 - $62;
 $18 = $63;
 $64 = $5;
 $65 = ((($64)) + 80|0);
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = $9;
 $69 = Math_imul($67, $68)|0;
 $11 = $69;
 $70 = $11;
 $71 = $3;
 $72 = +HEAPF32[$71>>2];
 $73 = (+_fclamp($72));
 $74 = $73;
 $75 = $74 >= 1.0;
 if ($75) {
  $81 = 0;
 } else {
  $76 = $5;
  $77 = ((($76)) + 80|0);
  $78 = ((($77)) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $81 = $79;
 }
 $80 = (($70) + ($81))|0;
 $13 = $80;
 $82 = $5;
 $83 = ((($82)) + 80|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $10;
 $86 = Math_imul($84, $85)|0;
 $12 = $86;
 $87 = $12;
 $88 = $3;
 $89 = ((($88)) + 4|0);
 $90 = +HEAPF32[$89>>2];
 $91 = (+_fclamp($90));
 $92 = $91;
 $93 = $92 >= 1.0;
 if ($93) {
  $98 = 0;
 } else {
  $94 = $5;
  $95 = ((($94)) + 80|0);
  $96 = HEAP32[$95>>2]|0;
  $98 = $96;
 }
 $97 = (($87) + ($98))|0;
 $14 = $97;
 $16 = 0;
 while(1) {
  $99 = $16;
  $100 = $15;
  $101 = ($99|0)<($100|0);
  if (!($101)) {
   break;
  }
  $102 = $6;
  $103 = $11;
  $104 = $12;
  $105 = (($103) + ($104))|0;
  $106 = $16;
  $107 = (($105) + ($106))|0;
  $108 = (($102) + ($107<<2)|0);
  $109 = +HEAPF32[$108>>2];
  $19 = $109;
  $110 = $6;
  $111 = $11;
  $112 = $14;
  $113 = (($111) + ($112))|0;
  $114 = $16;
  $115 = (($113) + ($114))|0;
  $116 = (($110) + ($115<<2)|0);
  $117 = +HEAPF32[$116>>2];
  $20 = $117;
  $118 = $6;
  $119 = $13;
  $120 = $12;
  $121 = (($119) + ($120))|0;
  $122 = $16;
  $123 = (($121) + ($122))|0;
  $124 = (($118) + ($123<<2)|0);
  $125 = +HEAPF32[$124>>2];
  $21 = $125;
  $126 = $6;
  $127 = $13;
  $128 = $14;
  $129 = (($127) + ($128))|0;
  $130 = $16;
  $131 = (($129) + ($130))|0;
  $132 = (($126) + ($131<<2)|0);
  $133 = +HEAPF32[$132>>2];
  $22 = $133;
  $134 = $19;
  $135 = $21;
  $136 = $19;
  $137 = $135 - $136;
  $138 = $17;
  $139 = $137 * $138;
  $140 = $134 + $139;
  $23 = $140;
  $141 = $20;
  $142 = $22;
  $143 = $20;
  $144 = $142 - $143;
  $145 = $17;
  $146 = $144 * $145;
  $147 = $141 + $146;
  $24 = $147;
  $148 = $23;
  $149 = $24;
  $150 = $23;
  $151 = $149 - $150;
  $152 = $18;
  $153 = $151 * $152;
  $154 = $148 + $153;
  $25 = $154;
  $155 = $25;
  $156 = $4;
  $157 = $16;
  $158 = (($156) + ($157<<2)|0);
  HEAPF32[$158>>2] = $155;
  $159 = $16;
  $160 = (($159) + 1)|0;
  $16 = $160;
 }
 STACKTOP = sp;return;
}
function _BilinearInterp16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $26 = $5;
 $27 = ((($26)) + 112|0);
 $28 = HEAP32[$27>>2]|0;
 $6 = $28;
 $29 = $5;
 $30 = ((($29)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $8 = $31;
 $32 = $3;
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = $5;
 $36 = ((($35)) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = Math_imul($34, $37)|0;
 $39 = (__cmsToFixedDomain($38)|0);
 $9 = $39;
 $40 = $9;
 $41 = $40 >> 16;
 $13 = $41;
 $42 = $9;
 $43 = $42 & 65535;
 $11 = $43;
 $44 = $3;
 $45 = ((($44)) + 2|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = $5;
 $49 = ((($48)) + 48|0);
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = Math_imul($47, $51)|0;
 $53 = (__cmsToFixedDomain($52)|0);
 $10 = $53;
 $54 = $10;
 $55 = $54 >> 16;
 $14 = $55;
 $56 = $10;
 $57 = $56 & 65535;
 $12 = $57;
 $58 = $5;
 $59 = ((($58)) + 80|0);
 $60 = ((($59)) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $13;
 $63 = Math_imul($61, $62)|0;
 $15 = $63;
 $64 = $15;
 $65 = $3;
 $66 = HEAP16[$65>>1]|0;
 $67 = $66&65535;
 $68 = ($67|0)==(65535);
 if ($68) {
  $74 = 0;
 } else {
  $69 = $5;
  $70 = ((($69)) + 80|0);
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $74 = $72;
 }
 $73 = (($64) + ($74))|0;
 $16 = $73;
 $75 = $5;
 $76 = ((($75)) + 80|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $14;
 $79 = Math_imul($77, $78)|0;
 $17 = $79;
 $80 = $17;
 $81 = $3;
 $82 = ((($81)) + 2|0);
 $83 = HEAP16[$82>>1]|0;
 $84 = $83&65535;
 $85 = ($84|0)==(65535);
 if ($85) {
  $90 = 0;
 } else {
  $86 = $5;
  $87 = ((($86)) + 80|0);
  $88 = HEAP32[$87>>2]|0;
  $90 = $88;
 }
 $89 = (($80) + ($90))|0;
 $18 = $89;
 $7 = 0;
 while(1) {
  $91 = $7;
  $92 = $8;
  $93 = ($91|0)<($92|0);
  if (!($93)) {
   break;
  }
  $94 = $6;
  $95 = $15;
  $96 = $17;
  $97 = (($95) + ($96))|0;
  $98 = $7;
  $99 = (($97) + ($98))|0;
  $100 = (($94) + ($99<<1)|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101&65535;
  $19 = $102;
  $103 = $6;
  $104 = $15;
  $105 = $18;
  $106 = (($104) + ($105))|0;
  $107 = $7;
  $108 = (($106) + ($107))|0;
  $109 = (($103) + ($108<<1)|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110&65535;
  $20 = $111;
  $112 = $6;
  $113 = $16;
  $114 = $17;
  $115 = (($113) + ($114))|0;
  $116 = $7;
  $117 = (($115) + ($116))|0;
  $118 = (($112) + ($117<<1)|0);
  $119 = HEAP16[$118>>1]|0;
  $120 = $119&65535;
  $21 = $120;
  $121 = $6;
  $122 = $16;
  $123 = $18;
  $124 = (($122) + ($123))|0;
  $125 = $7;
  $126 = (($124) + ($125))|0;
  $127 = (($121) + ($126<<1)|0);
  $128 = HEAP16[$127>>1]|0;
  $129 = $128&65535;
  $22 = $129;
  $130 = $19;
  $131 = $21;
  $132 = $19;
  $133 = (($131) - ($132))|0;
  $134 = $11;
  $135 = Math_imul($133, $134)|0;
  $136 = (($135) + 32768)|0;
  $137 = $136 >> 16;
  $138 = (($130) + ($137))|0;
  $139 = $138&65535;
  $140 = $139&65535;
  $23 = $140;
  $141 = $20;
  $142 = $22;
  $143 = $20;
  $144 = (($142) - ($143))|0;
  $145 = $11;
  $146 = Math_imul($144, $145)|0;
  $147 = (($146) + 32768)|0;
  $148 = $147 >> 16;
  $149 = (($141) + ($148))|0;
  $150 = $149&65535;
  $151 = $150&65535;
  $24 = $151;
  $152 = $23;
  $153 = $24;
  $154 = $23;
  $155 = (($153) - ($154))|0;
  $156 = $12;
  $157 = Math_imul($155, $156)|0;
  $158 = (($157) + 32768)|0;
  $159 = $158 >> 16;
  $160 = (($152) + ($159))|0;
  $161 = $160&65535;
  $162 = $161&65535;
  $25 = $162;
  $163 = $25;
  $164 = $163&65535;
  $165 = $4;
  $166 = $7;
  $167 = (($165) + ($166<<1)|0);
  HEAP16[$167>>1] = $164;
  $168 = $7;
  $169 = (($168) + 1)|0;
  $7 = $169;
 }
 STACKTOP = sp;return;
}
function _TrilinearInterpFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0.0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0;
 var $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0.0, $260 = 0.0, $261 = 0.0, $262 = 0.0;
 var $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0;
 var $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0;
 var $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $39 = $5;
 $40 = ((($39)) + 112|0);
 $41 = HEAP32[$40>>2]|0;
 $6 = $41;
 $42 = $5;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $19 = $44;
 $45 = $3;
 $46 = +HEAPF32[$45>>2];
 $47 = (+_fclamp($46));
 $48 = $5;
 $49 = ((($48)) + 48|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (+($50>>>0));
 $52 = $47 * $51;
 $7 = $52;
 $53 = $3;
 $54 = ((($53)) + 4|0);
 $55 = +HEAPF32[$54>>2];
 $56 = (+_fclamp($55));
 $57 = $5;
 $58 = ((($57)) + 48|0);
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (+($60>>>0));
 $62 = $56 * $61;
 $8 = $62;
 $63 = $3;
 $64 = ((($63)) + 8|0);
 $65 = +HEAPF32[$64>>2];
 $66 = (+_fclamp($65));
 $67 = $5;
 $68 = ((($67)) + 48|0);
 $69 = ((($68)) + 8|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (+($70>>>0));
 $72 = $66 * $71;
 $9 = $72;
 $73 = $7;
 $74 = $73;
 $75 = (+Math_floor((+$74)));
 $76 = (~~(($75)));
 $10 = $76;
 $77 = $7;
 $78 = $10;
 $79 = (+($78|0));
 $80 = $77 - $79;
 $21 = $80;
 $81 = $8;
 $82 = $81;
 $83 = (+Math_floor((+$82)));
 $84 = (~~(($83)));
 $11 = $84;
 $85 = $8;
 $86 = $11;
 $87 = (+($86|0));
 $88 = $85 - $87;
 $22 = $88;
 $89 = $9;
 $90 = $89;
 $91 = (+Math_floor((+$90)));
 $92 = (~~(($91)));
 $12 = $92;
 $93 = $9;
 $94 = $12;
 $95 = (+($94|0));
 $96 = $93 - $95;
 $23 = $96;
 $97 = $5;
 $98 = ((($97)) + 80|0);
 $99 = ((($98)) + 8|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $10;
 $102 = Math_imul($100, $101)|0;
 $13 = $102;
 $103 = $13;
 $104 = $3;
 $105 = +HEAPF32[$104>>2];
 $106 = (+_fclamp($105));
 $107 = $106;
 $108 = $107 >= 1.0;
 if ($108) {
  $114 = 0;
 } else {
  $109 = $5;
  $110 = ((($109)) + 80|0);
  $111 = ((($110)) + 8|0);
  $112 = HEAP32[$111>>2]|0;
  $114 = $112;
 }
 $113 = (($103) + ($114))|0;
 $16 = $113;
 $115 = $5;
 $116 = ((($115)) + 80|0);
 $117 = ((($116)) + 4|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = $11;
 $120 = Math_imul($118, $119)|0;
 $14 = $120;
 $121 = $14;
 $122 = $3;
 $123 = ((($122)) + 4|0);
 $124 = +HEAPF32[$123>>2];
 $125 = (+_fclamp($124));
 $126 = $125;
 $127 = $126 >= 1.0;
 if ($127) {
  $133 = 0;
 } else {
  $128 = $5;
  $129 = ((($128)) + 80|0);
  $130 = ((($129)) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $133 = $131;
 }
 $132 = (($121) + ($133))|0;
 $17 = $132;
 $134 = $5;
 $135 = ((($134)) + 80|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = $12;
 $138 = Math_imul($136, $137)|0;
 $15 = $138;
 $139 = $15;
 $140 = $3;
 $141 = ((($140)) + 8|0);
 $142 = +HEAPF32[$141>>2];
 $143 = (+_fclamp($142));
 $144 = $143;
 $145 = $144 >= 1.0;
 if ($145) {
  $150 = 0;
 } else {
  $146 = $5;
  $147 = ((($146)) + 80|0);
  $148 = HEAP32[$147>>2]|0;
  $150 = $148;
 }
 $149 = (($139) + ($150))|0;
 $18 = $149;
 $20 = 0;
 while(1) {
  $151 = $20;
  $152 = $19;
  $153 = ($151|0)<($152|0);
  if (!($153)) {
   break;
  }
  $154 = $6;
  $155 = $13;
  $156 = $14;
  $157 = (($155) + ($156))|0;
  $158 = $15;
  $159 = (($157) + ($158))|0;
  $160 = $20;
  $161 = (($159) + ($160))|0;
  $162 = (($154) + ($161<<2)|0);
  $163 = +HEAPF32[$162>>2];
  $24 = $163;
  $164 = $6;
  $165 = $13;
  $166 = $14;
  $167 = (($165) + ($166))|0;
  $168 = $18;
  $169 = (($167) + ($168))|0;
  $170 = $20;
  $171 = (($169) + ($170))|0;
  $172 = (($164) + ($171<<2)|0);
  $173 = +HEAPF32[$172>>2];
  $25 = $173;
  $174 = $6;
  $175 = $13;
  $176 = $17;
  $177 = (($175) + ($176))|0;
  $178 = $15;
  $179 = (($177) + ($178))|0;
  $180 = $20;
  $181 = (($179) + ($180))|0;
  $182 = (($174) + ($181<<2)|0);
  $183 = +HEAPF32[$182>>2];
  $26 = $183;
  $184 = $6;
  $185 = $13;
  $186 = $17;
  $187 = (($185) + ($186))|0;
  $188 = $18;
  $189 = (($187) + ($188))|0;
  $190 = $20;
  $191 = (($189) + ($190))|0;
  $192 = (($184) + ($191<<2)|0);
  $193 = +HEAPF32[$192>>2];
  $27 = $193;
  $194 = $6;
  $195 = $16;
  $196 = $14;
  $197 = (($195) + ($196))|0;
  $198 = $15;
  $199 = (($197) + ($198))|0;
  $200 = $20;
  $201 = (($199) + ($200))|0;
  $202 = (($194) + ($201<<2)|0);
  $203 = +HEAPF32[$202>>2];
  $28 = $203;
  $204 = $6;
  $205 = $16;
  $206 = $14;
  $207 = (($205) + ($206))|0;
  $208 = $18;
  $209 = (($207) + ($208))|0;
  $210 = $20;
  $211 = (($209) + ($210))|0;
  $212 = (($204) + ($211<<2)|0);
  $213 = +HEAPF32[$212>>2];
  $29 = $213;
  $214 = $6;
  $215 = $16;
  $216 = $17;
  $217 = (($215) + ($216))|0;
  $218 = $15;
  $219 = (($217) + ($218))|0;
  $220 = $20;
  $221 = (($219) + ($220))|0;
  $222 = (($214) + ($221<<2)|0);
  $223 = +HEAPF32[$222>>2];
  $30 = $223;
  $224 = $6;
  $225 = $16;
  $226 = $17;
  $227 = (($225) + ($226))|0;
  $228 = $18;
  $229 = (($227) + ($228))|0;
  $230 = $20;
  $231 = (($229) + ($230))|0;
  $232 = (($224) + ($231<<2)|0);
  $233 = +HEAPF32[$232>>2];
  $31 = $233;
  $234 = $24;
  $235 = $28;
  $236 = $24;
  $237 = $235 - $236;
  $238 = $21;
  $239 = $237 * $238;
  $240 = $234 + $239;
  $32 = $240;
  $241 = $25;
  $242 = $29;
  $243 = $25;
  $244 = $242 - $243;
  $245 = $21;
  $246 = $244 * $245;
  $247 = $241 + $246;
  $33 = $247;
  $248 = $26;
  $249 = $30;
  $250 = $26;
  $251 = $249 - $250;
  $252 = $21;
  $253 = $251 * $252;
  $254 = $248 + $253;
  $34 = $254;
  $255 = $27;
  $256 = $31;
  $257 = $27;
  $258 = $256 - $257;
  $259 = $21;
  $260 = $258 * $259;
  $261 = $255 + $260;
  $35 = $261;
  $262 = $32;
  $263 = $34;
  $264 = $32;
  $265 = $263 - $264;
  $266 = $22;
  $267 = $265 * $266;
  $268 = $262 + $267;
  $36 = $268;
  $269 = $33;
  $270 = $35;
  $271 = $33;
  $272 = $270 - $271;
  $273 = $22;
  $274 = $272 * $273;
  $275 = $269 + $274;
  $37 = $275;
  $276 = $36;
  $277 = $37;
  $278 = $36;
  $279 = $277 - $278;
  $280 = $23;
  $281 = $279 * $280;
  $282 = $276 + $281;
  $38 = $282;
  $283 = $38;
  $284 = $4;
  $285 = $20;
  $286 = (($284) + ($285<<2)|0);
  HEAPF32[$286>>2] = $283;
  $287 = $20;
  $288 = (($287) + 1)|0;
  $20 = $288;
 }
 STACKTOP = sp;return;
}
function _TrilinearInterp16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $39 = $5;
 $40 = ((($39)) + 112|0);
 $41 = HEAP32[$40>>2]|0;
 $6 = $41;
 $42 = $5;
 $43 = ((($42)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $8 = $44;
 $45 = $3;
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = $5;
 $49 = ((($48)) + 48|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = Math_imul($47, $50)|0;
 $52 = (__cmsToFixedDomain($51)|0);
 $9 = $52;
 $53 = $9;
 $54 = $53 >> 16;
 $15 = $54;
 $55 = $9;
 $56 = $55 & 65535;
 $12 = $56;
 $57 = $3;
 $58 = ((($57)) + 2|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59&65535;
 $61 = $5;
 $62 = ((($61)) + 48|0);
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = Math_imul($60, $64)|0;
 $66 = (__cmsToFixedDomain($65)|0);
 $10 = $66;
 $67 = $10;
 $68 = $67 >> 16;
 $16 = $68;
 $69 = $10;
 $70 = $69 & 65535;
 $13 = $70;
 $71 = $3;
 $72 = ((($71)) + 4|0);
 $73 = HEAP16[$72>>1]|0;
 $74 = $73&65535;
 $75 = $5;
 $76 = ((($75)) + 48|0);
 $77 = ((($76)) + 8|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = Math_imul($74, $78)|0;
 $80 = (__cmsToFixedDomain($79)|0);
 $11 = $80;
 $81 = $11;
 $82 = $81 >> 16;
 $17 = $82;
 $83 = $11;
 $84 = $83 & 65535;
 $14 = $84;
 $85 = $5;
 $86 = ((($85)) + 80|0);
 $87 = ((($86)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $15;
 $90 = Math_imul($88, $89)|0;
 $18 = $90;
 $91 = $18;
 $92 = $3;
 $93 = HEAP16[$92>>1]|0;
 $94 = $93&65535;
 $95 = ($94|0)==(65535);
 if ($95) {
  $101 = 0;
 } else {
  $96 = $5;
  $97 = ((($96)) + 80|0);
  $98 = ((($97)) + 8|0);
  $99 = HEAP32[$98>>2]|0;
  $101 = $99;
 }
 $100 = (($91) + ($101))|0;
 $19 = $100;
 $102 = $5;
 $103 = ((($102)) + 80|0);
 $104 = ((($103)) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $16;
 $107 = Math_imul($105, $106)|0;
 $20 = $107;
 $108 = $20;
 $109 = $3;
 $110 = ((($109)) + 2|0);
 $111 = HEAP16[$110>>1]|0;
 $112 = $111&65535;
 $113 = ($112|0)==(65535);
 if ($113) {
  $119 = 0;
 } else {
  $114 = $5;
  $115 = ((($114)) + 80|0);
  $116 = ((($115)) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $119 = $117;
 }
 $118 = (($108) + ($119))|0;
 $21 = $118;
 $120 = $5;
 $121 = ((($120)) + 80|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $17;
 $124 = Math_imul($122, $123)|0;
 $22 = $124;
 $125 = $22;
 $126 = $3;
 $127 = ((($126)) + 4|0);
 $128 = HEAP16[$127>>1]|0;
 $129 = $128&65535;
 $130 = ($129|0)==(65535);
 if ($130) {
  $135 = 0;
 } else {
  $131 = $5;
  $132 = ((($131)) + 80|0);
  $133 = HEAP32[$132>>2]|0;
  $135 = $133;
 }
 $134 = (($125) + ($135))|0;
 $23 = $134;
 $7 = 0;
 while(1) {
  $136 = $7;
  $137 = $8;
  $138 = ($136|0)<($137|0);
  if (!($138)) {
   break;
  }
  $139 = $6;
  $140 = $18;
  $141 = $20;
  $142 = (($140) + ($141))|0;
  $143 = $22;
  $144 = (($142) + ($143))|0;
  $145 = $7;
  $146 = (($144) + ($145))|0;
  $147 = (($139) + ($146<<1)|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148&65535;
  $24 = $149;
  $150 = $6;
  $151 = $18;
  $152 = $20;
  $153 = (($151) + ($152))|0;
  $154 = $23;
  $155 = (($153) + ($154))|0;
  $156 = $7;
  $157 = (($155) + ($156))|0;
  $158 = (($150) + ($157<<1)|0);
  $159 = HEAP16[$158>>1]|0;
  $160 = $159&65535;
  $25 = $160;
  $161 = $6;
  $162 = $18;
  $163 = $21;
  $164 = (($162) + ($163))|0;
  $165 = $22;
  $166 = (($164) + ($165))|0;
  $167 = $7;
  $168 = (($166) + ($167))|0;
  $169 = (($161) + ($168<<1)|0);
  $170 = HEAP16[$169>>1]|0;
  $171 = $170&65535;
  $26 = $171;
  $172 = $6;
  $173 = $18;
  $174 = $21;
  $175 = (($173) + ($174))|0;
  $176 = $23;
  $177 = (($175) + ($176))|0;
  $178 = $7;
  $179 = (($177) + ($178))|0;
  $180 = (($172) + ($179<<1)|0);
  $181 = HEAP16[$180>>1]|0;
  $182 = $181&65535;
  $27 = $182;
  $183 = $6;
  $184 = $19;
  $185 = $20;
  $186 = (($184) + ($185))|0;
  $187 = $22;
  $188 = (($186) + ($187))|0;
  $189 = $7;
  $190 = (($188) + ($189))|0;
  $191 = (($183) + ($190<<1)|0);
  $192 = HEAP16[$191>>1]|0;
  $193 = $192&65535;
  $28 = $193;
  $194 = $6;
  $195 = $19;
  $196 = $20;
  $197 = (($195) + ($196))|0;
  $198 = $23;
  $199 = (($197) + ($198))|0;
  $200 = $7;
  $201 = (($199) + ($200))|0;
  $202 = (($194) + ($201<<1)|0);
  $203 = HEAP16[$202>>1]|0;
  $204 = $203&65535;
  $29 = $204;
  $205 = $6;
  $206 = $19;
  $207 = $21;
  $208 = (($206) + ($207))|0;
  $209 = $22;
  $210 = (($208) + ($209))|0;
  $211 = $7;
  $212 = (($210) + ($211))|0;
  $213 = (($205) + ($212<<1)|0);
  $214 = HEAP16[$213>>1]|0;
  $215 = $214&65535;
  $30 = $215;
  $216 = $6;
  $217 = $19;
  $218 = $21;
  $219 = (($217) + ($218))|0;
  $220 = $23;
  $221 = (($219) + ($220))|0;
  $222 = $7;
  $223 = (($221) + ($222))|0;
  $224 = (($216) + ($223<<1)|0);
  $225 = HEAP16[$224>>1]|0;
  $226 = $225&65535;
  $31 = $226;
  $227 = $24;
  $228 = $28;
  $229 = $24;
  $230 = (($228) - ($229))|0;
  $231 = $12;
  $232 = Math_imul($230, $231)|0;
  $233 = (($232) + 32768)|0;
  $234 = $233 >> 16;
  $235 = (($227) + ($234))|0;
  $236 = $235&65535;
  $237 = $236&65535;
  $32 = $237;
  $238 = $25;
  $239 = $29;
  $240 = $25;
  $241 = (($239) - ($240))|0;
  $242 = $12;
  $243 = Math_imul($241, $242)|0;
  $244 = (($243) + 32768)|0;
  $245 = $244 >> 16;
  $246 = (($238) + ($245))|0;
  $247 = $246&65535;
  $248 = $247&65535;
  $33 = $248;
  $249 = $26;
  $250 = $30;
  $251 = $26;
  $252 = (($250) - ($251))|0;
  $253 = $12;
  $254 = Math_imul($252, $253)|0;
  $255 = (($254) + 32768)|0;
  $256 = $255 >> 16;
  $257 = (($249) + ($256))|0;
  $258 = $257&65535;
  $259 = $258&65535;
  $34 = $259;
  $260 = $27;
  $261 = $31;
  $262 = $27;
  $263 = (($261) - ($262))|0;
  $264 = $12;
  $265 = Math_imul($263, $264)|0;
  $266 = (($265) + 32768)|0;
  $267 = $266 >> 16;
  $268 = (($260) + ($267))|0;
  $269 = $268&65535;
  $270 = $269&65535;
  $35 = $270;
  $271 = $32;
  $272 = $34;
  $273 = $32;
  $274 = (($272) - ($273))|0;
  $275 = $13;
  $276 = Math_imul($274, $275)|0;
  $277 = (($276) + 32768)|0;
  $278 = $277 >> 16;
  $279 = (($271) + ($278))|0;
  $280 = $279&65535;
  $281 = $280&65535;
  $36 = $281;
  $282 = $33;
  $283 = $35;
  $284 = $33;
  $285 = (($283) - ($284))|0;
  $286 = $13;
  $287 = Math_imul($285, $286)|0;
  $288 = (($287) + 32768)|0;
  $289 = $288 >> 16;
  $290 = (($282) + ($289))|0;
  $291 = $290&65535;
  $292 = $291&65535;
  $37 = $292;
  $293 = $36;
  $294 = $37;
  $295 = $36;
  $296 = (($294) - ($295))|0;
  $297 = $14;
  $298 = Math_imul($296, $297)|0;
  $299 = (($298) + 32768)|0;
  $300 = $299 >> 16;
  $301 = (($293) + ($300))|0;
  $302 = $301&65535;
  $303 = $302&65535;
  $38 = $303;
  $304 = $38;
  $305 = $304&65535;
  $306 = $4;
  $307 = $7;
  $308 = (($306) + ($307<<1)|0);
  HEAP16[$308>>1] = $305;
  $309 = $7;
  $310 = (($309) + 1)|0;
  $7 = $310;
 }
 STACKTOP = sp;return;
}
function _TetrahedralInterpFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0.0;
 var $154 = 0.0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0;
 var $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0.0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0.0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0.0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0.0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0.0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0.0, $334 = 0.0;
 var $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0.0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0.0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0;
 var $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0.0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0.0, $409 = 0, $41 = 0.0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0.0, $440 = 0, $441 = 0.0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0.0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0.0, $479 = 0.0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0.0, $514 = 0.0;
 var $515 = 0.0, $516 = 0.0, $517 = 0.0, $518 = 0.0, $519 = 0.0, $52 = 0, $520 = 0.0, $521 = 0.0, $522 = 0.0, $523 = 0.0, $524 = 0.0, $525 = 0.0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $54 = 0.0, $55 = 0.0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0;
 var $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $28 = $5;
 $29 = ((($28)) + 112|0);
 $30 = HEAP32[$29>>2]|0;
 $6 = $30;
 $23 = 0.0;
 $24 = 0.0;
 $25 = 0.0;
 $31 = $5;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $27 = $33;
 $34 = $3;
 $35 = +HEAPF32[$34>>2];
 $36 = (+_fclamp($35));
 $37 = $5;
 $38 = ((($37)) + 48|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (+($39>>>0));
 $41 = $36 * $40;
 $7 = $41;
 $42 = $3;
 $43 = ((($42)) + 4|0);
 $44 = +HEAPF32[$43>>2];
 $45 = (+_fclamp($44));
 $46 = $5;
 $47 = ((($46)) + 48|0);
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (+($49>>>0));
 $51 = $45 * $50;
 $8 = $51;
 $52 = $3;
 $53 = ((($52)) + 8|0);
 $54 = +HEAPF32[$53>>2];
 $55 = (+_fclamp($54));
 $56 = $5;
 $57 = ((($56)) + 48|0);
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (+($59>>>0));
 $61 = $55 * $60;
 $9 = $61;
 $62 = $7;
 $63 = $62;
 $64 = (+Math_floor((+$63)));
 $65 = (~~(($64)));
 $10 = $65;
 $66 = $7;
 $67 = $10;
 $68 = (+($67|0));
 $69 = $66 - $68;
 $19 = $69;
 $70 = $8;
 $71 = $70;
 $72 = (+Math_floor((+$71)));
 $73 = (~~(($72)));
 $11 = $73;
 $74 = $8;
 $75 = $11;
 $76 = (+($75|0));
 $77 = $74 - $76;
 $20 = $77;
 $78 = $9;
 $79 = $78;
 $80 = (+Math_floor((+$79)));
 $81 = (~~(($80)));
 $12 = $81;
 $82 = $9;
 $83 = $12;
 $84 = (+($83|0));
 $85 = $82 - $84;
 $21 = $85;
 $86 = $5;
 $87 = ((($86)) + 80|0);
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $10;
 $91 = Math_imul($89, $90)|0;
 $13 = $91;
 $92 = $13;
 $93 = $3;
 $94 = +HEAPF32[$93>>2];
 $95 = (+_fclamp($94));
 $96 = $95;
 $97 = $96 >= 1.0;
 if ($97) {
  $103 = 0;
 } else {
  $98 = $5;
  $99 = ((($98)) + 80|0);
  $100 = ((($99)) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  $103 = $101;
 }
 $102 = (($92) + ($103))|0;
 $16 = $102;
 $104 = $5;
 $105 = ((($104)) + 80|0);
 $106 = ((($105)) + 4|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $11;
 $109 = Math_imul($107, $108)|0;
 $14 = $109;
 $110 = $14;
 $111 = $3;
 $112 = ((($111)) + 4|0);
 $113 = +HEAPF32[$112>>2];
 $114 = (+_fclamp($113));
 $115 = $114;
 $116 = $115 >= 1.0;
 if ($116) {
  $122 = 0;
 } else {
  $117 = $5;
  $118 = ((($117)) + 80|0);
  $119 = ((($118)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $122 = $120;
 }
 $121 = (($110) + ($122))|0;
 $17 = $121;
 $123 = $5;
 $124 = ((($123)) + 80|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $12;
 $127 = Math_imul($125, $126)|0;
 $15 = $127;
 $128 = $15;
 $129 = $3;
 $130 = ((($129)) + 8|0);
 $131 = +HEAPF32[$130>>2];
 $132 = (+_fclamp($131));
 $133 = $132;
 $134 = $133 >= 1.0;
 if ($134) {
  $139 = 0;
 } else {
  $135 = $5;
  $136 = ((($135)) + 80|0);
  $137 = HEAP32[$136>>2]|0;
  $139 = $137;
 }
 $138 = (($128) + ($139))|0;
 $18 = $138;
 $26 = 0;
 while(1) {
  $140 = $26;
  $141 = $27;
  $142 = ($140|0)<($141|0);
  if (!($142)) {
   break;
  }
  $143 = $6;
  $144 = $13;
  $145 = $14;
  $146 = (($144) + ($145))|0;
  $147 = $15;
  $148 = (($146) + ($147))|0;
  $149 = $26;
  $150 = (($148) + ($149))|0;
  $151 = (($143) + ($150<<2)|0);
  $152 = +HEAPF32[$151>>2];
  $22 = $152;
  $153 = $19;
  $154 = $20;
  $155 = $153 >= $154;
  if ($155) {
   $156 = $20;
   $157 = $21;
   $158 = $156 >= $157;
   if ($158) {
    $159 = $6;
    $160 = $16;
    $161 = $14;
    $162 = (($160) + ($161))|0;
    $163 = $15;
    $164 = (($162) + ($163))|0;
    $165 = $26;
    $166 = (($164) + ($165))|0;
    $167 = (($159) + ($166<<2)|0);
    $168 = +HEAPF32[$167>>2];
    $169 = $22;
    $170 = $168 - $169;
    $23 = $170;
    $171 = $6;
    $172 = $16;
    $173 = $17;
    $174 = (($172) + ($173))|0;
    $175 = $15;
    $176 = (($174) + ($175))|0;
    $177 = $26;
    $178 = (($176) + ($177))|0;
    $179 = (($171) + ($178<<2)|0);
    $180 = +HEAPF32[$179>>2];
    $181 = $6;
    $182 = $16;
    $183 = $14;
    $184 = (($182) + ($183))|0;
    $185 = $15;
    $186 = (($184) + ($185))|0;
    $187 = $26;
    $188 = (($186) + ($187))|0;
    $189 = (($181) + ($188<<2)|0);
    $190 = +HEAPF32[$189>>2];
    $191 = $180 - $190;
    $24 = $191;
    $192 = $6;
    $193 = $16;
    $194 = $17;
    $195 = (($193) + ($194))|0;
    $196 = $18;
    $197 = (($195) + ($196))|0;
    $198 = $26;
    $199 = (($197) + ($198))|0;
    $200 = (($192) + ($199<<2)|0);
    $201 = +HEAPF32[$200>>2];
    $202 = $6;
    $203 = $16;
    $204 = $17;
    $205 = (($203) + ($204))|0;
    $206 = $15;
    $207 = (($205) + ($206))|0;
    $208 = $26;
    $209 = (($207) + ($208))|0;
    $210 = (($202) + ($209<<2)|0);
    $211 = +HEAPF32[$210>>2];
    $212 = $201 - $211;
    $25 = $212;
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
  do {
   if ((label|0) == 12) {
    label = 0;
    $213 = $19;
    $214 = $21;
    $215 = $213 >= $214;
    if ($215) {
     $216 = $21;
     $217 = $20;
     $218 = $216 >= $217;
     if ($218) {
      $219 = $6;
      $220 = $16;
      $221 = $14;
      $222 = (($220) + ($221))|0;
      $223 = $15;
      $224 = (($222) + ($223))|0;
      $225 = $26;
      $226 = (($224) + ($225))|0;
      $227 = (($219) + ($226<<2)|0);
      $228 = +HEAPF32[$227>>2];
      $229 = $22;
      $230 = $228 - $229;
      $23 = $230;
      $231 = $6;
      $232 = $16;
      $233 = $17;
      $234 = (($232) + ($233))|0;
      $235 = $18;
      $236 = (($234) + ($235))|0;
      $237 = $26;
      $238 = (($236) + ($237))|0;
      $239 = (($231) + ($238<<2)|0);
      $240 = +HEAPF32[$239>>2];
      $241 = $6;
      $242 = $16;
      $243 = $14;
      $244 = (($242) + ($243))|0;
      $245 = $18;
      $246 = (($244) + ($245))|0;
      $247 = $26;
      $248 = (($246) + ($247))|0;
      $249 = (($241) + ($248<<2)|0);
      $250 = +HEAPF32[$249>>2];
      $251 = $240 - $250;
      $24 = $251;
      $252 = $6;
      $253 = $16;
      $254 = $14;
      $255 = (($253) + ($254))|0;
      $256 = $18;
      $257 = (($255) + ($256))|0;
      $258 = $26;
      $259 = (($257) + ($258))|0;
      $260 = (($252) + ($259<<2)|0);
      $261 = +HEAPF32[$260>>2];
      $262 = $6;
      $263 = $16;
      $264 = $14;
      $265 = (($263) + ($264))|0;
      $266 = $15;
      $267 = (($265) + ($266))|0;
      $268 = $26;
      $269 = (($267) + ($268))|0;
      $270 = (($262) + ($269<<2)|0);
      $271 = +HEAPF32[$270>>2];
      $272 = $261 - $271;
      $25 = $272;
      break;
     }
    }
    $273 = $21;
    $274 = $19;
    $275 = $273 >= $274;
    if ($275) {
     $276 = $19;
     $277 = $20;
     $278 = $276 >= $277;
     if ($278) {
      $279 = $6;
      $280 = $16;
      $281 = $14;
      $282 = (($280) + ($281))|0;
      $283 = $18;
      $284 = (($282) + ($283))|0;
      $285 = $26;
      $286 = (($284) + ($285))|0;
      $287 = (($279) + ($286<<2)|0);
      $288 = +HEAPF32[$287>>2];
      $289 = $6;
      $290 = $13;
      $291 = $14;
      $292 = (($290) + ($291))|0;
      $293 = $18;
      $294 = (($292) + ($293))|0;
      $295 = $26;
      $296 = (($294) + ($295))|0;
      $297 = (($289) + ($296<<2)|0);
      $298 = +HEAPF32[$297>>2];
      $299 = $288 - $298;
      $23 = $299;
      $300 = $6;
      $301 = $16;
      $302 = $17;
      $303 = (($301) + ($302))|0;
      $304 = $18;
      $305 = (($303) + ($304))|0;
      $306 = $26;
      $307 = (($305) + ($306))|0;
      $308 = (($300) + ($307<<2)|0);
      $309 = +HEAPF32[$308>>2];
      $310 = $6;
      $311 = $16;
      $312 = $14;
      $313 = (($311) + ($312))|0;
      $314 = $18;
      $315 = (($313) + ($314))|0;
      $316 = $26;
      $317 = (($315) + ($316))|0;
      $318 = (($310) + ($317<<2)|0);
      $319 = +HEAPF32[$318>>2];
      $320 = $309 - $319;
      $24 = $320;
      $321 = $6;
      $322 = $13;
      $323 = $14;
      $324 = (($322) + ($323))|0;
      $325 = $18;
      $326 = (($324) + ($325))|0;
      $327 = $26;
      $328 = (($326) + ($327))|0;
      $329 = (($321) + ($328<<2)|0);
      $330 = +HEAPF32[$329>>2];
      $331 = $22;
      $332 = $330 - $331;
      $25 = $332;
      break;
     }
    }
    $333 = $20;
    $334 = $19;
    $335 = $333 >= $334;
    if ($335) {
     $336 = $19;
     $337 = $21;
     $338 = $336 >= $337;
     if ($338) {
      $339 = $6;
      $340 = $16;
      $341 = $17;
      $342 = (($340) + ($341))|0;
      $343 = $15;
      $344 = (($342) + ($343))|0;
      $345 = $26;
      $346 = (($344) + ($345))|0;
      $347 = (($339) + ($346<<2)|0);
      $348 = +HEAPF32[$347>>2];
      $349 = $6;
      $350 = $13;
      $351 = $17;
      $352 = (($350) + ($351))|0;
      $353 = $15;
      $354 = (($352) + ($353))|0;
      $355 = $26;
      $356 = (($354) + ($355))|0;
      $357 = (($349) + ($356<<2)|0);
      $358 = +HEAPF32[$357>>2];
      $359 = $348 - $358;
      $23 = $359;
      $360 = $6;
      $361 = $13;
      $362 = $17;
      $363 = (($361) + ($362))|0;
      $364 = $15;
      $365 = (($363) + ($364))|0;
      $366 = $26;
      $367 = (($365) + ($366))|0;
      $368 = (($360) + ($367<<2)|0);
      $369 = +HEAPF32[$368>>2];
      $370 = $22;
      $371 = $369 - $370;
      $24 = $371;
      $372 = $6;
      $373 = $16;
      $374 = $17;
      $375 = (($373) + ($374))|0;
      $376 = $18;
      $377 = (($375) + ($376))|0;
      $378 = $26;
      $379 = (($377) + ($378))|0;
      $380 = (($372) + ($379<<2)|0);
      $381 = +HEAPF32[$380>>2];
      $382 = $6;
      $383 = $16;
      $384 = $17;
      $385 = (($383) + ($384))|0;
      $386 = $15;
      $387 = (($385) + ($386))|0;
      $388 = $26;
      $389 = (($387) + ($388))|0;
      $390 = (($382) + ($389<<2)|0);
      $391 = +HEAPF32[$390>>2];
      $392 = $381 - $391;
      $25 = $392;
      break;
     }
    }
    $393 = $20;
    $394 = $21;
    $395 = $393 >= $394;
    if ($395) {
     $396 = $21;
     $397 = $19;
     $398 = $396 >= $397;
     if ($398) {
      $399 = $6;
      $400 = $16;
      $401 = $17;
      $402 = (($400) + ($401))|0;
      $403 = $18;
      $404 = (($402) + ($403))|0;
      $405 = $26;
      $406 = (($404) + ($405))|0;
      $407 = (($399) + ($406<<2)|0);
      $408 = +HEAPF32[$407>>2];
      $409 = $6;
      $410 = $13;
      $411 = $17;
      $412 = (($410) + ($411))|0;
      $413 = $18;
      $414 = (($412) + ($413))|0;
      $415 = $26;
      $416 = (($414) + ($415))|0;
      $417 = (($409) + ($416<<2)|0);
      $418 = +HEAPF32[$417>>2];
      $419 = $408 - $418;
      $23 = $419;
      $420 = $6;
      $421 = $13;
      $422 = $17;
      $423 = (($421) + ($422))|0;
      $424 = $15;
      $425 = (($423) + ($424))|0;
      $426 = $26;
      $427 = (($425) + ($426))|0;
      $428 = (($420) + ($427<<2)|0);
      $429 = +HEAPF32[$428>>2];
      $430 = $22;
      $431 = $429 - $430;
      $24 = $431;
      $432 = $6;
      $433 = $13;
      $434 = $17;
      $435 = (($433) + ($434))|0;
      $436 = $18;
      $437 = (($435) + ($436))|0;
      $438 = $26;
      $439 = (($437) + ($438))|0;
      $440 = (($432) + ($439<<2)|0);
      $441 = +HEAPF32[$440>>2];
      $442 = $6;
      $443 = $13;
      $444 = $17;
      $445 = (($443) + ($444))|0;
      $446 = $15;
      $447 = (($445) + ($446))|0;
      $448 = $26;
      $449 = (($447) + ($448))|0;
      $450 = (($442) + ($449<<2)|0);
      $451 = +HEAPF32[$450>>2];
      $452 = $441 - $451;
      $25 = $452;
      break;
     }
    }
    $453 = $21;
    $454 = $20;
    $455 = $453 >= $454;
    if ($455) {
     $456 = $20;
     $457 = $19;
     $458 = $456 >= $457;
     if ($458) {
      $459 = $6;
      $460 = $16;
      $461 = $17;
      $462 = (($460) + ($461))|0;
      $463 = $18;
      $464 = (($462) + ($463))|0;
      $465 = $26;
      $466 = (($464) + ($465))|0;
      $467 = (($459) + ($466<<2)|0);
      $468 = +HEAPF32[$467>>2];
      $469 = $6;
      $470 = $13;
      $471 = $17;
      $472 = (($470) + ($471))|0;
      $473 = $18;
      $474 = (($472) + ($473))|0;
      $475 = $26;
      $476 = (($474) + ($475))|0;
      $477 = (($469) + ($476<<2)|0);
      $478 = +HEAPF32[$477>>2];
      $479 = $468 - $478;
      $23 = $479;
      $480 = $6;
      $481 = $13;
      $482 = $17;
      $483 = (($481) + ($482))|0;
      $484 = $18;
      $485 = (($483) + ($484))|0;
      $486 = $26;
      $487 = (($485) + ($486))|0;
      $488 = (($480) + ($487<<2)|0);
      $489 = +HEAPF32[$488>>2];
      $490 = $6;
      $491 = $13;
      $492 = $14;
      $493 = (($491) + ($492))|0;
      $494 = $18;
      $495 = (($493) + ($494))|0;
      $496 = $26;
      $497 = (($495) + ($496))|0;
      $498 = (($490) + ($497<<2)|0);
      $499 = +HEAPF32[$498>>2];
      $500 = $489 - $499;
      $24 = $500;
      $501 = $6;
      $502 = $13;
      $503 = $14;
      $504 = (($502) + ($503))|0;
      $505 = $18;
      $506 = (($504) + ($505))|0;
      $507 = $26;
      $508 = (($506) + ($507))|0;
      $509 = (($501) + ($508<<2)|0);
      $510 = +HEAPF32[$509>>2];
      $511 = $22;
      $512 = $510 - $511;
      $25 = $512;
      break;
     }
    }
    $25 = 0.0;
    $24 = 0.0;
    $23 = 0.0;
   }
  } while(0);
  $513 = $22;
  $514 = $23;
  $515 = $19;
  $516 = $514 * $515;
  $517 = $513 + $516;
  $518 = $24;
  $519 = $20;
  $520 = $518 * $519;
  $521 = $517 + $520;
  $522 = $25;
  $523 = $21;
  $524 = $522 * $523;
  $525 = $521 + $524;
  $526 = $4;
  $527 = $26;
  $528 = (($526) + ($527<<2)|0);
  HEAPF32[$528>>2] = $525;
  $529 = $26;
  $530 = (($529) + 1)|0;
  $26 = $530;
 }
 STACKTOP = sp;return;
}
function _TetrahedralInterp16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $28 = $5;
 $29 = ((($28)) + 112|0);
 $30 = HEAP32[$29>>2]|0;
 $6 = $30;
 $31 = $5;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $27 = $33;
 $34 = $3;
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = $5;
 $38 = ((($37)) + 48|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = Math_imul($36, $39)|0;
 $41 = (__cmsToFixedDomain($40)|0);
 $7 = $41;
 $42 = $3;
 $43 = ((($42)) + 2|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = $5;
 $47 = ((($46)) + 48|0);
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = Math_imul($45, $49)|0;
 $51 = (__cmsToFixedDomain($50)|0);
 $8 = $51;
 $52 = $3;
 $53 = ((($52)) + 4|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54&65535;
 $56 = $5;
 $57 = ((($56)) + 48|0);
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = Math_imul($55, $59)|0;
 $61 = (__cmsToFixedDomain($60)|0);
 $9 = $61;
 $62 = $7;
 $63 = $62 >> 16;
 $13 = $63;
 $64 = $8;
 $65 = $64 >> 16;
 $14 = $65;
 $66 = $9;
 $67 = $66 >> 16;
 $15 = $67;
 $68 = $7;
 $69 = $68 & 65535;
 $10 = $69;
 $70 = $8;
 $71 = $70 & 65535;
 $11 = $71;
 $72 = $9;
 $73 = $72 & 65535;
 $12 = $73;
 $74 = $5;
 $75 = ((($74)) + 80|0);
 $76 = ((($75)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $13;
 $79 = Math_imul($77, $78)|0;
 $21 = $79;
 $80 = $3;
 $81 = HEAP16[$80>>1]|0;
 $82 = $81&65535;
 $83 = ($82|0)==(65535);
 if ($83) {
  $88 = 0;
 } else {
  $84 = $5;
  $85 = ((($84)) + 80|0);
  $86 = ((($85)) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $87;
 }
 $22 = $88;
 $89 = $5;
 $90 = ((($89)) + 80|0);
 $91 = ((($90)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = $14;
 $94 = Math_imul($92, $93)|0;
 $23 = $94;
 $95 = $3;
 $96 = ((($95)) + 2|0);
 $97 = HEAP16[$96>>1]|0;
 $98 = $97&65535;
 $99 = ($98|0)==(65535);
 if ($99) {
  $104 = 0;
 } else {
  $100 = $5;
  $101 = ((($100)) + 80|0);
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $103;
 }
 $24 = $104;
 $105 = $5;
 $106 = ((($105)) + 80|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $15;
 $109 = Math_imul($107, $108)|0;
 $25 = $109;
 $110 = $3;
 $111 = ((($110)) + 4|0);
 $112 = HEAP16[$111>>1]|0;
 $113 = $112&65535;
 $114 = ($113|0)==(65535);
 if ($114) {
  $118 = 0;
 } else {
  $115 = $5;
  $116 = ((($115)) + 80|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $117;
 }
 $26 = $118;
 $119 = $6;
 $120 = $21;
 $121 = $23;
 $122 = (($120) + ($121))|0;
 $123 = $25;
 $124 = (($122) + ($123))|0;
 $125 = (($119) + ($124<<1)|0);
 $6 = $125;
 $126 = $10;
 $127 = $11;
 $128 = ($126|0)>=($127|0);
 if ($128) {
  $129 = $11;
  $130 = $12;
  $131 = ($129|0)>=($130|0);
  if ($131) {
   $132 = $22;
   $133 = $24;
   $134 = (($133) + ($132))|0;
   $24 = $134;
   $135 = $24;
   $136 = $26;
   $137 = (($136) + ($135))|0;
   $26 = $137;
   while(1) {
    $138 = $27;
    $139 = ($138|0)!=(0);
    if (!($139)) {
     break;
    }
    $140 = $6;
    $141 = $22;
    $142 = (($140) + ($141<<1)|0);
    $143 = HEAP16[$142>>1]|0;
    $144 = $143&65535;
    $17 = $144;
    $145 = $6;
    $146 = $24;
    $147 = (($145) + ($146<<1)|0);
    $148 = HEAP16[$147>>1]|0;
    $149 = $148&65535;
    $18 = $149;
    $150 = $6;
    $151 = $26;
    $152 = (($150) + ($151<<1)|0);
    $153 = HEAP16[$152>>1]|0;
    $154 = $153&65535;
    $19 = $154;
    $155 = $6;
    $156 = ((($155)) + 2|0);
    $6 = $156;
    $157 = HEAP16[$155>>1]|0;
    $158 = $157&65535;
    $16 = $158;
    $159 = $18;
    $160 = $19;
    $161 = (($160) - ($159))|0;
    $19 = $161;
    $162 = $17;
    $163 = $18;
    $164 = (($163) - ($162))|0;
    $18 = $164;
    $165 = $16;
    $166 = $17;
    $167 = (($166) - ($165))|0;
    $17 = $167;
    $168 = $17;
    $169 = $10;
    $170 = Math_imul($168, $169)|0;
    $171 = $18;
    $172 = $11;
    $173 = Math_imul($171, $172)|0;
    $174 = (($170) + ($173))|0;
    $175 = $19;
    $176 = $12;
    $177 = Math_imul($175, $176)|0;
    $178 = (($174) + ($177))|0;
    $179 = (($178) + 32769)|0;
    $20 = $179;
    $180 = $16;
    $181 = $180&65535;
    $182 = $181&65535;
    $183 = $20;
    $184 = $20;
    $185 = $184 >> 16;
    $186 = (($183) + ($185))|0;
    $187 = $186 >> 16;
    $188 = (($182) + ($187))|0;
    $189 = $188&65535;
    $190 = $4;
    $191 = ((($190)) + 2|0);
    $4 = $191;
    HEAP16[$190>>1] = $189;
    $192 = $27;
    $193 = (($192) + -1)|0;
    $27 = $193;
   }
   STACKTOP = sp;return;
  }
  $194 = $12;
  $195 = $10;
  $196 = ($194|0)>=($195|0);
  if ($196) {
   $197 = $26;
   $198 = $22;
   $199 = (($198) + ($197))|0;
   $22 = $199;
   $200 = $22;
   $201 = $24;
   $202 = (($201) + ($200))|0;
   $24 = $202;
   while(1) {
    $203 = $27;
    $204 = ($203|0)!=(0);
    if (!($204)) {
     break;
    }
    $205 = $6;
    $206 = $22;
    $207 = (($205) + ($206<<1)|0);
    $208 = HEAP16[$207>>1]|0;
    $209 = $208&65535;
    $17 = $209;
    $210 = $6;
    $211 = $24;
    $212 = (($210) + ($211<<1)|0);
    $213 = HEAP16[$212>>1]|0;
    $214 = $213&65535;
    $18 = $214;
    $215 = $6;
    $216 = $26;
    $217 = (($215) + ($216<<1)|0);
    $218 = HEAP16[$217>>1]|0;
    $219 = $218&65535;
    $19 = $219;
    $220 = $6;
    $221 = ((($220)) + 2|0);
    $6 = $221;
    $222 = HEAP16[$220>>1]|0;
    $223 = $222&65535;
    $16 = $223;
    $224 = $17;
    $225 = $18;
    $226 = (($225) - ($224))|0;
    $18 = $226;
    $227 = $19;
    $228 = $17;
    $229 = (($228) - ($227))|0;
    $17 = $229;
    $230 = $16;
    $231 = $19;
    $232 = (($231) - ($230))|0;
    $19 = $232;
    $233 = $17;
    $234 = $10;
    $235 = Math_imul($233, $234)|0;
    $236 = $18;
    $237 = $11;
    $238 = Math_imul($236, $237)|0;
    $239 = (($235) + ($238))|0;
    $240 = $19;
    $241 = $12;
    $242 = Math_imul($240, $241)|0;
    $243 = (($239) + ($242))|0;
    $244 = (($243) + 32769)|0;
    $20 = $244;
    $245 = $16;
    $246 = $245&65535;
    $247 = $246&65535;
    $248 = $20;
    $249 = $20;
    $250 = $249 >> 16;
    $251 = (($248) + ($250))|0;
    $252 = $251 >> 16;
    $253 = (($247) + ($252))|0;
    $254 = $253&65535;
    $255 = $4;
    $256 = ((($255)) + 2|0);
    $4 = $256;
    HEAP16[$255>>1] = $254;
    $257 = $27;
    $258 = (($257) + -1)|0;
    $27 = $258;
   }
   STACKTOP = sp;return;
  } else {
   $259 = $22;
   $260 = $26;
   $261 = (($260) + ($259))|0;
   $26 = $261;
   $262 = $26;
   $263 = $24;
   $264 = (($263) + ($262))|0;
   $24 = $264;
   while(1) {
    $265 = $27;
    $266 = ($265|0)!=(0);
    if (!($266)) {
     break;
    }
    $267 = $6;
    $268 = $22;
    $269 = (($267) + ($268<<1)|0);
    $270 = HEAP16[$269>>1]|0;
    $271 = $270&65535;
    $17 = $271;
    $272 = $6;
    $273 = $24;
    $274 = (($272) + ($273<<1)|0);
    $275 = HEAP16[$274>>1]|0;
    $276 = $275&65535;
    $18 = $276;
    $277 = $6;
    $278 = $26;
    $279 = (($277) + ($278<<1)|0);
    $280 = HEAP16[$279>>1]|0;
    $281 = $280&65535;
    $19 = $281;
    $282 = $6;
    $283 = ((($282)) + 2|0);
    $6 = $283;
    $284 = HEAP16[$282>>1]|0;
    $285 = $284&65535;
    $16 = $285;
    $286 = $19;
    $287 = $18;
    $288 = (($287) - ($286))|0;
    $18 = $288;
    $289 = $17;
    $290 = $19;
    $291 = (($290) - ($289))|0;
    $19 = $291;
    $292 = $16;
    $293 = $17;
    $294 = (($293) - ($292))|0;
    $17 = $294;
    $295 = $17;
    $296 = $10;
    $297 = Math_imul($295, $296)|0;
    $298 = $18;
    $299 = $11;
    $300 = Math_imul($298, $299)|0;
    $301 = (($297) + ($300))|0;
    $302 = $19;
    $303 = $12;
    $304 = Math_imul($302, $303)|0;
    $305 = (($301) + ($304))|0;
    $306 = (($305) + 32769)|0;
    $20 = $306;
    $307 = $16;
    $308 = $307&65535;
    $309 = $308&65535;
    $310 = $20;
    $311 = $20;
    $312 = $311 >> 16;
    $313 = (($310) + ($312))|0;
    $314 = $313 >> 16;
    $315 = (($309) + ($314))|0;
    $316 = $315&65535;
    $317 = $4;
    $318 = ((($317)) + 2|0);
    $4 = $318;
    HEAP16[$317>>1] = $316;
    $319 = $27;
    $320 = (($319) + -1)|0;
    $27 = $320;
   }
   STACKTOP = sp;return;
  }
 } else {
  $321 = $10;
  $322 = $12;
  $323 = ($321|0)>=($322|0);
  if ($323) {
   $324 = $24;
   $325 = $22;
   $326 = (($325) + ($324))|0;
   $22 = $326;
   $327 = $22;
   $328 = $26;
   $329 = (($328) + ($327))|0;
   $26 = $329;
   while(1) {
    $330 = $27;
    $331 = ($330|0)!=(0);
    if (!($331)) {
     break;
    }
    $332 = $6;
    $333 = $22;
    $334 = (($332) + ($333<<1)|0);
    $335 = HEAP16[$334>>1]|0;
    $336 = $335&65535;
    $17 = $336;
    $337 = $6;
    $338 = $24;
    $339 = (($337) + ($338<<1)|0);
    $340 = HEAP16[$339>>1]|0;
    $341 = $340&65535;
    $18 = $341;
    $342 = $6;
    $343 = $26;
    $344 = (($342) + ($343<<1)|0);
    $345 = HEAP16[$344>>1]|0;
    $346 = $345&65535;
    $19 = $346;
    $347 = $6;
    $348 = ((($347)) + 2|0);
    $6 = $348;
    $349 = HEAP16[$347>>1]|0;
    $350 = $349&65535;
    $16 = $350;
    $351 = $17;
    $352 = $19;
    $353 = (($352) - ($351))|0;
    $19 = $353;
    $354 = $18;
    $355 = $17;
    $356 = (($355) - ($354))|0;
    $17 = $356;
    $357 = $16;
    $358 = $18;
    $359 = (($358) - ($357))|0;
    $18 = $359;
    $360 = $17;
    $361 = $10;
    $362 = Math_imul($360, $361)|0;
    $363 = $18;
    $364 = $11;
    $365 = Math_imul($363, $364)|0;
    $366 = (($362) + ($365))|0;
    $367 = $19;
    $368 = $12;
    $369 = Math_imul($367, $368)|0;
    $370 = (($366) + ($369))|0;
    $371 = (($370) + 32769)|0;
    $20 = $371;
    $372 = $16;
    $373 = $372&65535;
    $374 = $373&65535;
    $375 = $20;
    $376 = $20;
    $377 = $376 >> 16;
    $378 = (($375) + ($377))|0;
    $379 = $378 >> 16;
    $380 = (($374) + ($379))|0;
    $381 = $380&65535;
    $382 = $4;
    $383 = ((($382)) + 2|0);
    $4 = $383;
    HEAP16[$382>>1] = $381;
    $384 = $27;
    $385 = (($384) + -1)|0;
    $27 = $385;
   }
   STACKTOP = sp;return;
  }
  $386 = $11;
  $387 = $12;
  $388 = ($386|0)>=($387|0);
  if ($388) {
   $389 = $24;
   $390 = $26;
   $391 = (($390) + ($389))|0;
   $26 = $391;
   $392 = $26;
   $393 = $22;
   $394 = (($393) + ($392))|0;
   $22 = $394;
   while(1) {
    $395 = $27;
    $396 = ($395|0)!=(0);
    if (!($396)) {
     break;
    }
    $397 = $6;
    $398 = $22;
    $399 = (($397) + ($398<<1)|0);
    $400 = HEAP16[$399>>1]|0;
    $401 = $400&65535;
    $17 = $401;
    $402 = $6;
    $403 = $24;
    $404 = (($402) + ($403<<1)|0);
    $405 = HEAP16[$404>>1]|0;
    $406 = $405&65535;
    $18 = $406;
    $407 = $6;
    $408 = $26;
    $409 = (($407) + ($408<<1)|0);
    $410 = HEAP16[$409>>1]|0;
    $411 = $410&65535;
    $19 = $411;
    $412 = $6;
    $413 = ((($412)) + 2|0);
    $6 = $413;
    $414 = HEAP16[$412>>1]|0;
    $415 = $414&65535;
    $16 = $415;
    $416 = $19;
    $417 = $17;
    $418 = (($417) - ($416))|0;
    $17 = $418;
    $419 = $18;
    $420 = $19;
    $421 = (($420) - ($419))|0;
    $19 = $421;
    $422 = $16;
    $423 = $18;
    $424 = (($423) - ($422))|0;
    $18 = $424;
    $425 = $17;
    $426 = $10;
    $427 = Math_imul($425, $426)|0;
    $428 = $18;
    $429 = $11;
    $430 = Math_imul($428, $429)|0;
    $431 = (($427) + ($430))|0;
    $432 = $19;
    $433 = $12;
    $434 = Math_imul($432, $433)|0;
    $435 = (($431) + ($434))|0;
    $436 = (($435) + 32769)|0;
    $20 = $436;
    $437 = $16;
    $438 = $437&65535;
    $439 = $438&65535;
    $440 = $20;
    $441 = $20;
    $442 = $441 >> 16;
    $443 = (($440) + ($442))|0;
    $444 = $443 >> 16;
    $445 = (($439) + ($444))|0;
    $446 = $445&65535;
    $447 = $4;
    $448 = ((($447)) + 2|0);
    $4 = $448;
    HEAP16[$447>>1] = $446;
    $449 = $27;
    $450 = (($449) + -1)|0;
    $27 = $450;
   }
   STACKTOP = sp;return;
  } else {
   $451 = $26;
   $452 = $24;
   $453 = (($452) + ($451))|0;
   $24 = $453;
   $454 = $24;
   $455 = $22;
   $456 = (($455) + ($454))|0;
   $22 = $456;
   while(1) {
    $457 = $27;
    $458 = ($457|0)!=(0);
    if (!($458)) {
     break;
    }
    $459 = $6;
    $460 = $22;
    $461 = (($459) + ($460<<1)|0);
    $462 = HEAP16[$461>>1]|0;
    $463 = $462&65535;
    $17 = $463;
    $464 = $6;
    $465 = $24;
    $466 = (($464) + ($465<<1)|0);
    $467 = HEAP16[$466>>1]|0;
    $468 = $467&65535;
    $18 = $468;
    $469 = $6;
    $470 = $26;
    $471 = (($469) + ($470<<1)|0);
    $472 = HEAP16[$471>>1]|0;
    $473 = $472&65535;
    $19 = $473;
    $474 = $6;
    $475 = ((($474)) + 2|0);
    $6 = $475;
    $476 = HEAP16[$474>>1]|0;
    $477 = $476&65535;
    $16 = $477;
    $478 = $18;
    $479 = $17;
    $480 = (($479) - ($478))|0;
    $17 = $480;
    $481 = $19;
    $482 = $18;
    $483 = (($482) - ($481))|0;
    $18 = $483;
    $484 = $16;
    $485 = $19;
    $486 = (($485) - ($484))|0;
    $19 = $486;
    $487 = $17;
    $488 = $10;
    $489 = Math_imul($487, $488)|0;
    $490 = $18;
    $491 = $11;
    $492 = Math_imul($490, $491)|0;
    $493 = (($489) + ($492))|0;
    $494 = $19;
    $495 = $12;
    $496 = Math_imul($494, $495)|0;
    $497 = (($493) + ($496))|0;
    $498 = (($497) + 32769)|0;
    $20 = $498;
    $499 = $16;
    $500 = $499&65535;
    $501 = $500&65535;
    $502 = $20;
    $503 = $20;
    $504 = $503 >> 16;
    $505 = (($502) + ($504))|0;
    $506 = $505 >> 16;
    $507 = (($501) + ($506))|0;
    $508 = $507&65535;
    $509 = $4;
    $510 = ((($509)) + 2|0);
    $4 = $510;
    HEAP16[$509>>1] = $508;
    $511 = $27;
    $512 = (($511) + -1)|0;
    $27 = $512;
   }
   STACKTOP = sp;return;
  }
 }
}
function _Eval4InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1200|0);
 $14 = sp + 640|0;
 $15 = sp + 128|0;
 $16 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $19 = $5;
 $20 = ((($19)) + 112|0);
 $21 = HEAP32[$20>>2]|0;
 $6 = $21;
 $22 = $3;
 $23 = +HEAPF32[$22>>2];
 $24 = (+_fclamp($23));
 $25 = $5;
 $26 = ((($25)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+($27>>>0));
 $29 = $24 * $28;
 $8 = $29;
 $30 = $8;
 $31 = $30;
 $32 = (__cmsQuickFloor_205($31)|0);
 $9 = $32;
 $33 = $8;
 $34 = $9;
 $35 = (+($34|0));
 $36 = $33 - $35;
 $7 = $36;
 $37 = $5;
 $38 = ((($37)) + 80|0);
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $9;
 $42 = Math_imul($40, $41)|0;
 $10 = $42;
 $43 = $10;
 $44 = $3;
 $45 = +HEAPF32[$44>>2];
 $46 = (+_fclamp($45));
 $47 = $46;
 $48 = $47 >= 1.0;
 if ($48) {
  $54 = 0;
 } else {
  $49 = $5;
  $50 = ((($49)) + 80|0);
  $51 = ((($50)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $54 = $52;
 }
 $53 = (($43) + ($54))|0;
 $11 = $53;
 $55 = $5;
 dest=$16; src=$55; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $56 = ((($16)) + 48|0);
 $57 = $5;
 $58 = ((($57)) + 48|0);
 $59 = ((($58)) + 4|0);
 _memmove(($56|0),($59|0),12)|0;
 $60 = $6;
 $61 = $10;
 $62 = (($60) + ($61<<2)|0);
 $12 = $62;
 $63 = $12;
 $64 = ((($16)) + 112|0);
 HEAP32[$64>>2] = $63;
 $65 = $3;
 $66 = ((($65)) + 4|0);
 _TetrahedralInterpFloat($66,$14,$16);
 $67 = $6;
 $68 = $11;
 $69 = (($67) + ($68<<2)|0);
 $12 = $69;
 $70 = $12;
 $71 = ((($16)) + 112|0);
 HEAP32[$71>>2] = $70;
 $72 = $3;
 $73 = ((($72)) + 4|0);
 _TetrahedralInterpFloat($73,$15,$16);
 $13 = 0;
 while(1) {
  $74 = $13;
  $75 = $5;
  $76 = ((($75)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($74>>>0)<($77>>>0);
  if (!($78)) {
   break;
  }
  $79 = $13;
  $80 = (($14) + ($79<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $17 = $81;
  $82 = $13;
  $83 = (($15) + ($82<<2)|0);
  $84 = +HEAPF32[$83>>2];
  $18 = $84;
  $85 = $17;
  $86 = $18;
  $87 = $17;
  $88 = $86 - $87;
  $89 = $7;
  $90 = $88 * $89;
  $91 = $85 + $90;
  $92 = $4;
  $93 = $13;
  $94 = (($92) + ($93<<2)|0);
  HEAPF32[$94>>2] = $91;
  $95 = $13;
  $96 = (($95) + 1)|0;
  $13 = $96;
 }
 STACKTOP = sp;return;
}
function _Eval4Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(640|0);
 $34 = sp + 384|0;
 $35 = sp + 128|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $36 = $3;
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = $5;
 $40 = ((($39)) + 48|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = Math_imul($38, $41)|0;
 $43 = (__cmsToFixedDomain($42)|0);
 $7 = $43;
 $44 = $3;
 $45 = ((($44)) + 2|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = $46&65535;
 $48 = $5;
 $49 = ((($48)) + 48|0);
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = Math_imul($47, $51)|0;
 $53 = (__cmsToFixedDomain($52)|0);
 $12 = $53;
 $54 = $3;
 $55 = ((($54)) + 4|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = $5;
 $59 = ((($58)) + 48|0);
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = Math_imul($57, $61)|0;
 $63 = (__cmsToFixedDomain($62)|0);
 $13 = $63;
 $64 = $3;
 $65 = ((($64)) + 6|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66&65535;
 $68 = $5;
 $69 = ((($68)) + 48|0);
 $70 = ((($69)) + 12|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = Math_imul($67, $71)|0;
 $73 = (__cmsToFixedDomain($72)|0);
 $14 = $73;
 $74 = $7;
 $75 = $74 >> 16;
 $8 = $75;
 $76 = $12;
 $77 = $76 >> 16;
 $18 = $77;
 $78 = $13;
 $79 = $78 >> 16;
 $19 = $79;
 $80 = $14;
 $81 = $80 >> 16;
 $20 = $81;
 $82 = $7;
 $83 = $82 & 65535;
 $9 = $83;
 $84 = $12;
 $85 = $84 & 65535;
 $15 = $85;
 $86 = $13;
 $87 = $86 & 65535;
 $16 = $87;
 $88 = $14;
 $89 = $88 & 65535;
 $17 = $89;
 $90 = $5;
 $91 = ((($90)) + 80|0);
 $92 = ((($91)) + 12|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $8;
 $95 = Math_imul($93, $94)|0;
 $10 = $95;
 $96 = $10;
 $97 = $3;
 $98 = HEAP16[$97>>1]|0;
 $99 = $98&65535;
 $100 = ($99|0)==(65535);
 if ($100) {
  $106 = 0;
 } else {
  $101 = $5;
  $102 = ((($101)) + 80|0);
  $103 = ((($102)) + 12|0);
  $104 = HEAP32[$103>>2]|0;
  $106 = $104;
 }
 $105 = (($96) + ($106))|0;
 $11 = $105;
 $107 = $5;
 $108 = ((($107)) + 80|0);
 $109 = ((($108)) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $18;
 $112 = Math_imul($110, $111)|0;
 $21 = $112;
 $113 = $21;
 $114 = $3;
 $115 = ((($114)) + 2|0);
 $116 = HEAP16[$115>>1]|0;
 $117 = $116&65535;
 $118 = ($117|0)==(65535);
 if ($118) {
  $124 = 0;
 } else {
  $119 = $5;
  $120 = ((($119)) + 80|0);
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $124 = $122;
 }
 $123 = (($113) + ($124))|0;
 $22 = $123;
 $125 = $5;
 $126 = ((($125)) + 80|0);
 $127 = ((($126)) + 4|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $19;
 $130 = Math_imul($128, $129)|0;
 $23 = $130;
 $131 = $23;
 $132 = $3;
 $133 = ((($132)) + 4|0);
 $134 = HEAP16[$133>>1]|0;
 $135 = $134&65535;
 $136 = ($135|0)==(65535);
 if ($136) {
  $142 = 0;
 } else {
  $137 = $5;
  $138 = ((($137)) + 80|0);
  $139 = ((($138)) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $142 = $140;
 }
 $141 = (($131) + ($142))|0;
 $24 = $141;
 $143 = $5;
 $144 = ((($143)) + 80|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $20;
 $147 = Math_imul($145, $146)|0;
 $25 = $147;
 $148 = $25;
 $149 = $3;
 $150 = ((($149)) + 6|0);
 $151 = HEAP16[$150>>1]|0;
 $152 = $151&65535;
 $153 = ($152|0)==(65535);
 if ($153) {
  $158 = 0;
 } else {
  $154 = $5;
  $155 = ((($154)) + 80|0);
  $156 = HEAP32[$155>>2]|0;
  $158 = $156;
 }
 $157 = (($148) + ($158))|0;
 $26 = $157;
 $159 = $5;
 $160 = ((($159)) + 112|0);
 $161 = HEAP32[$160>>2]|0;
 $6 = $161;
 $162 = $10;
 $163 = $6;
 $164 = (($163) + ($162<<1)|0);
 $6 = $164;
 $33 = 0;
 while(1) {
  $165 = $33;
  $166 = $5;
  $167 = ((($166)) + 12|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = ($165>>>0)<($168>>>0);
  if (!($169)) {
   break;
  }
  $170 = $6;
  $171 = $21;
  $172 = $23;
  $173 = (($171) + ($172))|0;
  $174 = $25;
  $175 = (($173) + ($174))|0;
  $176 = $33;
  $177 = (($175) + ($176))|0;
  $178 = (($170) + ($177<<1)|0);
  $179 = HEAP16[$178>>1]|0;
  $180 = $179&65535;
  $28 = $180;
  $181 = $15;
  $182 = $16;
  $183 = ($181|0)>=($182|0);
  if ($183) {
   $184 = $16;
   $185 = $17;
   $186 = ($184|0)>=($185|0);
   if ($186) {
    $187 = $6;
    $188 = $22;
    $189 = $23;
    $190 = (($188) + ($189))|0;
    $191 = $25;
    $192 = (($190) + ($191))|0;
    $193 = $33;
    $194 = (($192) + ($193))|0;
    $195 = (($187) + ($194<<1)|0);
    $196 = HEAP16[$195>>1]|0;
    $197 = $196&65535;
    $198 = $28;
    $199 = (($197) - ($198))|0;
    $29 = $199;
    $200 = $6;
    $201 = $22;
    $202 = $24;
    $203 = (($201) + ($202))|0;
    $204 = $25;
    $205 = (($203) + ($204))|0;
    $206 = $33;
    $207 = (($205) + ($206))|0;
    $208 = (($200) + ($207<<1)|0);
    $209 = HEAP16[$208>>1]|0;
    $210 = $209&65535;
    $211 = $6;
    $212 = $22;
    $213 = $23;
    $214 = (($212) + ($213))|0;
    $215 = $25;
    $216 = (($214) + ($215))|0;
    $217 = $33;
    $218 = (($216) + ($217))|0;
    $219 = (($211) + ($218<<1)|0);
    $220 = HEAP16[$219>>1]|0;
    $221 = $220&65535;
    $222 = (($210) - ($221))|0;
    $30 = $222;
    $223 = $6;
    $224 = $22;
    $225 = $24;
    $226 = (($224) + ($225))|0;
    $227 = $26;
    $228 = (($226) + ($227))|0;
    $229 = $33;
    $230 = (($228) + ($229))|0;
    $231 = (($223) + ($230<<1)|0);
    $232 = HEAP16[$231>>1]|0;
    $233 = $232&65535;
    $234 = $6;
    $235 = $22;
    $236 = $24;
    $237 = (($235) + ($236))|0;
    $238 = $25;
    $239 = (($237) + ($238))|0;
    $240 = $33;
    $241 = (($239) + ($240))|0;
    $242 = (($234) + ($241<<1)|0);
    $243 = HEAP16[$242>>1]|0;
    $244 = $243&65535;
    $245 = (($233) - ($244))|0;
    $31 = $245;
   } else {
    label = 14;
   }
  } else {
   label = 14;
  }
  do {
   if ((label|0) == 14) {
    label = 0;
    $246 = $15;
    $247 = $17;
    $248 = ($246|0)>=($247|0);
    if ($248) {
     $249 = $17;
     $250 = $16;
     $251 = ($249|0)>=($250|0);
     if ($251) {
      $252 = $6;
      $253 = $22;
      $254 = $23;
      $255 = (($253) + ($254))|0;
      $256 = $25;
      $257 = (($255) + ($256))|0;
      $258 = $33;
      $259 = (($257) + ($258))|0;
      $260 = (($252) + ($259<<1)|0);
      $261 = HEAP16[$260>>1]|0;
      $262 = $261&65535;
      $263 = $28;
      $264 = (($262) - ($263))|0;
      $29 = $264;
      $265 = $6;
      $266 = $22;
      $267 = $24;
      $268 = (($266) + ($267))|0;
      $269 = $26;
      $270 = (($268) + ($269))|0;
      $271 = $33;
      $272 = (($270) + ($271))|0;
      $273 = (($265) + ($272<<1)|0);
      $274 = HEAP16[$273>>1]|0;
      $275 = $274&65535;
      $276 = $6;
      $277 = $22;
      $278 = $23;
      $279 = (($277) + ($278))|0;
      $280 = $26;
      $281 = (($279) + ($280))|0;
      $282 = $33;
      $283 = (($281) + ($282))|0;
      $284 = (($276) + ($283<<1)|0);
      $285 = HEAP16[$284>>1]|0;
      $286 = $285&65535;
      $287 = (($275) - ($286))|0;
      $30 = $287;
      $288 = $6;
      $289 = $22;
      $290 = $23;
      $291 = (($289) + ($290))|0;
      $292 = $26;
      $293 = (($291) + ($292))|0;
      $294 = $33;
      $295 = (($293) + ($294))|0;
      $296 = (($288) + ($295<<1)|0);
      $297 = HEAP16[$296>>1]|0;
      $298 = $297&65535;
      $299 = $6;
      $300 = $22;
      $301 = $23;
      $302 = (($300) + ($301))|0;
      $303 = $25;
      $304 = (($302) + ($303))|0;
      $305 = $33;
      $306 = (($304) + ($305))|0;
      $307 = (($299) + ($306<<1)|0);
      $308 = HEAP16[$307>>1]|0;
      $309 = $308&65535;
      $310 = (($298) - ($309))|0;
      $31 = $310;
      break;
     }
    }
    $311 = $17;
    $312 = $15;
    $313 = ($311|0)>=($312|0);
    if ($313) {
     $314 = $15;
     $315 = $16;
     $316 = ($314|0)>=($315|0);
     if ($316) {
      $317 = $6;
      $318 = $22;
      $319 = $23;
      $320 = (($318) + ($319))|0;
      $321 = $26;
      $322 = (($320) + ($321))|0;
      $323 = $33;
      $324 = (($322) + ($323))|0;
      $325 = (($317) + ($324<<1)|0);
      $326 = HEAP16[$325>>1]|0;
      $327 = $326&65535;
      $328 = $6;
      $329 = $21;
      $330 = $23;
      $331 = (($329) + ($330))|0;
      $332 = $26;
      $333 = (($331) + ($332))|0;
      $334 = $33;
      $335 = (($333) + ($334))|0;
      $336 = (($328) + ($335<<1)|0);
      $337 = HEAP16[$336>>1]|0;
      $338 = $337&65535;
      $339 = (($327) - ($338))|0;
      $29 = $339;
      $340 = $6;
      $341 = $22;
      $342 = $24;
      $343 = (($341) + ($342))|0;
      $344 = $26;
      $345 = (($343) + ($344))|0;
      $346 = $33;
      $347 = (($345) + ($346))|0;
      $348 = (($340) + ($347<<1)|0);
      $349 = HEAP16[$348>>1]|0;
      $350 = $349&65535;
      $351 = $6;
      $352 = $22;
      $353 = $23;
      $354 = (($352) + ($353))|0;
      $355 = $26;
      $356 = (($354) + ($355))|0;
      $357 = $33;
      $358 = (($356) + ($357))|0;
      $359 = (($351) + ($358<<1)|0);
      $360 = HEAP16[$359>>1]|0;
      $361 = $360&65535;
      $362 = (($350) - ($361))|0;
      $30 = $362;
      $363 = $6;
      $364 = $21;
      $365 = $23;
      $366 = (($364) + ($365))|0;
      $367 = $26;
      $368 = (($366) + ($367))|0;
      $369 = $33;
      $370 = (($368) + ($369))|0;
      $371 = (($363) + ($370<<1)|0);
      $372 = HEAP16[$371>>1]|0;
      $373 = $372&65535;
      $374 = $28;
      $375 = (($373) - ($374))|0;
      $31 = $375;
      break;
     }
    }
    $376 = $16;
    $377 = $15;
    $378 = ($376|0)>=($377|0);
    if ($378) {
     $379 = $15;
     $380 = $17;
     $381 = ($379|0)>=($380|0);
     if ($381) {
      $382 = $6;
      $383 = $22;
      $384 = $24;
      $385 = (($383) + ($384))|0;
      $386 = $25;
      $387 = (($385) + ($386))|0;
      $388 = $33;
      $389 = (($387) + ($388))|0;
      $390 = (($382) + ($389<<1)|0);
      $391 = HEAP16[$390>>1]|0;
      $392 = $391&65535;
      $393 = $6;
      $394 = $21;
      $395 = $24;
      $396 = (($394) + ($395))|0;
      $397 = $25;
      $398 = (($396) + ($397))|0;
      $399 = $33;
      $400 = (($398) + ($399))|0;
      $401 = (($393) + ($400<<1)|0);
      $402 = HEAP16[$401>>1]|0;
      $403 = $402&65535;
      $404 = (($392) - ($403))|0;
      $29 = $404;
      $405 = $6;
      $406 = $21;
      $407 = $24;
      $408 = (($406) + ($407))|0;
      $409 = $25;
      $410 = (($408) + ($409))|0;
      $411 = $33;
      $412 = (($410) + ($411))|0;
      $413 = (($405) + ($412<<1)|0);
      $414 = HEAP16[$413>>1]|0;
      $415 = $414&65535;
      $416 = $28;
      $417 = (($415) - ($416))|0;
      $30 = $417;
      $418 = $6;
      $419 = $22;
      $420 = $24;
      $421 = (($419) + ($420))|0;
      $422 = $26;
      $423 = (($421) + ($422))|0;
      $424 = $33;
      $425 = (($423) + ($424))|0;
      $426 = (($418) + ($425<<1)|0);
      $427 = HEAP16[$426>>1]|0;
      $428 = $427&65535;
      $429 = $6;
      $430 = $22;
      $431 = $24;
      $432 = (($430) + ($431))|0;
      $433 = $25;
      $434 = (($432) + ($433))|0;
      $435 = $33;
      $436 = (($434) + ($435))|0;
      $437 = (($429) + ($436<<1)|0);
      $438 = HEAP16[$437>>1]|0;
      $439 = $438&65535;
      $440 = (($428) - ($439))|0;
      $31 = $440;
      break;
     }
    }
    $441 = $16;
    $442 = $17;
    $443 = ($441|0)>=($442|0);
    if ($443) {
     $444 = $17;
     $445 = $15;
     $446 = ($444|0)>=($445|0);
     if ($446) {
      $447 = $6;
      $448 = $22;
      $449 = $24;
      $450 = (($448) + ($449))|0;
      $451 = $26;
      $452 = (($450) + ($451))|0;
      $453 = $33;
      $454 = (($452) + ($453))|0;
      $455 = (($447) + ($454<<1)|0);
      $456 = HEAP16[$455>>1]|0;
      $457 = $456&65535;
      $458 = $6;
      $459 = $21;
      $460 = $24;
      $461 = (($459) + ($460))|0;
      $462 = $26;
      $463 = (($461) + ($462))|0;
      $464 = $33;
      $465 = (($463) + ($464))|0;
      $466 = (($458) + ($465<<1)|0);
      $467 = HEAP16[$466>>1]|0;
      $468 = $467&65535;
      $469 = (($457) - ($468))|0;
      $29 = $469;
      $470 = $6;
      $471 = $21;
      $472 = $24;
      $473 = (($471) + ($472))|0;
      $474 = $25;
      $475 = (($473) + ($474))|0;
      $476 = $33;
      $477 = (($475) + ($476))|0;
      $478 = (($470) + ($477<<1)|0);
      $479 = HEAP16[$478>>1]|0;
      $480 = $479&65535;
      $481 = $28;
      $482 = (($480) - ($481))|0;
      $30 = $482;
      $483 = $6;
      $484 = $21;
      $485 = $24;
      $486 = (($484) + ($485))|0;
      $487 = $26;
      $488 = (($486) + ($487))|0;
      $489 = $33;
      $490 = (($488) + ($489))|0;
      $491 = (($483) + ($490<<1)|0);
      $492 = HEAP16[$491>>1]|0;
      $493 = $492&65535;
      $494 = $6;
      $495 = $21;
      $496 = $24;
      $497 = (($495) + ($496))|0;
      $498 = $25;
      $499 = (($497) + ($498))|0;
      $500 = $33;
      $501 = (($499) + ($500))|0;
      $502 = (($494) + ($501<<1)|0);
      $503 = HEAP16[$502>>1]|0;
      $504 = $503&65535;
      $505 = (($493) - ($504))|0;
      $31 = $505;
      break;
     }
    }
    $506 = $17;
    $507 = $16;
    $508 = ($506|0)>=($507|0);
    if ($508) {
     $509 = $16;
     $510 = $15;
     $511 = ($509|0)>=($510|0);
     if ($511) {
      $512 = $6;
      $513 = $22;
      $514 = $24;
      $515 = (($513) + ($514))|0;
      $516 = $26;
      $517 = (($515) + ($516))|0;
      $518 = $33;
      $519 = (($517) + ($518))|0;
      $520 = (($512) + ($519<<1)|0);
      $521 = HEAP16[$520>>1]|0;
      $522 = $521&65535;
      $523 = $6;
      $524 = $21;
      $525 = $24;
      $526 = (($524) + ($525))|0;
      $527 = $26;
      $528 = (($526) + ($527))|0;
      $529 = $33;
      $530 = (($528) + ($529))|0;
      $531 = (($523) + ($530<<1)|0);
      $532 = HEAP16[$531>>1]|0;
      $533 = $532&65535;
      $534 = (($522) - ($533))|0;
      $29 = $534;
      $535 = $6;
      $536 = $21;
      $537 = $24;
      $538 = (($536) + ($537))|0;
      $539 = $26;
      $540 = (($538) + ($539))|0;
      $541 = $33;
      $542 = (($540) + ($541))|0;
      $543 = (($535) + ($542<<1)|0);
      $544 = HEAP16[$543>>1]|0;
      $545 = $544&65535;
      $546 = $6;
      $547 = $21;
      $548 = $23;
      $549 = (($547) + ($548))|0;
      $550 = $26;
      $551 = (($549) + ($550))|0;
      $552 = $33;
      $553 = (($551) + ($552))|0;
      $554 = (($546) + ($553<<1)|0);
      $555 = HEAP16[$554>>1]|0;
      $556 = $555&65535;
      $557 = (($545) - ($556))|0;
      $30 = $557;
      $558 = $6;
      $559 = $21;
      $560 = $23;
      $561 = (($559) + ($560))|0;
      $562 = $26;
      $563 = (($561) + ($562))|0;
      $564 = $33;
      $565 = (($563) + ($564))|0;
      $566 = (($558) + ($565<<1)|0);
      $567 = HEAP16[$566>>1]|0;
      $568 = $567&65535;
      $569 = $28;
      $570 = (($568) - ($569))|0;
      $31 = $570;
      break;
     }
    }
    $31 = 0;
    $30 = 0;
    $29 = 0;
   }
  } while(0);
  $571 = $29;
  $572 = $15;
  $573 = Math_imul($571, $572)|0;
  $574 = $30;
  $575 = $16;
  $576 = Math_imul($574, $575)|0;
  $577 = (($573) + ($576))|0;
  $578 = $31;
  $579 = $17;
  $580 = Math_imul($578, $579)|0;
  $581 = (($577) + ($580))|0;
  $32 = $581;
  $582 = $28;
  $583 = $32;
  $584 = (__cmsToFixedDomain($583)|0);
  $585 = (($584) + 32768)|0;
  $586 = $585 >> 16;
  $587 = (($582) + ($586))|0;
  $588 = $587&65535;
  $589 = $33;
  $590 = (($34) + ($589<<1)|0);
  HEAP16[$590>>1] = $588;
  $591 = $33;
  $592 = (($591) + 1)|0;
  $33 = $592;
 }
 $593 = $5;
 $594 = ((($593)) + 112|0);
 $595 = HEAP32[$594>>2]|0;
 $6 = $595;
 $596 = $11;
 $597 = $6;
 $598 = (($597) + ($596<<1)|0);
 $6 = $598;
 $33 = 0;
 while(1) {
  $599 = $33;
  $600 = $5;
  $601 = ((($600)) + 12|0);
  $602 = HEAP32[$601>>2]|0;
  $603 = ($599>>>0)<($602>>>0);
  if (!($603)) {
   break;
  }
  $604 = $6;
  $605 = $21;
  $606 = $23;
  $607 = (($605) + ($606))|0;
  $608 = $25;
  $609 = (($607) + ($608))|0;
  $610 = $33;
  $611 = (($609) + ($610))|0;
  $612 = (($604) + ($611<<1)|0);
  $613 = HEAP16[$612>>1]|0;
  $614 = $613&65535;
  $28 = $614;
  $615 = $15;
  $616 = $16;
  $617 = ($615|0)>=($616|0);
  if ($617) {
   $618 = $16;
   $619 = $17;
   $620 = ($618|0)>=($619|0);
   if ($620) {
    $621 = $6;
    $622 = $22;
    $623 = $23;
    $624 = (($622) + ($623))|0;
    $625 = $25;
    $626 = (($624) + ($625))|0;
    $627 = $33;
    $628 = (($626) + ($627))|0;
    $629 = (($621) + ($628<<1)|0);
    $630 = HEAP16[$629>>1]|0;
    $631 = $630&65535;
    $632 = $28;
    $633 = (($631) - ($632))|0;
    $29 = $633;
    $634 = $6;
    $635 = $22;
    $636 = $24;
    $637 = (($635) + ($636))|0;
    $638 = $25;
    $639 = (($637) + ($638))|0;
    $640 = $33;
    $641 = (($639) + ($640))|0;
    $642 = (($634) + ($641<<1)|0);
    $643 = HEAP16[$642>>1]|0;
    $644 = $643&65535;
    $645 = $6;
    $646 = $22;
    $647 = $23;
    $648 = (($646) + ($647))|0;
    $649 = $25;
    $650 = (($648) + ($649))|0;
    $651 = $33;
    $652 = (($650) + ($651))|0;
    $653 = (($645) + ($652<<1)|0);
    $654 = HEAP16[$653>>1]|0;
    $655 = $654&65535;
    $656 = (($644) - ($655))|0;
    $30 = $656;
    $657 = $6;
    $658 = $22;
    $659 = $24;
    $660 = (($658) + ($659))|0;
    $661 = $26;
    $662 = (($660) + ($661))|0;
    $663 = $33;
    $664 = (($662) + ($663))|0;
    $665 = (($657) + ($664<<1)|0);
    $666 = HEAP16[$665>>1]|0;
    $667 = $666&65535;
    $668 = $6;
    $669 = $22;
    $670 = $24;
    $671 = (($669) + ($670))|0;
    $672 = $25;
    $673 = (($671) + ($672))|0;
    $674 = $33;
    $675 = (($673) + ($674))|0;
    $676 = (($668) + ($675<<1)|0);
    $677 = HEAP16[$676>>1]|0;
    $678 = $677&65535;
    $679 = (($667) - ($678))|0;
    $31 = $679;
   } else {
    label = 36;
   }
  } else {
   label = 36;
  }
  do {
   if ((label|0) == 36) {
    label = 0;
    $680 = $15;
    $681 = $17;
    $682 = ($680|0)>=($681|0);
    if ($682) {
     $683 = $17;
     $684 = $16;
     $685 = ($683|0)>=($684|0);
     if ($685) {
      $686 = $6;
      $687 = $22;
      $688 = $23;
      $689 = (($687) + ($688))|0;
      $690 = $25;
      $691 = (($689) + ($690))|0;
      $692 = $33;
      $693 = (($691) + ($692))|0;
      $694 = (($686) + ($693<<1)|0);
      $695 = HEAP16[$694>>1]|0;
      $696 = $695&65535;
      $697 = $28;
      $698 = (($696) - ($697))|0;
      $29 = $698;
      $699 = $6;
      $700 = $22;
      $701 = $24;
      $702 = (($700) + ($701))|0;
      $703 = $26;
      $704 = (($702) + ($703))|0;
      $705 = $33;
      $706 = (($704) + ($705))|0;
      $707 = (($699) + ($706<<1)|0);
      $708 = HEAP16[$707>>1]|0;
      $709 = $708&65535;
      $710 = $6;
      $711 = $22;
      $712 = $23;
      $713 = (($711) + ($712))|0;
      $714 = $26;
      $715 = (($713) + ($714))|0;
      $716 = $33;
      $717 = (($715) + ($716))|0;
      $718 = (($710) + ($717<<1)|0);
      $719 = HEAP16[$718>>1]|0;
      $720 = $719&65535;
      $721 = (($709) - ($720))|0;
      $30 = $721;
      $722 = $6;
      $723 = $22;
      $724 = $23;
      $725 = (($723) + ($724))|0;
      $726 = $26;
      $727 = (($725) + ($726))|0;
      $728 = $33;
      $729 = (($727) + ($728))|0;
      $730 = (($722) + ($729<<1)|0);
      $731 = HEAP16[$730>>1]|0;
      $732 = $731&65535;
      $733 = $6;
      $734 = $22;
      $735 = $23;
      $736 = (($734) + ($735))|0;
      $737 = $25;
      $738 = (($736) + ($737))|0;
      $739 = $33;
      $740 = (($738) + ($739))|0;
      $741 = (($733) + ($740<<1)|0);
      $742 = HEAP16[$741>>1]|0;
      $743 = $742&65535;
      $744 = (($732) - ($743))|0;
      $31 = $744;
      break;
     }
    }
    $745 = $17;
    $746 = $15;
    $747 = ($745|0)>=($746|0);
    if ($747) {
     $748 = $15;
     $749 = $16;
     $750 = ($748|0)>=($749|0);
     if ($750) {
      $751 = $6;
      $752 = $22;
      $753 = $23;
      $754 = (($752) + ($753))|0;
      $755 = $26;
      $756 = (($754) + ($755))|0;
      $757 = $33;
      $758 = (($756) + ($757))|0;
      $759 = (($751) + ($758<<1)|0);
      $760 = HEAP16[$759>>1]|0;
      $761 = $760&65535;
      $762 = $6;
      $763 = $21;
      $764 = $23;
      $765 = (($763) + ($764))|0;
      $766 = $26;
      $767 = (($765) + ($766))|0;
      $768 = $33;
      $769 = (($767) + ($768))|0;
      $770 = (($762) + ($769<<1)|0);
      $771 = HEAP16[$770>>1]|0;
      $772 = $771&65535;
      $773 = (($761) - ($772))|0;
      $29 = $773;
      $774 = $6;
      $775 = $22;
      $776 = $24;
      $777 = (($775) + ($776))|0;
      $778 = $26;
      $779 = (($777) + ($778))|0;
      $780 = $33;
      $781 = (($779) + ($780))|0;
      $782 = (($774) + ($781<<1)|0);
      $783 = HEAP16[$782>>1]|0;
      $784 = $783&65535;
      $785 = $6;
      $786 = $22;
      $787 = $23;
      $788 = (($786) + ($787))|0;
      $789 = $26;
      $790 = (($788) + ($789))|0;
      $791 = $33;
      $792 = (($790) + ($791))|0;
      $793 = (($785) + ($792<<1)|0);
      $794 = HEAP16[$793>>1]|0;
      $795 = $794&65535;
      $796 = (($784) - ($795))|0;
      $30 = $796;
      $797 = $6;
      $798 = $21;
      $799 = $23;
      $800 = (($798) + ($799))|0;
      $801 = $26;
      $802 = (($800) + ($801))|0;
      $803 = $33;
      $804 = (($802) + ($803))|0;
      $805 = (($797) + ($804<<1)|0);
      $806 = HEAP16[$805>>1]|0;
      $807 = $806&65535;
      $808 = $28;
      $809 = (($807) - ($808))|0;
      $31 = $809;
      break;
     }
    }
    $810 = $16;
    $811 = $15;
    $812 = ($810|0)>=($811|0);
    if ($812) {
     $813 = $15;
     $814 = $17;
     $815 = ($813|0)>=($814|0);
     if ($815) {
      $816 = $6;
      $817 = $22;
      $818 = $24;
      $819 = (($817) + ($818))|0;
      $820 = $25;
      $821 = (($819) + ($820))|0;
      $822 = $33;
      $823 = (($821) + ($822))|0;
      $824 = (($816) + ($823<<1)|0);
      $825 = HEAP16[$824>>1]|0;
      $826 = $825&65535;
      $827 = $6;
      $828 = $21;
      $829 = $24;
      $830 = (($828) + ($829))|0;
      $831 = $25;
      $832 = (($830) + ($831))|0;
      $833 = $33;
      $834 = (($832) + ($833))|0;
      $835 = (($827) + ($834<<1)|0);
      $836 = HEAP16[$835>>1]|0;
      $837 = $836&65535;
      $838 = (($826) - ($837))|0;
      $29 = $838;
      $839 = $6;
      $840 = $21;
      $841 = $24;
      $842 = (($840) + ($841))|0;
      $843 = $25;
      $844 = (($842) + ($843))|0;
      $845 = $33;
      $846 = (($844) + ($845))|0;
      $847 = (($839) + ($846<<1)|0);
      $848 = HEAP16[$847>>1]|0;
      $849 = $848&65535;
      $850 = $28;
      $851 = (($849) - ($850))|0;
      $30 = $851;
      $852 = $6;
      $853 = $22;
      $854 = $24;
      $855 = (($853) + ($854))|0;
      $856 = $26;
      $857 = (($855) + ($856))|0;
      $858 = $33;
      $859 = (($857) + ($858))|0;
      $860 = (($852) + ($859<<1)|0);
      $861 = HEAP16[$860>>1]|0;
      $862 = $861&65535;
      $863 = $6;
      $864 = $22;
      $865 = $24;
      $866 = (($864) + ($865))|0;
      $867 = $25;
      $868 = (($866) + ($867))|0;
      $869 = $33;
      $870 = (($868) + ($869))|0;
      $871 = (($863) + ($870<<1)|0);
      $872 = HEAP16[$871>>1]|0;
      $873 = $872&65535;
      $874 = (($862) - ($873))|0;
      $31 = $874;
      break;
     }
    }
    $875 = $16;
    $876 = $17;
    $877 = ($875|0)>=($876|0);
    if ($877) {
     $878 = $17;
     $879 = $15;
     $880 = ($878|0)>=($879|0);
     if ($880) {
      $881 = $6;
      $882 = $22;
      $883 = $24;
      $884 = (($882) + ($883))|0;
      $885 = $26;
      $886 = (($884) + ($885))|0;
      $887 = $33;
      $888 = (($886) + ($887))|0;
      $889 = (($881) + ($888<<1)|0);
      $890 = HEAP16[$889>>1]|0;
      $891 = $890&65535;
      $892 = $6;
      $893 = $21;
      $894 = $24;
      $895 = (($893) + ($894))|0;
      $896 = $26;
      $897 = (($895) + ($896))|0;
      $898 = $33;
      $899 = (($897) + ($898))|0;
      $900 = (($892) + ($899<<1)|0);
      $901 = HEAP16[$900>>1]|0;
      $902 = $901&65535;
      $903 = (($891) - ($902))|0;
      $29 = $903;
      $904 = $6;
      $905 = $21;
      $906 = $24;
      $907 = (($905) + ($906))|0;
      $908 = $25;
      $909 = (($907) + ($908))|0;
      $910 = $33;
      $911 = (($909) + ($910))|0;
      $912 = (($904) + ($911<<1)|0);
      $913 = HEAP16[$912>>1]|0;
      $914 = $913&65535;
      $915 = $28;
      $916 = (($914) - ($915))|0;
      $30 = $916;
      $917 = $6;
      $918 = $21;
      $919 = $24;
      $920 = (($918) + ($919))|0;
      $921 = $26;
      $922 = (($920) + ($921))|0;
      $923 = $33;
      $924 = (($922) + ($923))|0;
      $925 = (($917) + ($924<<1)|0);
      $926 = HEAP16[$925>>1]|0;
      $927 = $926&65535;
      $928 = $6;
      $929 = $21;
      $930 = $24;
      $931 = (($929) + ($930))|0;
      $932 = $25;
      $933 = (($931) + ($932))|0;
      $934 = $33;
      $935 = (($933) + ($934))|0;
      $936 = (($928) + ($935<<1)|0);
      $937 = HEAP16[$936>>1]|0;
      $938 = $937&65535;
      $939 = (($927) - ($938))|0;
      $31 = $939;
      break;
     }
    }
    $940 = $17;
    $941 = $16;
    $942 = ($940|0)>=($941|0);
    if ($942) {
     $943 = $16;
     $944 = $15;
     $945 = ($943|0)>=($944|0);
     if ($945) {
      $946 = $6;
      $947 = $22;
      $948 = $24;
      $949 = (($947) + ($948))|0;
      $950 = $26;
      $951 = (($949) + ($950))|0;
      $952 = $33;
      $953 = (($951) + ($952))|0;
      $954 = (($946) + ($953<<1)|0);
      $955 = HEAP16[$954>>1]|0;
      $956 = $955&65535;
      $957 = $6;
      $958 = $21;
      $959 = $24;
      $960 = (($958) + ($959))|0;
      $961 = $26;
      $962 = (($960) + ($961))|0;
      $963 = $33;
      $964 = (($962) + ($963))|0;
      $965 = (($957) + ($964<<1)|0);
      $966 = HEAP16[$965>>1]|0;
      $967 = $966&65535;
      $968 = (($956) - ($967))|0;
      $29 = $968;
      $969 = $6;
      $970 = $21;
      $971 = $24;
      $972 = (($970) + ($971))|0;
      $973 = $26;
      $974 = (($972) + ($973))|0;
      $975 = $33;
      $976 = (($974) + ($975))|0;
      $977 = (($969) + ($976<<1)|0);
      $978 = HEAP16[$977>>1]|0;
      $979 = $978&65535;
      $980 = $6;
      $981 = $21;
      $982 = $23;
      $983 = (($981) + ($982))|0;
      $984 = $26;
      $985 = (($983) + ($984))|0;
      $986 = $33;
      $987 = (($985) + ($986))|0;
      $988 = (($980) + ($987<<1)|0);
      $989 = HEAP16[$988>>1]|0;
      $990 = $989&65535;
      $991 = (($979) - ($990))|0;
      $30 = $991;
      $992 = $6;
      $993 = $21;
      $994 = $23;
      $995 = (($993) + ($994))|0;
      $996 = $26;
      $997 = (($995) + ($996))|0;
      $998 = $33;
      $999 = (($997) + ($998))|0;
      $1000 = (($992) + ($999<<1)|0);
      $1001 = HEAP16[$1000>>1]|0;
      $1002 = $1001&65535;
      $1003 = $28;
      $1004 = (($1002) - ($1003))|0;
      $31 = $1004;
      break;
     }
    }
    $31 = 0;
    $30 = 0;
    $29 = 0;
   }
  } while(0);
  $1005 = $29;
  $1006 = $15;
  $1007 = Math_imul($1005, $1006)|0;
  $1008 = $30;
  $1009 = $16;
  $1010 = Math_imul($1008, $1009)|0;
  $1011 = (($1007) + ($1010))|0;
  $1012 = $31;
  $1013 = $17;
  $1014 = Math_imul($1012, $1013)|0;
  $1015 = (($1011) + ($1014))|0;
  $32 = $1015;
  $1016 = $28;
  $1017 = $32;
  $1018 = (__cmsToFixedDomain($1017)|0);
  $1019 = (($1018) + 32768)|0;
  $1020 = $1019 >> 16;
  $1021 = (($1016) + ($1020))|0;
  $1022 = $1021&65535;
  $1023 = $33;
  $1024 = (($35) + ($1023<<1)|0);
  HEAP16[$1024>>1] = $1022;
  $1025 = $33;
  $1026 = (($1025) + 1)|0;
  $33 = $1026;
 }
 $27 = 0;
 while(1) {
  $1027 = $27;
  $1028 = $5;
  $1029 = ((($1028)) + 12|0);
  $1030 = HEAP32[$1029>>2]|0;
  $1031 = ($1027>>>0)<($1030>>>0);
  if (!($1031)) {
   break;
  }
  $1032 = $9;
  $1033 = $27;
  $1034 = (($34) + ($1033<<1)|0);
  $1035 = HEAP16[$1034>>1]|0;
  $1036 = $1035&65535;
  $1037 = $27;
  $1038 = (($35) + ($1037<<1)|0);
  $1039 = HEAP16[$1038>>1]|0;
  $1040 = $1039&65535;
  $1041 = (_LinearInterp($1032,$1036,$1040)|0);
  $1042 = $4;
  $1043 = $27;
  $1044 = (($1042) + ($1043<<1)|0);
  HEAP16[$1044>>1] = $1041;
  $1045 = $27;
  $1046 = (($1045) + 1)|0;
  $27 = $1046;
 }
 STACKTOP = sp;return;
}
function _Eval5InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1200|0);
 $14 = sp + 640|0;
 $15 = sp + 128|0;
 $16 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $19 = $5;
 $20 = ((($19)) + 112|0);
 $21 = HEAP32[$20>>2]|0;
 $6 = $21;
 $22 = $3;
 $23 = +HEAPF32[$22>>2];
 $24 = (+_fclamp($23));
 $25 = $5;
 $26 = ((($25)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+($27>>>0));
 $29 = $24 * $28;
 $8 = $29;
 $30 = $8;
 $31 = $30;
 $32 = (__cmsQuickFloor_205($31)|0);
 $9 = $32;
 $33 = $8;
 $34 = $9;
 $35 = (+($34|0));
 $36 = $33 - $35;
 $7 = $36;
 $37 = $5;
 $38 = ((($37)) + 80|0);
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $9;
 $42 = Math_imul($40, $41)|0;
 $10 = $42;
 $43 = $10;
 $44 = $3;
 $45 = +HEAPF32[$44>>2];
 $46 = (+_fclamp($45));
 $47 = $46;
 $48 = $47 >= 1.0;
 if ($48) {
  $54 = 0;
 } else {
  $49 = $5;
  $50 = ((($49)) + 80|0);
  $51 = ((($50)) + 16|0);
  $52 = HEAP32[$51>>2]|0;
  $54 = $52;
 }
 $53 = (($43) + ($54))|0;
 $11 = $53;
 $55 = $5;
 dest=$16; src=$55; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $56 = ((($16)) + 48|0);
 $57 = $5;
 $58 = ((($57)) + 48|0);
 $59 = ((($58)) + 4|0);
 _memmove(($56|0),($59|0),16)|0;
 $60 = $6;
 $61 = $10;
 $62 = (($60) + ($61<<2)|0);
 $12 = $62;
 $63 = $12;
 $64 = ((($16)) + 112|0);
 HEAP32[$64>>2] = $63;
 $65 = $3;
 $66 = ((($65)) + 4|0);
 _Eval4InputsFloat($66,$14,$16);
 $67 = $6;
 $68 = $11;
 $69 = (($67) + ($68<<2)|0);
 $12 = $69;
 $70 = $12;
 $71 = ((($16)) + 112|0);
 HEAP32[$71>>2] = $70;
 $72 = $3;
 $73 = ((($72)) + 4|0);
 _Eval4InputsFloat($73,$15,$16);
 $13 = 0;
 while(1) {
  $74 = $13;
  $75 = $5;
  $76 = ((($75)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($74>>>0)<($77>>>0);
  if (!($78)) {
   break;
  }
  $79 = $13;
  $80 = (($14) + ($79<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $17 = $81;
  $82 = $13;
  $83 = (($15) + ($82<<2)|0);
  $84 = +HEAPF32[$83>>2];
  $18 = $84;
  $85 = $17;
  $86 = $18;
  $87 = $17;
  $88 = $86 - $87;
  $89 = $7;
  $90 = $88 * $89;
  $91 = $85 + $90;
  $92 = $4;
  $93 = $13;
  $94 = (($92) + ($93<<2)|0);
  HEAPF32[$94>>2] = $91;
  $95 = $13;
  $96 = (($95) + 1)|0;
  $13 = $96;
 }
 STACKTOP = sp;return;
}
function _Eval5Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(688|0);
 $14 = sp + 424|0;
 $15 = sp + 168|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $17 = $5;
 $18 = ((($17)) + 112|0);
 $19 = HEAP32[$18>>2]|0;
 $6 = $19;
 $20 = $3;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = $5;
 $24 = ((($23)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = Math_imul($22, $25)|0;
 $27 = (__cmsToFixedDomain($26)|0);
 $7 = $27;
 $28 = $7;
 $29 = $28 >> 16;
 $8 = $29;
 $30 = $7;
 $31 = $30 & 65535;
 $9 = $31;
 $32 = $5;
 $33 = ((($32)) + 80|0);
 $34 = ((($33)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $8;
 $37 = Math_imul($35, $36)|0;
 $10 = $37;
 $38 = $5;
 $39 = ((($38)) + 80|0);
 $40 = ((($39)) + 16|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $8;
 $43 = $3;
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = ($45|0)!=(65535);
 $47 = $46 ? 1 : 0;
 $48 = (($42) + ($47))|0;
 $49 = Math_imul($41, $48)|0;
 $11 = $49;
 $50 = $5;
 dest=$16; src=$50; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $51 = ((($16)) + 48|0);
 $52 = $5;
 $53 = ((($52)) + 48|0);
 $54 = ((($53)) + 4|0);
 _memmove(($51|0),($54|0),16)|0;
 $55 = $6;
 $56 = $10;
 $57 = (($55) + ($56<<1)|0);
 $12 = $57;
 $58 = $12;
 $59 = ((($16)) + 112|0);
 HEAP32[$59>>2] = $58;
 $60 = $3;
 $61 = ((($60)) + 2|0);
 _Eval4Inputs($61,$14,$16);
 $62 = $6;
 $63 = $11;
 $64 = (($62) + ($63<<1)|0);
 $12 = $64;
 $65 = $12;
 $66 = ((($16)) + 112|0);
 HEAP32[$66>>2] = $65;
 $67 = $3;
 $68 = ((($67)) + 2|0);
 _Eval4Inputs($68,$15,$16);
 $13 = 0;
 while(1) {
  $69 = $13;
  $70 = $5;
  $71 = ((($70)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($69>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $9;
  $75 = $13;
  $76 = (($14) + ($75<<1)|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77&65535;
  $79 = $13;
  $80 = (($15) + ($79<<1)|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = (_LinearInterp($74,$78,$82)|0);
  $84 = $4;
  $85 = $13;
  $86 = (($84) + ($85<<1)|0);
  HEAP16[$86>>1] = $83;
  $87 = $13;
  $88 = (($87) + 1)|0;
  $13 = $88;
 }
 STACKTOP = sp;return;
}
function _Eval6InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1200|0);
 $14 = sp + 640|0;
 $15 = sp + 128|0;
 $16 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $19 = $5;
 $20 = ((($19)) + 112|0);
 $21 = HEAP32[$20>>2]|0;
 $6 = $21;
 $22 = $3;
 $23 = +HEAPF32[$22>>2];
 $24 = (+_fclamp($23));
 $25 = $5;
 $26 = ((($25)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+($27>>>0));
 $29 = $24 * $28;
 $8 = $29;
 $30 = $8;
 $31 = $30;
 $32 = (__cmsQuickFloor_205($31)|0);
 $9 = $32;
 $33 = $8;
 $34 = $9;
 $35 = (+($34|0));
 $36 = $33 - $35;
 $7 = $36;
 $37 = $5;
 $38 = ((($37)) + 80|0);
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $9;
 $42 = Math_imul($40, $41)|0;
 $10 = $42;
 $43 = $10;
 $44 = $3;
 $45 = +HEAPF32[$44>>2];
 $46 = (+_fclamp($45));
 $47 = $46;
 $48 = $47 >= 1.0;
 if ($48) {
  $54 = 0;
 } else {
  $49 = $5;
  $50 = ((($49)) + 80|0);
  $51 = ((($50)) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  $54 = $52;
 }
 $53 = (($43) + ($54))|0;
 $11 = $53;
 $55 = $5;
 dest=$16; src=$55; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $56 = ((($16)) + 48|0);
 $57 = $5;
 $58 = ((($57)) + 48|0);
 $59 = ((($58)) + 4|0);
 _memmove(($56|0),($59|0),20)|0;
 $60 = $6;
 $61 = $10;
 $62 = (($60) + ($61<<2)|0);
 $12 = $62;
 $63 = $12;
 $64 = ((($16)) + 112|0);
 HEAP32[$64>>2] = $63;
 $65 = $3;
 $66 = ((($65)) + 4|0);
 _Eval5InputsFloat($66,$14,$16);
 $67 = $6;
 $68 = $11;
 $69 = (($67) + ($68<<2)|0);
 $12 = $69;
 $70 = $12;
 $71 = ((($16)) + 112|0);
 HEAP32[$71>>2] = $70;
 $72 = $3;
 $73 = ((($72)) + 4|0);
 _Eval5InputsFloat($73,$15,$16);
 $13 = 0;
 while(1) {
  $74 = $13;
  $75 = $5;
  $76 = ((($75)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($74>>>0)<($77>>>0);
  if (!($78)) {
   break;
  }
  $79 = $13;
  $80 = (($14) + ($79<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $17 = $81;
  $82 = $13;
  $83 = (($15) + ($82<<2)|0);
  $84 = +HEAPF32[$83>>2];
  $18 = $84;
  $85 = $17;
  $86 = $18;
  $87 = $17;
  $88 = $86 - $87;
  $89 = $7;
  $90 = $88 * $89;
  $91 = $85 + $90;
  $92 = $4;
  $93 = $13;
  $94 = (($92) + ($93<<2)|0);
  HEAPF32[$94>>2] = $91;
  $95 = $13;
  $96 = (($95) + 1)|0;
  $13 = $96;
 }
 STACKTOP = sp;return;
}
function _Eval6Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(688|0);
 $14 = sp + 424|0;
 $15 = sp + 168|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $17 = $5;
 $18 = ((($17)) + 112|0);
 $19 = HEAP32[$18>>2]|0;
 $6 = $19;
 $20 = $3;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = $5;
 $24 = ((($23)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = Math_imul($22, $25)|0;
 $27 = (__cmsToFixedDomain($26)|0);
 $7 = $27;
 $28 = $7;
 $29 = $28 >> 16;
 $8 = $29;
 $30 = $7;
 $31 = $30 & 65535;
 $9 = $31;
 $32 = $5;
 $33 = ((($32)) + 80|0);
 $34 = ((($33)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $8;
 $37 = Math_imul($35, $36)|0;
 $10 = $37;
 $38 = $5;
 $39 = ((($38)) + 80|0);
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $8;
 $43 = $3;
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = ($45|0)!=(65535);
 $47 = $46 ? 1 : 0;
 $48 = (($42) + ($47))|0;
 $49 = Math_imul($41, $48)|0;
 $11 = $49;
 $50 = $5;
 dest=$16; src=$50; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $51 = ((($16)) + 48|0);
 $52 = $5;
 $53 = ((($52)) + 48|0);
 $54 = ((($53)) + 4|0);
 _memmove(($51|0),($54|0),20)|0;
 $55 = $6;
 $56 = $10;
 $57 = (($55) + ($56<<1)|0);
 $12 = $57;
 $58 = $12;
 $59 = ((($16)) + 112|0);
 HEAP32[$59>>2] = $58;
 $60 = $3;
 $61 = ((($60)) + 2|0);
 _Eval5Inputs($61,$14,$16);
 $62 = $6;
 $63 = $11;
 $64 = (($62) + ($63<<1)|0);
 $12 = $64;
 $65 = $12;
 $66 = ((($16)) + 112|0);
 HEAP32[$66>>2] = $65;
 $67 = $3;
 $68 = ((($67)) + 2|0);
 _Eval5Inputs($68,$15,$16);
 $13 = 0;
 while(1) {
  $69 = $13;
  $70 = $5;
  $71 = ((($70)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($69>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $9;
  $75 = $13;
  $76 = (($14) + ($75<<1)|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77&65535;
  $79 = $13;
  $80 = (($15) + ($79<<1)|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = (_LinearInterp($74,$78,$82)|0);
  $84 = $4;
  $85 = $13;
  $86 = (($84) + ($85<<1)|0);
  HEAP16[$86>>1] = $83;
  $87 = $13;
  $88 = (($87) + 1)|0;
  $13 = $88;
 }
 STACKTOP = sp;return;
}
function _Eval7InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1200|0);
 $14 = sp + 640|0;
 $15 = sp + 128|0;
 $16 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $19 = $5;
 $20 = ((($19)) + 112|0);
 $21 = HEAP32[$20>>2]|0;
 $6 = $21;
 $22 = $3;
 $23 = +HEAPF32[$22>>2];
 $24 = (+_fclamp($23));
 $25 = $5;
 $26 = ((($25)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+($27>>>0));
 $29 = $24 * $28;
 $8 = $29;
 $30 = $8;
 $31 = $30;
 $32 = (__cmsQuickFloor_205($31)|0);
 $9 = $32;
 $33 = $8;
 $34 = $9;
 $35 = (+($34|0));
 $36 = $33 - $35;
 $7 = $36;
 $37 = $5;
 $38 = ((($37)) + 80|0);
 $39 = ((($38)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $9;
 $42 = Math_imul($40, $41)|0;
 $10 = $42;
 $43 = $10;
 $44 = $3;
 $45 = +HEAPF32[$44>>2];
 $46 = (+_fclamp($45));
 $47 = $46;
 $48 = $47 >= 1.0;
 if ($48) {
  $54 = 0;
 } else {
  $49 = $5;
  $50 = ((($49)) + 80|0);
  $51 = ((($50)) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $54 = $52;
 }
 $53 = (($43) + ($54))|0;
 $11 = $53;
 $55 = $5;
 dest=$16; src=$55; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $56 = ((($16)) + 48|0);
 $57 = $5;
 $58 = ((($57)) + 48|0);
 $59 = ((($58)) + 4|0);
 _memmove(($56|0),($59|0),24)|0;
 $60 = $6;
 $61 = $10;
 $62 = (($60) + ($61<<2)|0);
 $12 = $62;
 $63 = $12;
 $64 = ((($16)) + 112|0);
 HEAP32[$64>>2] = $63;
 $65 = $3;
 $66 = ((($65)) + 4|0);
 _Eval6InputsFloat($66,$14,$16);
 $67 = $6;
 $68 = $11;
 $69 = (($67) + ($68<<2)|0);
 $12 = $69;
 $70 = $12;
 $71 = ((($16)) + 112|0);
 HEAP32[$71>>2] = $70;
 $72 = $3;
 $73 = ((($72)) + 4|0);
 _Eval6InputsFloat($73,$15,$16);
 $13 = 0;
 while(1) {
  $74 = $13;
  $75 = $5;
  $76 = ((($75)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($74>>>0)<($77>>>0);
  if (!($78)) {
   break;
  }
  $79 = $13;
  $80 = (($14) + ($79<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $17 = $81;
  $82 = $13;
  $83 = (($15) + ($82<<2)|0);
  $84 = +HEAPF32[$83>>2];
  $18 = $84;
  $85 = $17;
  $86 = $18;
  $87 = $17;
  $88 = $86 - $87;
  $89 = $7;
  $90 = $88 * $89;
  $91 = $85 + $90;
  $92 = $4;
  $93 = $13;
  $94 = (($92) + ($93<<2)|0);
  HEAPF32[$94>>2] = $91;
  $95 = $13;
  $96 = (($95) + 1)|0;
  $13 = $96;
 }
 STACKTOP = sp;return;
}
function _Eval7Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(688|0);
 $14 = sp + 424|0;
 $15 = sp + 168|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $17 = $5;
 $18 = ((($17)) + 112|0);
 $19 = HEAP32[$18>>2]|0;
 $6 = $19;
 $20 = $3;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = $5;
 $24 = ((($23)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = Math_imul($22, $25)|0;
 $27 = (__cmsToFixedDomain($26)|0);
 $7 = $27;
 $28 = $7;
 $29 = $28 >> 16;
 $8 = $29;
 $30 = $7;
 $31 = $30 & 65535;
 $9 = $31;
 $32 = $5;
 $33 = ((($32)) + 80|0);
 $34 = ((($33)) + 24|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $8;
 $37 = Math_imul($35, $36)|0;
 $10 = $37;
 $38 = $5;
 $39 = ((($38)) + 80|0);
 $40 = ((($39)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $8;
 $43 = $3;
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = ($45|0)!=(65535);
 $47 = $46 ? 1 : 0;
 $48 = (($42) + ($47))|0;
 $49 = Math_imul($41, $48)|0;
 $11 = $49;
 $50 = $5;
 dest=$16; src=$50; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $51 = ((($16)) + 48|0);
 $52 = $5;
 $53 = ((($52)) + 48|0);
 $54 = ((($53)) + 4|0);
 _memmove(($51|0),($54|0),24)|0;
 $55 = $6;
 $56 = $10;
 $57 = (($55) + ($56<<1)|0);
 $12 = $57;
 $58 = $12;
 $59 = ((($16)) + 112|0);
 HEAP32[$59>>2] = $58;
 $60 = $3;
 $61 = ((($60)) + 2|0);
 _Eval6Inputs($61,$14,$16);
 $62 = $6;
 $63 = $11;
 $64 = (($62) + ($63<<1)|0);
 $12 = $64;
 $65 = $12;
 $66 = ((($16)) + 112|0);
 HEAP32[$66>>2] = $65;
 $67 = $3;
 $68 = ((($67)) + 2|0);
 _Eval6Inputs($68,$15,$16);
 $13 = 0;
 while(1) {
  $69 = $13;
  $70 = $5;
  $71 = ((($70)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($69>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $9;
  $75 = $13;
  $76 = (($14) + ($75<<1)|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77&65535;
  $79 = $13;
  $80 = (($15) + ($79<<1)|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = (_LinearInterp($74,$78,$82)|0);
  $84 = $4;
  $85 = $13;
  $86 = (($84) + ($85<<1)|0);
  HEAP16[$86>>1] = $83;
  $87 = $13;
  $88 = (($87) + 1)|0;
  $13 = $88;
 }
 STACKTOP = sp;return;
}
function _Eval8InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1200|0);
 $14 = sp + 640|0;
 $15 = sp + 128|0;
 $16 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $19 = $5;
 $20 = ((($19)) + 112|0);
 $21 = HEAP32[$20>>2]|0;
 $6 = $21;
 $22 = $3;
 $23 = +HEAPF32[$22>>2];
 $24 = (+_fclamp($23));
 $25 = $5;
 $26 = ((($25)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+($27>>>0));
 $29 = $24 * $28;
 $8 = $29;
 $30 = $8;
 $31 = $30;
 $32 = (__cmsQuickFloor_205($31)|0);
 $9 = $32;
 $33 = $8;
 $34 = $9;
 $35 = (+($34|0));
 $36 = $33 - $35;
 $7 = $36;
 $37 = $5;
 $38 = ((($37)) + 80|0);
 $39 = ((($38)) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $9;
 $42 = Math_imul($40, $41)|0;
 $10 = $42;
 $43 = $10;
 $44 = $3;
 $45 = +HEAPF32[$44>>2];
 $46 = (+_fclamp($45));
 $47 = $46;
 $48 = $47 >= 1.0;
 if ($48) {
  $54 = 0;
 } else {
  $49 = $5;
  $50 = ((($49)) + 80|0);
  $51 = ((($50)) + 28|0);
  $52 = HEAP32[$51>>2]|0;
  $54 = $52;
 }
 $53 = (($43) + ($54))|0;
 $11 = $53;
 $55 = $5;
 dest=$16; src=$55; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $56 = ((($16)) + 48|0);
 $57 = $5;
 $58 = ((($57)) + 48|0);
 $59 = ((($58)) + 4|0);
 _memmove(($56|0),($59|0),28)|0;
 $60 = $6;
 $61 = $10;
 $62 = (($60) + ($61<<2)|0);
 $12 = $62;
 $63 = $12;
 $64 = ((($16)) + 112|0);
 HEAP32[$64>>2] = $63;
 $65 = $3;
 $66 = ((($65)) + 4|0);
 _Eval7InputsFloat($66,$14,$16);
 $67 = $6;
 $68 = $11;
 $69 = (($67) + ($68<<2)|0);
 $12 = $69;
 $70 = $12;
 $71 = ((($16)) + 112|0);
 HEAP32[$71>>2] = $70;
 $72 = $3;
 $73 = ((($72)) + 4|0);
 _Eval7InputsFloat($73,$15,$16);
 $13 = 0;
 while(1) {
  $74 = $13;
  $75 = $5;
  $76 = ((($75)) + 12|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($74>>>0)<($77>>>0);
  if (!($78)) {
   break;
  }
  $79 = $13;
  $80 = (($14) + ($79<<2)|0);
  $81 = +HEAPF32[$80>>2];
  $17 = $81;
  $82 = $13;
  $83 = (($15) + ($82<<2)|0);
  $84 = +HEAPF32[$83>>2];
  $18 = $84;
  $85 = $17;
  $86 = $18;
  $87 = $17;
  $88 = $86 - $87;
  $89 = $7;
  $90 = $88 * $89;
  $91 = $85 + $90;
  $92 = $4;
  $93 = $13;
  $94 = (($92) + ($93<<2)|0);
  HEAPF32[$94>>2] = $91;
  $95 = $13;
  $96 = (($95) + 1)|0;
  $13 = $96;
 }
 STACKTOP = sp;return;
}
function _Eval8Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(688|0);
 $14 = sp + 424|0;
 $15 = sp + 168|0;
 $16 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $17 = $5;
 $18 = ((($17)) + 112|0);
 $19 = HEAP32[$18>>2]|0;
 $6 = $19;
 $20 = $3;
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = $5;
 $24 = ((($23)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = Math_imul($22, $25)|0;
 $27 = (__cmsToFixedDomain($26)|0);
 $7 = $27;
 $28 = $7;
 $29 = $28 >> 16;
 $8 = $29;
 $30 = $7;
 $31 = $30 & 65535;
 $9 = $31;
 $32 = $5;
 $33 = ((($32)) + 80|0);
 $34 = ((($33)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $8;
 $37 = Math_imul($35, $36)|0;
 $10 = $37;
 $38 = $5;
 $39 = ((($38)) + 80|0);
 $40 = ((($39)) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $8;
 $43 = $3;
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = ($45|0)!=(65535);
 $47 = $46 ? 1 : 0;
 $48 = (($42) + ($47))|0;
 $49 = Math_imul($41, $48)|0;
 $11 = $49;
 $50 = $5;
 dest=$16; src=$50; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $51 = ((($16)) + 48|0);
 $52 = $5;
 $53 = ((($52)) + 48|0);
 $54 = ((($53)) + 4|0);
 _memmove(($51|0),($54|0),28)|0;
 $55 = $6;
 $56 = $10;
 $57 = (($55) + ($56<<1)|0);
 $12 = $57;
 $58 = $12;
 $59 = ((($16)) + 112|0);
 HEAP32[$59>>2] = $58;
 $60 = $3;
 $61 = ((($60)) + 2|0);
 _Eval7Inputs($61,$14,$16);
 $62 = $6;
 $63 = $11;
 $64 = (($62) + ($63<<1)|0);
 $12 = $64;
 $65 = $12;
 $66 = ((($16)) + 112|0);
 HEAP32[$66>>2] = $65;
 $67 = $3;
 $68 = ((($67)) + 2|0);
 _Eval7Inputs($68,$15,$16);
 $13 = 0;
 while(1) {
  $69 = $13;
  $70 = $5;
  $71 = ((($70)) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($69>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $9;
  $75 = $13;
  $76 = (($14) + ($75<<1)|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77&65535;
  $79 = $13;
  $80 = (($15) + ($79<<1)|0);
  $81 = HEAP16[$80>>1]|0;
  $82 = $81&65535;
  $83 = (_LinearInterp($74,$78,$82)|0);
  $84 = $4;
  $85 = $13;
  $86 = (($84) + ($85<<1)|0);
  HEAP16[$86>>1] = $83;
  $87 = $13;
  $88 = (($87) + 1)|0;
  $13 = $88;
 }
 STACKTOP = sp;return;
}
function __cmsToFixedDomain($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = (($3) + 32767)|0;
 $5 = (($4|0) / 65535)&-1;
 $6 = (($2) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function _LinearInterp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = $4;
 $9 = (($7) - ($8))|0;
 $10 = $3;
 $11 = Math_imul($9, $10)|0;
 $12 = (($11) + 32768)|0;
 $6 = $12;
 $13 = $6;
 $14 = $13 >>> 16;
 $15 = $4;
 $16 = (($14) + ($15))|0;
 $6 = $16;
 $17 = $6;
 $18 = $17&65535;
 STACKTOP = sp;return ($18|0);
}
function _fclamp($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 < 9.9999997171806853E-10;
 if ($3) {
  $12 = 0.0;
 } else {
  $4 = $1;
  $5 = (___FLOAT_BITS_206($4)|0);
  $6 = $5 & 2147483647;
  $7 = ($6>>>0)>(2139095040);
  if ($7) {
   $12 = 0.0;
  } else {
   $8 = $1;
   $9 = $8 > 1.0;
   $10 = $1;
   $11 = $9 ? 1.0 : $10;
   $12 = $11;
  }
 }
 STACKTOP = sp;return (+$12);
}
function __cmsQuickFloor_205($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function ___FLOAT_BITS_206($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 HEAPF32[$2>>2] = $3;
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function ___DOUBLE_BITS_207($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 HEAPF64[$2>>3] = $3;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 tempRet0 = ($9);
 STACKTOP = sp;return ($6|0);
}
function __cmsComputeInterpParamsEx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $15 = $9;
 $16 = ($15>>>0)>(8);
 $17 = $7;
 if ($16) {
  $18 = $9;
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 8;
  _cmsSignalError($17,2,27080,$vararg_buffer);
  $6 = 0;
  $95 = $6;
  STACKTOP = sp;return ($95|0);
 }
 $19 = (__cmsMallocZero($17,120)|0);
 $13 = $19;
 $20 = $13;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $6 = 0;
  $95 = $6;
  STACKTOP = sp;return ($95|0);
 }
 $22 = $12;
 $23 = $13;
 $24 = ((($23)) + 4|0);
 HEAP32[$24>>2] = $22;
 $25 = $9;
 $26 = $13;
 $27 = ((($26)) + 8|0);
 HEAP32[$27>>2] = $25;
 $28 = $10;
 $29 = $13;
 $30 = ((($29)) + 12|0);
 HEAP32[$30>>2] = $28;
 $31 = $11;
 $32 = $13;
 $33 = ((($32)) + 112|0);
 HEAP32[$33>>2] = $31;
 $34 = $7;
 $35 = $13;
 HEAP32[$35>>2] = $34;
 $14 = 0;
 while(1) {
  $36 = $14;
  $37 = $9;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $8;
  $40 = $14;
  $41 = (($39) + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $13;
  $44 = ((($43)) + 16|0);
  $45 = $14;
  $46 = (($44) + ($45<<2)|0);
  HEAP32[$46>>2] = $42;
  $47 = $8;
  $48 = $14;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) - 1)|0;
  $52 = $13;
  $53 = ((($52)) + 48|0);
  $54 = $14;
  $55 = (($53) + ($54<<2)|0);
  HEAP32[$55>>2] = $51;
  $56 = $14;
  $57 = (($56) + 1)|0;
  $14 = $57;
 }
 $58 = $13;
 $59 = ((($58)) + 12|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $13;
 $62 = ((($61)) + 80|0);
 HEAP32[$62>>2] = $60;
 $14 = 1;
 while(1) {
  $63 = $14;
  $64 = $9;
  $65 = ($63>>>0)<($64>>>0);
  if (!($65)) {
   break;
  }
  $66 = $13;
  $67 = ((($66)) + 80|0);
  $68 = $14;
  $69 = (($68) - 1)|0;
  $70 = (($67) + ($69<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $8;
  $73 = $9;
  $74 = $14;
  $75 = (($73) - ($74))|0;
  $76 = (($72) + ($75<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = Math_imul($71, $77)|0;
  $79 = $13;
  $80 = ((($79)) + 80|0);
  $81 = $14;
  $82 = (($80) + ($81<<2)|0);
  HEAP32[$82>>2] = $78;
  $83 = $14;
  $84 = (($83) + 1)|0;
  $14 = $84;
 }
 $85 = $7;
 $86 = $13;
 $87 = (__cmsSetInterpolationRoutine($85,$86)|0);
 $88 = ($87|0)!=(0);
 if ($88) {
  $94 = $13;
  $6 = $94;
  $95 = $6;
  STACKTOP = sp;return ($95|0);
 } else {
  $89 = $7;
  $90 = $9;
  $91 = $10;
  HEAP32[$vararg_buffer2>>2] = $90;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $91;
  _cmsSignalError($89,8,25801,$vararg_buffer2);
  $92 = $7;
  $93 = $13;
  __cmsFree($92,$93);
  $6 = 0;
  $95 = $6;
  STACKTOP = sp;return ($95|0);
 }
 return (0)|0;
}
function __cmsComputeInterpParams($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $13 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 while(1) {
  $14 = $12;
  $15 = ($14|0)<(8);
  if (!($15)) {
   break;
  }
  $16 = $7;
  $17 = $12;
  $18 = (($13) + ($17<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = $12;
  $20 = (($19) + 1)|0;
  $12 = $20;
 }
 $21 = $6;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = (__cmsComputeInterpParamsEx($21,$13,$22,$23,$24,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function __cmsFreeInterpParams($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 __cmsFree($5,$6);
 STACKTOP = sp;return;
}
function _cmsOpenIOhandlerFromNULL($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $5 = $2;
 $6 = (__cmsMallocZero($5,292)|0);
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $1 = 0;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 $9 = $2;
 $10 = (__cmsMallocZero($9,4)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = $4;
  HEAP32[$13>>2] = 0;
  $14 = $2;
  $15 = $3;
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = $14;
  $17 = $4;
  $18 = $3;
  HEAP32[$18>>2] = $17;
  $19 = $3;
  $20 = ((($19)) + 8|0);
  HEAP32[$20>>2] = 0;
  $21 = $3;
  $22 = ((($21)) + 12|0);
  HEAP32[$22>>2] = 0;
  $23 = $3;
  $24 = ((($23)) + 16|0);
  HEAP8[$24>>0] = 0;
  $25 = $3;
  $26 = ((($25)) + 272|0);
  HEAP32[$26>>2] = 314;
  $27 = $3;
  $28 = ((($27)) + 276|0);
  HEAP32[$28>>2] = 315;
  $29 = $3;
  $30 = ((($29)) + 280|0);
  HEAP32[$30>>2] = 316;
  $31 = $3;
  $32 = ((($31)) + 284|0);
  HEAP32[$32>>2] = 317;
  $33 = $3;
  $34 = ((($33)) + 288|0);
  HEAP32[$34>>2] = 318;
  $35 = $3;
  $1 = $35;
  $40 = $1;
  STACKTOP = sp;return ($40|0);
 }
 $36 = $3;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $2;
  $39 = $3;
  __cmsFree($38,$39);
 }
 $1 = 0;
 $40 = $1;
 STACKTOP = sp;return ($40|0);
}
function _NULLRead($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $8 = $11;
 $12 = $6;
 $13 = $7;
 $14 = Math_imul($12, $13)|0;
 $9 = $14;
 $15 = $9;
 $16 = $8;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($15))|0;
 HEAP32[$16>>2] = $18;
 $19 = $7;
 STACKTOP = sp;return ($19|0);
}
function _NULLSeek($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $4 = $6;
 $7 = $3;
 $8 = $4;
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return 1;
}
function _NULLClose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $1;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 __cmsFree($7,$8);
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 __cmsFree($11,$12);
 STACKTOP = sp;return 1;
}
function _NULLTell($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _NULLWrite($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $6 = $8;
 $9 = $4;
 $10 = $6;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9))|0;
 HEAP32[$10>>2] = $12;
 $13 = $6;
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>($17>>>0);
 if (!($18)) {
  STACKTOP = sp;return 1;
 }
 $19 = $6;
 $20 = HEAP32[$19>>2]|0;
 $21 = $3;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return 1;
}
function _cmsOpenIOhandlerFromMem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $11 = $8;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((25845|0),(25872|0),243,(25900|0));
  // unreachable;
 }
 $13 = $5;
 $14 = (__cmsMallocZero($13,292)|0);
 $9 = $14;
 $15 = $9;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $4 = 0;
  $99 = $4;
  STACKTOP = sp;return ($99|0);
 }
 $17 = $8;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 L8: do {
  switch ($19|0) {
  case 114:  {
   $20 = $5;
   $21 = (__cmsMallocZero($20,16)|0);
   $10 = $21;
   $22 = $10;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $24 = $6;
    $25 = ($24|0)==(0|0);
    $26 = $5;
    if ($25) {
     _cmsSignalError($26,5,25924,$vararg_buffer);
     break L8;
    }
    $27 = $7;
    $28 = (__cmsMalloc($26,$27)|0);
    $29 = $10;
    HEAP32[$29>>2] = $28;
    $30 = $10;
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0|0);
    if (!($32)) {
     $39 = $10;
     $40 = HEAP32[$39>>2]|0;
     $41 = $6;
     $42 = $7;
     _memmove(($40|0),($41|0),($42|0))|0;
     $43 = $10;
     $44 = ((($43)) + 12|0);
     HEAP32[$44>>2] = 1;
     $45 = $7;
     $46 = $10;
     $47 = ((($46)) + 4|0);
     HEAP32[$47>>2] = $45;
     $48 = $10;
     $49 = ((($48)) + 8|0);
     HEAP32[$49>>2] = 0;
     $50 = $7;
     $51 = $9;
     $$sink = $50;$$sink2 = $51;
     label = 15;
     break L8;
    }
    $33 = $5;
    $34 = $10;
    __cmsFree($33,$34);
    $35 = $5;
    $36 = $9;
    __cmsFree($35,$36);
    $37 = $5;
    $38 = $7;
    HEAP32[$vararg_buffer3>>2] = $38;
    _cmsSignalError($37,5,25964,$vararg_buffer3);
    $4 = 0;
    $99 = $4;
    STACKTOP = sp;return ($99|0);
   }
   break;
  }
  case 119:  {
   $52 = $5;
   $53 = (__cmsMallocZero($52,16)|0);
   $10 = $53;
   $54 = $10;
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    $56 = $6;
    $57 = $10;
    HEAP32[$57>>2] = $56;
    $58 = $10;
    $59 = ((($58)) + 12|0);
    HEAP32[$59>>2] = 0;
    $60 = $7;
    $61 = $10;
    $62 = ((($61)) + 4|0);
    HEAP32[$62>>2] = $60;
    $63 = $10;
    $64 = ((($63)) + 8|0);
    HEAP32[$64>>2] = 0;
    $65 = $9;
    $$sink = 0;$$sink2 = $65;
    label = 15;
   }
   break;
  }
  default: {
   $66 = $5;
   $67 = $8;
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 << 24 >> 24;
   HEAP32[$vararg_buffer5>>2] = $69;
   _cmsSignalError($66,8,26004,$vararg_buffer5);
   $4 = 0;
   $99 = $4;
   STACKTOP = sp;return ($99|0);
  }
  }
 } while(0);
 if ((label|0) == 15) {
  $70 = ((($$sink2)) + 12|0);
  HEAP32[$70>>2] = $$sink;
  $71 = $5;
  $72 = $9;
  $73 = ((($72)) + 4|0);
  HEAP32[$73>>2] = $71;
  $74 = $10;
  $75 = $9;
  HEAP32[$75>>2] = $74;
  $76 = $9;
  $77 = ((($76)) + 8|0);
  HEAP32[$77>>2] = 0;
  $78 = $9;
  $79 = ((($78)) + 16|0);
  HEAP8[$79>>0] = 0;
  $80 = $9;
  $81 = ((($80)) + 272|0);
  HEAP32[$81>>2] = 319;
  $82 = $9;
  $83 = ((($82)) + 276|0);
  HEAP32[$83>>2] = 320;
  $84 = $9;
  $85 = ((($84)) + 280|0);
  HEAP32[$85>>2] = 321;
  $86 = $9;
  $87 = ((($86)) + 284|0);
  HEAP32[$87>>2] = 322;
  $88 = $9;
  $89 = ((($88)) + 288|0);
  HEAP32[$89>>2] = 323;
  $90 = $9;
  $4 = $90;
  $99 = $4;
  STACKTOP = sp;return ($99|0);
 }
 $91 = $10;
 $92 = ($91|0)!=(0|0);
 if ($92) {
  $93 = $5;
  $94 = $10;
  __cmsFree($93,$94);
 }
 $95 = $9;
 $96 = ($95|0)!=(0|0);
 if ($96) {
  $97 = $5;
  $98 = $9;
  __cmsFree($97,$98);
 }
 $4 = 0;
 $99 = $4;
 STACKTOP = sp;return ($99|0);
}
function _MemoryRead($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = HEAP32[$12>>2]|0;
 $9 = $13;
 $14 = $7;
 $15 = $8;
 $16 = Math_imul($14, $15)|0;
 $11 = $16;
 $17 = $9;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $11;
 $21 = (($19) + ($20))|0;
 $22 = $9;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21>>>0)>($24>>>0);
 $26 = $9;
 if ($25) {
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $9;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($28) - ($31))|0;
  $11 = $32;
  $33 = $5;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $11;
  $37 = $8;
  $38 = $7;
  $39 = Math_imul($37, $38)|0;
  HEAP32[$vararg_buffer>>2] = $36;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $39;
  _cmsSignalError($35,5,26070,$vararg_buffer);
  $4 = 0;
  $55 = $4;
  STACKTOP = sp;return ($55|0);
 } else {
  $40 = HEAP32[$26>>2]|0;
  $10 = $40;
  $41 = $9;
  $42 = ((($41)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $10;
  $45 = (($44) + ($43)|0);
  $10 = $45;
  $46 = $6;
  $47 = $10;
  $48 = $11;
  _memmove(($46|0),($47|0),($48|0))|0;
  $49 = $11;
  $50 = $9;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + ($49))|0;
  HEAP32[$51>>2] = $53;
  $54 = $8;
  $4 = $54;
  $55 = $4;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _MemorySeek($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $5 = $7;
 $8 = $4;
 $9 = $5;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>($11>>>0);
 if ($12) {
  $13 = $3;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  _cmsSignalError($15,6,26029,$vararg_buffer);
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 } else {
  $16 = $4;
  $17 = $5;
  $18 = ((($17)) + 8|0);
  HEAP32[$18>>2] = $16;
  $2 = 1;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _MemoryClose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $2 = $4;
 $5 = $2;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  if ($11) {
   $12 = $1;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $2;
   $16 = HEAP32[$15>>2]|0;
   __cmsFree($14,$16);
  }
 }
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 __cmsFree($19,$20);
 $21 = $1;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 __cmsFree($23,$24);
 STACKTOP = sp;return 1;
}
function _MemoryTell($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $1 = 0;
 } else {
  $8 = $3;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 }
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function _MemoryWrite($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $7 = $9;
 $10 = $7;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $3 = 0;
  $55 = $3;
  STACKTOP = sp;return ($55|0);
 }
 $12 = $7;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = (($14) + ($15))|0;
 $17 = $7;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)>($19>>>0);
 if ($20) {
  $21 = $7;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $7;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($23) - ($26))|0;
  $5 = $27;
 }
 $28 = $5;
 $29 = ($28|0)==(0);
 if ($29) {
  $3 = 1;
  $55 = $3;
  STACKTOP = sp;return ($55|0);
 }
 $30 = $7;
 $31 = HEAP32[$30>>2]|0;
 $32 = $7;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($31) + ($34)|0);
 $36 = $6;
 $37 = $5;
 _memmove(($35|0),($36|0),($37|0))|0;
 $38 = $5;
 $39 = $7;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + ($38))|0;
 HEAP32[$40>>2] = $42;
 $43 = $7;
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $4;
 $47 = ((($46)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($45>>>0)>($48>>>0);
 if ($49) {
  $50 = $7;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $4;
  $54 = ((($53)) + 8|0);
  HEAP32[$54>>2] = $52;
 }
 $3 = 1;
 $55 = $3;
 STACKTOP = sp;return ($55|0);
}
function _cmsOpenIOhandlerFromFile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer3 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((26136|0),(25872|0),379,(26161|0));
  // unreachable;
 }
 $12 = $6;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  ___assert_fail((25845|0),(25872|0),380,(26161|0));
  // unreachable;
 }
 $14 = $4;
 $15 = (__cmsMallocZero($14,292)|0);
 $7 = $15;
 $16 = $7;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $3 = 0;
  $80 = $3;
  STACKTOP = sp;return ($80|0);
 }
 $18 = $6;
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 << 24 >> 24;
 L11: do {
  switch ($20|0) {
  case 114:  {
   $21 = $5;
   $22 = (_fopen($21,26186)|0);
   $8 = $22;
   $23 = $8;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $25 = $4;
    $26 = $7;
    __cmsFree($25,$26);
    $27 = $4;
    $28 = $5;
    HEAP32[$vararg_buffer>>2] = $28;
    _cmsSignalError($27,1,26189,$vararg_buffer);
    $3 = 0;
    $80 = $3;
    STACKTOP = sp;return ($80|0);
   }
   $29 = $8;
   $30 = (_cmsfilelength($29)|0);
   $9 = $30;
   $31 = $9;
   $32 = ($31|0)<(0);
   if (!($32)) {
    $38 = $9;
    $39 = $7;
    $$sink = $38;$$sink2 = $39;
    break L11;
   }
   $33 = $8;
   (_fclose($33)|0);
   $34 = $4;
   $35 = $7;
   __cmsFree($34,$35);
   $36 = $4;
   $37 = $5;
   HEAP32[$vararg_buffer3>>2] = $37;
   _cmsSignalError($36,1,26209,$vararg_buffer3);
   $3 = 0;
   $80 = $3;
   STACKTOP = sp;return ($80|0);
   break;
  }
  case 119:  {
   $40 = $5;
   $41 = (_fopen($40,26238)|0);
   $8 = $41;
   $42 = $8;
   $43 = ($42|0)==(0|0);
   if (!($43)) {
    $48 = $7;
    $$sink = 0;$$sink2 = $48;
    break L11;
   }
   $44 = $4;
   $45 = $7;
   __cmsFree($44,$45);
   $46 = $4;
   $47 = $5;
   HEAP32[$vararg_buffer6>>2] = $47;
   _cmsSignalError($46,1,26241,$vararg_buffer6);
   $3 = 0;
   $80 = $3;
   STACKTOP = sp;return ($80|0);
   break;
  }
  default: {
   $49 = $4;
   $50 = $7;
   __cmsFree($49,$50);
   $51 = $4;
   $52 = $6;
   $53 = HEAP8[$52>>0]|0;
   $54 = $53 << 24 >> 24;
   HEAP32[$vararg_buffer9>>2] = $54;
   _cmsSignalError($51,1,26004,$vararg_buffer9);
   $3 = 0;
   $80 = $3;
   STACKTOP = sp;return ($80|0);
  }
  }
 } while(0);
 $55 = ((($$sink2)) + 12|0);
 HEAP32[$55>>2] = $$sink;
 $56 = $4;
 $57 = $7;
 $58 = ((($57)) + 4|0);
 HEAP32[$58>>2] = $56;
 $59 = $8;
 $60 = $7;
 HEAP32[$60>>2] = $59;
 $61 = $7;
 $62 = ((($61)) + 8|0);
 HEAP32[$62>>2] = 0;
 $63 = $7;
 $64 = ((($63)) + 16|0);
 $65 = $5;
 (_strncpy($64,$65,255)|0);
 $66 = $7;
 $67 = ((($66)) + 16|0);
 $68 = ((($67)) + 255|0);
 HEAP8[$68>>0] = 0;
 $69 = $7;
 $70 = ((($69)) + 272|0);
 HEAP32[$70>>2] = 324;
 $71 = $7;
 $72 = ((($71)) + 276|0);
 HEAP32[$72>>2] = 325;
 $73 = $7;
 $74 = ((($73)) + 280|0);
 HEAP32[$74>>2] = 326;
 $75 = $7;
 $76 = ((($75)) + 284|0);
 HEAP32[$76>>2] = 327;
 $77 = $7;
 $78 = ((($77)) + 288|0);
 HEAP32[$78>>2] = 328;
 $79 = $7;
 $3 = $79;
 $80 = $3;
 STACKTOP = sp;return ($80|0);
}
function _FileRead($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $6;
 $11 = $7;
 $12 = $8;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = (_fread($10,$11,$12,$14)|0);
 $9 = $15;
 $16 = $9;
 $17 = $8;
 $18 = ($16|0)!=($17|0);
 if ($18) {
  $19 = $5;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $9;
  $23 = $7;
  $24 = Math_imul($22, $23)|0;
  $25 = $8;
  $26 = $7;
  $27 = Math_imul($25, $26)|0;
  HEAP32[$vararg_buffer>>2] = $24;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $27;
  _cmsSignalError($21,1,26334,$vararg_buffer);
  $4 = 0;
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 } else {
  $28 = $9;
  $4 = $28;
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _FileSeek($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = (_fseek($6,$7,0)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $3;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  _cmsSignalError($12,1,26298,$vararg_buffer);
  $2 = 0;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  $2 = 1;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _FileClose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (_fclose($4)|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $7 = $2;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  __cmsFree($9,$10);
  $1 = 1;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _FileTell($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = (_ftell($5)|0);
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)==(-1);
 if ($8) {
  $9 = $2;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  _cmsSignalError($11,1,26262,$vararg_buffer);
  $1 = 0;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 } else {
  $12 = $3;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _FileWrite($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = ($7|0)==(0);
 if ($8) {
  $3 = 1;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 } else {
  $9 = $5;
  $10 = $4;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($9))|0;
  HEAP32[$11>>2] = $13;
  $14 = $6;
  $15 = $5;
  $16 = $4;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_fwrite($14,$15,1,$17)|0);
  $19 = ($18|0)==(1);
  $20 = $19&1;
  $3 = $20;
  $21 = $3;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _cmsCloseIOhandler($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 280|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (FUNCTION_TABLE_ii[$4 & 511]($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _cmsCreateProfilePlaceholder($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $0;
 $5 = (_time((0|0))|0);
 HEAP32[$3>>2] = $5;
 $6 = $2;
 $7 = (__cmsMallocZero($6,2928)|0);
 $4 = $7;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $1 = 0;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 } else {
  $10 = $2;
  $11 = $4;
  $12 = ((($11)) + 4|0);
  HEAP32[$12>>2] = $10;
  $13 = $4;
  $14 = ((($13)) + 116|0);
  HEAP32[$14>>2] = 0;
  $15 = $4;
  $16 = ((($15)) + 52|0);
  HEAP32[$16>>2] = 34603008;
  $17 = $4;
  $18 = ((($17)) + 8|0);
  $19 = (_gmtime(($3|0))|0);
  _memmove(($18|0),($19|0),44)|0;
  $20 = $2;
  $21 = (__cmsCreateMutex($20)|0);
  $22 = $4;
  $23 = ((($22)) + 2924|0);
  HEAP32[$23>>2] = $21;
  $24 = $4;
  $1 = $24;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _cmsGetProfileContextID($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
 } else {
  $7 = $3;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $1 = $9;
 }
 $10 = $1;
 STACKTOP = sp;return ($10|0);
}
function __cmsSearchTag($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 while(1) {
  $9 = $4;
  $10 = $5;
  $11 = (_SearchOneTag($9,$10)|0);
  $7 = $11;
  $12 = $7;
  $13 = ($12|0)<(0);
  if ($13) {
   label = 3;
   break;
  }
  $14 = $6;
  $15 = ($14|0)!=(0);
  if (!($15)) {
   label = 5;
   break;
  }
  $17 = $4;
  $18 = ((($17)) + 520|0);
  $19 = $7;
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $8 = $21;
  $22 = $8;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $8;
   $5 = $24;
  }
  $25 = $8;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 3) {
  $3 = -1;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 5) {
  $16 = $7;
  $3 = $16;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 9) {
  $27 = $7;
  $3 = $27;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _SearchOneTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $3;
  $8 = ((($7)) + 116|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $4;
  $12 = $3;
  $13 = ((($12)) + 120|0);
  $14 = $5;
  $15 = (($13) + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($11|0)==($16|0);
  $18 = $5;
  if ($17) {
   label = 4;
   break;
  }
  $19 = (($18) + 1)|0;
  $5 = $19;
 }
 if ((label|0) == 4) {
  $2 = $18;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $2 = -1;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _cmsIsTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $4;
 $7 = $3;
 $8 = (__cmsSearchTag($6,$7,0)|0);
 $9 = ($8|0)>=(0);
 $10 = $9&1;
 STACKTOP = sp;return ($10|0);
}
function __cmsReadHeader($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 128|0;
 $3 = sp + 160|0;
 $4 = sp;
 $9 = sp + 140|0;
 $2 = $0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $8 = $11;
 $12 = $8;
 $13 = ((($12)) + 272|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $8;
 $16 = (FUNCTION_TABLE_iiiii[$14 & 511]($15,$4,128,1)|0);
 $17 = ($16|0)!=(1);
 if ($17) {
  $1 = 0;
  $193 = $1;
  STACKTOP = sp;return ($193|0);
 }
 $18 = ((($4)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__cmsAdjustEndianess32($19)|0);
 $21 = ($20|0)!=(1633907568);
 if ($21) {
  $22 = $2;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  _cmsSignalError($24,11,26388,$vararg_buffer);
  $1 = 0;
  $193 = $1;
  STACKTOP = sp;return ($193|0);
 }
 $25 = ((($4)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (__cmsAdjustEndianess32($26)|0);
 $28 = $2;
 $29 = ((($28)) + 56|0);
 HEAP32[$29>>2] = $27;
 $30 = ((($4)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (__cmsAdjustEndianess32($31)|0);
 $33 = $2;
 $34 = ((($33)) + 60|0);
 HEAP32[$34>>2] = $32;
 $35 = ((($4)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (__cmsAdjustEndianess32($36)|0);
 $38 = $2;
 $39 = ((($38)) + 64|0);
 HEAP32[$39>>2] = $37;
 $40 = ((($4)) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (__cmsAdjustEndianess32($41)|0);
 $43 = $2;
 $44 = ((($43)) + 68|0);
 HEAP32[$44>>2] = $42;
 $45 = ((($4)) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (__cmsAdjustEndianess32($46)|0);
 $48 = $2;
 $49 = ((($48)) + 72|0);
 HEAP32[$49>>2] = $47;
 $50 = ((($4)) + 48|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (__cmsAdjustEndianess32($51)|0);
 $53 = $2;
 $54 = ((($53)) + 76|0);
 HEAP32[$54>>2] = $52;
 $55 = ((($4)) + 52|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (__cmsAdjustEndianess32($56)|0);
 $58 = $2;
 $59 = ((($58)) + 80|0);
 HEAP32[$59>>2] = $57;
 $60 = ((($4)) + 80|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (__cmsAdjustEndianess32($61)|0);
 $63 = $2;
 $64 = ((($63)) + 96|0);
 HEAP32[$64>>2] = $62;
 $65 = $2;
 $66 = ((($65)) + 88|0);
 $67 = ((($4)) + 56|0);
 __cmsAdjustEndianess64($66,$67);
 $68 = ((($4)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (__validatedVersion($69)|0);
 $71 = (__cmsAdjustEndianess32($70)|0);
 $72 = $2;
 $73 = ((($72)) + 52|0);
 HEAP32[$73>>2] = $71;
 $74 = HEAP32[$4>>2]|0;
 $75 = (__cmsAdjustEndianess32($74)|0);
 $7 = $75;
 $76 = $7;
 $77 = $2;
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($78)) + 12|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($76>>>0)>=($80>>>0);
 if ($81) {
  $82 = $2;
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($83)) + 12|0);
  $85 = HEAP32[$84>>2]|0;
  $7 = $85;
 }
 $86 = ((($4)) + 24|0);
 $87 = $2;
 $88 = ((($87)) + 8|0);
 __cmsDecodeDateTimeNumber($86,$88);
 $89 = $2;
 $90 = ((($89)) + 100|0);
 $91 = ((($4)) + 84|0);
 _memmove(($90|0),($91|0),16)|0;
 $92 = $8;
 $93 = (__cmsReadUInt32Number($92,$9)|0);
 $94 = ($93|0)!=(0);
 if (!($94)) {
  $1 = 0;
  $193 = $1;
  STACKTOP = sp;return ($193|0);
 }
 $95 = HEAP32[$9>>2]|0;
 $96 = ($95>>>0)>(100);
 $97 = $2;
 if ($96) {
  $98 = ((($97)) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $100;
  _cmsSignalError($99,2,26426,$vararg_buffer1);
  $1 = 0;
  $193 = $1;
  STACKTOP = sp;return ($193|0);
 }
 $101 = ((($97)) + 116|0);
 HEAP32[$101>>2] = 0;
 $5 = 0;
 while(1) {
  $102 = $5;
  $103 = HEAP32[$9>>2]|0;
  $104 = ($102>>>0)<($103>>>0);
  if (!($104)) {
   label = 29;
   break;
  }
  $105 = $8;
  $106 = (__cmsReadUInt32Number($105,$3)|0);
  $107 = ($106|0)!=(0);
  if (!($107)) {
   label = 14;
   break;
  }
  $108 = $8;
  $109 = ((($3)) + 4|0);
  $110 = (__cmsReadUInt32Number($108,$109)|0);
  $111 = ($110|0)!=(0);
  if (!($111)) {
   label = 16;
   break;
  }
  $112 = $8;
  $113 = ((($3)) + 8|0);
  $114 = (__cmsReadUInt32Number($112,$113)|0);
  $115 = ($114|0)!=(0);
  if (!($115)) {
   label = 18;
   break;
  }
  $116 = ((($3)) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($3)) + 8|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($117) + ($119))|0;
  $121 = $7;
  $122 = ($120>>>0)>($121>>>0);
  if (!($122)) {
   $123 = ((($3)) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ((($3)) + 8|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (($124) + ($126))|0;
   $128 = ((($3)) + 4|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = ($127>>>0)<($129>>>0);
   if (!($130)) {
    $131 = HEAP32[$3>>2]|0;
    $132 = $2;
    $133 = ((($132)) + 120|0);
    $134 = $2;
    $135 = ((($134)) + 116|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($133) + ($136<<2)|0);
    HEAP32[$137>>2] = $131;
    $138 = ((($3)) + 4|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $2;
    $141 = ((($140)) + 1320|0);
    $142 = $2;
    $143 = ((($142)) + 116|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (($141) + ($144<<2)|0);
    HEAP32[$145>>2] = $139;
    $146 = ((($3)) + 8|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = $2;
    $149 = ((($148)) + 920|0);
    $150 = $2;
    $151 = ((($150)) + 116|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = (($149) + ($152<<2)|0);
    HEAP32[$153>>2] = $147;
    $6 = 0;
    while(1) {
     $154 = $6;
     $155 = $2;
     $156 = ((($155)) + 116|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($154>>>0)<($157>>>0);
     $159 = $2;
     if (!($158)) {
      break;
     }
     $160 = ((($159)) + 1320|0);
     $161 = $6;
     $162 = (($160) + ($161<<2)|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ((($3)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($166) {
      $167 = $2;
      $168 = ((($167)) + 920|0);
      $169 = $6;
      $170 = (($168) + ($169<<2)|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = ((($3)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($171|0)==($173|0);
      if ($174) {
       $175 = $2;
       $176 = ((($175)) + 120|0);
       $177 = $6;
       $178 = (($176) + ($177<<2)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = $2;
       $181 = ((($180)) + 520|0);
       $182 = $2;
       $183 = ((($182)) + 116|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (($181) + ($184<<2)|0);
       HEAP32[$185>>2] = $179;
      }
     }
     $186 = $6;
     $187 = (($186) + 1)|0;
     $6 = $187;
    }
    $188 = ((($159)) + 116|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($189) + 1)|0;
    HEAP32[$188>>2] = $190;
   }
  }
  $191 = $5;
  $192 = (($191) + 1)|0;
  $5 = $192;
 }
 if ((label|0) == 14) {
  $1 = 0;
  $193 = $1;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 16) {
  $1 = 0;
  $193 = $1;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 18) {
  $1 = 0;
  $193 = $1;
  STACKTOP = sp;return ($193|0);
 }
 else if ((label|0) == 29) {
  $1 = 1;
  $193 = $1;
  STACKTOP = sp;return ($193|0);
 }
 return (0)|0;
}
function __validatedVersion($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 $2 = $1;
 $5 = $2;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($7|0)>(9);
 if ($8) {
  $9 = $2;
  HEAP8[$9>>0] = 9;
 }
 $10 = $2;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 & 240;
 $15 = $14&255;
 $3 = $15;
 $16 = $2;
 $17 = ((($16)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 & 15;
 $21 = $20&255;
 $4 = $21;
 $22 = $3;
 $23 = $22&255;
 $24 = ($23>>>0)>(144);
 if ($24) {
  $3 = -112;
 }
 $25 = $4;
 $26 = $25&255;
 $27 = ($26>>>0)>(9);
 if ($27) {
  $4 = 9;
 }
 $28 = $3;
 $29 = $28&255;
 $30 = $4;
 $31 = $30&255;
 $32 = $29 | $31;
 $33 = $32&255;
 $34 = $2;
 $35 = ((($34)) + 1|0);
 HEAP8[$35>>0] = $33;
 $36 = $2;
 $37 = ((($36)) + 2|0);
 HEAP8[$37>>0] = 0;
 $38 = $2;
 $39 = ((($38)) + 3|0);
 HEAP8[$39>>0] = 0;
 $40 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __cmsWriteHeader($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $5 = sp;
 $7 = sp + 132|0;
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = (__cmsAdjustEndianess32($9)|0);
 HEAP32[$5>>2] = $10;
 $11 = (__cmsAdjustEndianess32(1818455411)|0);
 $12 = ((($5)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = $3;
 $14 = ((($13)) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__cmsAdjustEndianess32($15)|0);
 $17 = ((($5)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = $3;
 $19 = ((($18)) + 56|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsAdjustEndianess32($20)|0);
 $22 = ((($5)) + 12|0);
 HEAP32[$22>>2] = $21;
 $23 = $3;
 $24 = ((($23)) + 60|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (__cmsAdjustEndianess32($25)|0);
 $27 = ((($5)) + 16|0);
 HEAP32[$27>>2] = $26;
 $28 = $3;
 $29 = ((($28)) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (__cmsAdjustEndianess32($30)|0);
 $32 = ((($5)) + 20|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($5)) + 24|0);
 $34 = $3;
 $35 = ((($34)) + 8|0);
 __cmsEncodeDateTimeNumber($33,$35);
 $36 = (__cmsAdjustEndianess32(1633907568)|0);
 $37 = ((($5)) + 36|0);
 HEAP32[$37>>2] = $36;
 $38 = (__cmsAdjustEndianess32(1095782476)|0);
 $39 = ((($5)) + 40|0);
 HEAP32[$39>>2] = $38;
 $40 = $3;
 $41 = ((($40)) + 72|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (__cmsAdjustEndianess32($42)|0);
 $44 = ((($5)) + 44|0);
 HEAP32[$44>>2] = $43;
 $45 = $3;
 $46 = ((($45)) + 76|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (__cmsAdjustEndianess32($47)|0);
 $49 = ((($5)) + 48|0);
 HEAP32[$49>>2] = $48;
 $50 = $3;
 $51 = ((($50)) + 80|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (__cmsAdjustEndianess32($52)|0);
 $54 = ((($5)) + 52|0);
 HEAP32[$54>>2] = $53;
 $55 = ((($5)) + 56|0);
 $56 = $3;
 $57 = ((($56)) + 88|0);
 __cmsAdjustEndianess64($55,$57);
 $58 = $3;
 $59 = ((($58)) + 68|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (__cmsAdjustEndianess32($60)|0);
 $62 = ((($5)) + 64|0);
 HEAP32[$62>>2] = $61;
 $63 = (_cmsD50_XYZ()|0);
 $64 = +HEAPF64[$63>>3];
 $65 = (__cmsDoubleTo15Fixed16($64)|0);
 $66 = (__cmsAdjustEndianess32($65)|0);
 $67 = ((($5)) + 68|0);
 HEAP32[$67>>2] = $66;
 $68 = (_cmsD50_XYZ()|0);
 $69 = ((($68)) + 8|0);
 $70 = +HEAPF64[$69>>3];
 $71 = (__cmsDoubleTo15Fixed16($70)|0);
 $72 = (__cmsAdjustEndianess32($71)|0);
 $73 = ((($5)) + 68|0);
 $74 = ((($73)) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = (_cmsD50_XYZ()|0);
 $76 = ((($75)) + 16|0);
 $77 = +HEAPF64[$76>>3];
 $78 = (__cmsDoubleTo15Fixed16($77)|0);
 $79 = (__cmsAdjustEndianess32($78)|0);
 $80 = ((($5)) + 68|0);
 $81 = ((($80)) + 8|0);
 HEAP32[$81>>2] = $79;
 $82 = (__cmsAdjustEndianess32(1818455411)|0);
 $83 = ((($5)) + 80|0);
 HEAP32[$83>>2] = $82;
 $84 = ((($5)) + 100|0);
 ;HEAP32[$84>>2]=0|0;HEAP32[$84+4>>2]=0|0;HEAP32[$84+8>>2]=0|0;HEAP32[$84+12>>2]=0|0;HEAP32[$84+16>>2]=0|0;HEAP32[$84+20>>2]=0|0;HEAP32[$84+24>>2]=0|0;
 $85 = ((($5)) + 84|0);
 $86 = $3;
 $87 = ((($86)) + 100|0);
 _memmove(($85|0),($87|0),16)|0;
 $88 = $3;
 $89 = HEAP32[$88>>2]|0;
 $90 = ((($89)) + 288|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $3;
 $93 = HEAP32[$92>>2]|0;
 $94 = (FUNCTION_TABLE_iiii[$91 & 511]($93,128,$5)|0);
 $95 = ($94|0)!=(0);
 if (!($95)) {
  $2 = 0;
  $156 = $2;
  STACKTOP = sp;return ($156|0);
 }
 $8 = 0;
 $6 = 0;
 while(1) {
  $96 = $6;
  $97 = $3;
  $98 = ((($97)) + 116|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($96>>>0)<($99>>>0);
  $101 = $3;
  if (!($100)) {
   break;
  }
  $102 = ((($101)) + 120|0);
  $103 = $6;
  $104 = (($102) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)!=(0);
  if ($106) {
   $107 = $8;
   $108 = (($107) + 1)|0;
   $8 = $108;
  }
  $109 = $6;
  $110 = (($109) + 1)|0;
  $6 = $110;
 }
 $111 = HEAP32[$101>>2]|0;
 $112 = $8;
 $113 = (__cmsWriteUInt32Number($111,$112)|0);
 $114 = ($113|0)!=(0);
 if (!($114)) {
  $2 = 0;
  $156 = $2;
  STACKTOP = sp;return ($156|0);
 }
 $6 = 0;
 while(1) {
  $115 = $6;
  $116 = $3;
  $117 = ((($116)) + 116|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ($115>>>0)<($118>>>0);
  if (!($119)) {
   label = 16;
   break;
  }
  $120 = $3;
  $121 = ((($120)) + 120|0);
  $122 = $6;
  $123 = (($121) + ($122<<2)|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)==(0);
  if (!($125)) {
   $126 = $3;
   $127 = ((($126)) + 120|0);
   $128 = $6;
   $129 = (($127) + ($128<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (__cmsAdjustEndianess32($130)|0);
   HEAP32[$7>>2] = $131;
   $132 = $3;
   $133 = ((($132)) + 1320|0);
   $134 = $6;
   $135 = (($133) + ($134<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (__cmsAdjustEndianess32($136)|0);
   $138 = ((($7)) + 4|0);
   HEAP32[$138>>2] = $137;
   $139 = $3;
   $140 = ((($139)) + 920|0);
   $141 = $6;
   $142 = (($140) + ($141<<2)|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = (__cmsAdjustEndianess32($143)|0);
   $145 = ((($7)) + 8|0);
   HEAP32[$145>>2] = $144;
   $146 = $3;
   $147 = HEAP32[$146>>2]|0;
   $148 = ((($147)) + 288|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $3;
   $151 = HEAP32[$150>>2]|0;
   $152 = (FUNCTION_TABLE_iiii[$149 & 511]($151,12,$7)|0);
   $153 = ($152|0)!=(0);
   if (!($153)) {
    label = 14;
    break;
   }
  }
  $154 = $6;
  $155 = (($154) + 1)|0;
  $6 = $155;
 }
 if ((label|0) == 14) {
  $2 = 0;
  $156 = $2;
  STACKTOP = sp;return ($156|0);
 }
 else if ((label|0) == 16) {
  $2 = 1;
  $156 = $2;
  STACKTOP = sp;return ($156|0);
 }
 return (0)|0;
}
function _cmsGetHeaderRenderingIntent($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _cmsSetHeaderRenderingIntent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 68|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _cmsGetHeaderManufacturer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _cmsGetHeaderModel($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _cmsGetHeaderAttributes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 88|0);
 _memmove(($6|0),($8|0),8)|0;
 STACKTOP = sp;return;
}
function _cmsGetHeaderProfileID($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 100|0);
 _memmove(($6|0),($8|0),16)|0;
 STACKTOP = sp;return;
}
function _cmsGetPCS($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _cmsSetPCS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 64|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _cmsGetColorSpace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _cmsSetColorSpace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 60|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _cmsGetDeviceClass($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 56|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _cmsSetDeviceClass($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $3;
 $7 = $4;
 $8 = ((($7)) + 56|0);
 HEAP32[$8>>2] = $6;
 STACKTOP = sp;return;
}
function _cmsGetEncodedICCversion($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ((($4)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _cmsSetProfileVersion($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $4 = $5;
 $6 = $3;
 $7 = $6 * 100.0;
 $8 = $7 + 0.5;
 $9 = (+Math_floor((+$8)));
 $10 = (~~(($9))>>>0);
 $11 = (_BaseToBase($10,10,16)|0);
 $12 = $11 << 16;
 $13 = $4;
 $14 = ((($13)) + 52|0);
 HEAP32[$14>>2] = $12;
 STACKTOP = sp;return;
}
function _BaseToBase($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 while(1) {
  $10 = $3;
  $11 = ($10>>>0)>(0);
  $12 = $8;
  $13 = ($12|0)<(100);
  $14 = $11 ? $13 : 0;
  if (!($14)) {
   break;
  }
  $15 = $3;
  $16 = $4;
  $17 = (($15>>>0) % ($16>>>0))&-1;
  $18 = $17&255;
  $19 = $8;
  $20 = (($6) + ($19)|0);
  HEAP8[$20>>0] = $18;
  $21 = $4;
  $22 = $3;
  $23 = (($22>>>0) / ($21>>>0))&-1;
  $3 = $23;
  $24 = $8;
  $25 = (($24) + 1)|0;
  $8 = $25;
 }
 $26 = $8;
 $27 = (($26) - 1)|0;
 $7 = $27;
 $9 = 0;
 while(1) {
  $28 = $7;
  $29 = ($28|0)>=(0);
  $30 = $9;
  if (!($29)) {
   break;
  }
  $31 = $5;
  $32 = Math_imul($30, $31)|0;
  $33 = $7;
  $34 = (($6) + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = (($32) + ($36))|0;
  $9 = $37;
  $38 = $7;
  $39 = (($38) + -1)|0;
  $7 = $39;
 }
 STACKTOP = sp;return ($30|0);
}
function _cmsGetProfileVersion($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $2 = $4;
 $5 = $2;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >>> 16;
 $3 = $8;
 $9 = $3;
 $10 = (_BaseToBase($9,16,10)|0);
 $11 = (+($10>>>0));
 $12 = $11 / 100.0;
 STACKTOP = sp;return (+$12);
}
function _cmsCloseProfile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = sp;
 $2 = $0;
 $8 = $2;
 $3 = $8;
 $4 = 1;
 $9 = $3;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  $1 = 0;
  $86 = $1;
  STACKTOP = sp;return ($86|0);
 }
 $11 = $3;
 $12 = ((($11)) + 2920|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $3;
  $16 = ((($15)) + 2920|0);
  HEAP32[$16>>2] = 0;
  $17 = $2;
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = (_cmsSaveProfileToFile($17,$20)|0);
  $22 = $4;
  $23 = $22 & $21;
  $4 = $23;
 }
 $5 = 0;
 while(1) {
  $24 = $5;
  $25 = $3;
  $26 = ((($25)) + 116|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24>>>0)<($27>>>0);
  $29 = $3;
  if (!($28)) {
   break;
  }
  $30 = ((($29)) + 2120|0);
  $31 = $5;
  $32 = (($30) + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0|0);
  do {
   if ($34) {
    $35 = $3;
    $36 = ((($35)) + 2520|0);
    $37 = $5;
    $38 = (($36) + ($37<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $6 = $39;
    $40 = $6;
    $41 = ($40|0)!=(0|0);
    if ($41) {
     $42 = $6;
     ;HEAP32[$7>>2]=HEAP32[$42>>2]|0;HEAP32[$7+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$42+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[$42+16>>2]|0;HEAP32[$7+20>>2]=HEAP32[$42+20>>2]|0;HEAP32[$7+24>>2]=HEAP32[$42+24>>2]|0;
     $43 = $3;
     $44 = ((($43)) + 4|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ((($7)) + 20|0);
     HEAP32[$46>>2] = $45;
     $47 = $3;
     $48 = ((($47)) + 52|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($7)) + 24|0);
     HEAP32[$50>>2] = $49;
     $51 = ((($7)) + 16|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $3;
     $54 = ((($53)) + 2120|0);
     $55 = $5;
     $56 = (($54) + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     FUNCTION_TABLE_vii[$52 & 511]($7,$57);
     break;
    } else {
     $58 = $3;
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = $3;
     $62 = ((($61)) + 2120|0);
     $63 = $5;
     $64 = (($62) + ($63<<2)|0);
     $65 = HEAP32[$64>>2]|0;
     __cmsFree($60,$65);
     break;
    }
   }
  } while(0);
  $66 = $5;
  $67 = (($66) + 1)|0;
  $5 = $67;
 }
 $68 = HEAP32[$29>>2]|0;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = $3;
  $71 = HEAP32[$70>>2]|0;
  $72 = (_cmsCloseIOhandler($71)|0);
  $73 = $4;
  $74 = $73 & $72;
  $4 = $74;
 }
 $75 = $3;
 $76 = ((($75)) + 4|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $3;
 $79 = ((($78)) + 2924|0);
 $80 = HEAP32[$79>>2]|0;
 __cmsDestroyMutex($77,$80);
 $81 = $3;
 $82 = ((($81)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $3;
 __cmsFree($83,$84);
 $85 = $4;
 $1 = $85;
 $86 = $1;
 STACKTOP = sp;return ($86|0);
}
function _cmsSaveProfileToFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (_cmsGetProfileContextID($8)|0);
 $5 = $9;
 $10 = $5;
 $11 = $4;
 $12 = (_cmsOpenIOhandlerFromFile($10,$11,26445)|0);
 $6 = $12;
 $13 = $6;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $2 = 0;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 $15 = $3;
 $16 = $6;
 $17 = (_cmsSaveProfileToIOhandler($15,$16)|0);
 $18 = ($17|0)!=(0);
 $19 = $18&1;
 $7 = $19;
 $20 = $6;
 $21 = (_cmsCloseIOhandler($20)|0);
 $22 = $7;
 $23 = $22 & $21;
 $7 = $23;
 $24 = $7;
 $25 = ($24|0)==(0);
 if ($25) {
  $26 = $4;
  (_remove($26)|0);
 }
 $27 = $7;
 $2 = $27;
 $28 = $2;
 STACKTOP = sp;return ($28|0);
}
function _cmsSaveProfileToIOhandler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2960|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2960|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $5 = $10;
 $7 = 0;
 $11 = $3;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((26447|0),(25872|0),1323,(26472|0));
  // unreachable;
 }
 $13 = $5;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $5;
 $17 = ((($16)) + 2924|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__cmsLockMutex($15,$18)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $2 = 0;
  $76 = $2;
  STACKTOP = sp;return ($76|0);
 }
 $21 = $5;
 _memmove(($6|0),($21|0),2928)|0;
 $22 = $3;
 $23 = (_cmsGetProfileContextID($22)|0);
 $9 = $23;
 $24 = $9;
 $25 = (_cmsOpenIOhandlerFromNULL($24)|0);
 $26 = $5;
 HEAP32[$26>>2] = $25;
 $7 = $25;
 $27 = $7;
 $28 = ($27|0)==(0|0);
 $29 = $5;
 if ($28) {
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $5;
  $33 = ((($32)) + 2924|0);
  $34 = HEAP32[$33>>2]|0;
  __cmsUnlockMutex($31,$34);
  $2 = 0;
  $76 = $2;
  STACKTOP = sp;return ($76|0);
 }
 $35 = (__cmsWriteHeader($29,0)|0);
 $36 = ($35|0)!=(0);
 do {
  if ($36) {
   $37 = $5;
   $38 = (_SaveTags($37,$6)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    $40 = $7;
    $41 = ((($40)) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $8 = $42;
    $43 = $4;
    $44 = ($43|0)!=(0|0);
    if ($44) {
     $45 = $4;
     $46 = $5;
     HEAP32[$46>>2] = $45;
     $47 = $5;
     $48 = (_SetLinks($47)|0);
     $49 = ($48|0)!=(0);
     if (!($49)) {
      break;
     }
     $50 = $5;
     $51 = $8;
     $52 = (__cmsWriteHeader($50,$51)|0);
     $53 = ($52|0)!=(0);
     if (!($53)) {
      break;
     }
     $54 = $5;
     $55 = (_SaveTags($54,$6)|0);
     $56 = ($55|0)!=(0);
     if (!($56)) {
      break;
     }
    }
    $57 = $5;
    _memmove(($57|0),($6|0),2928)|0;
    $58 = $7;
    $59 = (_cmsCloseIOhandler($58)|0);
    $60 = ($59|0)!=(0);
    if (!($60)) {
     $8 = 0;
    }
    $61 = $5;
    $62 = ((($61)) + 4|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $5;
    $65 = ((($64)) + 2924|0);
    $66 = HEAP32[$65>>2]|0;
    __cmsUnlockMutex($63,$66);
    $67 = $8;
    $2 = $67;
    $76 = $2;
    STACKTOP = sp;return ($76|0);
   }
  }
 } while(0);
 $68 = $7;
 (_cmsCloseIOhandler($68)|0);
 $69 = $5;
 _memmove(($69|0),($6|0),2928)|0;
 $70 = $5;
 $71 = ((($70)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $5;
 $74 = ((($73)) + 2924|0);
 $75 = HEAP32[$74>>2]|0;
 __cmsUnlockMutex($72,$75);
 $2 = 0;
 $76 = $2;
 STACKTOP = sp;return ($76|0);
}
function _SaveTags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $14 = sp + 32|0;
 $18 = sp + 104|0;
 $3 = $0;
 $4 = $1;
 $19 = $3;
 $20 = HEAP32[$19>>2]|0;
 $8 = $20;
 $21 = $3;
 $22 = (+_cmsGetProfileVersion($21));
 $13 = $22;
 $6 = 0;
 L1: while(1) {
  $23 = $6;
  $24 = $3;
  $25 = ((($24)) + 116|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23>>>0)<($26>>>0);
  if (!($27)) {
   label = 34;
   break;
  }
  $28 = $3;
  $29 = ((($28)) + 120|0);
  $30 = $6;
  $31 = (($29) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0);
  do {
   if (!($33)) {
    $34 = $3;
    $35 = ((($34)) + 520|0);
    $36 = $6;
    $37 = (($35) + ($36<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)!=(0);
    if (!($39)) {
     $40 = $8;
     $41 = ((($40)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $7 = $42;
     $43 = $3;
     $44 = ((($43)) + 1320|0);
     $45 = $6;
     $46 = (($44) + ($45<<2)|0);
     HEAP32[$46>>2] = $42;
     $47 = $3;
     $48 = ((($47)) + 2120|0);
     $49 = $6;
     $50 = (($48) + ($49<<2)|0);
     $51 = HEAP32[$50>>2]|0;
     $5 = $51;
     $52 = $5;
     $53 = ($52|0)!=(0|0);
     if (!($53)) {
      $54 = $4;
      $55 = ($54|0)!=(0|0);
      if (!($55)) {
       break;
      }
      $56 = $3;
      $57 = ((($56)) + 1320|0);
      $58 = $6;
      $59 = (($57) + ($58<<2)|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)!=(0);
      if (!($61)) {
       break;
      }
      $62 = $4;
      $63 = ((($62)) + 920|0);
      $64 = $6;
      $65 = (($63) + ($64<<2)|0);
      $66 = HEAP32[$65>>2]|0;
      $15 = $66;
      $67 = $4;
      $68 = ((($67)) + 1320|0);
      $69 = $6;
      $70 = (($68) + ($69<<2)|0);
      $71 = HEAP32[$70>>2]|0;
      $16 = $71;
      $72 = $4;
      $73 = HEAP32[$72>>2]|0;
      $74 = ((($73)) + 276|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $4;
      $77 = HEAP32[$76>>2]|0;
      $78 = $16;
      $79 = (FUNCTION_TABLE_iii[$75 & 511]($77,$78)|0);
      $80 = ($79|0)!=(0);
      if (!($80)) {
       label = 9;
       break L1;
      }
      $81 = $3;
      $82 = ((($81)) + 4|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = $15;
      $85 = (__cmsMalloc($83,$84)|0);
      $17 = $85;
      $86 = $17;
      $87 = ($86|0)==(0|0);
      if ($87) {
       label = 11;
       break L1;
      }
      $88 = $4;
      $89 = HEAP32[$88>>2]|0;
      $90 = ((($89)) + 272|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $4;
      $93 = HEAP32[$92>>2]|0;
      $94 = $17;
      $95 = $15;
      $96 = (FUNCTION_TABLE_iiiii[$91 & 511]($93,$94,$95,1)|0);
      $97 = ($96|0)!=(1);
      if ($97) {
       label = 13;
       break L1;
      }
      $98 = $8;
      $99 = ((($98)) + 288|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = $8;
      $102 = $15;
      $103 = $17;
      $104 = (FUNCTION_TABLE_iiii[$100 & 511]($101,$102,$103)|0);
      $105 = ($104|0)!=(0);
      if (!($105)) {
       label = 15;
       break L1;
      }
      $106 = $3;
      $107 = ((($106)) + 4|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = $17;
      __cmsFree($108,$109);
      $110 = $8;
      $111 = ((($110)) + 8|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = $7;
      $114 = (($112) - ($113))|0;
      $115 = $3;
      $116 = ((($115)) + 920|0);
      $117 = $6;
      $118 = (($116) + ($117<<2)|0);
      HEAP32[$118>>2] = $114;
      $119 = $8;
      $120 = (__cmsWriteAlignment($119)|0);
      $121 = ($120|0)!=(0);
      if ($121) {
       break;
      } else {
       label = 17;
       break L1;
      }
     }
     $122 = $3;
     $123 = ((($122)) + 1720|0);
     $124 = $6;
     $125 = (($123) + ($124<<2)|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = ($126|0)!=(0);
     if ($127) {
      $128 = $8;
      $129 = ((($128)) + 288|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = $8;
      $132 = $3;
      $133 = ((($132)) + 920|0);
      $134 = $6;
      $135 = (($133) + ($134<<2)|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = $5;
      $138 = (FUNCTION_TABLE_iiii[$130 & 511]($131,$136,$137)|0);
      $139 = ($138|0)!=(1);
      if ($139) {
       label = 20;
       break L1;
      }
     } else {
      $140 = $3;
      $141 = ((($140)) + 4|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = $3;
      $144 = ((($143)) + 120|0);
      $145 = $6;
      $146 = (($144) + ($145<<2)|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (__cmsGetTagDescriptor($142,$147)|0);
      $9 = $148;
      $149 = $9;
      $150 = ($149|0)==(0|0);
      if ($150) {
       break;
      }
      $151 = $9;
      $152 = ((($151)) + 88|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($153|0)!=(0|0);
      $155 = $9;
      if ($154) {
       $156 = ((($155)) + 88|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = $13;
       $159 = $5;
       $160 = (FUNCTION_TABLE_idi[$157 & 511]($158,$159)|0);
       $11 = $160;
      } else {
       $161 = ((($155)) + 8|0);
       $162 = HEAP32[$161>>2]|0;
       $11 = $162;
      }
      $163 = $3;
      $164 = ((($163)) + 4|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = $11;
      $167 = (__cmsGetTagTypeHandler($165,$166)|0);
      $12 = $167;
      $168 = $12;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $170 = $3;
       $171 = ((($170)) + 4|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = $3;
       $174 = ((($173)) + 120|0);
       $175 = $6;
       $176 = (($174) + ($175<<2)|0);
       $177 = HEAP32[$176>>2]|0;
       HEAP32[$vararg_buffer>>2] = $177;
       _cmsSignalError($172,3,26498,$vararg_buffer);
       break;
      }
      $178 = $12;
      $179 = HEAP32[$178>>2]|0;
      $10 = $179;
      $180 = $8;
      $181 = $10;
      $182 = (__cmsWriteTypeBase($180,$181)|0);
      $183 = ($182|0)!=(0);
      if (!($183)) {
       label = 28;
       break L1;
      }
      $184 = $12;
      ;HEAP32[$14>>2]=HEAP32[$184>>2]|0;HEAP32[$14+4>>2]=HEAP32[$184+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[$184+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[$184+12>>2]|0;HEAP32[$14+16>>2]=HEAP32[$184+16>>2]|0;HEAP32[$14+20>>2]=HEAP32[$184+20>>2]|0;HEAP32[$14+24>>2]=HEAP32[$184+24>>2]|0;
      $185 = $3;
      $186 = ((($185)) + 4|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = ((($14)) + 20|0);
      HEAP32[$188>>2] = $187;
      $189 = $3;
      $190 = ((($189)) + 52|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = ((($14)) + 24|0);
      HEAP32[$192>>2] = $191;
      $193 = ((($14)) + 8|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = $8;
      $196 = $5;
      $197 = $9;
      $198 = HEAP32[$197>>2]|0;
      $199 = (FUNCTION_TABLE_iiiii[$194 & 511]($14,$195,$196,$198)|0);
      $200 = ($199|0)!=(0);
      if (!($200)) {
       label = 30;
       break L1;
      }
     }
     $205 = $8;
     $206 = ((($205)) + 8|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = $7;
     $209 = (($207) - ($208))|0;
     $210 = $3;
     $211 = ((($210)) + 920|0);
     $212 = $6;
     $213 = (($211) + ($212<<2)|0);
     HEAP32[$213>>2] = $209;
     $214 = $8;
     $215 = (__cmsWriteAlignment($214)|0);
     $216 = ($215|0)!=(0);
     if (!($216)) {
      label = 32;
      break L1;
     }
    }
   }
  } while(0);
  $217 = $6;
  $218 = (($217) + 1)|0;
  $6 = $218;
 }
 switch (label|0) {
  case 9: {
   $2 = 0;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
  case 11: {
   $2 = 0;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
  case 13: {
   $2 = 0;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
  case 15: {
   $2 = 0;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
  case 17: {
   $2 = 0;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
  case 20: {
   $2 = 0;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
  case 28: {
   $2 = 0;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
  case 30: {
   $201 = $10;
   __cmsTagSignature2String($18,$201);
   $202 = $3;
   $203 = ((($202)) + 4|0);
   $204 = HEAP32[$203>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $18;
   _cmsSignalError($204,7,26531,$vararg_buffer1);
   $2 = 0;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
  case 32: {
   $2 = 0;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
  case 34: {
   $2 = 1;
   $219 = $2;
   STACKTOP = sp;return ($219|0);
   break;
  }
 }
 return (0)|0;
}
function _SetLinks($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = ((($6)) + 116|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $1;
  $11 = ((($10)) + 520|0);
  $12 = $2;
  $13 = (($11) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $3 = $14;
  $15 = $3;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $1;
   $18 = $3;
   $19 = (__cmsSearchTag($17,$18,0)|0);
   $4 = $19;
   $20 = $4;
   $21 = ($20|0)>=(0);
   if ($21) {
    $22 = $1;
    $23 = ((($22)) + 1320|0);
    $24 = $4;
    $25 = (($23) + ($24<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $1;
    $28 = ((($27)) + 1320|0);
    $29 = $2;
    $30 = (($28) + ($29<<2)|0);
    HEAP32[$30>>2] = $26;
    $31 = $1;
    $32 = ((($31)) + 920|0);
    $33 = $4;
    $34 = (($32) + ($33<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $1;
    $37 = ((($36)) + 920|0);
    $38 = $2;
    $39 = (($37) + ($38<<2)|0);
    HEAP32[$39>>2] = $35;
   }
  }
  $40 = $2;
  $41 = (($40) + 1)|0;
  $2 = $41;
 }
 STACKTOP = sp;return 1;
}
function _cmsOpenProfileFromMemTHR($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = (_cmsCreateProfilePlaceholder($9)|0);
 $8 = $10;
 $11 = $8;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $3 = 0;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 $13 = $8;
 $7 = $13;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = (_cmsOpenIOhandlerFromMem($14,$15,$16,26556)|0);
 $18 = $7;
 HEAP32[$18>>2] = $17;
 $19 = $7;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if (!($21)) {
  $22 = $7;
  $23 = (__cmsReadHeader($22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $8;
   $3 = $25;
   $27 = $3;
   STACKTOP = sp;return ($27|0);
  }
 }
 $26 = $8;
 (_cmsCloseProfile($26)|0);
 $3 = 0;
 $27 = $3;
 STACKTOP = sp;return ($27|0);
}
function _cmsOpenProfileFromMem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_cmsOpenProfileFromMemTHR(0,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _cmsReadTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 52|0;
 $13 = sp + 32|0;
 $15 = sp + 114|0;
 $16 = sp + 109|0;
 $17 = sp + 104|0;
 $3 = $0;
 $4 = $1;
 $18 = $3;
 $5 = $18;
 $19 = $5;
 $20 = HEAP32[$19>>2]|0;
 $6 = $20;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $5;
 $25 = ((($24)) + 2924|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (__cmsLockMutex($23,$26)|0);
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $2 = 0;
  $189 = $2;
  STACKTOP = sp;return ($189|0);
 }
 $29 = $5;
 $30 = $4;
 $31 = (__cmsSearchTag($29,$30,1)|0);
 $14 = $31;
 $32 = $14;
 $33 = ($32|0)<(0);
 do {
  if (!($33)) {
   $34 = $5;
   $35 = ((($34)) + 2120|0);
   $36 = $14;
   $37 = (($35) + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)!=(0|0);
   $40 = $5;
   if ($39) {
    $41 = ((($40)) + 2520|0);
    $42 = $14;
    $43 = (($41) + ($42<<2)|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(0|0);
    if ($45) {
     break;
    }
    $46 = $5;
    $47 = ((($46)) + 2520|0);
    $48 = $14;
    $49 = (($47) + ($48<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $10 = $51;
    $52 = $10;
    $53 = ($52|0)==(0);
    if ($53) {
     break;
    }
    $54 = $5;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $4;
    $58 = (__cmsGetTagDescriptor($56,$57)|0);
    $9 = $58;
    $59 = $9;
    $60 = ($59|0)==(0|0);
    if ($60) {
     break;
    }
    $61 = $9;
    $62 = $10;
    $63 = (_IsTypeSupported($61,$62)|0);
    $64 = ($63|0)!=(0);
    if (!($64)) {
     break;
    }
    $65 = $5;
    $66 = ((($65)) + 1720|0);
    $67 = $14;
    $68 = (($66) + ($67<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)!=(0);
    if ($70) {
     break;
    }
    $71 = $5;
    $72 = ((($71)) + 4|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $5;
    $75 = ((($74)) + 2924|0);
    $76 = HEAP32[$75>>2]|0;
    __cmsUnlockMutex($73,$76);
    $77 = $5;
    $78 = ((($77)) + 2120|0);
    $79 = $14;
    $80 = (($78) + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $2 = $81;
    $189 = $2;
    STACKTOP = sp;return ($189|0);
   }
   $82 = ((($40)) + 1320|0);
   $83 = $14;
   $84 = (($82) + ($83<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $11 = $85;
   $86 = $5;
   $87 = ((($86)) + 920|0);
   $88 = $14;
   $89 = (($87) + ($88<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $12 = $90;
   $91 = $12;
   $92 = ($91>>>0)<(8);
   if (!($92)) {
    $93 = $6;
    $94 = ((($93)) + 276|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = $6;
    $97 = $11;
    $98 = (FUNCTION_TABLE_iii[$95 & 511]($96,$97)|0);
    $99 = ($98|0)!=(0);
    if ($99) {
     $100 = $5;
     $101 = ((($100)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $4;
     $104 = (__cmsGetTagDescriptor($102,$103)|0);
     $9 = $104;
     $105 = $9;
     $106 = ($105|0)==(0|0);
     if ($106) {
      $107 = $4;
      __cmsTagSignature2String($15,$107);
      $108 = $5;
      $109 = ((($108)) + 4|0);
      $110 = HEAP32[$109>>2]|0;
      HEAP32[$vararg_buffer>>2] = $15;
      _cmsSignalError($110,8,26558,$vararg_buffer);
      break;
     }
     $111 = $6;
     $112 = (__cmsReadTypeBase($111)|0);
     $10 = $112;
     $113 = $10;
     $114 = ($113|0)==(0);
     if (!($114)) {
      $115 = $9;
      $116 = $10;
      $117 = (_IsTypeSupported($115,$116)|0);
      $118 = ($117|0)!=(0);
      if ($118) {
       $119 = $12;
       $120 = (($119) - 8)|0;
       $12 = $120;
       $121 = $5;
       $122 = ((($121)) + 4|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = $10;
       $125 = (__cmsGetTagTypeHandler($123,$124)|0);
       $7 = $125;
       $126 = $7;
       $127 = ($126|0)==(0|0);
       if (!($127)) {
        $128 = $7;
        ;HEAP32[$8>>2]=HEAP32[$128>>2]|0;HEAP32[$8+4>>2]=HEAP32[$128+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$128+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$128+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[$128+16>>2]|0;HEAP32[$8+20>>2]=HEAP32[$128+20>>2]|0;HEAP32[$8+24>>2]=HEAP32[$128+24>>2]|0;
        $129 = $7;
        $130 = $5;
        $131 = ((($130)) + 2520|0);
        $132 = $14;
        $133 = (($131) + ($132<<2)|0);
        HEAP32[$133>>2] = $129;
        $134 = $5;
        $135 = ((($134)) + 4|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ((($8)) + 20|0);
        HEAP32[$137>>2] = $136;
        $138 = $5;
        $139 = ((($138)) + 52|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = ((($8)) + 24|0);
        HEAP32[$141>>2] = $140;
        $142 = ((($8)) + 4|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = $6;
        $145 = $12;
        $146 = (FUNCTION_TABLE_iiiii[$143 & 511]($8,$144,$13,$145)|0);
        $147 = $5;
        $148 = ((($147)) + 2120|0);
        $149 = $14;
        $150 = (($148) + ($149<<2)|0);
        HEAP32[$150>>2] = $146;
        $151 = $5;
        $152 = ((($151)) + 2120|0);
        $153 = $14;
        $154 = (($152) + ($153<<2)|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($155|0)==(0|0);
        if ($156) {
         $157 = $4;
         __cmsTagSignature2String($16,$157);
         $158 = $5;
         $159 = ((($158)) + 4|0);
         $160 = HEAP32[$159>>2]|0;
         HEAP32[$vararg_buffer1>>2] = $16;
         _cmsSignalError($160,12,26587,$vararg_buffer1);
         break;
        }
        $161 = HEAP32[$13>>2]|0;
        $162 = $9;
        $163 = HEAP32[$162>>2]|0;
        $164 = ($161>>>0)<($163>>>0);
        if ($164) {
         $165 = $4;
         __cmsTagSignature2String($17,$165);
         $166 = $5;
         $167 = ((($166)) + 4|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = $9;
         $170 = HEAP32[$169>>2]|0;
         $171 = HEAP32[$13>>2]|0;
         HEAP32[$vararg_buffer4>>2] = $17;
         $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
         HEAP32[$vararg_ptr7>>2] = $170;
         $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
         HEAP32[$vararg_ptr8>>2] = $171;
         _cmsSignalError($168,12,26606,$vararg_buffer4);
        }
        $172 = $5;
        $173 = ((($172)) + 4|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = $5;
        $176 = ((($175)) + 2924|0);
        $177 = HEAP32[$176>>2]|0;
        __cmsUnlockMutex($174,$177);
        $178 = $5;
        $179 = ((($178)) + 2120|0);
        $180 = $14;
        $181 = (($179) + ($180<<2)|0);
        $182 = HEAP32[$181>>2]|0;
        $2 = $182;
        $189 = $2;
        STACKTOP = sp;return ($189|0);
       }
      }
     }
    }
   }
  }
 } while(0);
 $183 = $5;
 $184 = ((($183)) + 4|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = $5;
 $187 = ((($186)) + 2924|0);
 $188 = HEAP32[$187>>2]|0;
 __cmsUnlockMutex($185,$188);
 $2 = 0;
 $189 = $2;
 STACKTOP = sp;return ($189|0);
}
function _IsTypeSupported($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $10 = $6;
 $11 = ($10>>>0)>=(20);
 $$ = $11 ? 20 : $9;
 $6 = $$;
 $5 = 0;
 while(1) {
  $12 = $5;
  $13 = $6;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 6;
   break;
  }
  $15 = $4;
  $16 = $3;
  $17 = ((($16)) + 8|0);
  $18 = $5;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($15|0)==($20|0);
  if ($21) {
   label = 4;
   break;
  }
  $22 = $5;
  $23 = (($22) + 1)|0;
  $5 = $23;
 }
 if ((label|0) == 4) {
  $2 = 1;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 6) {
  $2 = 0;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __cmsGetTagTrueType($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $5 = $8;
 $9 = $5;
 $10 = $4;
 $11 = (__cmsSearchTag($9,$10,1)|0);
 $7 = $11;
 $12 = $7;
 $13 = ($12|0)<(0);
 if ($13) {
  $2 = 0;
  $21 = $2;
  STACKTOP = sp;return ($21|0);
 } else {
  $14 = $5;
  $15 = ((($14)) + 2520|0);
  $16 = $7;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $6 = $18;
  $19 = $6;
  $20 = HEAP32[$19>>2]|0;
  $2 = $20;
  $21 = $2;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function _cmsWriteTag($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $9 = sp + 52|0;
 $12 = sp + 40|0;
 $14 = sp + 109|0;
 $15 = sp + 104|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $16 = $4;
 $7 = $16;
 $8 = 0;
 $10 = 0;
 $17 = $7;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $7;
 $21 = ((($20)) + 2924|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__cmsLockMutex($19,$22)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $3 = 0;
  $160 = $3;
  STACKTOP = sp;return ($160|0);
 }
 $25 = $6;
 $26 = ($25|0)==(0|0);
 $27 = $7;
 $28 = $5;
 do {
  if ($26) {
   $29 = (__cmsSearchTag($27,$28,0)|0);
   HEAP32[$12>>2] = $29;
   $30 = HEAP32[$12>>2]|0;
   $31 = ($30|0)>=(0);
   if ($31) {
    $32 = $7;
    $33 = HEAP32[$12>>2]|0;
    __cmsDeleteTagByPos($32,$33);
    $34 = $7;
    $35 = ((($34)) + 120|0);
    $36 = HEAP32[$12>>2]|0;
    $37 = (($35) + ($36<<2)|0);
    HEAP32[$37>>2] = 0;
    $38 = $7;
    $39 = ((($38)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $7;
    $42 = ((($41)) + 2924|0);
    $43 = HEAP32[$42>>2]|0;
    __cmsUnlockMutex($40,$43);
    $3 = 1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
  } else {
   $44 = (__cmsNewTag($27,$28,$12)|0);
   $45 = ($44|0)!=(0);
   if ($45) {
    $46 = $7;
    $47 = ((($46)) + 1720|0);
    $48 = HEAP32[$12>>2]|0;
    $49 = (($47) + ($48<<2)|0);
    HEAP32[$49>>2] = 0;
    $50 = $7;
    $51 = ((($50)) + 520|0);
    $52 = HEAP32[$12>>2]|0;
    $53 = (($51) + ($52<<2)|0);
    HEAP32[$53>>2] = 0;
    $54 = $7;
    $55 = ((($54)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = $5;
    $58 = (__cmsGetTagDescriptor($56,$57)|0);
    $10 = $58;
    $59 = $10;
    $60 = ($59|0)==(0|0);
    if ($60) {
     $61 = $7;
     $62 = ((($61)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $5;
     HEAP32[$vararg_buffer>>2] = $64;
     _cmsSignalError($63,8,26661,$vararg_buffer);
     break;
    }
    $65 = $4;
    $66 = (+_cmsGetProfileVersion($65));
    $13 = $66;
    $67 = $10;
    $68 = ((($67)) + 88|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)!=(0|0);
    $71 = $10;
    if ($70) {
     $72 = ((($71)) + 88|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $13;
     $75 = $6;
     $76 = (FUNCTION_TABLE_idi[$73 & 511]($74,$75)|0);
     $11 = $76;
    } else {
     $77 = ((($71)) + 8|0);
     $78 = HEAP32[$77>>2]|0;
     $11 = $78;
    }
    $79 = $10;
    $80 = $11;
    $81 = (_IsTypeSupported($79,$80)|0);
    $82 = ($81|0)!=(0);
    if (!($82)) {
     $83 = $11;
     __cmsTagSignature2String($14,$83);
     $84 = $5;
     __cmsTagSignature2String($15,$84);
     $85 = $7;
     $86 = ((($85)) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $14;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $15;
     _cmsSignalError($87,8,26682,$vararg_buffer1);
     break;
    }
    $88 = $7;
    $89 = ((($88)) + 4|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $11;
    $92 = (__cmsGetTagTypeHandler($90,$91)|0);
    $8 = $92;
    $93 = $8;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $95 = $11;
     __cmsTagSignature2String($14,$95);
     $96 = $5;
     __cmsTagSignature2String($15,$96);
     $97 = $7;
     $98 = ((($97)) + 4|0);
     $99 = HEAP32[$98>>2]|0;
     HEAP32[$vararg_buffer5>>2] = $14;
     $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $15;
     _cmsSignalError($99,8,26682,$vararg_buffer5);
     break;
    }
    $100 = $8;
    $101 = $7;
    $102 = ((($101)) + 2520|0);
    $103 = HEAP32[$12>>2]|0;
    $104 = (($102) + ($103<<2)|0);
    HEAP32[$104>>2] = $100;
    $105 = $5;
    $106 = $7;
    $107 = ((($106)) + 120|0);
    $108 = HEAP32[$12>>2]|0;
    $109 = (($107) + ($108<<2)|0);
    HEAP32[$109>>2] = $105;
    $110 = $7;
    $111 = ((($110)) + 920|0);
    $112 = HEAP32[$12>>2]|0;
    $113 = (($111) + ($112<<2)|0);
    HEAP32[$113>>2] = 0;
    $114 = $7;
    $115 = ((($114)) + 1320|0);
    $116 = HEAP32[$12>>2]|0;
    $117 = (($115) + ($116<<2)|0);
    HEAP32[$117>>2] = 0;
    $118 = $8;
    ;HEAP32[$9>>2]=HEAP32[$118>>2]|0;HEAP32[$9+4>>2]=HEAP32[$118+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$118+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$118+12>>2]|0;HEAP32[$9+16>>2]=HEAP32[$118+16>>2]|0;HEAP32[$9+20>>2]=HEAP32[$118+20>>2]|0;HEAP32[$9+24>>2]=HEAP32[$118+24>>2]|0;
    $119 = $7;
    $120 = ((($119)) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ((($9)) + 20|0);
    HEAP32[$122>>2] = $121;
    $123 = $7;
    $124 = ((($123)) + 52|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ((($9)) + 24|0);
    HEAP32[$126>>2] = $125;
    $127 = ((($9)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = $6;
    $130 = $10;
    $131 = HEAP32[$130>>2]|0;
    $132 = (FUNCTION_TABLE_iiii[$128 & 511]($9,$129,$131)|0);
    $133 = $7;
    $134 = ((($133)) + 2120|0);
    $135 = HEAP32[$12>>2]|0;
    $136 = (($134) + ($135<<2)|0);
    HEAP32[$136>>2] = $132;
    $137 = $7;
    $138 = ((($137)) + 2120|0);
    $139 = HEAP32[$12>>2]|0;
    $140 = (($138) + ($139<<2)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ($141|0)==(0|0);
    if ($142) {
     $143 = $11;
     __cmsTagSignature2String($14,$143);
     $144 = $5;
     __cmsTagSignature2String($15,$144);
     $145 = $7;
     $146 = ((($145)) + 4|0);
     $147 = HEAP32[$146>>2]|0;
     HEAP32[$vararg_buffer9>>2] = $14;
     $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
     HEAP32[$vararg_ptr12>>2] = $15;
     _cmsSignalError($147,12,26717,$vararg_buffer9);
     break;
    }
    $148 = $7;
    $149 = ((($148)) + 4|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $7;
    $152 = ((($151)) + 2924|0);
    $153 = HEAP32[$152>>2]|0;
    __cmsUnlockMutex($150,$153);
    $3 = 1;
    $160 = $3;
    STACKTOP = sp;return ($160|0);
   }
  }
 } while(0);
 $154 = $7;
 $155 = ((($154)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $7;
 $158 = ((($157)) + 2924|0);
 $159 = HEAP32[$158>>2]|0;
 __cmsUnlockMutex($156,$159);
 $3 = 0;
 $160 = $3;
 STACKTOP = sp;return ($160|0);
}
function __cmsDeleteTagByPos($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((26760|0),(25872|0),592,(26780|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ($8|0)>=(0);
 if (!($9)) {
  ___assert_fail((26799|0),(25872|0),593,(26780|0));
  // unreachable;
 }
 $10 = $2;
 $11 = ((($10)) + 2120|0);
 $12 = $3;
 $13 = (($11) + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $2;
 $17 = ((($16)) + 1720|0);
 $18 = $3;
 $19 = (($17) + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 $22 = $2;
 if ($21) {
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = ((($25)) + 2120|0);
  $27 = $3;
  $28 = (($26) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  __cmsFree($24,$29);
  STACKTOP = sp;return;
 }
 $30 = ((($22)) + 2520|0);
 $31 = $3;
 $32 = (($30) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $4 = $33;
 $34 = $4;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $4;
 ;HEAP32[$5>>2]=HEAP32[$36>>2]|0;HEAP32[$5+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$36+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$36+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$36+20>>2]|0;HEAP32[$5+24>>2]=HEAP32[$36+24>>2]|0;
 $37 = $2;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($5)) + 20|0);
 HEAP32[$40>>2] = $39;
 $41 = $2;
 $42 = ((($41)) + 52|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($5)) + 24|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($5)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $2;
 $48 = ((($47)) + 2120|0);
 $49 = $3;
 $50 = (($48) + ($49<<2)|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_vii[$46 & 511]($5,$51);
 $52 = $2;
 $53 = ((($52)) + 2120|0);
 $54 = $3;
 $55 = (($53) + ($54<<2)|0);
 HEAP32[$55>>2] = 0;
 STACKTOP = sp;return;
}
function __cmsNewTag($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = $5;
 $10 = (__cmsSearchTag($8,$9,0)|0);
 $7 = $10;
 $11 = $7;
 $12 = ($11|0)>=(0);
 $13 = $4;
 do {
  if ($12) {
   $14 = $7;
   __cmsDeleteTagByPos($13,$14);
   $15 = $7;
   $16 = $6;
   HEAP32[$16>>2] = $15;
  } else {
   $17 = ((($13)) + 116|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18>>>0)>=(100);
   $20 = $4;
   if (!($19)) {
    $23 = ((($20)) + 116|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $6;
    HEAP32[$25>>2] = $24;
    $26 = $4;
    $27 = ((($26)) + 116|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 1)|0;
    HEAP32[$27>>2] = $29;
    break;
   }
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$vararg_buffer>>2] = 100;
   _cmsSignalError($22,2,26426,$vararg_buffer);
   $3 = 0;
   $30 = $3;
   STACKTOP = sp;return ($30|0);
  }
 } while(0);
 $3 = 1;
 $30 = $3;
 STACKTOP = sp;return ($30|0);
}
function _cmsLinkTag($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $7 = $9;
 $10 = $7;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $7;
 $14 = ((($13)) + 2924|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__cmsLockMutex($12,$15)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $3 = 0;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 }
 $18 = $7;
 $19 = $5;
 $20 = (__cmsNewTag($18,$19,$8)|0);
 $21 = ($20|0)!=(0);
 $22 = $7;
 if ($21) {
  $28 = ((($22)) + 1720|0);
  $29 = HEAP32[$8>>2]|0;
  $30 = (($28) + ($29<<2)|0);
  HEAP32[$30>>2] = 0;
  $31 = $5;
  $32 = $7;
  $33 = ((($32)) + 120|0);
  $34 = HEAP32[$8>>2]|0;
  $35 = (($33) + ($34<<2)|0);
  HEAP32[$35>>2] = $31;
  $36 = $6;
  $37 = $7;
  $38 = ((($37)) + 520|0);
  $39 = HEAP32[$8>>2]|0;
  $40 = (($38) + ($39<<2)|0);
  HEAP32[$40>>2] = $36;
  $41 = $7;
  $42 = ((($41)) + 2120|0);
  $43 = HEAP32[$8>>2]|0;
  $44 = (($42) + ($43<<2)|0);
  HEAP32[$44>>2] = 0;
  $45 = $7;
  $46 = ((($45)) + 920|0);
  $47 = HEAP32[$8>>2]|0;
  $48 = (($46) + ($47<<2)|0);
  HEAP32[$48>>2] = 0;
  $49 = $7;
  $50 = ((($49)) + 1320|0);
  $51 = HEAP32[$8>>2]|0;
  $52 = (($50) + ($51<<2)|0);
  HEAP32[$52>>2] = 0;
  $53 = $7;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $7;
  $57 = ((($56)) + 2924|0);
  $58 = HEAP32[$57>>2]|0;
  __cmsUnlockMutex($55,$58);
  $3 = 1;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 } else {
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $7;
  $26 = ((($25)) + 2924|0);
  $27 = HEAP32[$26>>2]|0;
  __cmsUnlockMutex($24,$27);
  $3 = 0;
  $59 = $3;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function __cmsReadMediaWhitePoint($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28218|0),(26808|0),68,(26836|0));
  // unreachable;
 }
 $8 = $4;
 $9 = (_cmsReadTag($8,2004119668)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = $3;
  $13 = (_cmsD50_XYZ()|0);
  ;HEAP32[$12>>2]=HEAP32[$13>>2]|0;HEAP32[$12+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$12+12>>2]=HEAP32[$13+12>>2]|0;HEAP32[$12+16>>2]=HEAP32[$13+16>>2]|0;HEAP32[$12+20>>2]=HEAP32[$13+20>>2]|0;
  $2 = 1;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 $14 = $4;
 $15 = (_cmsGetEncodedICCversion($14)|0);
 $16 = ($15>>>0)<(67108864);
 if ($16) {
  $17 = $4;
  $18 = (_cmsGetDeviceClass($17)|0);
  $19 = ($18|0)==(1835955314);
  if ($19) {
   $20 = $3;
   $21 = (_cmsD50_XYZ()|0);
   ;HEAP32[$20>>2]=HEAP32[$21>>2]|0;HEAP32[$20+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$20+12>>2]=HEAP32[$21+12>>2]|0;HEAP32[$20+16>>2]=HEAP32[$21+16>>2]|0;HEAP32[$20+20>>2]=HEAP32[$21+20>>2]|0;
   $2 = 1;
   $24 = $2;
   STACKTOP = sp;return ($24|0);
  }
 }
 $22 = $3;
 $23 = $5;
 ;HEAP32[$22>>2]=HEAP32[$23>>2]|0;HEAP32[$22+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$23+12>>2]|0;HEAP32[$22+16>>2]=HEAP32[$23+16>>2]|0;HEAP32[$22+20>>2]=HEAP32[$23+20>>2]|0;
 $2 = 1;
 $24 = $2;
 STACKTOP = sp;return ($24|0);
}
function __cmsReadCHAD($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((28218|0),(26808|0),98,(26860|0));
  // unreachable;
 }
 $9 = $4;
 $10 = (_cmsReadTag($9,1667785060)|0);
 $5 = $10;
 $11 = $5;
 $12 = ($11|0)!=(0|0);
 $13 = $3;
 if ($12) {
  $14 = $5;
  dest=$13; src=$14; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $2 = 1;
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 __cmsMAT3identity($13);
 $15 = $4;
 $16 = (_cmsGetEncodedICCversion($15)|0);
 $17 = ($16>>>0)<(67108864);
 if ($17) {
  $18 = $4;
  $19 = (_cmsGetDeviceClass($18)|0);
  $20 = ($19|0)==(1835955314);
  if ($20) {
   $21 = $4;
   $22 = (_cmsReadTag($21,2004119668)|0);
   $6 = $22;
   $23 = $6;
   $24 = ($23|0)==(0|0);
   $25 = $3;
   if ($24) {
    __cmsMAT3identity($25);
    $2 = 1;
    $29 = $2;
    STACKTOP = sp;return ($29|0);
   } else {
    $26 = $6;
    $27 = (_cmsD50_XYZ()|0);
    $28 = (__cmsAdaptationMatrix($25,0,$26,$27)|0);
    $2 = $28;
    $29 = $2;
    STACKTOP = sp;return ($29|0);
   }
  }
 }
 $2 = 1;
 $29 = $2;
 STACKTOP = sp;return ($29|0);
}
function __cmsReadInputLUT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $12 = $3;
 $13 = (_cmsGetProfileContextID($12)|0);
 $8 = $13;
 $14 = $3;
 $15 = (_cmsGetDeviceClass($14)|0);
 $16 = ($15|0)==(1852662636);
 if ($16) {
  $17 = $3;
  $18 = (_cmsReadTag($17,1852009522)|0);
  $10 = $18;
  $19 = $10;
  $20 = ($19|0)==(0|0);
  if ($20) {
   $2 = 0;
   $98 = $2;
   STACKTOP = sp;return ($98|0);
  }
  $21 = $8;
  $22 = (_cmsPipelineAlloc($21,0,0)|0);
  $9 = $22;
  $23 = $9;
  $24 = ($23|0)==(0|0);
  if ($24) {
   $25 = $10;
   _cmsFreeNamedColorList($25);
   $2 = 0;
   $98 = $2;
   STACKTOP = sp;return ($98|0);
  }
  $26 = $9;
  $27 = $10;
  $28 = (__cmsStageAllocNamedColor($27,1)|0);
  $29 = (_cmsPipelineInsertStage($26,0,$28)|0);
  $30 = ($29|0)!=(0);
  if ($30) {
   $31 = $9;
   $32 = $8;
   $33 = (__cmsStageAllocLabV2ToV4($32)|0);
   $34 = (_cmsPipelineInsertStage($31,1,$33)|0);
   $35 = ($34|0)!=(0);
   if ($35) {
    $37 = $9;
    $2 = $37;
    $98 = $2;
    STACKTOP = sp;return ($98|0);
   }
  }
  $36 = $9;
  _cmsPipelineFree($36);
  $2 = 0;
  $98 = $2;
  STACKTOP = sp;return ($98|0);
 }
 $38 = $4;
 $39 = ($38>>>0)<=(3);
 if ($39) {
  $40 = $4;
  $41 = (13252 + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $6 = $42;
  $43 = $4;
  $44 = (13268 + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $7 = $45;
  $46 = $3;
  $47 = $7;
  $48 = (_cmsIsTag($46,$47)|0);
  $49 = ($48|0)!=(0);
  $50 = $3;
  if ($49) {
   $51 = $7;
   $52 = (__cmsReadFloatInputTag($50,$51)|0);
   $2 = $52;
   $98 = $2;
   STACKTOP = sp;return ($98|0);
  }
  $53 = $6;
  $54 = (_cmsIsTag($50,$53)|0);
  $55 = ($54|0)!=(0);
  if (!($55)) {
   $56 = HEAP32[3313]|0;
   $6 = $56;
  }
  $57 = $3;
  $58 = $6;
  $59 = (_cmsIsTag($57,$58)|0);
  $60 = ($59|0)!=(0);
  if ($60) {
   $61 = $3;
   $62 = $6;
   $63 = (_cmsReadTag($61,$62)|0);
   $11 = $63;
   $64 = $11;
   $65 = ($64|0)==(0|0);
   if ($65) {
    $2 = 0;
    $98 = $2;
    STACKTOP = sp;return ($98|0);
   }
   $66 = $3;
   $67 = $6;
   $68 = (__cmsGetTagTrueType($66,$67)|0);
   $5 = $68;
   $69 = $11;
   $70 = (_cmsPipelineDup($69)|0);
   $11 = $70;
   $71 = $5;
   $72 = ($71|0)!=(1835430962);
   if (!($72)) {
    $73 = $3;
    $74 = (_cmsGetPCS($73)|0);
    $75 = ($74|0)!=(1281450528);
    if (!($75)) {
     $77 = $3;
     $78 = (_cmsGetColorSpace($77)|0);
     $79 = ($78|0)==(1281450528);
     if ($79) {
      $80 = $11;
      $81 = $8;
      $82 = (__cmsStageAllocLabV4ToV2($81)|0);
      $83 = (_cmsPipelineInsertStage($80,0,$82)|0);
      $84 = ($83|0)!=(0);
      if ($84) {
       label = 23;
      }
     } else {
      label = 23;
     }
     if ((label|0) == 23) {
      $85 = $11;
      $86 = $8;
      $87 = (__cmsStageAllocLabV2ToV4($86)|0);
      $88 = (_cmsPipelineInsertStage($85,1,$87)|0);
      $89 = ($88|0)!=(0);
      if ($89) {
       $90 = $11;
       $2 = $90;
       $98 = $2;
       STACKTOP = sp;return ($98|0);
      }
     }
     $91 = $11;
     _cmsPipelineFree($91);
     $2 = 0;
     $98 = $2;
     STACKTOP = sp;return ($98|0);
    }
   }
   $76 = $11;
   $2 = $76;
   $98 = $2;
   STACKTOP = sp;return ($98|0);
  }
 }
 $92 = $3;
 $93 = (_cmsGetColorSpace($92)|0);
 $94 = ($93|0)==(1196573017);
 $95 = $3;
 if ($94) {
  $96 = (_BuildGrayInputMatrixPipeline($95)|0);
  $2 = $96;
  $98 = $2;
  STACKTOP = sp;return ($98|0);
 } else {
  $97 = (_BuildRGBInputMatrixShaper($95)|0);
  $2 = $97;
  $98 = $2;
  STACKTOP = sp;return ($98|0);
 }
 return (0)|0;
}
function __cmsReadFloatInputTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = (_cmsGetProfileContextID($9)|0);
 $5 = $10;
 $11 = $3;
 $12 = $4;
 $13 = (_cmsReadTag($11,$12)|0);
 $14 = (_cmsPipelineDup($13)|0);
 $6 = $14;
 $15 = $3;
 $16 = (_cmsGetColorSpace($15)|0);
 $7 = $16;
 $17 = $3;
 $18 = (_cmsGetPCS($17)|0);
 $8 = $18;
 $19 = $6;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $2 = 0;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 $21 = $7;
 $22 = ($21|0)==(1281450528);
 if ($22) {
  $23 = $6;
  $24 = $5;
  $25 = (__cmsStageNormalizeToLabFloat($24)|0);
  $26 = (_cmsPipelineInsertStage($23,0,$25)|0);
  $27 = ($26|0)!=(0);
  if ($27) {
   label = 7;
  }
 } else {
  $28 = $7;
  $29 = ($28|0)==(1482250784);
  if ($29) {
   $30 = $6;
   $31 = $5;
   $32 = (__cmsStageNormalizeToXyzFloat($31)|0);
   $33 = (_cmsPipelineInsertStage($30,0,$32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    label = 7;
   }
  } else {
   label = 7;
  }
 }
 do {
  if ((label|0) == 7) {
   $35 = $8;
   $36 = ($35|0)==(1281450528);
   if ($36) {
    $37 = $6;
    $38 = $5;
    $39 = (__cmsStageNormalizeFromLabFloat($38)|0);
    $40 = (_cmsPipelineInsertStage($37,1,$39)|0);
    $41 = ($40|0)!=(0);
    if (!($41)) {
     break;
    }
   } else {
    $42 = $8;
    $43 = ($42|0)==(1482250784);
    if ($43) {
     $44 = $6;
     $45 = $5;
     $46 = (__cmsStageNormalizeFromXyzFloat($45)|0);
     $47 = (_cmsPipelineInsertStage($44,1,$46)|0);
     $48 = ($47|0)!=(0);
     if (!($48)) {
      break;
     }
    }
   }
   $49 = $6;
   $2 = $49;
   $51 = $2;
   STACKTOP = sp;return ($51|0);
  }
 } while(0);
 $50 = $6;
 _cmsPipelineFree($50);
 $2 = 0;
 $51 = $2;
 STACKTOP = sp;return ($51|0);
}
function _BuildGrayInputMatrixPipeline($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 24|0;
 $6 = sp + 36|0;
 $8 = sp;
 $2 = $0;
 $9 = $2;
 $10 = (_cmsGetProfileContextID($9)|0);
 $5 = $10;
 $11 = $2;
 $12 = (_cmsReadTag($11,1800688195)|0);
 HEAP32[$3>>2] = $12;
 $13 = HEAP32[$3>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $1 = 0;
  $56 = $1;
  STACKTOP = sp;return ($56|0);
 }
 $15 = $5;
 $16 = (_cmsPipelineAlloc($15,1,3)|0);
 $4 = $16;
 $17 = $4;
 $18 = ($17|0)==(0|0);
 L5: do {
  if (!($18)) {
   $19 = $2;
   $20 = (_cmsGetPCS($19)|0);
   $21 = ($20|0)==(1281450528);
   do {
    if ($21) {
     ;HEAP16[$6>>1]=HEAP16[24424>>1]|0;HEAP16[$6+2>>1]=HEAP16[24424+2>>1]|0;
     $22 = $5;
     $23 = (_cmsBuildTabulatedToneCurve16($22,2,$6)|0);
     $7 = $23;
     $24 = $7;
     $25 = ($24|0)==(0|0);
     if ($25) {
      break L5;
     }
     $26 = HEAP32[$3>>2]|0;
     HEAP32[$8>>2] = $26;
     $27 = $7;
     $28 = ((($8)) + 4|0);
     HEAP32[$28>>2] = $27;
     $29 = $7;
     $30 = ((($8)) + 8|0);
     HEAP32[$30>>2] = $29;
     $31 = $4;
     $32 = $5;
     $33 = (_cmsStageAllocMatrix($32,3,1,8,0)|0);
     $34 = (_cmsPipelineInsertStage($31,1,$33)|0);
     $35 = ($34|0)!=(0);
     if ($35) {
      $36 = $4;
      $37 = $5;
      $38 = (_cmsStageAllocToneCurves($37,3,$8)|0);
      $39 = (_cmsPipelineInsertStage($36,1,$38)|0);
      $40 = ($39|0)!=(0);
      if ($40) {
       $42 = $7;
       _cmsFreeToneCurve($42);
       break;
      }
     }
     $41 = $7;
     _cmsFreeToneCurve($41);
     break L5;
    } else {
     $43 = $4;
     $44 = $5;
     $45 = (_cmsStageAllocToneCurves($44,1,$3)|0);
     $46 = (_cmsPipelineInsertStage($43,1,$45)|0);
     $47 = ($46|0)!=(0);
     if (!($47)) {
      break L5;
     }
     $48 = $4;
     $49 = $5;
     $50 = (_cmsStageAllocMatrix($49,3,1,32,0)|0);
     $51 = (_cmsPipelineInsertStage($48,1,$50)|0);
     $52 = ($51|0)!=(0);
     if (!($52)) {
      break L5;
     }
    }
   } while(0);
   $53 = $4;
   $1 = $53;
   $56 = $1;
   STACKTOP = sp;return ($56|0);
  }
 } while(0);
 $54 = HEAP32[$3>>2]|0;
 _cmsFreeToneCurve($54);
 $55 = $4;
 _cmsPipelineFree($55);
 $1 = 0;
 $56 = $1;
 STACKTOP = sp;return ($56|0);
}
function _BuildRGBInputMatrixShaper($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp;
 $5 = sp + 84|0;
 $2 = $0;
 $9 = $2;
 $10 = (_cmsGetProfileContextID($9)|0);
 $6 = $10;
 $11 = $2;
 $12 = (_ReadICCMatrixRGB2XYZ($4,$11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $1 = 0;
  $68 = $1;
  STACKTOP = sp;return ($68|0);
 }
 $7 = 0;
 while(1) {
  $14 = $7;
  $15 = ($14|0)<(3);
  if (!($15)) {
   break;
  }
  $8 = 0;
  while(1) {
   $16 = $8;
   $17 = ($16|0)<(3);
   if (!($17)) {
    break;
   }
   $18 = $7;
   $19 = (($4) + (($18*24)|0)|0);
   $20 = $8;
   $21 = (($19) + ($20<<3)|0);
   $22 = +HEAPF64[$21>>3];
   $23 = $22 * 0.50000762951094835;
   HEAPF64[$21>>3] = $23;
   $24 = $8;
   $25 = (($24) + 1)|0;
   $8 = $25;
  }
  $26 = $7;
  $27 = (($26) + 1)|0;
  $7 = $27;
 }
 $28 = $2;
 $29 = (_cmsReadTag($28,1918128707)|0);
 HEAP32[$5>>2] = $29;
 $30 = $2;
 $31 = (_cmsReadTag($30,1733579331)|0);
 $32 = ((($5)) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = $2;
 $34 = (_cmsReadTag($33,1649693251)|0);
 $35 = ((($5)) + 8|0);
 HEAP32[$35>>2] = $34;
 $36 = HEAP32[$5>>2]|0;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = ((($5)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = ((($5)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)!=(0|0);
   if ($43) {
    $44 = $6;
    $45 = (_cmsPipelineAlloc($44,3,3)|0);
    $3 = $45;
    $46 = $3;
    $47 = ($46|0)!=(0|0);
    do {
     if ($47) {
      $48 = $3;
      $49 = $6;
      $50 = (_cmsStageAllocToneCurves($49,3,$5)|0);
      $51 = (_cmsPipelineInsertStage($48,1,$50)|0);
      $52 = ($51|0)!=(0);
      if ($52) {
       $53 = $3;
       $54 = $6;
       $55 = (_cmsStageAllocMatrix($54,3,3,$4,0)|0);
       $56 = (_cmsPipelineInsertStage($53,1,$55)|0);
       $57 = ($56|0)!=(0);
       if ($57) {
        $58 = $2;
        $59 = (_cmsGetPCS($58)|0);
        $60 = ($59|0)==(1281450528);
        if (!($60)) {
         break;
        }
        $61 = $3;
        $62 = $6;
        $63 = (__cmsStageAllocXYZ2Lab($62)|0);
        $64 = (_cmsPipelineInsertStage($61,1,$63)|0);
        $65 = ($64|0)!=(0);
        if ($65) {
         break;
        }
       }
      }
      $67 = $3;
      _cmsPipelineFree($67);
      $1 = 0;
      $68 = $1;
      STACKTOP = sp;return ($68|0);
     }
    } while(0);
    $66 = $3;
    $1 = $66;
    $68 = $1;
    STACKTOP = sp;return ($68|0);
   }
  }
 }
 $1 = 0;
 $68 = $1;
 STACKTOP = sp;return ($68|0);
}
function _ReadICCMatrixRGB2XYZ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((26873|0),(26808|0),137,(26891|0));
  // unreachable;
 }
 $10 = $4;
 $11 = (_cmsReadTag($10,1918392666)|0);
 $5 = $11;
 $12 = $4;
 $13 = (_cmsReadTag($12,1733843290)|0);
 $6 = $13;
 $14 = $4;
 $15 = (_cmsReadTag($14,1649957210)|0);
 $7 = $15;
 $16 = $5;
 $17 = ($16|0)==(0|0);
 $18 = $6;
 $19 = ($18|0)==(0|0);
 $or$cond = $17 | $19;
 $20 = $7;
 $21 = ($20|0)==(0|0);
 $or$cond3 = $or$cond | $21;
 if ($or$cond3) {
  $2 = 0;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 } else {
  $22 = $3;
  $23 = $5;
  $24 = +HEAPF64[$23>>3];
  $25 = $6;
  $26 = +HEAPF64[$25>>3];
  $27 = $7;
  $28 = +HEAPF64[$27>>3];
  __cmsVEC3init($22,$24,$26,$28);
  $29 = $3;
  $30 = ((($29)) + 24|0);
  $31 = $5;
  $32 = ((($31)) + 8|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $6;
  $35 = ((($34)) + 8|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $7;
  $38 = ((($37)) + 8|0);
  $39 = +HEAPF64[$38>>3];
  __cmsVEC3init($30,$33,$36,$39);
  $40 = $3;
  $41 = ((($40)) + 48|0);
  $42 = $5;
  $43 = ((($42)) + 16|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $6;
  $46 = ((($45)) + 16|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $7;
  $49 = ((($48)) + 16|0);
  $50 = +HEAPF64[$49>>3];
  __cmsVEC3init($41,$44,$47,$50);
  $2 = 1;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function __cmsReadOutputLUT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = (_cmsGetProfileContextID($10)|0);
 $8 = $11;
 $12 = $4;
 $13 = ($12>>>0)<=(3);
 if ($13) {
  $14 = $4;
  $15 = (13284 + ($14<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $6 = $16;
  $17 = $4;
  $18 = (13300 + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $7 = $19;
  $20 = $3;
  $21 = $7;
  $22 = (_cmsIsTag($20,$21)|0);
  $23 = ($22|0)!=(0);
  $24 = $3;
  if ($23) {
   $25 = $7;
   $26 = (__cmsReadFloatOutputTag($24,$25)|0);
   $2 = $26;
   $78 = $2;
   STACKTOP = sp;return ($78|0);
  }
  $27 = $6;
  $28 = (_cmsIsTag($24,$27)|0);
  $29 = ($28|0)!=(0);
  if (!($29)) {
   $30 = HEAP32[3321]|0;
   $6 = $30;
  }
  $31 = $3;
  $32 = $6;
  $33 = (_cmsIsTag($31,$32)|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $3;
   $36 = $6;
   $37 = (_cmsReadTag($35,$36)|0);
   $9 = $37;
   $38 = $9;
   $39 = ($38|0)==(0|0);
   if ($39) {
    $2 = 0;
    $78 = $2;
    STACKTOP = sp;return ($78|0);
   }
   $40 = $3;
   $41 = $6;
   $42 = (__cmsGetTagTrueType($40,$41)|0);
   $5 = $42;
   $43 = $9;
   $44 = (_cmsPipelineDup($43)|0);
   $9 = $44;
   $45 = $9;
   $46 = ($45|0)==(0|0);
   if ($46) {
    $2 = 0;
    $78 = $2;
    STACKTOP = sp;return ($78|0);
   }
   $47 = $3;
   $48 = (_cmsGetPCS($47)|0);
   $49 = ($48|0)==(1281450528);
   if ($49) {
    $50 = $9;
    _ChangeInterpolationToTrilinear($50);
   }
   $51 = $5;
   $52 = ($51|0)!=(1835430962);
   if (!($52)) {
    $53 = $3;
    $54 = (_cmsGetPCS($53)|0);
    $55 = ($54|0)!=(1281450528);
    if (!($55)) {
     $57 = $9;
     $58 = $8;
     $59 = (__cmsStageAllocLabV4ToV2($58)|0);
     $60 = (_cmsPipelineInsertStage($57,0,$59)|0);
     $61 = ($60|0)!=(0);
     do {
      if ($61) {
       $62 = $3;
       $63 = (_cmsGetColorSpace($62)|0);
       $64 = ($63|0)==(1281450528);
       if ($64) {
        $65 = $9;
        $66 = $8;
        $67 = (__cmsStageAllocLabV2ToV4($66)|0);
        $68 = (_cmsPipelineInsertStage($65,1,$67)|0);
        $69 = ($68|0)!=(0);
        if (!($69)) {
         break;
        }
       }
       $70 = $9;
       $2 = $70;
       $78 = $2;
       STACKTOP = sp;return ($78|0);
      }
     } while(0);
     $71 = $9;
     _cmsPipelineFree($71);
     $2 = 0;
     $78 = $2;
     STACKTOP = sp;return ($78|0);
    }
   }
   $56 = $9;
   $2 = $56;
   $78 = $2;
   STACKTOP = sp;return ($78|0);
  }
 }
 $72 = $3;
 $73 = (_cmsGetColorSpace($72)|0);
 $74 = ($73|0)==(1196573017);
 $75 = $3;
 if ($74) {
  $76 = (_BuildGrayOutputPipeline($75)|0);
  $2 = $76;
  $78 = $2;
  STACKTOP = sp;return ($78|0);
 } else {
  $77 = (_BuildRGBOutputMatrixShaper($75)|0);
  $2 = $77;
  $78 = $2;
  STACKTOP = sp;return ($78|0);
 }
 return (0)|0;
}
function __cmsReadFloatOutputTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = (_cmsGetProfileContextID($9)|0);
 $5 = $10;
 $11 = $3;
 $12 = $4;
 $13 = (_cmsReadTag($11,$12)|0);
 $14 = (_cmsPipelineDup($13)|0);
 $6 = $14;
 $15 = $3;
 $16 = (_cmsGetPCS($15)|0);
 $7 = $16;
 $17 = $3;
 $18 = (_cmsGetColorSpace($17)|0);
 $8 = $18;
 $19 = $6;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $2 = 0;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 $21 = $7;
 $22 = ($21|0)==(1281450528);
 if ($22) {
  $23 = $6;
  $24 = $5;
  $25 = (__cmsStageNormalizeToLabFloat($24)|0);
  $26 = (_cmsPipelineInsertStage($23,0,$25)|0);
  $27 = ($26|0)!=(0);
  if ($27) {
   label = 7;
  }
 } else {
  $28 = $7;
  $29 = ($28|0)==(1482250784);
  if ($29) {
   $30 = $6;
   $31 = $5;
   $32 = (__cmsStageNormalizeToXyzFloat($31)|0);
   $33 = (_cmsPipelineInsertStage($30,0,$32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    label = 7;
   }
  } else {
   label = 7;
  }
 }
 do {
  if ((label|0) == 7) {
   $35 = $8;
   $36 = ($35|0)==(1281450528);
   if ($36) {
    $37 = $6;
    $38 = $5;
    $39 = (__cmsStageNormalizeFromLabFloat($38)|0);
    $40 = (_cmsPipelineInsertStage($37,1,$39)|0);
    $41 = ($40|0)!=(0);
    if (!($41)) {
     break;
    }
   } else {
    $42 = $8;
    $43 = ($42|0)==(1482250784);
    if ($43) {
     $44 = $6;
     $45 = $5;
     $46 = (__cmsStageNormalizeFromXyzFloat($45)|0);
     $47 = (_cmsPipelineInsertStage($44,1,$46)|0);
     $48 = ($47|0)!=(0);
     if (!($48)) {
      break;
     }
    }
   }
   $49 = $6;
   $2 = $49;
   $51 = $2;
   STACKTOP = sp;return ($51|0);
  }
 } while(0);
 $50 = $6;
 _cmsPipelineFree($50);
 $2 = 0;
 $51 = $2;
 STACKTOP = sp;return ($51|0);
}
function _ChangeInterpolationToTrilinear($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (_cmsPipelineGetPtrToFirstStage($4)|0);
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = (_cmsStageType($8)|0);
  $10 = ($9|0)==(1668052340);
  if ($10) {
   $11 = $2;
   $12 = ((($11)) + 32|0);
   $13 = HEAP32[$12>>2]|0;
   $3 = $13;
   $14 = $3;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 | 256;
   HEAP32[$17>>2] = $19;
   $20 = $1;
   $21 = ((($20)) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $3;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   (__cmsSetInterpolationRoutine($22,$25)|0);
  }
  $26 = $2;
  $27 = (_cmsStageNext($26)|0);
  $2 = $27;
 }
 STACKTOP = sp;return;
}
function _BuildGrayOutputPipeline($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 8|0;
 $2 = $0;
 $7 = $2;
 $8 = (_cmsGetProfileContextID($7)|0);
 $6 = $8;
 $9 = $2;
 $10 = (_cmsReadTag($9,1800688195)|0);
 $3 = $10;
 $11 = $3;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 $13 = $3;
 $14 = (_cmsReverseToneCurve($13)|0);
 HEAP32[$4>>2] = $14;
 $15 = HEAP32[$4>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 $17 = $6;
 $18 = (_cmsPipelineAlloc($17,3,1)|0);
 $5 = $18;
 $19 = $5;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = HEAP32[$4>>2]|0;
  _cmsFreeToneCurve($21);
  $1 = 0;
  $42 = $1;
  STACKTOP = sp;return ($42|0);
 }
 $22 = $2;
 $23 = (_cmsGetPCS($22)|0);
 $24 = ($23|0)==(1281450528);
 $25 = $5;
 $26 = $6;
 if ($24) {
  $27 = (_cmsStageAllocMatrix($26,1,3,56,0)|0);
  $28 = (_cmsPipelineInsertStage($25,1,$27)|0);
  $29 = ($28|0)!=(0);
  if ($29) {
   label = 10;
  }
 } else {
  $30 = (_cmsStageAllocMatrix($26,1,3,80,0)|0);
  $31 = (_cmsPipelineInsertStage($25,1,$30)|0);
  $32 = ($31|0)!=(0);
  if ($32) {
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $33 = $5;
  $34 = $6;
  $35 = (_cmsStageAllocToneCurves($34,1,$4)|0);
  $36 = (_cmsPipelineInsertStage($33,1,$35)|0);
  $37 = ($36|0)!=(0);
  if ($37) {
   $38 = HEAP32[$4>>2]|0;
   _cmsFreeToneCurve($38);
   $39 = $5;
   $1 = $39;
   $42 = $1;
   STACKTOP = sp;return ($42|0);
  }
 }
 $40 = HEAP32[$4>>2]|0;
 _cmsFreeToneCurve($40);
 $41 = $5;
 _cmsPipelineFree($41);
 $1 = 0;
 $42 = $1;
 STACKTOP = sp;return ($42|0);
}
function _BuildRGBOutputMatrixShaper($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $4 = sp + 168|0;
 $5 = sp + 156|0;
 $6 = sp + 72|0;
 $7 = sp;
 $2 = $0;
 $11 = $2;
 $12 = (_cmsGetProfileContextID($11)|0);
 $10 = $12;
 $13 = $2;
 $14 = (_ReadICCMatrixRGB2XYZ($6,$13)|0);
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $1 = 0;
  $90 = $1;
  STACKTOP = sp;return ($90|0);
 }
 $16 = (__cmsMAT3inverse($6,$7)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $1 = 0;
  $90 = $1;
  STACKTOP = sp;return ($90|0);
 }
 $8 = 0;
 while(1) {
  $18 = $8;
  $19 = ($18|0)<(3);
  if (!($19)) {
   break;
  }
  $9 = 0;
  while(1) {
   $20 = $9;
   $21 = ($20|0)<(3);
   if (!($21)) {
    break;
   }
   $22 = $8;
   $23 = (($7) + (($22*24)|0)|0);
   $24 = $9;
   $25 = (($23) + ($24<<3)|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $26 * 1.999969482421875;
   HEAPF64[$25>>3] = $27;
   $28 = $9;
   $29 = (($28) + 1)|0;
   $9 = $29;
  }
  $30 = $8;
  $31 = (($30) + 1)|0;
  $8 = $31;
 }
 $32 = $2;
 $33 = (_cmsReadTag($32,1918128707)|0);
 HEAP32[$4>>2] = $33;
 $34 = $2;
 $35 = (_cmsReadTag($34,1733579331)|0);
 $36 = ((($4)) + 4|0);
 HEAP32[$36>>2] = $35;
 $37 = $2;
 $38 = (_cmsReadTag($37,1649693251)|0);
 $39 = ((($4)) + 8|0);
 HEAP32[$39>>2] = $38;
 $40 = HEAP32[$4>>2]|0;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = ((($4)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(0|0);
  if ($44) {
   $45 = ((($4)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)!=(0|0);
   if ($47) {
    $48 = HEAP32[$4>>2]|0;
    $49 = (_cmsReverseToneCurve($48)|0);
    HEAP32[$5>>2] = $49;
    $50 = ((($4)) + 4|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (_cmsReverseToneCurve($51)|0);
    $53 = ((($5)) + 4|0);
    HEAP32[$53>>2] = $52;
    $54 = ((($4)) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (_cmsReverseToneCurve($55)|0);
    $57 = ((($5)) + 8|0);
    HEAP32[$57>>2] = $56;
    $58 = HEAP32[$5>>2]|0;
    $59 = ($58|0)!=(0|0);
    if ($59) {
     $60 = ((($5)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)!=(0|0);
     if ($62) {
      $63 = ((($5)) + 8|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)!=(0|0);
      if ($65) {
       $66 = $10;
       $67 = (_cmsPipelineAlloc($66,3,3)|0);
       $3 = $67;
       $68 = $3;
       $69 = ($68|0)!=(0|0);
       do {
        if ($69) {
         $70 = $2;
         $71 = (_cmsGetPCS($70)|0);
         $72 = ($71|0)==(1281450528);
         if ($72) {
          $73 = $3;
          $74 = $10;
          $75 = (__cmsStageAllocLab2XYZ($74)|0);
          $76 = (_cmsPipelineInsertStage($73,1,$75)|0);
          $77 = ($76|0)!=(0);
          if ($77) {
           label = 22;
          }
         } else {
          label = 22;
         }
         if ((label|0) == 22) {
          $78 = $3;
          $79 = $10;
          $80 = (_cmsStageAllocMatrix($79,3,3,$7,0)|0);
          $81 = (_cmsPipelineInsertStage($78,1,$80)|0);
          $82 = ($81|0)!=(0);
          if ($82) {
           $83 = $3;
           $84 = $10;
           $85 = (_cmsStageAllocToneCurves($84,3,$5)|0);
           $86 = (_cmsPipelineInsertStage($83,1,$85)|0);
           $87 = ($86|0)!=(0);
           if ($87) {
            break;
           }
          }
         }
         _cmsFreeToneCurveTriple($5);
         $89 = $3;
         _cmsPipelineFree($89);
         $1 = 0;
         $90 = $1;
         STACKTOP = sp;return ($90|0);
        }
       } while(0);
       _cmsFreeToneCurveTriple($5);
       $88 = $3;
       $1 = $88;
       $90 = $1;
       STACKTOP = sp;return ($90|0);
      }
     }
    }
    $1 = 0;
    $90 = $1;
    STACKTOP = sp;return ($90|0);
   }
  }
 }
 $1 = 0;
 $90 = $1;
 STACKTOP = sp;return ($90|0);
}
function __cmsReadDevicelinkLUT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $11 = $3;
 $12 = (_cmsGetProfileContextID($11)|0);
 $9 = $12;
 $13 = $4;
 $14 = ($13>>>0)>(3);
 if ($14) {
  $2 = 0;
  $108 = $2;
  STACKTOP = sp;return ($108|0);
 }
 $15 = $4;
 $16 = (13252 + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $7 = $17;
 $18 = $4;
 $19 = (13268 + ($18<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $8 = $20;
 $21 = $3;
 $22 = (_cmsGetDeviceClass($21)|0);
 $23 = ($22|0)==(1852662636);
 $24 = $3;
 if ($23) {
  $25 = (_cmsReadTag($24,1852009522)|0);
  $10 = $25;
  $26 = $10;
  $27 = ($26|0)==(0|0);
  if ($27) {
   $2 = 0;
   $108 = $2;
   STACKTOP = sp;return ($108|0);
  }
  $28 = $9;
  $29 = (_cmsPipelineAlloc($28,0,0)|0);
  $5 = $29;
  $30 = $5;
  $31 = ($30|0)==(0|0);
  do {
   if (!($31)) {
    $32 = $5;
    $33 = $10;
    $34 = (__cmsStageAllocNamedColor($33,0)|0);
    $35 = (_cmsPipelineInsertStage($32,0,$34)|0);
    $36 = ($35|0)!=(0);
    if ($36) {
     $37 = $3;
     $38 = (_cmsGetColorSpace($37)|0);
     $39 = ($38|0)==(1281450528);
     if ($39) {
      $40 = $5;
      $41 = $9;
      $42 = (__cmsStageAllocLabV2ToV4($41)|0);
      $43 = (_cmsPipelineInsertStage($40,1,$42)|0);
      $44 = ($43|0)!=(0);
      if (!($44)) {
       break;
      }
     }
     $45 = $5;
     $2 = $45;
     $108 = $2;
     STACKTOP = sp;return ($108|0);
    }
   }
  } while(0);
  $46 = $5;
  _cmsPipelineFree($46);
  $47 = $10;
  _cmsFreeNamedColorList($47);
  $2 = 0;
  $108 = $2;
  STACKTOP = sp;return ($108|0);
 }
 $48 = $8;
 $49 = (_cmsIsTag($24,$48)|0);
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $3;
  $52 = $8;
  $53 = (__cmsReadFloatDevicelinkTag($51,$52)|0);
  $2 = $53;
  $108 = $2;
  STACKTOP = sp;return ($108|0);
 }
 $54 = HEAP32[3317]|0;
 $8 = $54;
 $55 = $3;
 $56 = $8;
 $57 = (_cmsIsTag($55,$56)|0);
 $58 = ($57|0)!=(0);
 $59 = $3;
 if ($58) {
  $60 = $8;
  $61 = (_cmsReadTag($59,$60)|0);
  $62 = (_cmsPipelineDup($61)|0);
  $2 = $62;
  $108 = $2;
  STACKTOP = sp;return ($108|0);
 }
 $63 = $7;
 $64 = (_cmsIsTag($59,$63)|0);
 $65 = ($64|0)!=(0);
 if (!($65)) {
  $66 = HEAP32[3313]|0;
  $7 = $66;
  $67 = $3;
  $68 = $7;
  $69 = (_cmsIsTag($67,$68)|0);
  $70 = ($69|0)!=(0);
  if (!($70)) {
   $2 = 0;
   $108 = $2;
   STACKTOP = sp;return ($108|0);
  }
 }
 $71 = $3;
 $72 = $7;
 $73 = (_cmsReadTag($71,$72)|0);
 $5 = $73;
 $74 = $5;
 $75 = ($74|0)==(0|0);
 if ($75) {
  $2 = 0;
  $108 = $2;
  STACKTOP = sp;return ($108|0);
 }
 $76 = $5;
 $77 = (_cmsPipelineDup($76)|0);
 $5 = $77;
 $78 = $5;
 $79 = ($78|0)==(0|0);
 if ($79) {
  $2 = 0;
  $108 = $2;
  STACKTOP = sp;return ($108|0);
 }
 $80 = $3;
 $81 = (_cmsGetPCS($80)|0);
 $82 = ($81|0)==(1281450528);
 if ($82) {
  $83 = $5;
  _ChangeInterpolationToTrilinear($83);
 }
 $84 = $3;
 $85 = $7;
 $86 = (__cmsGetTagTrueType($84,$85)|0);
 $6 = $86;
 $87 = $6;
 $88 = ($87|0)!=(1835430962);
 if ($88) {
  $89 = $5;
  $2 = $89;
  $108 = $2;
  STACKTOP = sp;return ($108|0);
 }
 $90 = $3;
 $91 = (_cmsGetColorSpace($90)|0);
 $92 = ($91|0)==(1281450528);
 if ($92) {
  $93 = $5;
  $94 = $9;
  $95 = (__cmsStageAllocLabV4ToV2($94)|0);
  $96 = (_cmsPipelineInsertStage($93,0,$95)|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   label = 29;
  }
 } else {
  label = 29;
 }
 do {
  if ((label|0) == 29) {
   $98 = $3;
   $99 = (_cmsGetPCS($98)|0);
   $100 = ($99|0)==(1281450528);
   if ($100) {
    $101 = $5;
    $102 = $9;
    $103 = (__cmsStageAllocLabV2ToV4($102)|0);
    $104 = (_cmsPipelineInsertStage($101,1,$103)|0);
    $105 = ($104|0)!=(0);
    if (!($105)) {
     break;
    }
   }
   $106 = $5;
   $2 = $106;
   $108 = $2;
   STACKTOP = sp;return ($108|0);
  }
 } while(0);
 $107 = $5;
 _cmsPipelineFree($107);
 $2 = 0;
 $108 = $2;
 STACKTOP = sp;return ($108|0);
}
function __cmsReadFloatDevicelinkTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = (_cmsGetProfileContextID($9)|0);
 $5 = $10;
 $11 = $3;
 $12 = $4;
 $13 = (_cmsReadTag($11,$12)|0);
 $14 = (_cmsPipelineDup($13)|0);
 $6 = $14;
 $15 = $3;
 $16 = (_cmsGetPCS($15)|0);
 $7 = $16;
 $17 = $3;
 $18 = (_cmsGetColorSpace($17)|0);
 $8 = $18;
 $19 = $6;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $2 = 0;
  $51 = $2;
  STACKTOP = sp;return ($51|0);
 }
 $21 = $8;
 $22 = ($21|0)==(1281450528);
 if ($22) {
  $23 = $6;
  $24 = $5;
  $25 = (__cmsStageNormalizeToLabFloat($24)|0);
  $26 = (_cmsPipelineInsertStage($23,0,$25)|0);
  $27 = ($26|0)!=(0);
  if ($27) {
   label = 7;
  }
 } else {
  $28 = $8;
  $29 = ($28|0)==(1482250784);
  if ($29) {
   $30 = $6;
   $31 = $5;
   $32 = (__cmsStageNormalizeToXyzFloat($31)|0);
   $33 = (_cmsPipelineInsertStage($30,0,$32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    label = 7;
   }
  } else {
   label = 7;
  }
 }
 do {
  if ((label|0) == 7) {
   $35 = $7;
   $36 = ($35|0)==(1281450528);
   if ($36) {
    $37 = $6;
    $38 = $5;
    $39 = (__cmsStageNormalizeFromLabFloat($38)|0);
    $40 = (_cmsPipelineInsertStage($37,1,$39)|0);
    $41 = ($40|0)!=(0);
    if (!($41)) {
     break;
    }
   } else {
    $42 = $7;
    $43 = ($42|0)==(1482250784);
    if ($43) {
     $44 = $6;
     $45 = $5;
     $46 = (__cmsStageNormalizeFromXyzFloat($45)|0);
     $47 = (_cmsPipelineInsertStage($44,1,$46)|0);
     $48 = ($47|0)!=(0);
     if (!($48)) {
      break;
     }
    }
   }
   $49 = $6;
   $2 = $49;
   $51 = $2;
   STACKTOP = sp;return ($51|0);
  }
 } while(0);
 $50 = $6;
 _cmsPipelineFree($50);
 $2 = 0;
 $51 = $2;
 STACKTOP = sp;return ($51|0);
}
function _cmsIsMatrixShaper($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_cmsGetColorSpace($3)|0);
 $switch$split2D = ($4|0)<(1380401696);
 L1: do {
  if ($switch$split2D) {
   switch ($4|0) {
   case 1196573017:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $5 = $2;
   $6 = (_cmsIsTag($5,1800688195)|0);
   $1 = $6;
   $27 = $1;
   STACKTOP = sp;return ($27|0);
  } else {
   switch ($4|0) {
   case 1380401696:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $7 = $2;
   $8 = (_cmsIsTag($7,1918392666)|0);
   $9 = ($8|0)!=(0);
   if ($9) {
    $10 = $2;
    $11 = (_cmsIsTag($10,1733843290)|0);
    $12 = ($11|0)!=(0);
    if ($12) {
     $13 = $2;
     $14 = (_cmsIsTag($13,1649957210)|0);
     $15 = ($14|0)!=(0);
     if ($15) {
      $16 = $2;
      $17 = (_cmsIsTag($16,1918128707)|0);
      $18 = ($17|0)!=(0);
      if ($18) {
       $19 = $2;
       $20 = (_cmsIsTag($19,1733579331)|0);
       $21 = ($20|0)!=(0);
       if ($21) {
        $22 = $2;
        $23 = (_cmsIsTag($22,1649693251)|0);
        $24 = ($23|0)!=(0);
        $26 = $24;
       } else {
        $26 = 0;
       }
      } else {
       $26 = 0;
      }
     } else {
      $26 = 0;
     }
    } else {
     $26 = 0;
    }
   } else {
    $26 = 0;
   }
   $25 = $26&1;
   $1 = $25;
   $27 = $1;
   STACKTOP = sp;return ($27|0);
  }
 } while(0);
 $1 = 0;
 $27 = $1;
 STACKTOP = sp;return ($27|0);
}
function _cmsIsCLUT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_cmsGetDeviceClass($8)|0);
 $10 = ($9|0)==(1818848875);
 if ($10) {
  $11 = $4;
  $12 = (_cmsGetHeaderRenderingIntent($11)|0);
  $13 = $5;
  $14 = ($12|0)==($13|0);
  $15 = $14&1;
  $3 = $15;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 $16 = $6;
 switch ($16|0) {
 case 0:  {
  $7 = 13252;
  break;
 }
 case 1:  {
  $7 = 13284;
  break;
 }
 case 2:  {
  $17 = $4;
  $18 = $5;
  $19 = (_cmsIsIntentSupported($17,$18,0)|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $4;
   $22 = (_cmsIsIntentSupported($21,1,1)|0);
   $23 = ($22|0)!=(0);
   $25 = $23;
  } else {
   $25 = 0;
  }
  $24 = $25&1;
  $3 = $24;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
  break;
 }
 default: {
  $26 = $4;
  $27 = (_cmsGetProfileContextID($26)|0);
  $28 = $6;
  HEAP32[$vararg_buffer>>2] = $28;
  _cmsSignalError($27,2,26912,$vararg_buffer);
  $3 = 0;
  $35 = $3;
  STACKTOP = sp;return ($35|0);
 }
 }
 $29 = $4;
 $30 = $7;
 $31 = $5;
 $32 = (($30) + ($31<<2)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_cmsIsTag($29,$33)|0);
 $3 = $34;
 $35 = $3;
 STACKTOP = sp;return ($35|0);
}
function _cmsIsIntentSupported($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $5;
 $9 = $6;
 $10 = (_cmsIsCLUT($7,$8,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $3 = 1;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 } else {
  $12 = $4;
  $13 = (_cmsIsMatrixShaper($12)|0);
  $3 = $13;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __cmsCompileProfileSequence($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $4;
 $13 = $5;
 $14 = (_cmsAllocProfileSequenceDescription($12,$13)|0);
 $8 = $14;
 $15 = $8;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $3 = 0;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 $7 = 0;
 while(1) {
  $17 = $7;
  $18 = $5;
  $19 = ($17>>>0)<($18>>>0);
  $20 = $8;
  if (!($19)) {
   break;
  }
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $7;
  $24 = (($22) + (($23*48)|0)|0);
  $9 = $24;
  $25 = $6;
  $26 = $7;
  $27 = (($25) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $10 = $28;
  $29 = $10;
  $30 = $9;
  $31 = ((($30)) + 8|0);
  _cmsGetHeaderAttributes($29,$31);
  $32 = $10;
  $33 = $9;
  $34 = ((($33)) + 20|0);
  _cmsGetHeaderProfileID($32,$34);
  $35 = $10;
  $36 = (_cmsGetHeaderManufacturer($35)|0);
  $37 = $9;
  HEAP32[$37>>2] = $36;
  $38 = $10;
  $39 = (_cmsGetHeaderModel($38)|0);
  $40 = $9;
  $41 = ((($40)) + 4|0);
  HEAP32[$41>>2] = $39;
  $42 = $10;
  $43 = (_cmsReadTag($42,1952801640)|0);
  $11 = $43;
  $44 = $11;
  $45 = ($44|0)==(0|0);
  if ($45) {
   $46 = $9;
   $$sink = 0;$$sink2 = $46;
  } else {
   $47 = $11;
   $48 = HEAP32[$47>>2]|0;
   $49 = $9;
   $$sink = $48;$$sink2 = $49;
  }
  $50 = ((($$sink2)) + 16|0);
  HEAP32[$50>>2] = $$sink;
  $51 = $10;
  $52 = (_GetMLUFromProfile($51,1684893284)|0);
  $53 = $9;
  $54 = ((($53)) + 36|0);
  HEAP32[$54>>2] = $52;
  $55 = $10;
  $56 = (_GetMLUFromProfile($55,1684890724)|0);
  $57 = $9;
  $58 = ((($57)) + 40|0);
  HEAP32[$58>>2] = $56;
  $59 = $10;
  $60 = (_GetMLUFromProfile($59,1684370275)|0);
  $61 = $9;
  $62 = ((($61)) + 44|0);
  HEAP32[$62>>2] = $60;
  $63 = $7;
  $64 = (($63) + 1)|0;
  $7 = $64;
 }
 $3 = $20;
 $65 = $3;
 STACKTOP = sp;return ($65|0);
}
function _GetMLUFromProfile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_cmsReadTag($6,$7)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $2 = 0;
 } else {
  $11 = $5;
  $12 = (_cmsMLUdup($11)|0);
  $2 = $12;
 }
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _GetInfo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 switch ($6|0) {
 case 0:  {
  $5 = 1684370275;
  label = 7;
  break;
 }
 case 1:  {
  $5 = 1684893284;
  label = 7;
  break;
 }
 case 2:  {
  $5 = 1684890724;
  label = 7;
  break;
 }
 case 3:  {
  $5 = 1668313716;
  label = 7;
  break;
 }
 default: {
  $2 = 0;
 }
 }
 if ((label|0) == 7) {
  $7 = $3;
  $8 = $5;
  $9 = (_cmsReadTag($7,$8)|0);
  $2 = $9;
 }
 $10 = $2;
 STACKTOP = sp;return ($10|0);
}
function _cmsGetProfileInfoASCII($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = $7;
 $15 = $8;
 $16 = (_GetInfo($14,$15)|0);
 $13 = $16;
 $17 = $13;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $6 = 0;
  $25 = $6;
  STACKTOP = sp;return ($25|0);
 } else {
  $19 = $13;
  $20 = $9;
  $21 = $10;
  $22 = $11;
  $23 = $12;
  $24 = (_cmsMLUgetASCII($19,$20,$21,$22,$23)|0);
  $6 = $24;
  $25 = $6;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __cmsStageAllocPlaceholder($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $18 = $9;
 $19 = (__cmsMallocZero($18,40)|0);
 $17 = $19;
 $20 = $17;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $8 = 0;
  $49 = $8;
  STACKTOP = sp;return ($49|0);
 } else {
  $22 = $9;
  $23 = $17;
  HEAP32[$23>>2] = $22;
  $24 = $10;
  $25 = $17;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
  $27 = $10;
  $28 = $17;
  $29 = ((($28)) + 8|0);
  HEAP32[$29>>2] = $27;
  $30 = $11;
  $31 = $17;
  $32 = ((($31)) + 12|0);
  HEAP32[$32>>2] = $30;
  $33 = $12;
  $34 = $17;
  $35 = ((($34)) + 16|0);
  HEAP32[$35>>2] = $33;
  $36 = $13;
  $37 = $17;
  $38 = ((($37)) + 20|0);
  HEAP32[$38>>2] = $36;
  $39 = $14;
  $40 = $17;
  $41 = ((($40)) + 24|0);
  HEAP32[$41>>2] = $39;
  $42 = $15;
  $43 = $17;
  $44 = ((($43)) + 28|0);
  HEAP32[$44>>2] = $42;
  $45 = $16;
  $46 = $17;
  $47 = ((($46)) + 32|0);
  HEAP32[$47>>2] = $45;
  $48 = $17;
  $8 = $48;
  $49 = $8;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _cmsStageAllocIdentity($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = (__cmsStageAllocPlaceholder($4,1768189472,$5,$6,329,0,0,0)|0);
 STACKTOP = sp;return ($7|0);
}
function _EvaluateIdentity($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10<<2;
 _memmove(($6|0),($7|0),($11|0))|0;
 STACKTOP = sp;return;
}
function _cmsPipelineCheckAndRetreiveStages($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $12 = $3;
 $13 = (_cmsPipelineStageCount($12)|0);
 $14 = $4;
 $15 = ($13|0)!=($14|0);
 if ($15) {
  $2 = 0;
  $61 = $2;
  STACKTOP = sp;return ($61|0);
 }
 HEAP32[$5>>2] = $varargs;
 $16 = $3;
 $17 = HEAP32[$16>>2]|0;
 $7 = $17;
 $6 = 0;
 while(1) {
  $18 = $6;
  $19 = $4;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   break;
  }
  $arglist_current = HEAP32[$5>>2]|0;
  $21 = $arglist_current;
  $22 = ((0) + 4|0);
  $expanded3 = $22;
  $expanded = (($expanded3) - 1)|0;
  $23 = (($21) + ($expanded))|0;
  $24 = ((0) + 4|0);
  $expanded7 = $24;
  $expanded6 = (($expanded7) - 1)|0;
  $expanded5 = $expanded6 ^ -1;
  $25 = $23 & $expanded5;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $arglist_next = ((($26)) + 4|0);
  HEAP32[$5>>2] = $arglist_next;
  $10 = $27;
  $28 = $10;
  $8 = $28;
  $29 = $7;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $8;
  $33 = ($31|0)!=($32|0);
  if ($33) {
   label = 6;
   break;
  }
  $34 = $7;
  $35 = ((($34)) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $7 = $36;
  $37 = $6;
  $38 = (($37) + 1)|0;
  $6 = $38;
 }
 if ((label|0) == 6) {
  $2 = 0;
  $61 = $2;
  STACKTOP = sp;return ($61|0);
 }
 $39 = $3;
 $40 = HEAP32[$39>>2]|0;
 $7 = $40;
 $6 = 0;
 while(1) {
  $41 = $6;
  $42 = $4;
  $43 = ($41>>>0)<($42>>>0);
  if (!($43)) {
   break;
  }
  $arglist_current2 = HEAP32[$5>>2]|0;
  $44 = $arglist_current2;
  $45 = ((0) + 4|0);
  $expanded10 = $45;
  $expanded9 = (($expanded10) - 1)|0;
  $46 = (($44) + ($expanded9))|0;
  $47 = ((0) + 4|0);
  $expanded14 = $47;
  $expanded13 = (($expanded14) - 1)|0;
  $expanded12 = $expanded13 ^ -1;
  $48 = $46 & $expanded12;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $arglist_next3 = ((($49)) + 4|0);
  HEAP32[$5>>2] = $arglist_next3;
  $11 = $50;
  $51 = $11;
  $9 = $51;
  $52 = $9;
  $53 = ($52|0)!=(0|0);
  if ($53) {
   $54 = $7;
   $55 = $9;
   HEAP32[$55>>2] = $54;
  }
  $56 = $7;
  $57 = ((($56)) + 36|0);
  $58 = HEAP32[$57>>2]|0;
  $7 = $58;
  $59 = $6;
  $60 = (($59) + 1)|0;
  $6 = $60;
 }
 $2 = 1;
 $61 = $2;
 STACKTOP = sp;return ($61|0);
}
function _cmsPipelineStageCount($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  $8 = $3;
  if (!($7)) {
   break;
  }
  $9 = (($8) + 1)|0;
  $3 = $9;
  $10 = $2;
  $11 = ((($10)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $2 = $12;
 }
 STACKTOP = sp;return ($8|0);
}
function __cmsStageGetPtrToCurveSet($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _cmsStageAllocToneCurves($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $11 = $5;
 $12 = $5;
 $13 = (__cmsStageAllocPlaceholder($10,1668707188,$11,$12,330,331,332,0)|0);
 $9 = $13;
 $14 = $9;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $3 = 0;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 $16 = $4;
 $17 = (__cmsMallocZero($16,8)|0);
 $8 = $17;
 $18 = $8;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = $9;
  _cmsStageFree($20);
  $3 = 0;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 $21 = $8;
 $22 = $9;
 $23 = ((($22)) + 32|0);
 HEAP32[$23>>2] = $21;
 $24 = $5;
 $25 = $8;
 HEAP32[$25>>2] = $24;
 $26 = $4;
 $27 = $5;
 $28 = (__cmsCalloc($26,$27,4)|0);
 $29 = $8;
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = $28;
 $31 = $8;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $35 = $9;
  _cmsStageFree($35);
  $3 = 0;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 $7 = 0;
 while(1) {
  $36 = $7;
  $37 = $5;
  $38 = ($36>>>0)<($37>>>0);
  if (!($38)) {
   label = 15;
   break;
  }
  $39 = $6;
  $40 = ($39|0)==(0|0);
  if ($40) {
   $41 = $4;
   $42 = (_cmsBuildGamma($41,1.0)|0);
   $43 = $8;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $7;
   $47 = (($45) + ($46<<2)|0);
   $$sink = $42;$$sink1 = $47;
  } else {
   $48 = $6;
   $49 = $7;
   $50 = (($48) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (_cmsDupToneCurve($51)|0);
   $53 = $8;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $7;
   $57 = (($55) + ($56<<2)|0);
   $$sink = $52;$$sink1 = $57;
  }
  HEAP32[$$sink1>>2] = $$sink;
  $58 = $8;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $7;
  $62 = (($60) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(0|0);
  if ($64) {
   label = 13;
   break;
  }
  $66 = $7;
  $67 = (($66) + 1)|0;
  $7 = $67;
 }
 if ((label|0) == 13) {
  $65 = $9;
  _cmsStageFree($65);
  $3 = 0;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 15) {
  $68 = $9;
  $3 = $68;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function _EvaluateCurves($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((26938|0),(26958|0),174,(27007|0));
  // unreachable;
 }
 $10 = $5;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $6 = $12;
 $13 = $6;
 $14 = ($13|0)==(0|0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = $6;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $7 = 0;
 while(1) {
  $19 = $7;
  $20 = $6;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($19>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $6;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $7;
  $27 = (($25) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $3;
  $30 = $7;
  $31 = (($29) + ($30<<2)|0);
  $32 = +HEAPF32[$31>>2];
  $33 = (+_cmsEvalToneCurveFloat($28,$32));
  $34 = $4;
  $35 = $7;
  $36 = (($34) + ($35<<2)|0);
  HEAPF32[$36>>2] = $33;
  $37 = $7;
  $38 = (($37) + 1)|0;
  $7 = $38;
 }
 STACKTOP = sp;return;
}
function _CurveSetDup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (__cmsMallocZero($10,8)|0);
 $4 = $11;
 $12 = $4;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $1 = 0;
  $85 = $1;
  STACKTOP = sp;return ($85|0);
 }
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 HEAP32[$16>>2] = $15;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = $4;
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsCalloc($18,$20,4)|0);
 $22 = $4;
 $23 = ((($22)) + 4|0);
 HEAP32[$23>>2] = $21;
 $24 = $4;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 L5: do {
  if (!($27)) {
   $5 = 0;
   while(1) {
    $28 = $5;
    $29 = $4;
    $30 = HEAP32[$29>>2]|0;
    $31 = ($28>>>0)<($30>>>0);
    if (!($31)) {
     break;
    }
    $32 = $3;
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $5;
    $36 = (($34) + ($35<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_cmsDupToneCurve($37)|0);
    $39 = $4;
    $40 = ((($39)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $5;
    $43 = (($41) + ($42<<2)|0);
    HEAP32[$43>>2] = $38;
    $44 = $4;
    $45 = ((($44)) + 4|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $5;
    $48 = (($46) + ($47<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0|0);
    if ($50) {
     break L5;
    }
    $51 = $5;
    $52 = (($51) + 1)|0;
    $5 = $52;
   }
   $53 = $4;
   $1 = $53;
   $85 = $1;
   STACKTOP = sp;return ($85|0);
  }
 } while(0);
 $54 = $4;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)!=(0|0);
 L14: do {
  if ($57) {
   $5 = 0;
   while(1) {
    $58 = $5;
    $59 = $4;
    $60 = HEAP32[$59>>2]|0;
    $61 = ($58>>>0)<($60>>>0);
    if (!($61)) {
     break L14;
    }
    $62 = $4;
    $63 = ((($62)) + 4|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = $5;
    $66 = (($64) + ($65<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)!=(0|0);
    if ($68) {
     $69 = $4;
     $70 = ((($69)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $5;
     $73 = (($71) + ($72<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     _cmsFreeToneCurve($74);
    }
    $75 = $5;
    $76 = (($75) + 1)|0;
    $5 = $76;
   }
  }
 } while(0);
 $77 = $2;
 $78 = HEAP32[$77>>2]|0;
 $79 = $4;
 $80 = ((($79)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 __cmsFree($78,$81);
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 $84 = $4;
 __cmsFree($83,$84);
 $1 = 0;
 $85 = $1;
 STACKTOP = sp;return ($85|0);
}
function _CurveSetElemTypeFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((26938|0),(26958|0),192,(26986|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $2 = $8;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = $2;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 L7: do {
  if ($14) {
   $3 = 0;
   while(1) {
    $15 = $3;
    $16 = $2;
    $17 = HEAP32[$16>>2]|0;
    $18 = ($15>>>0)<($17>>>0);
    if (!($18)) {
     break L7;
    }
    $19 = $2;
    $20 = ((($19)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $3;
    $23 = (($21) + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)!=(0|0);
    if ($25) {
     $26 = $2;
     $27 = ((($26)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $3;
     $30 = (($28) + ($29<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     _cmsFreeToneCurve($31);
    }
    $32 = $3;
    $33 = (($32) + 1)|0;
    $3 = $33;
   }
  }
 } while(0);
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 __cmsFree($35,$38);
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $41 = $2;
 __cmsFree($40,$41);
 STACKTOP = sp;return;
}
function _cmsStageFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  FUNCTION_TABLE_vi[$8 & 511]($9);
 }
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 __cmsFree($11,$12);
 STACKTOP = sp;return;
}
function __cmsStageAllocIdentityCurves($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_cmsStageAllocToneCurves($6,$7,0)|0);
 $5 = $8;
 $9 = $5;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $11 = $5;
  $12 = ((($11)) + 8|0);
  HEAP32[$12>>2] = 1768189472;
  $13 = $5;
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _cmsStageAllocMatrix($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $7;
 $16 = $8;
 $17 = Math_imul($15, $16)|0;
 $12 = $17;
 $18 = $12;
 $19 = ($18|0)==(0);
 if ($19) {
  $5 = 0;
  $95 = $5;
  STACKTOP = sp;return ($95|0);
 }
 $20 = $12;
 $21 = $8;
 $22 = (4294967295 / ($21>>>0))&-1;
 $23 = ($20>>>0)>=($22>>>0);
 if ($23) {
  $5 = 0;
  $95 = $5;
  STACKTOP = sp;return ($95|0);
 }
 $24 = $12;
 $25 = $7;
 $26 = (4294967295 / ($25>>>0))&-1;
 $27 = ($24>>>0)>=($26>>>0);
 if ($27) {
  $5 = 0;
  $95 = $5;
  STACKTOP = sp;return ($95|0);
 }
 $28 = $12;
 $29 = $7;
 $30 = ($28>>>0)<($29>>>0);
 if (!($30)) {
  $31 = $12;
  $32 = $8;
  $33 = ($31>>>0)<($32>>>0);
  if (!($33)) {
   $34 = $6;
   $35 = $8;
   $36 = $7;
   $37 = (__cmsStageAllocPlaceholder($34,1835103334,$35,$36,333,334,335,0)|0);
   $14 = $37;
   $38 = $14;
   $39 = ($38|0)==(0|0);
   if ($39) {
    $5 = 0;
    $95 = $5;
    STACKTOP = sp;return ($95|0);
   }
   $40 = $6;
   $41 = (__cmsMallocZero($40,8)|0);
   $13 = $41;
   $42 = $13;
   $43 = ($42|0)==(0|0);
   if ($43) {
    $5 = 0;
    $95 = $5;
    STACKTOP = sp;return ($95|0);
   }
   $44 = $6;
   $45 = $12;
   $46 = (__cmsCalloc($44,$45,8)|0);
   $47 = $13;
   HEAP32[$47>>2] = $46;
   $48 = $13;
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0|0);
   if ($50) {
    $51 = $14;
    _MatrixElemTypeFree($51);
    $5 = 0;
    $95 = $5;
    STACKTOP = sp;return ($95|0);
   }
   $11 = 0;
   while(1) {
    $52 = $11;
    $53 = $12;
    $54 = ($52>>>0)<($53>>>0);
    if (!($54)) {
     break;
    }
    $55 = $9;
    $56 = $11;
    $57 = (($55) + ($56<<3)|0);
    $58 = +HEAPF64[$57>>3];
    $59 = $13;
    $60 = HEAP32[$59>>2]|0;
    $61 = $11;
    $62 = (($60) + ($61<<3)|0);
    HEAPF64[$62>>3] = $58;
    $63 = $11;
    $64 = (($63) + 1)|0;
    $11 = $64;
   }
   $65 = $10;
   $66 = ($65|0)!=(0|0);
   L32: do {
    if ($66) {
     $67 = $6;
     $68 = $7;
     $69 = (__cmsCalloc($67,$68,8)|0);
     $70 = $13;
     $71 = ((($70)) + 4|0);
     HEAP32[$71>>2] = $69;
     $72 = $13;
     $73 = ((($72)) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)==(0|0);
     if ($75) {
      $76 = $14;
      _MatrixElemTypeFree($76);
      $5 = 0;
      $95 = $5;
      STACKTOP = sp;return ($95|0);
     }
     $11 = 0;
     while(1) {
      $77 = $11;
      $78 = $7;
      $79 = ($77>>>0)<($78>>>0);
      if (!($79)) {
       break L32;
      }
      $80 = $10;
      $81 = $11;
      $82 = (($80) + ($81<<3)|0);
      $83 = +HEAPF64[$82>>3];
      $84 = $13;
      $85 = ((($84)) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $11;
      $88 = (($86) + ($87<<3)|0);
      HEAPF64[$88>>3] = $83;
      $89 = $11;
      $90 = (($89) + 1)|0;
      $11 = $90;
     }
    }
   } while(0);
   $91 = $13;
   $92 = $14;
   $93 = ((($92)) + 32|0);
   HEAP32[$93>>2] = $91;
   $94 = $14;
   $5 = $94;
   $95 = $5;
   STACKTOP = sp;return ($95|0);
  }
 }
 $5 = 0;
 $95 = $5;
 STACKTOP = sp;return ($95|0);
}
function _EvaluateMatrix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $5;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $8 = $12;
 $6 = 0;
 while(1) {
  $13 = $6;
  $14 = $5;
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $9 = 0.0;
  $7 = 0;
  while(1) {
   $18 = $7;
   $19 = $5;
   $20 = ((($19)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($18>>>0)<($21>>>0);
   if (!($22)) {
    break;
   }
   $23 = $3;
   $24 = $7;
   $25 = (($23) + ($24<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = $26;
   $28 = $8;
   $29 = HEAP32[$28>>2]|0;
   $30 = $6;
   $31 = $5;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = Math_imul($30, $33)|0;
   $35 = $7;
   $36 = (($34) + ($35))|0;
   $37 = (($29) + ($36<<3)|0);
   $38 = +HEAPF64[$37>>3];
   $39 = $27 * $38;
   $40 = $9;
   $41 = $40 + $39;
   $9 = $41;
   $42 = $7;
   $43 = (($42) + 1)|0;
   $7 = $43;
  }
  $44 = $8;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0|0);
  if ($47) {
   $48 = $8;
   $49 = ((($48)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = (($50) + ($51<<3)|0);
   $53 = +HEAPF64[$52>>3];
   $54 = $9;
   $55 = $54 + $53;
   $9 = $55;
  }
  $56 = $9;
  $57 = $56;
  $58 = $4;
  $59 = $6;
  $60 = (($58) + ($59<<2)|0);
  HEAPF32[$60>>2] = $57;
  $61 = $6;
  $62 = (($61) + 1)|0;
  $6 = $62;
 }
 STACKTOP = sp;return;
}
function _MatrixElemDup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = ((($6)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (__cmsMallocZero($10,8)|0);
 $4 = $11;
 $12 = $4;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $1 = 0;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $14 = $2;
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($16, $19)|0;
 $5 = $20;
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = HEAP32[$23>>2]|0;
 $25 = $5;
 $26 = $25<<3;
 $27 = (__cmsDupMem($22,$24,$26)|0);
 $28 = $4;
 HEAP32[$28>>2] = $27;
 $29 = $3;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if ($32) {
  $33 = $2;
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $2;
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40<<3;
  $42 = (__cmsDupMem($34,$37,$41)|0);
  $43 = $4;
  $44 = ((($43)) + 4|0);
  HEAP32[$44>>2] = $42;
 }
 $45 = $4;
 $1 = $45;
 $46 = $1;
 STACKTOP = sp;return ($46|0);
}
function _MatrixElemTypeFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  __cmsFree($12,$14);
 }
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $1;
  $20 = HEAP32[$19>>2]|0;
  $21 = $2;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  __cmsFree($20,$23);
 }
 $24 = $1;
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 __cmsFree($25,$28);
 STACKTOP = sp;return;
}
function _cmsStageAllocCLut16bitGranular($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $7;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((27022|0),(26958|0),560,(27049|0));
  // unreachable;
 }
 $17 = $8;
 $18 = ($17>>>0)>(8);
 $19 = $6;
 $20 = $8;
 if ($18) {
  HEAP32[$vararg_buffer>>2] = $20;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 8;
  _cmsSignalError($19,2,27080,$vararg_buffer);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $21 = $9;
 $22 = (__cmsStageAllocPlaceholder($19,1668052340,$20,$21,336,337,338,0)|0);
 $14 = $22;
 $23 = $14;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $25 = $6;
 $26 = (__cmsMallocZero($25,16)|0);
 $13 = $26;
 $27 = $13;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = $14;
  _cmsStageFree($29);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $30 = $13;
 $31 = $14;
 $32 = ((($31)) + 32|0);
 HEAP32[$32>>2] = $30;
 $33 = $9;
 $34 = $7;
 $35 = $8;
 $36 = (_CubeSize($34,$35)|0);
 $37 = Math_imul($33, $36)|0;
 $12 = $37;
 $38 = $13;
 $39 = ((($38)) + 8|0);
 HEAP32[$39>>2] = $37;
 $40 = $13;
 $41 = ((($40)) + 12|0);
 HEAP32[$41>>2] = 0;
 $42 = $12;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = $14;
  _cmsStageFree($44);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $45 = $6;
 $46 = $12;
 $47 = (__cmsCalloc($45,$46,2)|0);
 $48 = $13;
 HEAP32[$48>>2] = $47;
 $49 = $13;
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if ($51) {
  $52 = $14;
  _cmsStageFree($52);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $53 = $10;
 $54 = ($53|0)!=(0|0);
 L24: do {
  if ($54) {
   $11 = 0;
   while(1) {
    $55 = $11;
    $56 = $12;
    $57 = ($55>>>0)<($56>>>0);
    if (!($57)) {
     break L24;
    }
    $58 = $10;
    $59 = $11;
    $60 = (($58) + ($59<<1)|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $13;
    $63 = HEAP32[$62>>2]|0;
    $64 = $11;
    $65 = (($63) + ($64<<1)|0);
    HEAP16[$65>>1] = $61;
    $66 = $11;
    $67 = (($66) + 1)|0;
    $11 = $67;
   }
  }
 } while(0);
 $68 = $6;
 $69 = $7;
 $70 = $8;
 $71 = $9;
 $72 = $13;
 $73 = HEAP32[$72>>2]|0;
 $74 = (__cmsComputeInterpParamsEx($68,$69,$70,$71,$73,0)|0);
 $75 = $13;
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = $74;
 $77 = $13;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)==(0|0);
 $81 = $14;
 if ($80) {
  _cmsStageFree($81);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 } else {
  $5 = $81;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function _EvaluateCLUTfloatIn16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $7 = sp + 272|0;
 $8 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = $5;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)<=(128);
 if (!($15)) {
  ___assert_fail((27156|0),(26958|0),456,(27185|0));
  // unreachable;
 }
 $16 = $5;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18>>>0)<=(128);
 if ($19) {
  $20 = $3;
  $21 = $5;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  _FromFloatTo16($20,$7,$23);
  $24 = $6;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 116|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $6;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_viii[$28 & 511]($7,$8,$31);
  $32 = $4;
  $33 = $5;
  $34 = ((($33)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  _From16ToFloat($8,$32,$35);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((27207|0),(26958|0),457,(27185|0));
  // unreachable;
 }
}
function _CLUTElemDup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = (__cmsMallocZero($9,16)|0);
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $1 = 0;
  $94 = $1;
  STACKTOP = sp;return ($94|0);
 }
 $13 = $3;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = $15;
 $18 = $3;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $4;
 $22 = ((($21)) + 12|0);
 HEAP32[$22>>2] = $20;
 $23 = $3;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 do {
  if ($25) {
   $26 = $3;
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)!=(0);
   $30 = $2;
   $31 = HEAP32[$30>>2]|0;
   $32 = $3;
   if ($29) {
    $33 = HEAP32[$32>>2]|0;
    $34 = $3;
    $35 = ((($34)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $36<<2;
    $38 = (__cmsDupMem($31,$33,$37)|0);
    $39 = $4;
    HEAP32[$39>>2] = $38;
    $40 = $4;
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(0|0);
    if ($42) {
     break;
    } else {
     label = 7;
     break;
    }
   } else {
    $43 = HEAP32[$32>>2]|0;
    $44 = $3;
    $45 = ((($44)) + 8|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46<<1;
    $48 = (__cmsDupMem($31,$43,$47)|0);
    $49 = $4;
    HEAP32[$49>>2] = $48;
    $50 = $4;
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     break;
    } else {
     label = 7;
     break;
    }
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $53 = $2;
  $54 = HEAP32[$53>>2]|0;
  $55 = $3;
  $56 = ((($55)) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 16|0);
  $59 = $3;
  $60 = ((($59)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $3;
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($66)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $4;
  $70 = HEAP32[$69>>2]|0;
  $71 = $3;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (__cmsComputeInterpParamsEx($54,$58,$63,$68,$70,$75)|0);
  $77 = $4;
  $78 = ((($77)) + 4|0);
  HEAP32[$78>>2] = $76;
  $79 = $4;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($81|0)!=(0|0);
  if ($82) {
   $83 = $4;
   $1 = $83;
   $94 = $1;
   STACKTOP = sp;return ($94|0);
  }
 }
 $84 = $4;
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $4;
  $90 = HEAP32[$89>>2]|0;
  __cmsFree($88,$90);
 }
 $91 = $2;
 $92 = HEAP32[$91>>2]|0;
 $93 = $4;
 __cmsFree($92,$93);
 $1 = 0;
 $94 = $1;
 STACKTOP = sp;return ($94|0);
}
function _CLutElemTypeFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  __cmsFree($12,$14);
 }
 $15 = $2;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 __cmsFreeInterpParams($17);
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = ((($20)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 __cmsFree($19,$22);
 STACKTOP = sp;return;
}
function _CubeSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((27126|0),(26958|0),471,(27147|0));
  // unreachable;
 }
 $5 = 1;
 while(1) {
  $9 = $4;
  $10 = ($9>>>0)>(0);
  if (!($10)) {
   label = 10;
   break;
  }
  $11 = $3;
  $12 = $4;
  $13 = (($12) - 1)|0;
  $14 = (($11) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $6 = $15;
  $16 = $6;
  $17 = ($16|0)==(0);
  if ($17) {
   label = 6;
   break;
  }
  $18 = $6;
  $19 = $5;
  $20 = Math_imul($19, $18)|0;
  $5 = $20;
  $21 = $5;
  $22 = $6;
  $23 = (4294967295 / ($22>>>0))&-1;
  $24 = ($21>>>0)>($23>>>0);
  if ($24) {
   label = 8;
   break;
  }
  $25 = $4;
  $26 = (($25) + -1)|0;
  $4 = $26;
 }
 if ((label|0) == 6) {
  $2 = 0;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 8) {
  $2 = 0;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 10) {
  $27 = $5;
  $2 = $27;
  $28 = $2;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _FromFloatTo16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $5;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = $6;
  $12 = (($10) + ($11<<2)|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $13;
  $15 = $14 * 65535.0;
  $16 = (__cmsQuickSaturateWord_286($15)|0);
  $17 = $4;
  $18 = $6;
  $19 = (($17) + ($18<<1)|0);
  HEAP16[$19>>1] = $16;
  $20 = $6;
  $21 = (($20) + 1)|0;
  $6 = $21;
 }
 STACKTOP = sp;return;
}
function _From16ToFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $7 = $6;
  $8 = $5;
  $9 = ($7>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = $6;
  $12 = (($10) + ($11<<1)|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = (+($13&65535));
  $15 = $14 / 65535.0;
  $16 = $4;
  $17 = $6;
  $18 = (($16) + ($17<<2)|0);
  HEAPF32[$18>>2] = $15;
  $19 = $6;
  $20 = (($19) + 1)|0;
  $6 = $20;
 }
 STACKTOP = sp;return;
}
function __cmsQuickSaturateWord_286($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 65535.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord_287($9)|0);
    $1 = $10;
    break;
   }
  }
 } while(0);
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function __cmsQuickFloorWord_287($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 32767.0;
 $4 = (__cmsQuickFloor_288($3)|0);
 $5 = $4&65535;
 $6 = $5&65535;
 $7 = (($6) + 32767)|0;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsQuickFloor_288($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function _cmsStageAllocCLut16bit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = 0;
 while(1) {
  $12 = $11;
  $13 = ($12|0)<(8);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = $11;
  $16 = (($10) + ($15<<2)|0);
  HEAP32[$16>>2] = $14;
  $17 = $11;
  $18 = (($17) + 1)|0;
  $11 = $18;
 }
 $19 = $5;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = (_cmsStageAllocCLut16bitGranular($19,$10,$20,$21,$22)|0);
 STACKTOP = sp;return ($23|0);
}
function _cmsStageAllocCLutFloatGranular($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $7;
 $16 = ($15|0)!=(0|0);
 if (!($16)) {
  ___assert_fail((27022|0),(26958|0),651,(27237|0));
  // unreachable;
 }
 $17 = $8;
 $18 = ($17>>>0)>(8);
 $19 = $6;
 $20 = $8;
 if ($18) {
  HEAP32[$vararg_buffer>>2] = $20;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 8;
  _cmsSignalError($19,2,27080,$vararg_buffer);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $21 = $9;
 $22 = (__cmsStageAllocPlaceholder($19,1668052340,$20,$21,339,337,338,0)|0);
 $14 = $22;
 $23 = $14;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $25 = $6;
 $26 = (__cmsMallocZero($25,16)|0);
 $13 = $26;
 $27 = $13;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = $14;
  _cmsStageFree($29);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $30 = $13;
 $31 = $14;
 $32 = ((($31)) + 32|0);
 HEAP32[$32>>2] = $30;
 $33 = $9;
 $34 = $7;
 $35 = $8;
 $36 = (_CubeSize($34,$35)|0);
 $37 = Math_imul($33, $36)|0;
 $12 = $37;
 $38 = $13;
 $39 = ((($38)) + 8|0);
 HEAP32[$39>>2] = $37;
 $40 = $13;
 $41 = ((($40)) + 12|0);
 HEAP32[$41>>2] = 1;
 $42 = $12;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = $14;
  _cmsStageFree($44);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $45 = $6;
 $46 = $12;
 $47 = (__cmsCalloc($45,$46,4)|0);
 $48 = $13;
 HEAP32[$48>>2] = $47;
 $49 = $13;
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if ($51) {
  $52 = $14;
  _cmsStageFree($52);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 $53 = $10;
 $54 = ($53|0)!=(0|0);
 L24: do {
  if ($54) {
   $11 = 0;
   while(1) {
    $55 = $11;
    $56 = $12;
    $57 = ($55>>>0)<($56>>>0);
    if (!($57)) {
     break L24;
    }
    $58 = $10;
    $59 = $11;
    $60 = (($58) + ($59<<2)|0);
    $61 = +HEAPF32[$60>>2];
    $62 = $13;
    $63 = HEAP32[$62>>2]|0;
    $64 = $11;
    $65 = (($63) + ($64<<2)|0);
    HEAPF32[$65>>2] = $61;
    $66 = $11;
    $67 = (($66) + 1)|0;
    $11 = $67;
   }
  }
 } while(0);
 $68 = $6;
 $69 = $7;
 $70 = $8;
 $71 = $9;
 $72 = $13;
 $73 = HEAP32[$72>>2]|0;
 $74 = (__cmsComputeInterpParamsEx($68,$69,$70,$71,$73,1)|0);
 $75 = $13;
 $76 = ((($75)) + 4|0);
 HEAP32[$76>>2] = $74;
 $77 = $13;
 $78 = ((($77)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)==(0|0);
 $81 = $14;
 if ($80) {
  _cmsStageFree($81);
  $5 = 0;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 } else {
  $5 = $81;
  $82 = $5;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function _EvaluateCLUTfloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 116|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = $4;
 $17 = $6;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_viii[$14 & 511]($15,$16,$19);
 STACKTOP = sp;return;
}
function __cmsStageAllocIdentityCLut($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp + 40|0;
 $5 = sp + 8|0;
 $3 = $0;
 HEAP32[$4>>2] = $1;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = ($8|0)<(8);
  if (!($9)) {
   break;
  }
  $10 = $7;
  $11 = (($5) + ($10<<2)|0);
  HEAP32[$11>>2] = 2;
  $12 = $7;
  $13 = (($12) + 1)|0;
  $7 = $13;
 }
 $14 = $3;
 $15 = HEAP32[$4>>2]|0;
 $16 = HEAP32[$4>>2]|0;
 $17 = (_cmsStageAllocCLut16bitGranular($14,$5,$15,$16,0)|0);
 $6 = $17;
 $18 = $6;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $2 = 0;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 $20 = $6;
 $21 = (_cmsStageSampleCLut16bit($20,340,$4,0)|0);
 $22 = ($21|0)!=(0);
 $23 = $6;
 if ($22) {
  $24 = ((($23)) + 8|0);
  HEAP32[$24>>2] = 1768189472;
  $25 = $6;
  $2 = $25;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 } else {
  _cmsStageFree($23);
  $2 = 0;
  $26 = $2;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _IdentitySampler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $6;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = $7;
  $15 = (($13) + ($14<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $4;
  $18 = $7;
  $19 = (($17) + ($18<<1)|0);
  HEAP16[$19>>1] = $16;
  $20 = $7;
  $21 = (($20) + 1)|0;
  $7 = $21;
 }
 STACKTOP = sp;return 1;
}
function _cmsStageSampleCLut16bit($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $17 = sp + 320|0;
 $18 = sp + 64|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $21 = $5;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $4 = 0;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 $23 = $5;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $19 = $25;
 $26 = $19;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $4 = 0;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 $28 = $19;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 16|0);
 $16 = $31;
 $32 = $19;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $14 = $36;
 $37 = $19;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $15 = $41;
 $42 = $14;
 $43 = ($42>>>0)<=(0);
 if ($43) {
  $4 = 0;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 $44 = $15;
 $45 = ($44>>>0)<=(0);
 if ($45) {
  $4 = 0;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 $46 = $14;
 $47 = ($46>>>0)>(8);
 if ($47) {
  $4 = 0;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 $48 = $15;
 $49 = ($48>>>0)>=(128);
 if ($49) {
  $4 = 0;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 dest=$17; stop=dest+18|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 _memset(($18|0),0,256)|0;
 $50 = $16;
 $51 = $14;
 $52 = (_CubeSize($50,$51)|0);
 $13 = $52;
 $53 = $13;
 $54 = ($53|0)==(0);
 if ($54) {
  $4 = 0;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 $11 = 0;
 $9 = 0;
 while(1) {
  $55 = $9;
  $56 = $13;
  $57 = ($55|0)<($56|0);
  if (!($57)) {
   label = 32;
   break;
  }
  $58 = $9;
  $12 = $58;
  $59 = $14;
  $60 = (($59) - 1)|0;
  $10 = $60;
  while(1) {
   $61 = $10;
   $62 = ($61|0)>=(0);
   if (!($62)) {
    break;
   }
   $63 = $12;
   $64 = $16;
   $65 = $10;
   $66 = (($64) + ($65<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($63>>>0) % ($67>>>0))&-1;
   $20 = $68;
   $69 = $16;
   $70 = $10;
   $71 = (($69) + ($70<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $12;
   $74 = (($73>>>0) / ($72>>>0))&-1;
   $12 = $74;
   $75 = $20;
   $76 = (+($75>>>0));
   $77 = $16;
   $78 = $10;
   $79 = (($77) + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (__cmsQuantizeVal($76,$80)|0);
   $82 = $10;
   $83 = (($17) + ($82<<1)|0);
   HEAP16[$83>>1] = $81;
   $84 = $10;
   $85 = (($84) + -1)|0;
   $10 = $85;
  }
  $86 = $19;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($87|0)!=(0|0);
  L36: do {
   if ($88) {
    $10 = 0;
    while(1) {
     $89 = $10;
     $90 = $15;
     $91 = ($89|0)<($90|0);
     if (!($91)) {
      break L36;
     }
     $92 = $19;
     $93 = HEAP32[$92>>2]|0;
     $94 = $11;
     $95 = $10;
     $96 = (($94) + ($95))|0;
     $97 = (($93) + ($96<<1)|0);
     $98 = HEAP16[$97>>1]|0;
     $99 = $10;
     $100 = (($18) + ($99<<1)|0);
     HEAP16[$100>>1] = $98;
     $101 = $10;
     $102 = (($101) + 1)|0;
     $10 = $102;
    }
   }
  } while(0);
  $103 = $6;
  $104 = $7;
  $105 = (FUNCTION_TABLE_iiii[$103 & 511]($17,$18,$104)|0);
  $106 = ($105|0)!=(0);
  if (!($106)) {
   label = 25;
   break;
  }
  $107 = $8;
  $108 = $107 & 16777216;
  $109 = ($108|0)!=(0);
  L43: do {
   if (!($109)) {
    $110 = $19;
    $111 = HEAP32[$110>>2]|0;
    $112 = ($111|0)!=(0|0);
    if ($112) {
     $10 = 0;
     while(1) {
      $113 = $10;
      $114 = $15;
      $115 = ($113|0)<($114|0);
      if (!($115)) {
       break L43;
      }
      $116 = $10;
      $117 = (($18) + ($116<<1)|0);
      $118 = HEAP16[$117>>1]|0;
      $119 = $19;
      $120 = HEAP32[$119>>2]|0;
      $121 = $11;
      $122 = $10;
      $123 = (($121) + ($122))|0;
      $124 = (($120) + ($123<<1)|0);
      HEAP16[$124>>1] = $118;
      $125 = $10;
      $126 = (($125) + 1)|0;
      $10 = $126;
     }
    }
   }
  } while(0);
  $127 = $15;
  $128 = $11;
  $129 = (($128) + ($127))|0;
  $11 = $129;
  $130 = $9;
  $131 = (($130) + 1)|0;
  $9 = $131;
 }
 if ((label|0) == 25) {
  $4 = 0;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 else if ((label|0) == 32) {
  $4 = 1;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 return (0)|0;
}
function __cmsQuantizeVal($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $5 * 65535.0;
 $7 = $3;
 $8 = (($7) - 1)|0;
 $9 = (+($8>>>0));
 $10 = $6 / $9;
 $4 = $10;
 $11 = $4;
 $12 = (__cmsQuickSaturateWord_286($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _cmsSliceSpace16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $13 = sp + 40|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $15 = $5;
 $16 = ($15>>>0)>=(16);
 if ($16) {
  $4 = 0;
  $59 = $4;
  STACKTOP = sp;return ($59|0);
 }
 $17 = $6;
 $18 = $5;
 $19 = (_CubeSize($17,$18)|0);
 $12 = $19;
 $20 = $12;
 $21 = ($20|0)==(0);
 if ($21) {
  $4 = 0;
  $59 = $4;
  STACKTOP = sp;return ($59|0);
 }
 $9 = 0;
 while(1) {
  $22 = $9;
  $23 = $12;
  $24 = ($22|0)<($23|0);
  if (!($24)) {
   label = 13;
   break;
  }
  $25 = $9;
  $11 = $25;
  $26 = $5;
  $27 = (($26) - 1)|0;
  $10 = $27;
  while(1) {
   $28 = $10;
   $29 = ($28|0)>=(0);
   if (!($29)) {
    break;
   }
   $30 = $11;
   $31 = $6;
   $32 = $10;
   $33 = (($31) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($30>>>0) % ($34>>>0))&-1;
   $14 = $35;
   $36 = $6;
   $37 = $10;
   $38 = (($36) + ($37<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $11;
   $41 = (($40>>>0) / ($39>>>0))&-1;
   $11 = $41;
   $42 = $14;
   $43 = (+($42>>>0));
   $44 = $6;
   $45 = $10;
   $46 = (($44) + ($45<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (__cmsQuantizeVal($43,$47)|0);
   $49 = $10;
   $50 = (($13) + ($49<<1)|0);
   HEAP16[$50>>1] = $48;
   $51 = $10;
   $52 = (($51) + -1)|0;
   $10 = $52;
  }
  $53 = $7;
  $54 = $8;
  $55 = (FUNCTION_TABLE_iiii[$53 & 511]($13,0,$54)|0);
  $56 = ($55|0)!=(0);
  if (!($56)) {
   label = 11;
   break;
  }
  $57 = $9;
  $58 = (($57) + 1)|0;
  $9 = $58;
 }
 if ((label|0) == 11) {
  $4 = 0;
  $59 = $4;
  STACKTOP = sp;return ($59|0);
 }
 else if ((label|0) == 13) {
  $4 = 1;
  $59 = $4;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function __cmsStageAllocLab2XYZ($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__cmsStageAllocPlaceholder($2,2016570400,3,3,341,0,0,0)|0);
 STACKTOP = sp;return ($3|0);
}
function _EvaluateLab2XYZ($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 32|0;
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 1.999969482421875;
 $9 = $3;
 $10 = +HEAPF32[$9>>2];
 $11 = $10;
 $12 = $11 * 100.0;
 HEAPF64[$6>>3] = $12;
 $13 = $3;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15;
 $17 = $16 * 255.0;
 $18 = $17 - 128.0;
 $19 = ((($6)) + 8|0);
 HEAPF64[$19>>3] = $18;
 $20 = $3;
 $21 = ((($20)) + 8|0);
 $22 = +HEAPF32[$21>>2];
 $23 = $22;
 $24 = $23 * 255.0;
 $25 = $24 - 128.0;
 $26 = ((($6)) + 16|0);
 HEAPF64[$26>>3] = $25;
 _cmsLab2XYZ(0,$7,$6);
 $27 = +HEAPF64[$7>>3];
 $28 = $27 / 1.999969482421875;
 $29 = $28;
 $30 = $4;
 HEAPF32[$30>>2] = $29;
 $31 = ((($7)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $32 / 1.999969482421875;
 $34 = $33;
 $35 = $4;
 $36 = ((($35)) + 4|0);
 HEAPF32[$36>>2] = $34;
 $37 = ((($7)) + 16|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $38 / 1.999969482421875;
 $40 = $39;
 $41 = $4;
 $42 = ((($41)) + 8|0);
 HEAPF32[$42>>2] = $40;
 STACKTOP = sp;return;
}
function __cmsStageAllocLabV2ToV4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_cmsStageAllocMatrix($4,3,3,104,0)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $3;
 if ($7) {
  $1 = $8;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = 840971296;
  $10 = $3;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __cmsStageAllocLabV4ToV2($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_cmsStageAllocMatrix($4,3,3,176,0)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $3;
 if ($7) {
  $1 = $8;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = 874525216;
  $10 = $3;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __cmsStageNormalizeFromLabFloat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_cmsStageAllocMatrix($4,3,3,248,320)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $3;
 if ($7) {
  $1 = $8;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = 1681026080;
  $10 = $3;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __cmsStageNormalizeFromXyzFloat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_cmsStageAllocMatrix($4,3,3,344,0)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $3;
 if ($7) {
  $1 = $8;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = 1681029152;
  $10 = $3;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __cmsStageNormalizeToLabFloat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_cmsStageAllocMatrix($4,3,3,416,488)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $3;
 if ($7) {
  $1 = $8;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = 1815241760;
  $10 = $3;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __cmsStageNormalizeToXyzFloat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_cmsStageAllocMatrix($4,3,3,512,0)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 $8 = $3;
 if ($7) {
  $1 = $8;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $9 = ((($8)) + 8|0);
  HEAP32[$9>>2] = 2016568352;
  $10 = $3;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __cmsStageClipNegatives($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = (__cmsStageAllocPlaceholder($4,1668050976,$5,$6,342,0,0,0)|0);
 STACKTOP = sp;return ($7|0);
}
function _Clipper($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $8 = $6;
  $9 = $5;
  $10 = ((($9)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = $6;
  $15 = (($13) + ($14<<2)|0);
  $16 = +HEAPF32[$15>>2];
  $7 = $16;
  $17 = $7;
  $18 = $17 < 0.0;
  $19 = $7;
  $20 = $18 ? 0.0 : $19;
  $21 = $4;
  $22 = $6;
  $23 = (($21) + ($22<<2)|0);
  HEAPF32[$23>>2] = $20;
  $24 = $6;
  $25 = (($24) + 1)|0;
  $6 = $25;
 }
 STACKTOP = sp;return;
}
function __cmsStageAllocXYZ2Lab($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__cmsStageAllocPlaceholder($2,1815246880,3,3,343,0,0,0)|0);
 STACKTOP = sp;return ($3|0);
}
function _EvaluateXYZ2Lab($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 32|0;
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 1.999969482421875;
 $9 = $3;
 $10 = +HEAPF32[$9>>2];
 $11 = $10;
 $12 = $11 * 1.999969482421875;
 HEAPF64[$7>>3] = $12;
 $13 = $3;
 $14 = ((($13)) + 4|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15;
 $17 = $16 * 1.999969482421875;
 $18 = ((($7)) + 8|0);
 HEAPF64[$18>>3] = $17;
 $19 = $3;
 $20 = ((($19)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = $21;
 $23 = $22 * 1.999969482421875;
 $24 = ((($7)) + 16|0);
 HEAPF64[$24>>3] = $23;
 _cmsXYZ2Lab(0,$6,$7);
 $25 = +HEAPF64[$6>>3];
 $26 = $25 / 100.0;
 $27 = $26;
 $28 = $4;
 HEAPF32[$28>>2] = $27;
 $29 = ((($6)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $30 + 128.0;
 $32 = $31 / 255.0;
 $33 = $32;
 $34 = $4;
 $35 = ((($34)) + 4|0);
 HEAPF32[$35>>2] = $33;
 $36 = ((($6)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $37 + 128.0;
 $39 = $38 / 255.0;
 $40 = $39;
 $41 = $4;
 $42 = ((($41)) + 8|0);
 HEAPF32[$42>>2] = $40;
 STACKTOP = sp;return;
}
function _cmsStageInputChannels($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _cmsStageOutputChannels($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _cmsStageType($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _cmsStageData($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _cmsStageNext($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _cmsStageDup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = 0;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $2;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (__cmsStageAllocPlaceholder($7,$10,$13,$16,$19,$22,$25,0)|0);
 $3 = $26;
 $27 = $3;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $1 = 0;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $3;
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = $31;
 $34 = $2;
 $35 = ((($34)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $2;
  $39 = ((($38)) + 24|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $2;
  $42 = (FUNCTION_TABLE_ii[$40 & 511]($41)|0);
  $43 = $3;
  $44 = ((($43)) + 32|0);
  HEAP32[$44>>2] = $42;
  $45 = $3;
  $46 = ((($45)) + 32|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  if ($48) {
   $49 = $3;
   _cmsStageFree($49);
   $1 = 0;
   $53 = $1;
   STACKTOP = sp;return ($53|0);
  }
 } else {
  $50 = $3;
  $51 = ((($50)) + 32|0);
  HEAP32[$51>>2] = 0;
 }
 $52 = $3;
 $1 = $52;
 $53 = $1;
 STACKTOP = sp;return ($53|0);
}
function _cmsPipelineAlloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $9 = ($8>>>0)>=(16);
 $10 = $6;
 $11 = ($10>>>0)>=(16);
 $or$cond = $9 | $11;
 if ($or$cond) {
  $3 = 0;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 }
 $12 = $4;
 $13 = (__cmsMallocZero($12,40)|0);
 $7 = $13;
 $14 = $7;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $3 = 0;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 }
 $16 = $5;
 $17 = $7;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = $6;
 $20 = $7;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $7;
 $23 = ((($22)) + 16|0);
 HEAP32[$23>>2] = 344;
 $24 = $7;
 $25 = ((($24)) + 20|0);
 HEAP32[$25>>2] = 345;
 $26 = $7;
 $27 = ((($26)) + 28|0);
 HEAP32[$27>>2] = 0;
 $28 = $7;
 $29 = ((($28)) + 24|0);
 HEAP32[$29>>2] = 0;
 $30 = $7;
 $31 = $7;
 $32 = ((($31)) + 12|0);
 HEAP32[$32>>2] = $30;
 $33 = $4;
 $34 = $7;
 $35 = ((($34)) + 32|0);
 HEAP32[$35>>2] = $33;
 $36 = $7;
 $37 = (_BlessLUT($36)|0);
 $38 = ($37|0)!=(0);
 if ($38) {
  $41 = $7;
  $3 = $41;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 } else {
  $39 = $4;
  $40 = $7;
  __cmsFree($39,$40);
  $3 = 0;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function __LUTeval16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $8 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $5;
 $6 = $11;
 $9 = 0;
 $12 = $3;
 $13 = $9;
 $14 = (($8) + ($13<<9)|0);
 $15 = $6;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 _From16ToFloat($12,$14,$17);
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $7 = $19;
 while(1) {
  $20 = $7;
  $21 = ($20|0)!=(0|0);
  $22 = $9;
  if (!($21)) {
   break;
  }
  $23 = $22 ^ 1;
  $10 = $23;
  $24 = $7;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $9;
  $28 = (($8) + ($27<<9)|0);
  $29 = $10;
  $30 = (($8) + ($29<<9)|0);
  $31 = $7;
  FUNCTION_TABLE_viii[$26 & 511]($28,$30,$31);
  $32 = $10;
  $9 = $32;
  $33 = $7;
  $34 = ((($33)) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $7 = $35;
 }
 $36 = (($8) + ($22<<9)|0);
 $37 = $4;
 $38 = $6;
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 _FromFloatTo16($36,$37,$40);
 STACKTOP = sp;return;
}
function __LUTevalFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $8 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $11 = $5;
 $6 = $11;
 $9 = 0;
 $12 = $9;
 $13 = (($8) + ($12<<9)|0);
 $14 = $3;
 $15 = $6;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17<<2;
 _memmove(($13|0),($14|0),($18|0))|0;
 $19 = $6;
 $20 = HEAP32[$19>>2]|0;
 $7 = $20;
 while(1) {
  $21 = $7;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   break;
  }
  $23 = $9;
  $24 = $23 ^ 1;
  $10 = $24;
  $25 = $7;
  $26 = ((($25)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $9;
  $29 = (($8) + ($28<<9)|0);
  $30 = $10;
  $31 = (($8) + ($30<<9)|0);
  $32 = $7;
  FUNCTION_TABLE_viii[$27 & 511]($29,$31,$32);
  $33 = $10;
  $9 = $33;
  $34 = $7;
  $35 = ((($34)) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $7 = $36;
 }
 $37 = $4;
 $38 = $9;
 $39 = (($8) + ($38<<9)|0);
 $40 = $6;
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42<<2;
 _memmove(($37|0),($39|0),($43|0))|0;
 STACKTOP = sp;return;
}
function _BlessLUT($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 L1: do {
  if ($9) {
   $10 = $2;
   $11 = (_cmsPipelineGetPtrToFirstStage($10)|0);
   $5 = $11;
   $12 = $2;
   $13 = (_cmsPipelineGetPtrToLastStage($12)|0);
   $6 = $13;
   $14 = $5;
   $15 = ($14|0)==(0|0);
   $16 = $6;
   $17 = ($16|0)==(0|0);
   $or$cond = $15 | $17;
   if ($or$cond) {
    $1 = 0;
    $47 = $1;
    STACKTOP = sp;return ($47|0);
   }
   $18 = $5;
   $19 = ((($18)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $2;
   $22 = ((($21)) + 4|0);
   HEAP32[$22>>2] = $20;
   $23 = $6;
   $24 = ((($23)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $2;
   $27 = ((($26)) + 8|0);
   HEAP32[$27>>2] = $25;
   $28 = $5;
   $3 = $28;
   $29 = $3;
   $30 = ((($29)) + 36|0);
   $31 = HEAP32[$30>>2]|0;
   $4 = $31;
   while(1) {
    $32 = $4;
    $33 = ($32|0)!=(0|0);
    if (!($33)) {
     break L1;
    }
    $34 = $4;
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $3;
    $38 = ((($37)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($36|0)!=($39|0);
    if ($40) {
     break;
    }
    $41 = $4;
    $42 = ((($41)) + 36|0);
    $43 = HEAP32[$42>>2]|0;
    $4 = $43;
    $44 = $3;
    $45 = ((($44)) + 36|0);
    $46 = HEAP32[$45>>2]|0;
    $3 = $46;
   }
   $1 = 0;
   $47 = $1;
   STACKTOP = sp;return ($47|0);
  }
 } while(0);
 $1 = 1;
 $47 = $1;
 STACKTOP = sp;return ($47|0);
}
function _cmsPipelineGetPtrToFirstStage($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _cmsPipelineGetPtrToLastStage($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $3 = $8;
  $9 = $2;
  $10 = ((($9)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $2 = $11;
 }
 $12 = $3;
 STACKTOP = sp;return ($12|0);
}
function _cmsPipelineInputChannels($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((27268|0),(26958|0),1407,(27288|0));
  // unreachable;
 }
 return (0)|0;
}
function _cmsPipelineOutputChannels($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $1;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  STACKTOP = sp;return ($6|0);
 } else {
  ___assert_fail((27268|0),(26958|0),1413,(27313|0));
  // unreachable;
 }
 return (0)|0;
}
function _cmsPipelineFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $2 = $7;
 while(1) {
  $8 = $2;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  $10 = $2;
  $11 = ((($10)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $3 = $12;
  $13 = $2;
  _cmsStageFree($13);
  $14 = $3;
  $2 = $14;
 }
 $15 = $1;
 $16 = ((($15)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $1;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$21 & 511]($24,$27);
 }
 $28 = $1;
 $29 = ((($28)) + 32|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $1;
 __cmsFree($30,$31);
 STACKTOP = sp;return;
}
function _cmsPipelineEval16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $5;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  $12 = $4;
  $13 = $5;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_viii[$10 & 511]($11,$12,$15);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((27268|0),(26958|0),1441,(27339|0));
  // unreachable;
 }
}
function _cmsPipelineEvalFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $5;
  $9 = ((($8)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $3;
  $12 = $4;
  $13 = $5;
  FUNCTION_TABLE_viii[$10 & 511]($11,$12,$13);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((27268|0),(26958|0),1449,(27357|0));
  // unreachable;
 }
}
function _cmsPipelineDup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $5 = 0;
 $7 = 1;
 $8 = $2;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $1 = 0;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 $10 = $2;
 $11 = ((($10)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_cmsPipelineAlloc($12,$15,$18)|0);
 $3 = $19;
 $20 = $3;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $1 = 0;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 $22 = $2;
 $23 = HEAP32[$22>>2]|0;
 $6 = $23;
 while(1) {
  $24 = $6;
  $25 = ($24|0)!=(0|0);
  if (!($25)) {
   break;
  }
  $26 = $6;
  $27 = (_cmsStageDup($26)|0);
  $4 = $27;
  $28 = $4;
  $29 = ($28|0)==(0|0);
  if ($29) {
   label = 8;
   break;
  }
  $31 = $7;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $4;
   $34 = $3;
   HEAP32[$34>>2] = $33;
   $7 = 0;
  } else {
   $35 = $5;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $37 = $4;
    $38 = $5;
    $39 = ((($38)) + 36|0);
    HEAP32[$39>>2] = $37;
   }
  }
  $40 = $4;
  $5 = $40;
  $41 = $6;
  $42 = ((($41)) + 36|0);
  $43 = HEAP32[$42>>2]|0;
  $6 = $43;
 }
 if ((label|0) == 8) {
  $30 = $3;
  _cmsPipelineFree($30);
  $1 = 0;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 $44 = $2;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $3;
 $48 = ((($47)) + 16|0);
 HEAP32[$48>>2] = $46;
 $49 = $2;
 $50 = ((($49)) + 20|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $3;
 $53 = ((($52)) + 20|0);
 HEAP32[$53>>2] = $51;
 $54 = $2;
 $55 = ((($54)) + 28|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $3;
 $58 = ((($57)) + 28|0);
 HEAP32[$58>>2] = $56;
 $59 = $2;
 $60 = ((($59)) + 24|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $3;
 $63 = ((($62)) + 24|0);
 HEAP32[$63>>2] = $61;
 $64 = $3;
 $65 = ((($64)) + 28|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0|0);
 if ($67) {
  $68 = $3;
  $69 = ((($68)) + 28|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $2;
  $72 = ((($71)) + 32|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $2;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (FUNCTION_TABLE_iii[$70 & 511]($73,$76)|0);
  $78 = $3;
  $79 = ((($78)) + 12|0);
  HEAP32[$79>>2] = $77;
 }
 $80 = $2;
 $81 = ((($80)) + 36|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $3;
 $84 = ((($83)) + 36|0);
 HEAP32[$84>>2] = $82;
 $85 = $3;
 $86 = (_BlessLUT($85)|0);
 $87 = ($86|0)!=(0);
 if ($87) {
  $92 = $3;
  $1 = $92;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 } else {
  $88 = $2;
  $89 = ((($88)) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $3;
  __cmsFree($90,$91);
  $1 = 0;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 return (0)|0;
}
function _cmsPipelineInsertStage($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $9 = $4;
 $10 = ($9|0)==(0|0);
 $11 = $6;
 $12 = ($11|0)==(0|0);
 $or$cond = $10 | $12;
 if ($or$cond) {
  $3 = 0;
  $40 = $3;
  STACKTOP = sp;return ($40|0);
 }
 $13 = $5;
 L5: do {
  switch ($13|0) {
  case 0:  {
   $14 = $4;
   $15 = HEAP32[$14>>2]|0;
   $16 = $6;
   $17 = ((($16)) + 36|0);
   HEAP32[$17>>2] = $15;
   $18 = $6;
   $19 = $4;
   HEAP32[$19>>2] = $18;
   break;
  }
  case 1:  {
   $20 = $4;
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $23 = $6;
    $24 = $4;
    HEAP32[$24>>2] = $23;
    break L5;
   }
   $25 = $4;
   $26 = HEAP32[$25>>2]|0;
   $8 = $26;
   while(1) {
    $27 = $8;
    $28 = ($27|0)!=(0|0);
    if (!($28)) {
     break;
    }
    $29 = $8;
    $7 = $29;
    $30 = $8;
    $31 = ((($30)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    $8 = $32;
   }
   $33 = $6;
   $34 = $7;
   $35 = ((($34)) + 36|0);
   HEAP32[$35>>2] = $33;
   $36 = $6;
   $37 = ((($36)) + 36|0);
   HEAP32[$37>>2] = 0;
   break;
  }
  default: {
   $3 = 0;
   $40 = $3;
   STACKTOP = sp;return ($40|0);
  }
  }
 } while(0);
 $38 = $4;
 $39 = (_BlessLUT($38)|0);
 $3 = $39;
 $40 = $3;
 STACKTOP = sp;return ($40|0);
}
function _cmsPipelineUnlinkStage($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = 0;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $5;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   STACKTOP = sp;return;
  }
  $16 = $5;
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 }
 $17 = $4;
 switch ($17|0) {
 case 0:  {
  $18 = $3;
  $19 = HEAP32[$18>>2]|0;
  $10 = $19;
  $20 = $10;
  $21 = ((($20)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  HEAP32[$23>>2] = $22;
  $24 = $10;
  $25 = ((($24)) + 36|0);
  HEAP32[$25>>2] = 0;
  $26 = $10;
  $9 = $26;
  break;
 }
 case 1:  {
  $8 = 0;
  $6 = 0;
  $27 = $3;
  $28 = HEAP32[$27>>2]|0;
  $7 = $28;
  while(1) {
   $29 = $7;
   $30 = ($29|0)!=(0|0);
   $31 = $8;
   if (!($30)) {
    break;
   }
   $6 = $31;
   $32 = $7;
   $8 = $32;
   $33 = $7;
   $34 = ((($33)) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $7 = $35;
  }
  $9 = $31;
  $36 = $6;
  $37 = ($36|0)!=(0|0);
  $38 = $3;
  $39 = $6;
  $40 = ((($39)) + 36|0);
  $$sink = $37 ? $40 : $38;
  HEAP32[$$sink>>2] = 0;
  break;
 }
 default: {
 }
 }
 $41 = $5;
 $42 = ($41|0)!=(0|0);
 $43 = $9;
 if ($42) {
  $44 = $5;
  HEAP32[$44>>2] = $43;
 } else {
  _cmsStageFree($43);
 }
 $45 = $3;
 (_BlessLUT($45)|0);
 STACKTOP = sp;return;
}
function _cmsPipelineCat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $4;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = $4;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $3;
   $16 = ((($15)) + 4|0);
   HEAP32[$16>>2] = $14;
   $17 = $4;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $3;
   $21 = ((($20)) + 8|0);
   HEAP32[$21>>2] = $19;
  }
 }
 $22 = $4;
 $23 = HEAP32[$22>>2]|0;
 $5 = $23;
 while(1) {
  $24 = $5;
  $25 = ($24|0)!=(0|0);
  $26 = $3;
  if (!($25)) {
   label = 9;
   break;
  }
  $27 = $5;
  $28 = (_cmsStageDup($27)|0);
  $29 = (_cmsPipelineInsertStage($26,1,$28)|0);
  $30 = ($29|0)!=(0);
  if (!($30)) {
   label = 7;
   break;
  }
  $31 = $5;
  $32 = ((($31)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $5 = $33;
 }
 if ((label|0) == 7) {
  $2 = 0;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 else if ((label|0) == 9) {
  $34 = (_BlessLUT($26)|0);
  $2 = $34;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __cmsPipelineSetOptimizationParameters($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $6;
 $11 = $5;
 $12 = ((($11)) + 16|0);
 HEAP32[$12>>2] = $10;
 $13 = $9;
 $14 = $5;
 $15 = ((($14)) + 28|0);
 HEAP32[$15>>2] = $13;
 $16 = $8;
 $17 = $5;
 $18 = ((($17)) + 24|0);
 HEAP32[$18>>2] = $16;
 $19 = $7;
 $20 = $5;
 $21 = ((($20)) + 12|0);
 HEAP32[$21>>2] = $19;
 STACKTOP = sp;return;
}
function _cmsPipelineEvalReverseFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0;
 var $153 = 0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0.0;
 var $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $13 = sp + 184|0;
 $14 = sp + 168|0;
 $15 = sp + 152|0;
 $16 = sp + 136|0;
 $17 = sp + 96|0;
 $18 = sp + 72|0;
 $19 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = 1.0E+20;
 $20 = $8;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(3);
 if ($23) {
  $24 = $8;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(4);
  if ($27) {
   $4 = 0;
   $179 = $4;
   STACKTOP = sp;return ($179|0);
  }
 }
 $28 = $8;
 $29 = ((($28)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)!=(3);
 if ($31) {
  $4 = 0;
  $179 = $4;
  STACKTOP = sp;return ($179|0);
 }
 $32 = $7;
 $33 = ($32|0)==(0|0);
 L10: do {
  if ($33) {
   $34 = ((($14)) + 8|0);
   HEAPF32[$34>>2] = 0.30000001192092896;
   $35 = ((($14)) + 4|0);
   HEAPF32[$35>>2] = 0.30000001192092896;
   HEAPF32[$14>>2] = 0.30000001192092896;
  } else {
   $10 = 0;
   while(1) {
    $36 = $10;
    $37 = ($36>>>0)<(3);
    if (!($37)) {
     break L10;
    }
    $38 = $7;
    $39 = $10;
    $40 = (($38) + ($39<<2)|0);
    $41 = +HEAPF32[$40>>2];
    $42 = $10;
    $43 = (($14) + ($42<<2)|0);
    HEAPF32[$43>>2] = $41;
    $44 = $10;
    $45 = (($44) + 1)|0;
    $10 = $45;
   }
  }
 } while(0);
 $46 = $8;
 $47 = ((($46)) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(4);
 if ($49) {
  $50 = $5;
  $51 = ((($50)) + 12|0);
  $52 = +HEAPF32[$51>>2];
  $$sink = $52;
 } else {
  $$sink = 0.0;
 }
 $53 = ((($14)) + 12|0);
 HEAPF32[$53>>2] = $$sink;
 $9 = 0;
 while(1) {
  $54 = $9;
  $55 = ($54>>>0)<(30);
  if (!($55)) {
   label = 33;
   break;
  }
  $56 = $8;
  _cmsPipelineEvalFloat($14,$13,$56);
  $57 = $5;
  $58 = (+_EuclideanDistance($13,$57,3));
  $59 = $58;
  $11 = $59;
  $60 = $11;
  $61 = $12;
  $62 = $60 >= $61;
  if ($62) {
   label = 33;
   break;
  }
  $63 = $11;
  $12 = $63;
  $10 = 0;
  while(1) {
   $64 = $10;
   $65 = $8;
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($64>>>0)<($67>>>0);
   if (!($68)) {
    break;
   }
   $69 = $10;
   $70 = (($14) + ($69<<2)|0);
   $71 = +HEAPF32[$70>>2];
   $72 = $6;
   $73 = $10;
   $74 = (($72) + ($73<<2)|0);
   HEAPF32[$74>>2] = $71;
   $75 = $10;
   $76 = (($75) + 1)|0;
   $10 = $76;
  }
  $77 = $11;
  $78 = $77 <= 0.0;
  if ($78) {
   label = 33;
   break;
  }
  $10 = 0;
  while(1) {
   $79 = $10;
   $80 = ($79>>>0)<(3);
   if (!($80)) {
    break;
   }
   $81 = +HEAPF32[$14>>2];
   HEAPF32[$15>>2] = $81;
   $82 = ((($14)) + 4|0);
   $83 = +HEAPF32[$82>>2];
   $84 = ((($15)) + 4|0);
   HEAPF32[$84>>2] = $83;
   $85 = ((($14)) + 8|0);
   $86 = +HEAPF32[$85>>2];
   $87 = ((($15)) + 8|0);
   HEAPF32[$87>>2] = $86;
   $88 = ((($14)) + 12|0);
   $89 = +HEAPF32[$88>>2];
   $90 = ((($15)) + 12|0);
   HEAPF32[$90>>2] = $89;
   $91 = $10;
   $92 = (($15) + ($91<<2)|0);
   _IncDelta($92);
   $93 = $8;
   _cmsPipelineEvalFloat($15,$16,$93);
   $94 = +HEAPF32[$16>>2];
   $95 = +HEAPF32[$13>>2];
   $96 = $94 - $95;
   $97 = $96 / 0.0010000000474974513;
   $98 = $97;
   $99 = $10;
   $100 = (($19) + ($99<<3)|0);
   HEAPF64[$100>>3] = $98;
   $101 = ((($16)) + 4|0);
   $102 = +HEAPF32[$101>>2];
   $103 = ((($13)) + 4|0);
   $104 = +HEAPF32[$103>>2];
   $105 = $102 - $104;
   $106 = $105 / 0.0010000000474974513;
   $107 = $106;
   $108 = ((($19)) + 24|0);
   $109 = $10;
   $110 = (($108) + ($109<<3)|0);
   HEAPF64[$110>>3] = $107;
   $111 = ((($16)) + 8|0);
   $112 = +HEAPF32[$111>>2];
   $113 = ((($13)) + 8|0);
   $114 = +HEAPF32[$113>>2];
   $115 = $112 - $114;
   $116 = $115 / 0.0010000000474974513;
   $117 = $116;
   $118 = ((($19)) + 48|0);
   $119 = $10;
   $120 = (($118) + ($119<<3)|0);
   HEAPF64[$120>>3] = $117;
   $121 = $10;
   $122 = (($121) + 1)|0;
   $10 = $122;
  }
  $123 = +HEAPF32[$13>>2];
  $124 = $5;
  $125 = +HEAPF32[$124>>2];
  $126 = $123 - $125;
  $127 = $126;
  HEAPF64[$18>>3] = $127;
  $128 = ((($13)) + 4|0);
  $129 = +HEAPF32[$128>>2];
  $130 = $5;
  $131 = ((($130)) + 4|0);
  $132 = +HEAPF32[$131>>2];
  $133 = $129 - $132;
  $134 = $133;
  $135 = ((($18)) + 8|0);
  HEAPF64[$135>>3] = $134;
  $136 = ((($13)) + 8|0);
  $137 = +HEAPF32[$136>>2];
  $138 = $5;
  $139 = ((($138)) + 8|0);
  $140 = +HEAPF32[$139>>2];
  $141 = $137 - $140;
  $142 = $141;
  $143 = ((($18)) + 16|0);
  HEAPF64[$143>>3] = $142;
  $144 = (__cmsMAT3solve($17,$19,$18)|0);
  $145 = ($144|0)!=(0);
  if (!($145)) {
   label = 24;
   break;
  }
  $146 = +HEAPF64[$17>>3];
  $147 = $146;
  $148 = +HEAPF32[$14>>2];
  $149 = $148 - $147;
  HEAPF32[$14>>2] = $149;
  $150 = ((($17)) + 8|0);
  $151 = +HEAPF64[$150>>3];
  $152 = $151;
  $153 = ((($14)) + 4|0);
  $154 = +HEAPF32[$153>>2];
  $155 = $154 - $152;
  HEAPF32[$153>>2] = $155;
  $156 = ((($17)) + 16|0);
  $157 = +HEAPF64[$156>>3];
  $158 = $157;
  $159 = ((($14)) + 8|0);
  $160 = +HEAPF32[$159>>2];
  $161 = $160 - $158;
  HEAPF32[$159>>2] = $161;
  $10 = 0;
  while(1) {
   $162 = $10;
   $163 = ($162>>>0)<(3);
   if (!($163)) {
    break;
   }
   $164 = $10;
   $165 = (($14) + ($164<<2)|0);
   $166 = +HEAPF32[$165>>2];
   $167 = $166 < 0.0;
   $168 = $10;
   $169 = (($14) + ($168<<2)|0);
   if ($167) {
    HEAPF32[$169>>2] = 0.0;
   } else {
    $170 = +HEAPF32[$169>>2];
    $171 = $170;
    $172 = $171 > 1.0;
    if ($172) {
     $173 = $10;
     $174 = (($14) + ($173<<2)|0);
     HEAPF32[$174>>2] = 1.0;
    }
   }
   $175 = $10;
   $176 = (($175) + 1)|0;
   $10 = $176;
  }
  $177 = $9;
  $178 = (($177) + 1)|0;
  $9 = $178;
 }
 if ((label|0) == 24) {
  $4 = 0;
  $179 = $4;
  STACKTOP = sp;return ($179|0);
 }
 else if ((label|0) == 33) {
  $4 = 1;
  $179 = $4;
  STACKTOP = sp;return ($179|0);
 }
 return (0)|0;
}
function _EuclideanDistance($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0.0;
 $7 = 0;
 while(1) {
  $9 = $7;
  $10 = $5;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $4;
  $13 = $7;
  $14 = (($12) + ($13<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $3;
  $17 = $7;
  $18 = (($16) + ($17<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $15 - $19;
  $8 = $20;
  $21 = $8;
  $22 = $8;
  $23 = $21 * $22;
  $24 = $6;
  $25 = $24 + $23;
  $6 = $25;
  $26 = $7;
  $27 = (($26) + 1)|0;
  $7 = $27;
 }
 $28 = $6;
 $29 = $28;
 $30 = (+Math_sqrt((+$29)));
 $31 = $30;
 STACKTOP = sp;return (+$31);
}
function _IncDelta($0) {
 $0 = $0|0;
 var $$sink = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = $3;
 $5 = $4 < 0.99899999995250255;
 $6 = $1;
 $7 = +HEAPF32[$6>>2];
 $8 = $7 - 0.0010000000474974513;
 $9 = $7 + 0.0010000000474974513;
 $$sink = $5 ? $9 : $8;
 HEAPF32[$6>>2] = $$sink;
 STACKTOP = sp;return;
}
function __cmsVEC3init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $4;
 HEAPF64[$9>>3] = $8;
 $10 = $6;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 HEAPF64[$12>>3] = $10;
 $13 = $7;
 $14 = $4;
 $15 = ((($14)) + 16|0);
 HEAPF64[$15>>3] = $13;
 STACKTOP = sp;return;
}
function __cmsMAT3identity($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __cmsVEC3init($2,1.0,0.0,0.0);
 $3 = $1;
 $4 = ((($3)) + 24|0);
 __cmsVEC3init($4,0.0,1.0,0.0);
 $5 = $1;
 $6 = ((($5)) + 48|0);
 __cmsVEC3init($6,0.0,0.0,1.0);
 STACKTOP = sp;return;
}
function __cmsMAT3isIdentity($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $2 = $0;
 __cmsMAT3identity($3);
 $4 = 0;
 L1: while(1) {
  $6 = $4;
  $7 = ($6|0)<(3);
  if (!($7)) {
   label = 9;
   break;
  }
  $5 = 0;
  while(1) {
   $8 = $5;
   $9 = ($8|0)<(3);
   if (!($9)) {
    break;
   }
   $10 = $2;
   $11 = $4;
   $12 = (($10) + (($11*24)|0)|0);
   $13 = $5;
   $14 = (($12) + ($13<<3)|0);
   $15 = +HEAPF64[$14>>3];
   $16 = $4;
   $17 = (($3) + (($16*24)|0)|0);
   $18 = $5;
   $19 = (($17) + ($18<<3)|0);
   $20 = +HEAPF64[$19>>3];
   $21 = (_CloseEnough($15,$20)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    label = 6;
    break L1;
   }
   $23 = $5;
   $24 = (($23) + 1)|0;
   $5 = $24;
  }
  $25 = $4;
  $26 = (($25) + 1)|0;
  $4 = $26;
 }
 if ((label|0) == 6) {
  $1 = 0;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 9) {
  $1 = 1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _CloseEnough($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $4 - $5;
 $7 = (+Math_abs((+$6)));
 $8 = $7 < 1.5259021896696422E-5;
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function __cmsMAT3per($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0;
 var $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0;
 var $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0.0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0.0;
 var $190 = 0, $191 = 0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0, $206 = 0.0, $207 = 0.0, $208 = 0.0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0, $218 = 0, $219 = 0.0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0;
 var $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = +HEAPF64[$7>>3];
 $9 = $5;
 $10 = +HEAPF64[$9>>3];
 $11 = $8 * $10;
 $12 = $4;
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $5;
 $16 = ((($15)) + 24|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $14 * $17;
 $19 = $11 + $18;
 $20 = $4;
 $21 = ((($20)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $5;
 $24 = ((($23)) + 48|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $22 * $25;
 $27 = $19 + $26;
 $28 = $4;
 $29 = +HEAPF64[$28>>3];
 $30 = $5;
 $31 = ((($30)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $29 * $32;
 $34 = $4;
 $35 = ((($34)) + 8|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $5;
 $38 = ((($37)) + 24|0);
 $39 = ((($38)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $36 * $40;
 $42 = $33 + $41;
 $43 = $4;
 $44 = ((($43)) + 16|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $5;
 $47 = ((($46)) + 48|0);
 $48 = ((($47)) + 8|0);
 $49 = +HEAPF64[$48>>3];
 $50 = $45 * $49;
 $51 = $42 + $50;
 $52 = $4;
 $53 = +HEAPF64[$52>>3];
 $54 = $5;
 $55 = ((($54)) + 16|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $53 * $56;
 $58 = $4;
 $59 = ((($58)) + 8|0);
 $60 = +HEAPF64[$59>>3];
 $61 = $5;
 $62 = ((($61)) + 24|0);
 $63 = ((($62)) + 16|0);
 $64 = +HEAPF64[$63>>3];
 $65 = $60 * $64;
 $66 = $57 + $65;
 $67 = $4;
 $68 = ((($67)) + 16|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $5;
 $71 = ((($70)) + 48|0);
 $72 = ((($71)) + 16|0);
 $73 = +HEAPF64[$72>>3];
 $74 = $69 * $73;
 $75 = $66 + $74;
 __cmsVEC3init($6,$27,$51,$75);
 $76 = $3;
 $77 = ((($76)) + 24|0);
 $78 = $4;
 $79 = ((($78)) + 24|0);
 $80 = +HEAPF64[$79>>3];
 $81 = $5;
 $82 = +HEAPF64[$81>>3];
 $83 = $80 * $82;
 $84 = $4;
 $85 = ((($84)) + 24|0);
 $86 = ((($85)) + 8|0);
 $87 = +HEAPF64[$86>>3];
 $88 = $5;
 $89 = ((($88)) + 24|0);
 $90 = +HEAPF64[$89>>3];
 $91 = $87 * $90;
 $92 = $83 + $91;
 $93 = $4;
 $94 = ((($93)) + 24|0);
 $95 = ((($94)) + 16|0);
 $96 = +HEAPF64[$95>>3];
 $97 = $5;
 $98 = ((($97)) + 48|0);
 $99 = +HEAPF64[$98>>3];
 $100 = $96 * $99;
 $101 = $92 + $100;
 $102 = $4;
 $103 = ((($102)) + 24|0);
 $104 = +HEAPF64[$103>>3];
 $105 = $5;
 $106 = ((($105)) + 8|0);
 $107 = +HEAPF64[$106>>3];
 $108 = $104 * $107;
 $109 = $4;
 $110 = ((($109)) + 24|0);
 $111 = ((($110)) + 8|0);
 $112 = +HEAPF64[$111>>3];
 $113 = $5;
 $114 = ((($113)) + 24|0);
 $115 = ((($114)) + 8|0);
 $116 = +HEAPF64[$115>>3];
 $117 = $112 * $116;
 $118 = $108 + $117;
 $119 = $4;
 $120 = ((($119)) + 24|0);
 $121 = ((($120)) + 16|0);
 $122 = +HEAPF64[$121>>3];
 $123 = $5;
 $124 = ((($123)) + 48|0);
 $125 = ((($124)) + 8|0);
 $126 = +HEAPF64[$125>>3];
 $127 = $122 * $126;
 $128 = $118 + $127;
 $129 = $4;
 $130 = ((($129)) + 24|0);
 $131 = +HEAPF64[$130>>3];
 $132 = $5;
 $133 = ((($132)) + 16|0);
 $134 = +HEAPF64[$133>>3];
 $135 = $131 * $134;
 $136 = $4;
 $137 = ((($136)) + 24|0);
 $138 = ((($137)) + 8|0);
 $139 = +HEAPF64[$138>>3];
 $140 = $5;
 $141 = ((($140)) + 24|0);
 $142 = ((($141)) + 16|0);
 $143 = +HEAPF64[$142>>3];
 $144 = $139 * $143;
 $145 = $135 + $144;
 $146 = $4;
 $147 = ((($146)) + 24|0);
 $148 = ((($147)) + 16|0);
 $149 = +HEAPF64[$148>>3];
 $150 = $5;
 $151 = ((($150)) + 48|0);
 $152 = ((($151)) + 16|0);
 $153 = +HEAPF64[$152>>3];
 $154 = $149 * $153;
 $155 = $145 + $154;
 __cmsVEC3init($77,$101,$128,$155);
 $156 = $3;
 $157 = ((($156)) + 48|0);
 $158 = $4;
 $159 = ((($158)) + 48|0);
 $160 = +HEAPF64[$159>>3];
 $161 = $5;
 $162 = +HEAPF64[$161>>3];
 $163 = $160 * $162;
 $164 = $4;
 $165 = ((($164)) + 48|0);
 $166 = ((($165)) + 8|0);
 $167 = +HEAPF64[$166>>3];
 $168 = $5;
 $169 = ((($168)) + 24|0);
 $170 = +HEAPF64[$169>>3];
 $171 = $167 * $170;
 $172 = $163 + $171;
 $173 = $4;
 $174 = ((($173)) + 48|0);
 $175 = ((($174)) + 16|0);
 $176 = +HEAPF64[$175>>3];
 $177 = $5;
 $178 = ((($177)) + 48|0);
 $179 = +HEAPF64[$178>>3];
 $180 = $176 * $179;
 $181 = $172 + $180;
 $182 = $4;
 $183 = ((($182)) + 48|0);
 $184 = +HEAPF64[$183>>3];
 $185 = $5;
 $186 = ((($185)) + 8|0);
 $187 = +HEAPF64[$186>>3];
 $188 = $184 * $187;
 $189 = $4;
 $190 = ((($189)) + 48|0);
 $191 = ((($190)) + 8|0);
 $192 = +HEAPF64[$191>>3];
 $193 = $5;
 $194 = ((($193)) + 24|0);
 $195 = ((($194)) + 8|0);
 $196 = +HEAPF64[$195>>3];
 $197 = $192 * $196;
 $198 = $188 + $197;
 $199 = $4;
 $200 = ((($199)) + 48|0);
 $201 = ((($200)) + 16|0);
 $202 = +HEAPF64[$201>>3];
 $203 = $5;
 $204 = ((($203)) + 48|0);
 $205 = ((($204)) + 8|0);
 $206 = +HEAPF64[$205>>3];
 $207 = $202 * $206;
 $208 = $198 + $207;
 $209 = $4;
 $210 = ((($209)) + 48|0);
 $211 = +HEAPF64[$210>>3];
 $212 = $5;
 $213 = ((($212)) + 16|0);
 $214 = +HEAPF64[$213>>3];
 $215 = $211 * $214;
 $216 = $4;
 $217 = ((($216)) + 48|0);
 $218 = ((($217)) + 8|0);
 $219 = +HEAPF64[$218>>3];
 $220 = $5;
 $221 = ((($220)) + 24|0);
 $222 = ((($221)) + 16|0);
 $223 = +HEAPF64[$222>>3];
 $224 = $219 * $223;
 $225 = $215 + $224;
 $226 = $4;
 $227 = ((($226)) + 48|0);
 $228 = ((($227)) + 16|0);
 $229 = +HEAPF64[$228>>3];
 $230 = $5;
 $231 = ((($230)) + 48|0);
 $232 = ((($231)) + 16|0);
 $233 = +HEAPF64[$232>>3];
 $234 = $229 * $233;
 $235 = $225 + $234;
 __cmsVEC3init($157,$181,$208,$235);
 STACKTOP = sp;return;
}
function __cmsMAT3inverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0.0;
 var $208 = 0, $209 = 0, $21 = 0.0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0;
 var $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0;
 var $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = ((($9)) + 24|0);
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $3;
 $14 = ((($13)) + 48|0);
 $15 = ((($14)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $12 * $16;
 $18 = $3;
 $19 = ((($18)) + 24|0);
 $20 = ((($19)) + 16|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $3;
 $23 = ((($22)) + 48|0);
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $21 * $25;
 $27 = $17 - $26;
 $6 = $27;
 $28 = $3;
 $29 = ((($28)) + 24|0);
 $30 = +HEAPF64[$29>>3];
 $31 = -$30;
 $32 = $3;
 $33 = ((($32)) + 48|0);
 $34 = ((($33)) + 16|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $31 * $35;
 $37 = $3;
 $38 = ((($37)) + 24|0);
 $39 = ((($38)) + 16|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $3;
 $42 = ((($41)) + 48|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $40 * $43;
 $45 = $36 + $44;
 $7 = $45;
 $46 = $3;
 $47 = ((($46)) + 24|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $3;
 $50 = ((($49)) + 48|0);
 $51 = ((($50)) + 8|0);
 $52 = +HEAPF64[$51>>3];
 $53 = $48 * $52;
 $54 = $3;
 $55 = ((($54)) + 24|0);
 $56 = ((($55)) + 8|0);
 $57 = +HEAPF64[$56>>3];
 $58 = $3;
 $59 = ((($58)) + 48|0);
 $60 = +HEAPF64[$59>>3];
 $61 = $57 * $60;
 $62 = $53 - $61;
 $8 = $62;
 $63 = $3;
 $64 = +HEAPF64[$63>>3];
 $65 = $6;
 $66 = $64 * $65;
 $67 = $3;
 $68 = ((($67)) + 8|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $7;
 $71 = $69 * $70;
 $72 = $66 + $71;
 $73 = $3;
 $74 = ((($73)) + 16|0);
 $75 = +HEAPF64[$74>>3];
 $76 = $8;
 $77 = $75 * $76;
 $78 = $72 + $77;
 $5 = $78;
 $79 = $5;
 $80 = (+Math_abs((+$79)));
 $81 = $80 < 1.0E-4;
 if ($81) {
  $2 = 0;
  $218 = $2;
  STACKTOP = sp;return ($218|0);
 } else {
  $82 = $6;
  $83 = $5;
  $84 = $82 / $83;
  $85 = $4;
  HEAPF64[$85>>3] = $84;
  $86 = $3;
  $87 = ((($86)) + 16|0);
  $88 = +HEAPF64[$87>>3];
  $89 = $3;
  $90 = ((($89)) + 48|0);
  $91 = ((($90)) + 8|0);
  $92 = +HEAPF64[$91>>3];
  $93 = $88 * $92;
  $94 = $3;
  $95 = ((($94)) + 8|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $3;
  $98 = ((($97)) + 48|0);
  $99 = ((($98)) + 16|0);
  $100 = +HEAPF64[$99>>3];
  $101 = $96 * $100;
  $102 = $93 - $101;
  $103 = $5;
  $104 = $102 / $103;
  $105 = $4;
  $106 = ((($105)) + 8|0);
  HEAPF64[$106>>3] = $104;
  $107 = $3;
  $108 = ((($107)) + 8|0);
  $109 = +HEAPF64[$108>>3];
  $110 = $3;
  $111 = ((($110)) + 24|0);
  $112 = ((($111)) + 16|0);
  $113 = +HEAPF64[$112>>3];
  $114 = $109 * $113;
  $115 = $3;
  $116 = ((($115)) + 16|0);
  $117 = +HEAPF64[$116>>3];
  $118 = $3;
  $119 = ((($118)) + 24|0);
  $120 = ((($119)) + 8|0);
  $121 = +HEAPF64[$120>>3];
  $122 = $117 * $121;
  $123 = $114 - $122;
  $124 = $5;
  $125 = $123 / $124;
  $126 = $4;
  $127 = ((($126)) + 16|0);
  HEAPF64[$127>>3] = $125;
  $128 = $7;
  $129 = $5;
  $130 = $128 / $129;
  $131 = $4;
  $132 = ((($131)) + 24|0);
  HEAPF64[$132>>3] = $130;
  $133 = $3;
  $134 = +HEAPF64[$133>>3];
  $135 = $3;
  $136 = ((($135)) + 48|0);
  $137 = ((($136)) + 16|0);
  $138 = +HEAPF64[$137>>3];
  $139 = $134 * $138;
  $140 = $3;
  $141 = ((($140)) + 16|0);
  $142 = +HEAPF64[$141>>3];
  $143 = $3;
  $144 = ((($143)) + 48|0);
  $145 = +HEAPF64[$144>>3];
  $146 = $142 * $145;
  $147 = $139 - $146;
  $148 = $5;
  $149 = $147 / $148;
  $150 = $4;
  $151 = ((($150)) + 24|0);
  $152 = ((($151)) + 8|0);
  HEAPF64[$152>>3] = $149;
  $153 = $3;
  $154 = ((($153)) + 16|0);
  $155 = +HEAPF64[$154>>3];
  $156 = $3;
  $157 = ((($156)) + 24|0);
  $158 = +HEAPF64[$157>>3];
  $159 = $155 * $158;
  $160 = $3;
  $161 = +HEAPF64[$160>>3];
  $162 = $3;
  $163 = ((($162)) + 24|0);
  $164 = ((($163)) + 16|0);
  $165 = +HEAPF64[$164>>3];
  $166 = $161 * $165;
  $167 = $159 - $166;
  $168 = $5;
  $169 = $167 / $168;
  $170 = $4;
  $171 = ((($170)) + 24|0);
  $172 = ((($171)) + 16|0);
  HEAPF64[$172>>3] = $169;
  $173 = $8;
  $174 = $5;
  $175 = $173 / $174;
  $176 = $4;
  $177 = ((($176)) + 48|0);
  HEAPF64[$177>>3] = $175;
  $178 = $3;
  $179 = ((($178)) + 8|0);
  $180 = +HEAPF64[$179>>3];
  $181 = $3;
  $182 = ((($181)) + 48|0);
  $183 = +HEAPF64[$182>>3];
  $184 = $180 * $183;
  $185 = $3;
  $186 = +HEAPF64[$185>>3];
  $187 = $3;
  $188 = ((($187)) + 48|0);
  $189 = ((($188)) + 8|0);
  $190 = +HEAPF64[$189>>3];
  $191 = $186 * $190;
  $192 = $184 - $191;
  $193 = $5;
  $194 = $192 / $193;
  $195 = $4;
  $196 = ((($195)) + 48|0);
  $197 = ((($196)) + 8|0);
  HEAPF64[$197>>3] = $194;
  $198 = $3;
  $199 = +HEAPF64[$198>>3];
  $200 = $3;
  $201 = ((($200)) + 24|0);
  $202 = ((($201)) + 8|0);
  $203 = +HEAPF64[$202>>3];
  $204 = $199 * $203;
  $205 = $3;
  $206 = ((($205)) + 8|0);
  $207 = +HEAPF64[$206>>3];
  $208 = $3;
  $209 = ((($208)) + 24|0);
  $210 = +HEAPF64[$209>>3];
  $211 = $207 * $210;
  $212 = $204 - $211;
  $213 = $5;
  $214 = $212 / $213;
  $215 = $4;
  $216 = ((($215)) + 48|0);
  $217 = ((($216)) + 16|0);
  HEAPF64[$217>>3] = $214;
  $2 = 1;
  $218 = $2;
  STACKTOP = sp;return ($218|0);
 }
 return (0)|0;
}
function __cmsMAT3solve($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $7 = sp + 72|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 _memmove(($7|0),($9|0),72)|0;
 $10 = (__cmsMAT3inverse($7,$8)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = $6;
  __cmsMAT3eval($12,$8,$13);
  $3 = 1;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 } else {
  $3 = 0;
  $14 = $3;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __cmsMAT3eval($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0;
 var $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = +HEAPF64[$6>>3];
 $8 = $5;
 $9 = +HEAPF64[$8>>3];
 $10 = $7 * $9;
 $11 = $4;
 $12 = ((($11)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $5;
 $15 = ((($14)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $13 * $16;
 $18 = $10 + $17;
 $19 = $4;
 $20 = ((($19)) + 16|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $5;
 $23 = ((($22)) + 16|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $21 * $24;
 $26 = $18 + $25;
 $27 = $3;
 HEAPF64[$27>>3] = $26;
 $28 = $4;
 $29 = ((($28)) + 24|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $5;
 $32 = +HEAPF64[$31>>3];
 $33 = $30 * $32;
 $34 = $4;
 $35 = ((($34)) + 24|0);
 $36 = ((($35)) + 8|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $5;
 $39 = ((($38)) + 8|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $37 * $40;
 $42 = $33 + $41;
 $43 = $4;
 $44 = ((($43)) + 24|0);
 $45 = ((($44)) + 16|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $5;
 $48 = ((($47)) + 16|0);
 $49 = +HEAPF64[$48>>3];
 $50 = $46 * $49;
 $51 = $42 + $50;
 $52 = $3;
 $53 = ((($52)) + 8|0);
 HEAPF64[$53>>3] = $51;
 $54 = $4;
 $55 = ((($54)) + 48|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $5;
 $58 = +HEAPF64[$57>>3];
 $59 = $56 * $58;
 $60 = $4;
 $61 = ((($60)) + 48|0);
 $62 = ((($61)) + 8|0);
 $63 = +HEAPF64[$62>>3];
 $64 = $5;
 $65 = ((($64)) + 8|0);
 $66 = +HEAPF64[$65>>3];
 $67 = $63 * $66;
 $68 = $59 + $67;
 $69 = $4;
 $70 = ((($69)) + 48|0);
 $71 = ((($70)) + 16|0);
 $72 = +HEAPF64[$71>>3];
 $73 = $5;
 $74 = ((($73)) + 16|0);
 $75 = +HEAPF64[$74>>3];
 $76 = $72 * $75;
 $77 = $68 + $76;
 $78 = $3;
 $79 = ((($78)) + 16|0);
 HEAPF64[$79>>3] = $77;
 STACKTOP = sp;return;
}
function _cmsMLUalloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6>>>0)<=(0);
 $$ = $7 ? 2 : $1;
 $4 = $$;
 $8 = $3;
 $9 = (__cmsMallocZero($8,28)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 $12 = $3;
 $13 = $5;
 HEAP32[$13>>2] = $12;
 $14 = $3;
 $15 = $4;
 $16 = (__cmsCalloc($14,$15,12)|0);
 $17 = $5;
 $18 = ((($17)) + 12|0);
 HEAP32[$18>>2] = $16;
 $19 = $5;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = $3;
  $24 = $5;
  __cmsFree($23,$24);
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 } else {
  $25 = $4;
  $26 = $5;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = $25;
  $28 = $5;
  $29 = ((($28)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = $5;
  $2 = $30;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _cmsMLUsetASCII($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $15 = $8;
 $16 = (_strlen($15)|0);
 $10 = $16;
 $17 = $6;
 $18 = (_strTo16($17)|0);
 $13 = $18;
 $19 = $7;
 $20 = (_strTo16($19)|0);
 $14 = $20;
 $21 = $5;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $4 = 0;
  $53 = $4;
  STACKTOP = sp;return ($53|0);
 }
 $23 = $5;
 $24 = HEAP32[$23>>2]|0;
 $25 = $10;
 $26 = (__cmsCalloc($24,$25,4)|0);
 $11 = $26;
 $27 = $11;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $4 = 0;
  $53 = $4;
  STACKTOP = sp;return ($53|0);
 }
 $9 = 0;
 while(1) {
  $29 = $9;
  $30 = $10;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   break;
  }
  $32 = $8;
  $33 = $9;
  $34 = (($32) + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 << 24 >> 24;
  $37 = $11;
  $38 = $9;
  $39 = (($37) + ($38<<2)|0);
  HEAP32[$39>>2] = $36;
  $40 = $9;
  $41 = (($40) + 1)|0;
  $9 = $41;
 }
 $42 = $5;
 $43 = $10;
 $44 = $43<<2;
 $45 = $11;
 $46 = $13;
 $47 = $14;
 $48 = (_AddMLUBlock($42,$44,$45,$46,$47)|0);
 $12 = $48;
 $49 = $5;
 $50 = HEAP32[$49>>2]|0;
 $51 = $11;
 __cmsFree($50,$51);
 $52 = $12;
 $4 = $52;
 $53 = $4;
 STACKTOP = sp;return ($53|0);
}
function _strTo16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $2 = $4;
 $5 = $2;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7&65535;
 $9 = $8 << 8;
 $10 = $2;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $9 | $13;
 $15 = $14&65535;
 $3 = $15;
 $16 = $3;
 STACKTOP = sp;return ($16|0);
}
function _AddMLUBlock($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $5 = 0;
  $98 = $5;
  STACKTOP = sp;return ($98|0);
 }
 $15 = $6;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $6;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17>>>0)>=($20>>>0);
 if ($21) {
  $22 = $6;
  $23 = (_GrowMLUtable($22)|0);
  $24 = ($23|0)!=(0);
  if (!($24)) {
   $5 = 0;
   $98 = $5;
   STACKTOP = sp;return ($98|0);
  }
 }
 $25 = $6;
 $26 = $9;
 $27 = $10;
 $28 = (_SearchMLUEntry($25,$26,$27)|0);
 $29 = ($28|0)>=(0);
 if ($29) {
  $5 = 0;
  $98 = $5;
  STACKTOP = sp;return ($98|0);
 }
 while(1) {
  $30 = $6;
  $31 = ((($30)) + 16|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $6;
  $34 = ((($33)) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($32) - ($35))|0;
  $37 = $7;
  $38 = ($36>>>0)<($37>>>0);
  $39 = $6;
  if (!($38)) {
   break;
  }
  $40 = (_GrowMLUpool($39)|0);
  $41 = ($40|0)!=(0);
  if (!($41)) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  $5 = 0;
  $98 = $5;
  STACKTOP = sp;return ($98|0);
 }
 $42 = ((($39)) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $11 = $43;
 $44 = $6;
 $45 = ((($44)) + 24|0);
 $46 = HEAP32[$45>>2]|0;
 $12 = $46;
 $47 = $12;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $5 = 0;
  $98 = $5;
  STACKTOP = sp;return ($98|0);
 } else {
  $49 = $12;
  $50 = $11;
  $51 = (($49) + ($50)|0);
  $52 = $8;
  $53 = $7;
  _memmove(($51|0),($52|0),($53|0))|0;
  $54 = $7;
  $55 = $6;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + ($54))|0;
  HEAP32[$56>>2] = $58;
  $59 = $11;
  $60 = $6;
  $61 = ((($60)) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $6;
  $64 = ((($63)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($62) + (($65*12)|0)|0);
  $67 = ((($66)) + 4|0);
  HEAP32[$67>>2] = $59;
  $68 = $7;
  $69 = $6;
  $70 = ((($69)) + 12|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $6;
  $73 = ((($72)) + 8|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($71) + (($74*12)|0)|0);
  $76 = ((($75)) + 8|0);
  HEAP32[$76>>2] = $68;
  $77 = $10;
  $78 = $6;
  $79 = ((($78)) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $6;
  $82 = ((($81)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($80) + (($83*12)|0)|0);
  $85 = ((($84)) + 2|0);
  HEAP16[$85>>1] = $77;
  $86 = $9;
  $87 = $6;
  $88 = ((($87)) + 12|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $6;
  $91 = ((($90)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($89) + (($92*12)|0)|0);
  HEAP16[$93>>1] = $86;
  $94 = $6;
  $95 = ((($94)) + 8|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$95>>2] = $97;
  $5 = 1;
  $98 = $5;
  STACKTOP = sp;return ($98|0);
 }
 return (0)|0;
}
function _GrowMLUtable($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9<<1;
 $3 = $10;
 $11 = $3;
 $12 = (($11>>>0) / 2)&-1;
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)!=($15|0);
 if ($16) {
  $1 = 0;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = $2;
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $3;
 $23 = ($22*12)|0;
 $24 = (__cmsRealloc($18,$21,$23)|0);
 $4 = $24;
 $25 = $4;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $1 = 0;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 } else {
  $27 = $4;
  $28 = $2;
  $29 = ((($28)) + 12|0);
  HEAP32[$29>>2] = $27;
  $30 = $3;
  $31 = $2;
  $32 = ((($31)) + 4|0);
  HEAP32[$32>>2] = $30;
  $1 = 1;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _SearchMLUEntry($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $3 = -1;
  $39 = $3;
  STACKTOP = sp;return ($39|0);
 }
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $4;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10>>>0)<($13>>>0);
  if (!($14)) {
   label = 9;
   break;
  }
  $15 = $4;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $7;
  $19 = (($17) + (($18*12)|0)|0);
  $20 = ((($19)) + 2|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = $6;
  $24 = $23&65535;
  $25 = ($22|0)==($24|0);
  if ($25) {
   $26 = $4;
   $27 = ((($26)) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $7;
   $30 = (($28) + (($29*12)|0)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = $5;
   $34 = $33&65535;
   $35 = ($32|0)==($34|0);
   if ($35) {
    label = 7;
    break;
   }
  }
  $37 = $7;
  $38 = (($37) + 1)|0;
  $7 = $38;
 }
 if ((label|0) == 7) {
  $36 = $7;
  $3 = $36;
  $39 = $3;
  STACKTOP = sp;return ($39|0);
 }
 else if ((label|0) == 9) {
  $3 = -1;
  $39 = $3;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _GrowMLUpool($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 $7 = $2;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $3 = 256;
 } else {
  $11 = $2;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13<<1;
  $3 = $14;
 }
 $15 = $3;
 $16 = $2;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($15>>>0)<($18>>>0);
 if ($19) {
  $1 = 0;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $22 = $2;
 $23 = ((($22)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $3;
 $26 = (__cmsRealloc($21,$24,$25)|0);
 $4 = $26;
 $27 = $4;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $1 = 0;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 } else {
  $29 = $4;
  $30 = $2;
  $31 = ((($30)) + 24|0);
  HEAP32[$31>>2] = $29;
  $32 = $3;
  $33 = $2;
  $34 = ((($33)) + 16|0);
  HEAP32[$34>>2] = $32;
  $1 = 1;
  $35 = $1;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _cmsMLUsetWide($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $6;
 $13 = (_strTo16($12)|0);
 $9 = $13;
 $14 = $7;
 $15 = (_strTo16($14)|0);
 $10 = $15;
 $16 = $5;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $4 = 0;
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 }
 $18 = $8;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $4 = 0;
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 } else {
  $20 = $8;
  $21 = (_mywcslen($20)|0);
  $22 = $21<<2;
  $11 = $22;
  $23 = $5;
  $24 = $11;
  $25 = $8;
  $26 = $9;
  $27 = $10;
  $28 = (_AddMLUBlock($23,$24,$25,$26,$27)|0);
  $4 = $28;
  $29 = $4;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _mywcslen($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 while(1) {
  $4 = $2;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0);
  $7 = $2;
  if (!($6)) {
   break;
  }
  $8 = ((($7)) + 4|0);
  $2 = $8;
 }
 $9 = $1;
 $10 = $7;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $13 = (($12|0) / 4)&-1;
 STACKTOP = sp;return ($13|0);
}
function _cmsMLUdup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = 0;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cmsMLUalloc($7,$10)|0);
 $3 = $11;
 $12 = $3;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $1 = 0;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 $14 = $3;
 $15 = ((($14)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $2;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)<($19>>>0);
 do {
  if (!($20)) {
   $21 = $3;
   $22 = ((($21)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    $25 = $2;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if (!($28)) {
     $29 = $3;
     $30 = ((($29)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $2;
     $33 = ((($32)) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $2;
     $36 = ((($35)) + 8|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37*12)|0;
     _memmove(($31|0),($34|0),($38|0))|0;
     $39 = $2;
     $40 = ((($39)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $3;
     $43 = ((($42)) + 8|0);
     HEAP32[$43>>2] = $41;
     $44 = $2;
     $45 = ((($44)) + 20|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)==(0);
     if ($47) {
      $48 = $3;
      $49 = ((($48)) + 24|0);
      HEAP32[$49>>2] = 0;
     } else {
      $50 = $2;
      $51 = HEAP32[$50>>2]|0;
      $52 = $2;
      $53 = ((($52)) + 20|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = (__cmsMalloc($51,$54)|0);
      $56 = $3;
      $57 = ((($56)) + 24|0);
      HEAP32[$57>>2] = $55;
      $58 = $3;
      $59 = ((($58)) + 24|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       break;
      }
     }
     $62 = $2;
     $63 = ((($62)) + 20|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $3;
     $66 = ((($65)) + 16|0);
     HEAP32[$66>>2] = $64;
     $67 = $3;
     $68 = ((($67)) + 24|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(0|0);
     if (!($70)) {
      $71 = $2;
      $72 = ((($71)) + 24|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)==(0|0);
      if (!($74)) {
       $75 = $3;
       $76 = ((($75)) + 24|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $2;
       $79 = ((($78)) + 24|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = $2;
       $82 = ((($81)) + 20|0);
       $83 = HEAP32[$82>>2]|0;
       _memmove(($77|0),($80|0),($83|0))|0;
       $84 = $2;
       $85 = ((($84)) + 20|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = $3;
       $88 = ((($87)) + 20|0);
       HEAP32[$88>>2] = $86;
       $89 = $3;
       $1 = $89;
       $93 = $1;
       STACKTOP = sp;return ($93|0);
      }
     }
    }
   }
  }
 } while(0);
 $90 = $3;
 $91 = ($90|0)!=(0|0);
 if ($91) {
  $92 = $3;
  _cmsMLUfree($92);
 }
 $1 = 0;
 $93 = $1;
 STACKTOP = sp;return ($93|0);
}
function _cmsMLUfree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = ((($10)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  __cmsFree($9,$12);
 }
 $13 = $1;
 $14 = ((($13)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  $20 = ((($19)) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  __cmsFree($18,$21);
 }
 $22 = $1;
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 __cmsFree($23,$24);
 STACKTOP = sp;return;
}
function _cmsMLUgetASCII($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 HEAP32[$12>>2] = 0;
 $17 = $7;
 $18 = (_strTo16($17)|0);
 $15 = $18;
 $19 = $8;
 $20 = (_strTo16($19)|0);
 $16 = $20;
 $21 = $6;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $5 = 0;
  $69 = $5;
  STACKTOP = sp;return ($69|0);
 }
 $23 = $6;
 $24 = $15;
 $25 = $16;
 $26 = (__cmsMLUgetWide($23,$12,$24,$25,0,0)|0);
 $11 = $26;
 $27 = $11;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $5 = 0;
  $69 = $5;
  STACKTOP = sp;return ($69|0);
 }
 $29 = HEAP32[$12>>2]|0;
 $30 = (($29>>>0) / 4)&-1;
 $13 = $30;
 $31 = $9;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = $13;
  $34 = (($33) + 1)|0;
  $5 = $34;
  $69 = $5;
  STACKTOP = sp;return ($69|0);
 }
 $35 = $10;
 $36 = ($35>>>0)<=(0);
 if ($36) {
  $5 = 0;
  $69 = $5;
  STACKTOP = sp;return ($69|0);
 }
 $37 = $10;
 $38 = $13;
 $39 = (($38) + 1)|0;
 $40 = ($37>>>0)<($39>>>0);
 if ($40) {
  $41 = $10;
  $42 = (($41) - 1)|0;
  $13 = $42;
 }
 $14 = 0;
 while(1) {
  $43 = $14;
  $44 = $13;
  $45 = ($43>>>0)<($44>>>0);
  if (!($45)) {
   break;
  }
  $46 = $11;
  $47 = $14;
  $48 = (($46) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0);
  if ($50) {
   $51 = $9;
   $52 = $14;
   $53 = (($51) + ($52)|0);
   $$sink = 0;$$sink1 = $53;
  } else {
   $54 = $11;
   $55 = $14;
   $56 = (($54) + ($55<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57&255;
   $59 = $9;
   $60 = $14;
   $61 = (($59) + ($60)|0);
   $$sink = $58;$$sink1 = $61;
  }
  HEAP8[$$sink1>>0] = $$sink;
  $62 = $14;
  $63 = (($62) + 1)|0;
  $14 = $63;
 }
 $64 = $9;
 $65 = $13;
 $66 = (($64) + ($65)|0);
 HEAP8[$66>>0] = 0;
 $67 = $13;
 $68 = (($67) + 1)|0;
 $5 = $68;
 $69 = $5;
 STACKTOP = sp;return ($69|0);
}
function __cmsMLUgetWide($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = -1;
 $16 = $7;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $6 = 0;
  $105 = $6;
  STACKTOP = sp;return ($105|0);
 }
 $18 = $7;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)<=(0);
 if ($21) {
  $6 = 0;
  $105 = $6;
  STACKTOP = sp;return ($105|0);
 }
 $13 = 0;
 while(1) {
  $22 = $13;
  $23 = $7;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22>>>0)<($25>>>0);
  if (!($26)) {
   break;
  }
  $27 = $7;
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $13;
  $31 = (($29) + (($30*12)|0)|0);
  $15 = $31;
  $32 = $15;
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = $9;
  $36 = $35&65535;
  $37 = ($34|0)==($36|0);
  if ($37) {
   $38 = $14;
   $39 = ($38|0)==(-1);
   if ($39) {
    $40 = $13;
    $14 = $40;
   }
   $41 = $15;
   $42 = ((($41)) + 2|0);
   $43 = HEAP16[$42>>1]|0;
   $44 = $43&65535;
   $45 = $10;
   $46 = $45&65535;
   $47 = ($44|0)==($46|0);
   if ($47) {
    label = 11;
    break;
   }
  }
  $72 = $13;
  $73 = (($72) + 1)|0;
  $13 = $73;
 }
 if ((label|0) == 11) {
  $48 = $11;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = $15;
   $51 = HEAP16[$50>>1]|0;
   $52 = $11;
   HEAP16[$52>>1] = $51;
  }
  $53 = $12;
  $54 = ($53|0)!=(0|0);
  if ($54) {
   $55 = $15;
   $56 = ((($55)) + 2|0);
   $57 = HEAP16[$56>>1]|0;
   $58 = $12;
   HEAP16[$58>>1] = $57;
  }
  $59 = $8;
  $60 = ($59|0)!=(0|0);
  if ($60) {
   $61 = $15;
   $62 = ((($61)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $8;
   HEAP32[$64>>2] = $63;
  }
  $65 = $7;
  $66 = ((($65)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $15;
  $69 = ((($68)) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($67) + ($70)|0);
  $6 = $71;
  $105 = $6;
  STACKTOP = sp;return ($105|0);
 }
 $74 = $14;
 $75 = ($74|0)==(-1);
 if ($75) {
  $14 = 0;
 }
 $76 = $7;
 $77 = ((($76)) + 12|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $14;
 $80 = (($78) + (($79*12)|0)|0);
 $15 = $80;
 $81 = $11;
 $82 = ($81|0)!=(0|0);
 if ($82) {
  $83 = $15;
  $84 = HEAP16[$83>>1]|0;
  $85 = $11;
  HEAP16[$85>>1] = $84;
 }
 $86 = $12;
 $87 = ($86|0)!=(0|0);
 if ($87) {
  $88 = $15;
  $89 = ((($88)) + 2|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $12;
  HEAP16[$91>>1] = $90;
 }
 $92 = $8;
 $93 = ($92|0)!=(0|0);
 if ($93) {
  $94 = $15;
  $95 = ((($94)) + 8|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $8;
  HEAP32[$97>>2] = $96;
 }
 $98 = $7;
 $99 = ((($98)) + 24|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $15;
 $102 = ((($101)) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($100) + ($103)|0);
 $6 = $104;
 $105 = $6;
 STACKTOP = sp;return ($105|0);
}
function _cmsMLUgetWide($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 HEAP32[$12>>2] = 0;
 $15 = $7;
 $16 = (_strTo16($15)|0);
 $13 = $16;
 $17 = $8;
 $18 = (_strTo16($17)|0);
 $14 = $18;
 $19 = $6;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $5 = 0;
  $48 = $5;
  STACKTOP = sp;return ($48|0);
 }
 $21 = $6;
 $22 = $13;
 $23 = $14;
 $24 = (__cmsMLUgetWide($21,$12,$22,$23,0,0)|0);
 $11 = $24;
 $25 = $11;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $5 = 0;
  $48 = $5;
  STACKTOP = sp;return ($48|0);
 }
 $27 = $9;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = HEAP32[$12>>2]|0;
  $30 = (($29) + 4)|0;
  $5 = $30;
  $48 = $5;
  STACKTOP = sp;return ($48|0);
 }
 $31 = $10;
 $32 = ($31>>>0)<=(0);
 if ($32) {
  $5 = 0;
  $48 = $5;
  STACKTOP = sp;return ($48|0);
 }
 $33 = $10;
 $34 = HEAP32[$12>>2]|0;
 $35 = (($34) + 4)|0;
 $36 = ($33>>>0)<($35>>>0);
 if ($36) {
  $37 = $10;
  $38 = (($37) - 4)|0;
  HEAP32[$12>>2] = $38;
 }
 $39 = $9;
 $40 = $11;
 $41 = HEAP32[$12>>2]|0;
 _memmove(($39|0),($40|0),($41|0))|0;
 $42 = $9;
 $43 = HEAP32[$12>>2]|0;
 $44 = (($43>>>0) / 4)&-1;
 $45 = (($42) + ($44<<2)|0);
 HEAP32[$45>>2] = 0;
 $46 = HEAP32[$12>>2]|0;
 $47 = (($46) + 4)|0;
 $5 = $47;
 $48 = $5;
 STACKTOP = sp;return ($48|0);
}
function _cmsAllocNamedColorList($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $6;
 $13 = (__cmsMallocZero($12,88)|0);
 $11 = $13;
 $14 = $11;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $5 = 0;
  $47 = $5;
  STACKTOP = sp;return ($47|0);
 }
 $16 = $11;
 $17 = ((($16)) + 80|0);
 HEAP32[$17>>2] = 0;
 $18 = $11;
 HEAP32[$18>>2] = 0;
 $19 = $6;
 $20 = $11;
 $21 = ((($20)) + 84|0);
 HEAP32[$21>>2] = $19;
 while(1) {
  $22 = $11;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $7;
  $26 = ($24>>>0)<($25>>>0);
  $27 = $11;
  if (!($26)) {
   label = 7;
   break;
  }
  $28 = (_GrowNamedColorList($27)|0);
  $29 = ($28|0)!=(0);
  if (!($29)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $30 = $6;
  $31 = $11;
  __cmsFree($30,$31);
  $5 = 0;
  $47 = $5;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 7) {
  $32 = ((($27)) + 12|0);
  $33 = $9;
  (_strncpy($32,$33,32)|0);
  $34 = $11;
  $35 = ((($34)) + 45|0);
  $36 = $10;
  (_strncpy($35,$36,32)|0);
  $37 = $11;
  $38 = ((($37)) + 45|0);
  $39 = ((($38)) + 32|0);
  HEAP8[$39>>0] = 0;
  $40 = $11;
  $41 = ((($40)) + 12|0);
  $42 = ((($41)) + 32|0);
  HEAP8[$42>>0] = 0;
  $43 = $8;
  $44 = $11;
  $45 = ((($44)) + 8|0);
  HEAP32[$45>>2] = $43;
  $46 = $11;
  $5 = $46;
  $47 = $5;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _GrowNamedColorList($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $3 = 64;
 } else {
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13<<1;
  $3 = $14;
 }
 $15 = $3;
 $16 = ($15>>>0)>(102400);
 $17 = $2;
 $18 = ((($17)) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $2;
 $21 = ((($20)) + 80|0);
 $22 = HEAP32[$21>>2]|0;
 if ($16) {
  __cmsFree($19,$22);
  $23 = $2;
  $24 = ((($23)) + 80|0);
  HEAP32[$24>>2] = 0;
  $1 = 0;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 $25 = $3;
 $26 = ($25*294)|0;
 $27 = (__cmsRealloc($19,$22,$26)|0);
 $4 = $27;
 $28 = $4;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $1 = 0;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 } else {
  $30 = $4;
  $31 = $2;
  $32 = ((($31)) + 80|0);
  HEAP32[$32>>2] = $30;
  $33 = $3;
  $34 = $2;
  $35 = ((($34)) + 4|0);
  HEAP32[$35>>2] = $33;
  $1 = 1;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _cmsFreeNamedColorList($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + 80|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 84|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = ((($11)) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  __cmsFree($10,$13);
 }
 $14 = $1;
 $15 = ((($14)) + 84|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $1;
 __cmsFree($16,$17);
 STACKTOP = sp;return;
}
function _cmsDupNamedColorList($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = 0;
  $56 = $1;
  STACKTOP = sp;return ($56|0);
 }
 $6 = $2;
 $7 = ((($6)) + 84|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $2;
 $15 = ((($14)) + 12|0);
 $16 = $2;
 $17 = ((($16)) + 45|0);
 $18 = (_cmsAllocNamedColorList($8,$10,$13,$15,$17)|0);
 $3 = $18;
 $19 = $3;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $1 = 0;
  $56 = $1;
  STACKTOP = sp;return ($56|0);
 }
 while(1) {
  $21 = $3;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $2;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23>>>0)<($26>>>0);
  $28 = $3;
  if (!($27)) {
   label = 8;
   break;
  }
  $29 = (_GrowNamedColorList($28)|0);
  $30 = ($29|0)!=(0);
  if (!($30)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $1 = 0;
  $56 = $1;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 8) {
  $31 = ((($28)) + 12|0);
  $32 = $2;
  $33 = ((($32)) + 12|0);
  _memmove(($31|0),($33|0),33)|0;
  $34 = $3;
  $35 = ((($34)) + 45|0);
  $36 = $2;
  $37 = ((($36)) + 45|0);
  _memmove(($35|0),($37|0),33)|0;
  $38 = $2;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $3;
  $42 = ((($41)) + 8|0);
  HEAP32[$42>>2] = $40;
  $43 = $3;
  $44 = ((($43)) + 80|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $2;
  $47 = ((($46)) + 80|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $2;
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50*294)|0;
  _memmove(($45|0),($48|0),($51|0))|0;
  $52 = $2;
  $53 = HEAP32[$52>>2]|0;
  $54 = $3;
  HEAP32[$54>>2] = $53;
  $55 = $3;
  $1 = $55;
  $56 = $1;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _cmsAppendNamedColor($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $4 = 0;
  $88 = $4;
  STACKTOP = sp;return ($88|0);
 }
 $12 = $5;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 $15 = $5;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>($17>>>0);
 if ($18) {
  $19 = $5;
  $20 = (_GrowNamedColorList($19)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   $4 = 0;
   $88 = $4;
   STACKTOP = sp;return ($88|0);
  }
 }
 $9 = 0;
 while(1) {
  $22 = $9;
  $23 = $5;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22>>>0)<($25>>>0);
  if (!($26)) {
   break;
  }
  $27 = $8;
  $28 = ($27|0)==(0|0);
  if ($28) {
   $35 = 0;
  } else {
   $29 = $8;
   $30 = $9;
   $31 = (($29) + ($30<<1)|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32&65535;
   $35 = $33;
  }
  $34 = $35&65535;
  $36 = $5;
  $37 = ((($36)) + 80|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $5;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + (($40*294)|0)|0);
  $42 = ((($41)) + 262|0);
  $43 = $9;
  $44 = (($42) + ($43<<1)|0);
  HEAP16[$44>>1] = $34;
  $45 = $9;
  $46 = (($45) + 1)|0;
  $9 = $46;
 }
 $9 = 0;
 while(1) {
  $47 = $9;
  $48 = ($47>>>0)<(3);
  if (!($48)) {
   break;
  }
  $49 = $7;
  $50 = ($49|0)==(0|0);
  if ($50) {
   $57 = 0;
  } else {
   $51 = $7;
   $52 = $9;
   $53 = (($51) + ($52<<1)|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $57 = $55;
  }
  $56 = $57&65535;
  $58 = $5;
  $59 = ((($58)) + 80|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $5;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($60) + (($62*294)|0)|0);
  $64 = ((($63)) + 256|0);
  $65 = $9;
  $66 = (($64) + ($65<<1)|0);
  HEAP16[$66>>1] = $56;
  $67 = $9;
  $68 = (($67) + 1)|0;
  $9 = $68;
 }
 $69 = $6;
 $70 = ($69|0)!=(0|0);
 $71 = $5;
 $72 = ((($71)) + 80|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $5;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + (($75*294)|0)|0);
 if ($70) {
  $77 = $6;
  (_strncpy($76,$77,255)|0);
  $78 = $5;
  $79 = ((($78)) + 80|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $5;
  $82 = HEAP32[$81>>2]|0;
  $83 = (($80) + (($82*294)|0)|0);
  $84 = ((($83)) + 255|0);
  HEAP8[$84>>0] = 0;
 } else {
  HEAP8[$76>>0] = 0;
 }
 $85 = $5;
 $86 = HEAP32[$85>>2]|0;
 $87 = (($86) + 1)|0;
 HEAP32[$85>>2] = $87;
 $4 = 1;
 $88 = $4;
 STACKTOP = sp;return ($88|0);
}
function _cmsNamedColorCount($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _cmsNamedColorInfo($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $8;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $7 = 0;
  $61 = $7;
  STACKTOP = sp;return ($61|0);
 }
 $17 = $9;
 $18 = $8;
 $19 = (_cmsNamedColorCount($18)|0);
 $20 = ($17>>>0)>=($19>>>0);
 if ($20) {
  $7 = 0;
  $61 = $7;
  STACKTOP = sp;return ($61|0);
 }
 $21 = $10;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $10;
  $24 = $8;
  $25 = ((($24)) + 80|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $9;
  $28 = (($26) + (($27*294)|0)|0);
  (_strcpy($23,$28)|0);
 }
 $29 = $11;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $11;
  $32 = $8;
  $33 = ((($32)) + 12|0);
  (_strcpy($31,$33)|0);
 }
 $34 = $12;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $12;
  $37 = $8;
  $38 = ((($37)) + 45|0);
  (_strcpy($36,$38)|0);
 }
 $39 = $13;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = $13;
  $42 = $8;
  $43 = ((($42)) + 80|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $9;
  $46 = (($44) + (($45*294)|0)|0);
  $47 = ((($46)) + 256|0);
  _memmove(($41|0),($47|0),6)|0;
 }
 $48 = $14;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = $14;
  $51 = $8;
  $52 = ((($51)) + 80|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $9;
  $55 = (($53) + (($54*294)|0)|0);
  $56 = ((($55)) + 262|0);
  $57 = $8;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59<<1;
  _memmove(($50|0),($56|0),($60|0))|0;
 }
 $7 = 1;
 $61 = $7;
 STACKTOP = sp;return ($61|0);
}
function __cmsStageAllocNamedColor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = ($7|0)!=(0);
 if ($8) {
  $17 = 3;
 } else {
  $9 = $2;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $17 = $11;
 }
 $12 = $3;
 $13 = ($12|0)!=(0);
 $14 = $13 ? 346 : 347;
 $15 = $2;
 $16 = (_cmsDupNamedColorList($15)|0);
 $18 = (__cmsStageAllocPlaceholder($6,1852009504,1,$17,$14,348,349,$16)|0);
 STACKTOP = sp;return ($18|0);
}
function _EvalNamedColorPCS($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0.0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $3;
 $12 = +HEAPF32[$11>>2];
 $13 = $12;
 $14 = $13 * 65535.0;
 $15 = (__cmsQuickSaturateWord_362($14)|0);
 $7 = $15;
 $16 = $7;
 $17 = $16&65535;
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17>>>0)>=($19>>>0);
 $21 = $6;
 if ($20) {
  $22 = ((($21)) + 84|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $7;
  $25 = $24&65535;
  HEAP32[$vararg_buffer>>2] = $25;
  _cmsSignalError($23,2,27378,$vararg_buffer);
  $26 = $4;
  $27 = ((($26)) + 8|0);
  HEAPF32[$27>>2] = 0.0;
  $28 = $4;
  $29 = ((($28)) + 4|0);
  HEAPF32[$29>>2] = 0.0;
  $30 = $4;
  $$sink = 0.0;$$sink1 = $30;
  HEAPF32[$$sink1>>2] = $$sink;
  STACKTOP = sp;return;
 } else {
  $31 = ((($21)) + 80|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $7;
  $34 = $33&65535;
  $35 = (($32) + (($34*294)|0)|0);
  $36 = ((($35)) + 256|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = (+($38|0));
  $40 = $39 / 65535.0;
  $41 = $40;
  $42 = $4;
  HEAPF32[$42>>2] = $41;
  $43 = $6;
  $44 = ((($43)) + 80|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $7;
  $47 = $46&65535;
  $48 = (($45) + (($47*294)|0)|0);
  $49 = ((($48)) + 256|0);
  $50 = ((($49)) + 2|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51&65535;
  $53 = (+($52|0));
  $54 = $53 / 65535.0;
  $55 = $54;
  $56 = $4;
  $57 = ((($56)) + 4|0);
  HEAPF32[$57>>2] = $55;
  $58 = $6;
  $59 = ((($58)) + 80|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $7;
  $62 = $61&65535;
  $63 = (($60) + (($62*294)|0)|0);
  $64 = ((($63)) + 256|0);
  $65 = ((($64)) + 4|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66&65535;
  $68 = (+($67|0));
  $69 = $68 / 65535.0;
  $70 = $69;
  $71 = $4;
  $72 = ((($71)) + 8|0);
  $$sink = $70;$$sink1 = $72;
  HEAPF32[$$sink1>>2] = $$sink;
  STACKTOP = sp;return;
 }
}
function _EvalNamedColor($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $10 = ((($9)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $6 = $11;
 $12 = $3;
 $13 = +HEAPF32[$12>>2];
 $14 = $13;
 $15 = $14 * 65535.0;
 $16 = (__cmsQuickSaturateWord_362($15)|0);
 $7 = $16;
 $17 = $7;
 $18 = $17&65535;
 $19 = $6;
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18>>>0)>=($20>>>0);
 if ($21) {
  $22 = $6;
  $23 = ((($22)) + 84|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $7;
  $26 = $25&65535;
  HEAP32[$vararg_buffer>>2] = $26;
  _cmsSignalError($24,2,27378,$vararg_buffer);
  $8 = 0;
  while(1) {
   $27 = $8;
   $28 = $6;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($27>>>0)<($30>>>0);
   if (!($31)) {
    break;
   }
   $32 = $4;
   $33 = $8;
   $34 = (($32) + ($33<<2)|0);
   HEAPF32[$34>>2] = 0.0;
   $35 = $8;
   $36 = (($35) + 1)|0;
   $8 = $36;
  }
  STACKTOP = sp;return;
 } else {
  $8 = 0;
  while(1) {
   $37 = $8;
   $38 = $6;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($37>>>0)<($40>>>0);
   if (!($41)) {
    break;
   }
   $42 = $6;
   $43 = ((($42)) + 80|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $7;
   $46 = $45&65535;
   $47 = (($44) + (($46*294)|0)|0);
   $48 = ((($47)) + 262|0);
   $49 = $8;
   $50 = (($48) + ($49<<1)|0);
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = (+($52|0));
   $54 = $53 / 65535.0;
   $55 = $54;
   $56 = $4;
   $57 = $8;
   $58 = (($56) + ($57<<2)|0);
   HEAPF32[$58>>2] = $55;
   $59 = $8;
   $60 = (($59) + 1)|0;
   $8 = $60;
  }
  STACKTOP = sp;return;
 }
}
function _DupNamedColorList($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = (_cmsDupNamedColorList($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _FreeNamedColorList($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 _cmsFreeNamedColorList($6);
 STACKTOP = sp;return;
}
function __cmsQuickSaturateWord_362($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 65535.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord_364($9)|0);
    $1 = $10;
    break;
   }
  }
 } while(0);
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function __cmsQuickFloorWord_364($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 32767.0;
 $4 = (__cmsQuickFloor_365($3)|0);
 $5 = $4&65535;
 $6 = $5&65535;
 $7 = (($6) + 32767)|0;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsQuickFloor_365($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function _cmsAllocProfileSequenceDescription($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7|0)==(0);
 if ($8) {
  $2 = 0;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $9 = $4;
 $10 = ($9>>>0)>(255);
 if ($10) {
  $2 = 0;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $11 = $3;
 $12 = (__cmsMallocZero($11,12)|0);
 $5 = $12;
 $13 = $5;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $2 = 0;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $15 = $3;
 $16 = $5;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = $15;
 $18 = $3;
 $19 = $4;
 $20 = (__cmsCalloc($18,$19,48)|0);
 $21 = $5;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = $4;
 $24 = $5;
 HEAP32[$24>>2] = $23;
 $25 = $5;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = $3;
  $30 = $5;
  __cmsFree($29,$30);
  $2 = 0;
  $54 = $2;
  STACKTOP = sp;return ($54|0);
 }
 $6 = 0;
 while(1) {
  $31 = $6;
  $32 = $4;
  $33 = ($31>>>0)<($32>>>0);
  $34 = $5;
  if (!($33)) {
   break;
  }
  $35 = ((($34)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $6;
  $38 = (($36) + (($37*48)|0)|0);
  $39 = ((($38)) + 36|0);
  HEAP32[$39>>2] = 0;
  $40 = $5;
  $41 = ((($40)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $6;
  $44 = (($42) + (($43*48)|0)|0);
  $45 = ((($44)) + 40|0);
  HEAP32[$45>>2] = 0;
  $46 = $5;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $6;
  $50 = (($48) + (($49*48)|0)|0);
  $51 = ((($50)) + 44|0);
  HEAP32[$51>>2] = 0;
  $52 = $6;
  $53 = (($52) + 1)|0;
  $6 = $53;
 }
 $2 = $34;
 $54 = $2;
 STACKTOP = sp;return ($54|0);
}
function _cmsFreeProfileSequenceDescription($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = $1;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3>>>0)<($5>>>0);
  $7 = $1;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  if (!($6)) {
   break;
  }
  $10 = $2;
  $11 = (($9) + (($10*48)|0)|0);
  $12 = ((($11)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $1;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $2;
   $19 = (($17) + (($18*48)|0)|0);
   $20 = ((($19)) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   _cmsMLUfree($21);
  }
  $22 = $1;
  $23 = ((($22)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = (($24) + (($25*48)|0)|0);
  $27 = ((($26)) + 40|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $1;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $2;
   $34 = (($32) + (($33*48)|0)|0);
   $35 = ((($34)) + 40|0);
   $36 = HEAP32[$35>>2]|0;
   _cmsMLUfree($36);
  }
  $37 = $1;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $2;
  $41 = (($39) + (($40*48)|0)|0);
  $42 = ((($41)) + 44|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)!=(0|0);
  if ($44) {
   $45 = $1;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $2;
   $49 = (($47) + (($48*48)|0)|0);
   $50 = ((($49)) + 44|0);
   $51 = HEAP32[$50>>2]|0;
   _cmsMLUfree($51);
  }
  $52 = $2;
  $53 = (($52) + 1)|0;
  $2 = $53;
 }
 $54 = ($9|0)!=(0|0);
 if (!($54)) {
  $61 = $1;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $1;
  __cmsFree($63,$64);
  STACKTOP = sp;return;
 }
 $55 = $1;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $1;
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 __cmsFree($57,$60);
 $61 = $1;
 $62 = ((($61)) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $1;
 __cmsFree($63,$64);
 STACKTOP = sp;return;
}
function _cmsDupProfileSequenceDescription($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $143 = $1;
  STACKTOP = sp;return ($143|0);
 }
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__cmsMalloc($9,12)|0);
 $3 = $10;
 $11 = $3;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $1 = 0;
  $143 = $1;
  STACKTOP = sp;return ($143|0);
 }
 $13 = $2;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 $17 = HEAP32[$16>>2]|0;
 $18 = (__cmsCalloc($15,$17,48)|0);
 $19 = $3;
 $20 = ((($19)) + 8|0);
 HEAP32[$20>>2] = $18;
 $21 = $3;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $142 = $3;
  _cmsFreeProfileSequenceDescription($142);
  $1 = 0;
  $143 = $1;
  STACKTOP = sp;return ($143|0);
 }
 $25 = $2;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 $29 = ((($28)) + 4|0);
 HEAP32[$29>>2] = $27;
 $30 = $2;
 $31 = HEAP32[$30>>2]|0;
 $32 = $3;
 HEAP32[$32>>2] = $31;
 $4 = 0;
 while(1) {
  $33 = $4;
  $34 = $2;
  $35 = HEAP32[$34>>2]|0;
  $36 = ($33>>>0)<($35>>>0);
  $37 = $3;
  if (!($36)) {
   break;
  }
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $4;
  $41 = (($39) + (($40*48)|0)|0);
  $42 = ((($41)) + 8|0);
  $43 = $2;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $4;
  $47 = (($45) + (($46*48)|0)|0);
  $48 = ((($47)) + 8|0);
  _memmove(($42|0),($48|0),8)|0;
  $49 = $2;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $4;
  $53 = (($51) + (($52*48)|0)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $3;
  $56 = ((($55)) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $4;
  $59 = (($57) + (($58*48)|0)|0);
  HEAP32[$59>>2] = $54;
  $60 = $2;
  $61 = ((($60)) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $4;
  $64 = (($62) + (($63*48)|0)|0);
  $65 = ((($64)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $3;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $4;
  $71 = (($69) + (($70*48)|0)|0);
  $72 = ((($71)) + 4|0);
  HEAP32[$72>>2] = $66;
  $73 = $3;
  $74 = ((($73)) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $4;
  $77 = (($75) + (($76*48)|0)|0);
  $78 = ((($77)) + 20|0);
  $79 = $2;
  $80 = ((($79)) + 8|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $4;
  $83 = (($81) + (($82*48)|0)|0);
  $84 = ((($83)) + 20|0);
  _memmove(($78|0),($84|0),16)|0;
  $85 = $2;
  $86 = ((($85)) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $4;
  $89 = (($87) + (($88*48)|0)|0);
  $90 = ((($89)) + 16|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $3;
  $93 = ((($92)) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $4;
  $96 = (($94) + (($95*48)|0)|0);
  $97 = ((($96)) + 16|0);
  HEAP32[$97>>2] = $91;
  $98 = $2;
  $99 = ((($98)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $4;
  $102 = (($100) + (($101*48)|0)|0);
  $103 = ((($102)) + 36|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (_cmsMLUdup($104)|0);
  $106 = $3;
  $107 = ((($106)) + 8|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $4;
  $110 = (($108) + (($109*48)|0)|0);
  $111 = ((($110)) + 36|0);
  HEAP32[$111>>2] = $105;
  $112 = $2;
  $113 = ((($112)) + 8|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $4;
  $116 = (($114) + (($115*48)|0)|0);
  $117 = ((($116)) + 40|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (_cmsMLUdup($118)|0);
  $120 = $3;
  $121 = ((($120)) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $4;
  $124 = (($122) + (($123*48)|0)|0);
  $125 = ((($124)) + 40|0);
  HEAP32[$125>>2] = $119;
  $126 = $2;
  $127 = ((($126)) + 8|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $4;
  $130 = (($128) + (($129*48)|0)|0);
  $131 = ((($130)) + 44|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (_cmsMLUdup($132)|0);
  $134 = $3;
  $135 = ((($134)) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $4;
  $138 = (($136) + (($137*48)|0)|0);
  $139 = ((($138)) + 44|0);
  HEAP32[$139>>2] = $133;
  $140 = $4;
  $141 = (($140) + 1)|0;
  $4 = $141;
 }
 $1 = $37;
 $143 = $1;
 STACKTOP = sp;return ($143|0);
}
function _cmsDictAlloc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (__cmsMallocZero($4,8)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $8 = $2;
  $9 = $3;
  $10 = ((($9)) + 4|0);
  HEAP32[$10>>2] = $8;
  $11 = $3;
  $1 = $11;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _cmsDictFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $5 = $1;
 $2 = $5;
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((27400|0),(27421|0),866,(27451|0));
  // unreachable;
 }
 $8 = $2;
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 while(1) {
  $10 = $3;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $3;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = $3;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   _cmsMLUfree($18);
  }
  $19 = $3;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $3;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   _cmsMLUfree($25);
  }
  $26 = $3;
  $27 = ((($26)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $2;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $3;
   $34 = ((($33)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   __cmsFree($32,$35);
  }
  $36 = $3;
  $37 = ((($36)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0|0);
  if ($39) {
   $40 = $2;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $3;
   $44 = ((($43)) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   __cmsFree($42,$45);
  }
  $46 = $3;
  $47 = HEAP32[$46>>2]|0;
  $4 = $47;
  $48 = $2;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $3;
  __cmsFree($50,$51);
  $52 = $4;
  $3 = $52;
 }
 $53 = $2;
 $54 = ((($53)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $2;
 __cmsFree($55,$56);
 STACKTOP = sp;return;
}
function _cmsDictAddEntry($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $11 = $13;
 $14 = $11;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  ___assert_fail((27400|0),(27421|0),902,(27463|0));
  // unreachable;
 }
 $16 = $7;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  ___assert_fail((27479|0),(27421|0),903,(27463|0));
  // unreachable;
 }
 $18 = $11;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsMallocZero($20,20)|0);
 $12 = $21;
 $22 = $12;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $5 = 0;
  $51 = $5;
  STACKTOP = sp;return ($51|0);
 } else {
  $24 = $9;
  $25 = (_cmsMLUdup($24)|0);
  $26 = $12;
  $27 = ((($26)) + 4|0);
  HEAP32[$27>>2] = $25;
  $28 = $10;
  $29 = (_cmsMLUdup($28)|0);
  $30 = $12;
  $31 = ((($30)) + 8|0);
  HEAP32[$31>>2] = $29;
  $32 = $11;
  $33 = ((($32)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $7;
  $36 = (_DupWcs($34,$35)|0);
  $37 = $12;
  $38 = ((($37)) + 12|0);
  HEAP32[$38>>2] = $36;
  $39 = $11;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $8;
  $43 = (_DupWcs($41,$42)|0);
  $44 = $12;
  $45 = ((($44)) + 16|0);
  HEAP32[$45>>2] = $43;
  $46 = $11;
  $47 = HEAP32[$46>>2]|0;
  $48 = $12;
  HEAP32[$48>>2] = $47;
  $49 = $12;
  $50 = $11;
  HEAP32[$50>>2] = $49;
  $5 = 1;
  $51 = $5;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _DupWcs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $7 = $3;
  $8 = $4;
  $9 = $4;
  $10 = (_mywcslen($9)|0);
  $11 = (($10) + 1)|0;
  $12 = $11<<2;
  $13 = (__cmsDupMem($7,$8,$12)|0);
  $2 = $13;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _cmsDictDup($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $3 = $6;
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((27500|0),(27421|0),927,(27525|0));
  // unreachable;
 }
 $9 = $3;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_cmsDictAlloc($11)|0);
 $4 = $12;
 $13 = $4;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 $15 = $3;
 $16 = HEAP32[$15>>2]|0;
 $5 = $16;
 while(1) {
  $17 = $5;
  $18 = ($17|0)!=(0|0);
  $19 = $4;
  if (!($18)) {
   label = 10;
   break;
  }
  $20 = $5;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $5;
  $24 = ((($23)) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $5;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_cmsDictAddEntry($19,$22,$25,$28,$31)|0);
  $33 = ($32|0)!=(0);
  if (!($33)) {
   label = 8;
   break;
  }
  $35 = $5;
  $36 = HEAP32[$35>>2]|0;
  $5 = $36;
 }
 if ((label|0) == 8) {
  $34 = $4;
  _cmsDictFree($34);
  $1 = 0;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 10) {
  $1 = $19;
  $37 = $1;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _cmsDictGetEntryList($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
 } else {
  $7 = $3;
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _cmsDictNextEntry($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function __cmsOptimizePipeline($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $16 = $7;
 $17 = (__cmsContextGetClientChunk($16,12)|0);
 $13 = $17;
 $15 = 0;
 $18 = $12;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 2;
 $21 = ($20|0)!=(0);
 $22 = $8;
 $23 = HEAP32[$22>>2]|0;
 if ($21) {
  (_PreOptimize($23)|0);
  $24 = $8;
  $25 = $9;
  $26 = $10;
  $27 = $11;
  $28 = $12;
  $29 = (_OptimizeByResampling($24,$25,$26,$27,$28)|0);
  $6 = $29;
  $80 = $6;
  STACKTOP = sp;return ($80|0);
 }
 $30 = HEAP32[$23>>2]|0;
 $31 = ($30|0)==(0|0);
 $32 = $8;
 $33 = HEAP32[$32>>2]|0;
 if ($31) {
  $34 = $8;
  $35 = HEAP32[$34>>2]|0;
  __cmsPipelineSetOptimizationParameters($33,350,$35,0,0);
  $6 = 1;
  $80 = $6;
  STACKTOP = sp;return ($80|0);
 }
 $36 = (_PreOptimize($33)|0);
 $15 = $36;
 $37 = $8;
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if ($40) {
  $41 = $8;
  $42 = HEAP32[$41>>2]|0;
  $43 = $8;
  $44 = HEAP32[$43>>2]|0;
  __cmsPipelineSetOptimizationParameters($42,350,$44,0,0);
  $6 = 1;
  $80 = $6;
  STACKTOP = sp;return ($80|0);
 }
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 & 256;
 $48 = ($47|0)!=(0);
 if ($48) {
  $6 = 0;
  $80 = $6;
  STACKTOP = sp;return ($80|0);
 }
 $49 = $13;
 $50 = HEAP32[$49>>2]|0;
 $14 = $50;
 while(1) {
  $51 = $14;
  $52 = ($51|0)!=(0|0);
  if (!($52)) {
   break;
  }
  $53 = $14;
  $54 = HEAP32[$53>>2]|0;
  $55 = $8;
  $56 = $9;
  $57 = $10;
  $58 = $11;
  $59 = $12;
  $60 = (FUNCTION_TABLE_iiiiii[$54 & 511]($55,$56,$57,$58,$59)|0);
  $61 = ($60|0)!=(0);
  if ($61) {
   label = 12;
   break;
  }
  $62 = $14;
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $14 = $64;
 }
 if ((label|0) == 12) {
  $6 = 1;
  $80 = $6;
  STACKTOP = sp;return ($80|0);
 }
 $14 = 13316;
 while(1) {
  $65 = $14;
  $66 = ($65|0)!=(0|0);
  if (!($66)) {
   label = 19;
   break;
  }
  $67 = $14;
  $68 = HEAP32[$67>>2]|0;
  $69 = $8;
  $70 = $9;
  $71 = $10;
  $72 = $11;
  $73 = $12;
  $74 = (FUNCTION_TABLE_iiiiii[$68 & 511]($69,$70,$71,$72,$73)|0);
  $75 = ($74|0)!=(0);
  if ($75) {
   label = 17;
   break;
  }
  $76 = $14;
  $77 = ((($76)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $14 = $78;
 }
 if ((label|0) == 17) {
  $6 = 1;
  $80 = $6;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 19) {
  $79 = $15;
  $6 = $79;
  $80 = $6;
  STACKTOP = sp;return ($80|0);
 }
 return (0)|0;
}
function _PreOptimize($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = 0;
  $4 = $1;
  $5 = (__Remove1Op($4,1768189472)|0);
  $6 = $3;
  $7 = $6 | $5;
  $3 = $7;
  $8 = $1;
  $9 = (__Remove2Op($8,1815246880,2016570400)|0);
  $10 = $3;
  $11 = $10 | $9;
  $3 = $11;
  $12 = $1;
  $13 = (__Remove2Op($12,2016570400,1815246880)|0);
  $14 = $3;
  $15 = $14 | $13;
  $3 = $15;
  $16 = $1;
  $17 = (__Remove2Op($16,874525216,840971296)|0);
  $18 = $3;
  $19 = $18 | $17;
  $3 = $19;
  $20 = $1;
  $21 = (__Remove2Op($20,840971296,874525216)|0);
  $22 = $3;
  $23 = $22 | $21;
  $3 = $23;
  $24 = $1;
  $25 = (__Remove2Op($24,1681026080,1815241760)|0);
  $26 = $3;
  $27 = $26 | $25;
  $3 = $27;
  $28 = $1;
  $29 = (__Remove2Op($28,1681029152,2016568352)|0);
  $30 = $3;
  $31 = $30 | $29;
  $3 = $31;
  $32 = $1;
  $33 = (__MultiplyMatrix($32)|0);
  $34 = $3;
  $35 = $34 | $33;
  $3 = $35;
  $36 = $3;
  $37 = ($36|0)!=(0);
  if ($37) {
   $2 = 1;
  }
  $38 = $3;
  $39 = ($38|0)!=(0);
  if (!($39)) {
   break;
  }
 }
 $40 = $2;
 STACKTOP = sp;return ($40|0);
}
function _OptimizeByResampling($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $15 = sp + 48|0;
 $16 = sp + 44|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $12 = 0;
 HEAP32[$15>>2] = 0;
 HEAP32[$16>>2] = 0;
 $20 = 0;
 $21 = 0;
 $28 = $8;
 $29 = HEAP32[$28>>2]|0;
 $30 = (__cmsFormatterIsFloat($29)|0);
 $31 = ($30|0)!=(0);
 if (!($31)) {
  $32 = $9;
  $33 = HEAP32[$32>>2]|0;
  $34 = (__cmsFormatterIsFloat($33)|0);
  $35 = ($34|0)!=(0);
  if (!($35)) {
   $36 = $8;
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 >>> 16;
   $39 = $38 & 31;
   $40 = (__cmsICCcolorSpace($39)|0);
   $18 = $40;
   $41 = $9;
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 >>> 16;
   $44 = $43 & 31;
   $45 = (__cmsICCcolorSpace($44)|0);
   $19 = $45;
   $46 = $18;
   $47 = ($46|0)==(0);
   $48 = $19;
   $49 = ($48|0)==(0);
   $or$cond = $47 | $49;
   if ($or$cond) {
    $5 = 0;
    $225 = $5;
    STACKTOP = sp;return ($225|0);
   }
   $50 = $18;
   $51 = $10;
   $52 = HEAP32[$51>>2]|0;
   $53 = (__cmsReasonableGridpointsByColorspace($50,$52)|0);
   $17 = $53;
   $54 = $6;
   $55 = HEAP32[$54>>2]|0;
   $56 = (_cmsPipelineStageCount($55)|0);
   $57 = ($56|0)==(0);
   if ($57) {
    $17 = 2;
   }
   $58 = $6;
   $59 = HEAP32[$58>>2]|0;
   $11 = $59;
   $60 = $11;
   $61 = (_cmsPipelineGetPtrToFirstStage($60)|0);
   $13 = $61;
   while(1) {
    $62 = $13;
    $63 = ($62|0)!=(0|0);
    if (!($63)) {
     break;
    }
    $64 = $13;
    $65 = (_cmsStageType($64)|0);
    $66 = ($65|0)==(1852009504);
    if ($66) {
     label = 11;
     break;
    }
    $67 = $13;
    $68 = (_cmsStageNext($67)|0);
    $13 = $68;
   }
   if ((label|0) == 11) {
    $5 = 0;
    $225 = $5;
    STACKTOP = sp;return ($225|0);
   }
   $69 = $11;
   $70 = ((($69)) + 32|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $11;
   $73 = ((($72)) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $11;
   $76 = ((($75)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_cmsPipelineAlloc($71,$74,$77)|0);
   $12 = $78;
   $79 = $12;
   $80 = ($79|0)!=(0|0);
   if (!($80)) {
    $5 = 0;
    $225 = $5;
    STACKTOP = sp;return ($225|0);
   }
   $81 = $10;
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 & 16;
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = $11;
    $86 = (_cmsPipelineGetPtrToFirstStage($85)|0);
    $26 = $86;
    $87 = $26;
    $88 = ($87|0)!=(0|0);
    if ($88) {
     $89 = $26;
     $90 = ((($89)) + 4|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(1668707188);
     if ($92) {
      $93 = $26;
      $94 = (_AllCurvesAreLinear($93)|0);
      $95 = ($94|0)!=(0);
      if ($95) {
       label = 21;
      } else {
       $96 = $26;
       $97 = (_cmsStageDup($96)|0);
       $20 = $97;
       $98 = $12;
       $99 = $20;
       $100 = (_cmsPipelineInsertStage($98,0,$99)|0);
       $101 = ($100|0)!=(0);
       if ($101) {
        $102 = $11;
        _cmsPipelineUnlinkStage($102,0,$15);
        label = 21;
       }
      }
     } else {
      label = 21;
     }
    } else {
     label = 21;
    }
   } else {
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $103 = $11;
     $104 = ((($103)) + 32|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $17;
     $107 = $11;
     $108 = ((($107)) + 4|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = $11;
     $111 = ((($110)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (_cmsStageAllocCLut16bit($105,$106,$109,$112,0)|0);
     $14 = $113;
     $114 = $14;
     $115 = ($114|0)==(0|0);
     if (!($115)) {
      $116 = $12;
      $117 = $14;
      $118 = (_cmsPipelineInsertStage($116,1,$117)|0);
      $119 = ($118|0)!=(0);
      if ($119) {
       $120 = $10;
       $121 = HEAP32[$120>>2]|0;
       $122 = $121 & 1;
       $123 = ($122|0)!=(0);
       if ($123) {
        $124 = $11;
        $125 = (_cmsPipelineGetPtrToLastStage($124)|0);
        $27 = $125;
        $126 = $27;
        $127 = ($126|0)!=(0|0);
        if ($127) {
         $128 = $27;
         $129 = (_cmsStageType($128)|0);
         $130 = ($129|0)==(1668707188);
         if ($130) {
          $131 = $27;
          $132 = (_AllCurvesAreLinear($131)|0);
          $133 = ($132|0)!=(0);
          if (!($133)) {
           $134 = $27;
           $135 = (_cmsStageDup($134)|0);
           $21 = $135;
           $136 = $12;
           $137 = $21;
           $138 = (_cmsPipelineInsertStage($136,1,$137)|0);
           $139 = ($138|0)!=(0);
           if (!($139)) {
            break;
           }
           $140 = $11;
           _cmsPipelineUnlinkStage($140,1,$16);
          }
         }
        }
       }
       $141 = $14;
       $142 = $11;
       $143 = (_cmsStageSampleCLut16bit($141,351,$142,0)|0);
       $144 = ($143|0)!=(0);
       if ($144) {
        $158 = HEAP32[$15>>2]|0;
        $159 = ($158|0)!=(0|0);
        if ($159) {
         $160 = HEAP32[$15>>2]|0;
         _cmsStageFree($160);
        }
        $161 = HEAP32[$16>>2]|0;
        $162 = ($161|0)!=(0|0);
        if ($162) {
         $163 = HEAP32[$16>>2]|0;
         _cmsStageFree($163);
        }
        $164 = $11;
        _cmsPipelineFree($164);
        $165 = $14;
        $166 = ((($165)) + 32|0);
        $167 = HEAP32[$166>>2]|0;
        $22 = $167;
        $168 = $20;
        $169 = ($168|0)==(0|0);
        if ($169) {
         $23 = 0;
        } else {
         $170 = $20;
         $171 = ((($170)) + 32|0);
         $172 = HEAP32[$171>>2]|0;
         $173 = ((($172)) + 4|0);
         $174 = HEAP32[$173>>2]|0;
         $23 = $174;
        }
        $175 = $21;
        $176 = ($175|0)==(0|0);
        if ($176) {
         $24 = 0;
        } else {
         $177 = $21;
         $178 = ((($177)) + 32|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = ((($179)) + 4|0);
         $181 = HEAP32[$180>>2]|0;
         $24 = $181;
        }
        $182 = $23;
        $183 = ($182|0)==(0|0);
        $184 = $24;
        $185 = ($184|0)==(0|0);
        $or$cond3 = $183 & $185;
        $186 = $12;
        if ($or$cond3) {
         $187 = $22;
         $188 = ((($187)) + 4|0);
         $189 = HEAP32[$188>>2]|0;
         $190 = ((($189)) + 116|0);
         $191 = HEAP32[$190>>2]|0;
         $192 = $22;
         $193 = ((($192)) + 4|0);
         $194 = HEAP32[$193>>2]|0;
         __cmsPipelineSetOptimizationParameters($186,$191,$194,0,0);
        } else {
         $195 = ((($186)) + 32|0);
         $196 = HEAP32[$195>>2]|0;
         $197 = $22;
         $198 = ((($197)) + 4|0);
         $199 = HEAP32[$198>>2]|0;
         $200 = $12;
         $201 = ((($200)) + 4|0);
         $202 = HEAP32[$201>>2]|0;
         $203 = $23;
         $204 = $12;
         $205 = ((($204)) + 8|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = $24;
         $208 = (_PrelinOpt16alloc($196,$199,$202,$203,$206,$207)|0);
         $25 = $208;
         $209 = $12;
         $210 = $25;
         __cmsPipelineSetOptimizationParameters($209,352,$210,353,354);
        }
        $211 = $7;
        $212 = ($211|0)==(3);
        if ($212) {
         $213 = $10;
         $214 = HEAP32[$213>>2]|0;
         $215 = $214 | 4;
         HEAP32[$213>>2] = $215;
        }
        $216 = $10;
        $217 = HEAP32[$216>>2]|0;
        $218 = $217 & 4;
        $219 = ($218|0)!=(0);
        if (!($219)) {
         $220 = $12;
         $221 = $18;
         $222 = $19;
         (_FixWhiteMisalignment($220,$221,$222)|0);
        }
        $223 = $12;
        $224 = $6;
        HEAP32[$224>>2] = $223;
        $5 = 1;
        $225 = $5;
        STACKTOP = sp;return ($225|0);
       }
      }
     }
    }
   } while(0);
   $145 = HEAP32[$15>>2]|0;
   $146 = ($145|0)!=(0|0);
   if ($146) {
    $147 = $11;
    $148 = HEAP32[$15>>2]|0;
    $149 = (_cmsPipelineInsertStage($147,0,$148)|0);
    $150 = ($149|0)!=(0);
    if (!($150)) {
     ___assert_fail((28426|0),(27536|0),739,(27737|0));
     // unreachable;
    }
   }
   $151 = HEAP32[$16>>2]|0;
   $152 = ($151|0)!=(0|0);
   if ($152) {
    $153 = $11;
    $154 = HEAP32[$16>>2]|0;
    $155 = (_cmsPipelineInsertStage($153,1,$154)|0);
    $156 = ($155|0)!=(0);
    if (!($156)) {
     ___assert_fail((28426|0),(27536|0),744,(27737|0));
     // unreachable;
    }
   }
   $157 = $12;
   _cmsPipelineFree($157);
   $5 = 0;
   $225 = $5;
   STACKTOP = sp;return ($225|0);
  }
 }
 $5 = 0;
 $225 = $5;
 STACKTOP = sp;return ($225|0);
}
function _FastIdentity16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $6 = $8;
 $7 = 0;
 while(1) {
  $9 = $7;
  $10 = $6;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $3;
  $15 = $7;
  $16 = (($14) + ($15<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $4;
  $19 = $7;
  $20 = (($18) + ($19<<1)|0);
  HEAP16[$20>>1] = $17;
  $21 = $7;
  $22 = (($21) + 1)|0;
  $7 = $22;
 }
 STACKTOP = sp;return;
}
function _OptimizeByJoiningCurves($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $12 = sp + 104|0;
 $13 = sp + 40|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 $24 = $6;
 $25 = HEAP32[$24>>2]|0;
 $16 = $25;
 $17 = 0;
 $19 = 0;
 $26 = $8;
 $27 = HEAP32[$26>>2]|0;
 $28 = (__cmsFormatterIsFloat($27)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $30 = $9;
  $31 = HEAP32[$30>>2]|0;
  $32 = (__cmsFormatterIsFloat($31)|0);
  $33 = ($32|0)!=(0);
  if (!($33)) {
   $34 = $16;
   $35 = (_cmsPipelineGetPtrToFirstStage($34)|0);
   $18 = $35;
   while(1) {
    $36 = $18;
    $37 = ($36|0)!=(0|0);
    if (!($37)) {
     break;
    }
    $38 = $18;
    $39 = (_cmsStageType($38)|0);
    $40 = ($39|0)!=(1668707188);
    if ($40) {
     label = 7;
     break;
    }
    $41 = $18;
    $42 = (_cmsStageNext($41)|0);
    $18 = $42;
   }
   if ((label|0) == 7) {
    $5 = 0;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
   }
   $43 = $16;
   $44 = ((($43)) + 32|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $16;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $16;
   $50 = ((($49)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (_cmsPipelineAlloc($45,$48,$51)|0);
   $17 = $52;
   $53 = $17;
   $54 = ($53|0)==(0|0);
   if ($54) {
    $5 = 0;
    $245 = $5;
    STACKTOP = sp;return ($245|0);
   }
   $55 = $16;
   $56 = ((($55)) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $16;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (__cmsCalloc($57,$60,4)|0);
   $11 = $61;
   $62 = $11;
   $63 = ($62|0)==(0|0);
   L16: do {
    if (!($63)) {
     $14 = 0;
     while(1) {
      $64 = $14;
      $65 = $16;
      $66 = ((($65)) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($64>>>0)<($67>>>0);
      if (!($68)) {
       break;
      }
      $69 = $16;
      $70 = ((($69)) + 32|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (_cmsBuildTabulatedToneCurve16($71,4096,0)|0);
      $73 = $11;
      $74 = $14;
      $75 = (($73) + ($74<<2)|0);
      HEAP32[$75>>2] = $72;
      $76 = $11;
      $77 = $14;
      $78 = (($76) + ($77<<2)|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0|0);
      if ($80) {
       break L16;
      }
      $81 = $14;
      $82 = (($81) + 1)|0;
      $14 = $82;
     }
     $14 = 0;
     while(1) {
      $83 = $14;
      $84 = ($83>>>0)<(4096);
      if (!($84)) {
       break;
      }
      $15 = 0;
      while(1) {
       $85 = $15;
       $86 = $16;
       $87 = ((($86)) + 4|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ($85>>>0)<($88>>>0);
       if (!($89)) {
        break;
       }
       $90 = $14;
       $91 = (+($90>>>0));
       $92 = $91 / 4095.0;
       $93 = $92;
       $94 = $15;
       $95 = (($12) + ($94<<2)|0);
       HEAPF32[$95>>2] = $93;
       $96 = $15;
       $97 = (($96) + 1)|0;
       $15 = $97;
      }
      $98 = $16;
      _cmsPipelineEvalFloat($12,$13,$98);
      $15 = 0;
      while(1) {
       $99 = $15;
       $100 = $16;
       $101 = ((($100)) + 4|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ($99>>>0)<($102>>>0);
       if (!($103)) {
        break;
       }
       $104 = $15;
       $105 = (($13) + ($104<<2)|0);
       $106 = +HEAPF32[$105>>2];
       $107 = $106;
       $108 = $107 * 65535.0;
       $109 = (__cmsQuickSaturateWord_377($108)|0);
       $110 = $11;
       $111 = $15;
       $112 = (($110) + ($111<<2)|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = ((($113)) + 24|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = $14;
       $117 = (($115) + ($116<<1)|0);
       HEAP16[$117>>1] = $109;
       $118 = $15;
       $119 = (($118) + 1)|0;
       $15 = $119;
      }
      $120 = $14;
      $121 = (($120) + 1)|0;
      $14 = $121;
     }
     $122 = $16;
     $123 = ((($122)) + 32|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = $16;
     $126 = ((($125)) + 4|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $11;
     $129 = (_cmsStageAllocToneCurves($124,$127,$128)|0);
     $19 = $129;
     $130 = $19;
     $131 = ($130|0)==(0|0);
     if (!($131)) {
      $14 = 0;
      while(1) {
       $132 = $14;
       $133 = $16;
       $134 = ((($133)) + 4|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($132>>>0)<($135>>>0);
       $137 = $11;
       if (!($136)) {
        break;
       }
       $138 = $14;
       $139 = (($137) + ($138<<2)|0);
       $140 = HEAP32[$139>>2]|0;
       _cmsFreeToneCurve($140);
       $141 = $11;
       $142 = $14;
       $143 = (($141) + ($142<<2)|0);
       HEAP32[$143>>2] = 0;
       $144 = $14;
       $145 = (($144) + 1)|0;
       $14 = $145;
      }
      $146 = ($137|0)!=(0|0);
      if ($146) {
       $147 = $16;
       $148 = ((($147)) + 32|0);
       $149 = HEAP32[$148>>2]|0;
       $150 = $11;
       __cmsFree($149,$150);
       $11 = 0;
      }
      $151 = $19;
      $152 = (_AllCurvesAreLinear($151)|0);
      $153 = ($152|0)!=(0);
      do {
       if ($153) {
        $198 = $19;
        _cmsStageFree($198);
        $19 = 0;
        $199 = $17;
        $200 = $17;
        $201 = ((($200)) + 32|0);
        $202 = HEAP32[$201>>2]|0;
        $203 = $16;
        $204 = ((($203)) + 4|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = (_cmsStageAllocIdentity($202,$205)|0);
        $207 = (_cmsPipelineInsertStage($199,0,$206)|0);
        $208 = ($207|0)!=(0);
        if (!($208)) {
         break L16;
        }
        $209 = $10;
        $210 = HEAP32[$209>>2]|0;
        $211 = $210 | 64;
        HEAP32[$209>>2] = $211;
        $212 = $17;
        $213 = $17;
        __cmsPipelineSetOptimizationParameters($212,350,$213,0,0);
       } else {
        $154 = $17;
        $155 = $19;
        $156 = (_cmsPipelineInsertStage($154,0,$155)|0);
        $157 = ($156|0)!=(0);
        if (!($157)) {
         break L16;
        }
        $158 = $8;
        $159 = HEAP32[$158>>2]|0;
        $160 = (__cmsFormatterIs8bit($159)|0);
        $161 = ($160|0)!=(0);
        $162 = $19;
        if ($161) {
         $163 = ((($162)) + 32|0);
         $164 = HEAP32[$163>>2]|0;
         $20 = $164;
         $165 = $17;
         $166 = ((($165)) + 32|0);
         $167 = HEAP32[$166>>2]|0;
         $168 = $20;
         $169 = HEAP32[$168>>2]|0;
         $170 = $20;
         $171 = ((($170)) + 4|0);
         $172 = HEAP32[$171>>2]|0;
         $173 = (_CurvesAlloc($167,$169,256,$172)|0);
         $21 = $173;
         $174 = $21;
         $175 = ($174|0)==(0|0);
         if ($175) {
          break L16;
         }
         $176 = $10;
         $177 = HEAP32[$176>>2]|0;
         $178 = $177 | 64;
         HEAP32[$176>>2] = $178;
         $179 = $17;
         $180 = $21;
         __cmsPipelineSetOptimizationParameters($179,355,$180,356,357);
         break;
        } else {
         $181 = (_cmsStageData($162)|0);
         $22 = $181;
         $182 = $17;
         $183 = ((($182)) + 32|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = $22;
         $186 = HEAP32[$185>>2]|0;
         $187 = $22;
         $188 = ((($187)) + 4|0);
         $189 = HEAP32[$188>>2]|0;
         $190 = (_CurvesAlloc($184,$186,65536,$189)|0);
         $23 = $190;
         $191 = $23;
         $192 = ($191|0)==(0|0);
         if ($192) {
          break L16;
         }
         $193 = $10;
         $194 = HEAP32[$193>>2]|0;
         $195 = $194 | 64;
         HEAP32[$193>>2] = $195;
         $196 = $17;
         $197 = $23;
         __cmsPipelineSetOptimizationParameters($196,358,$197,356,357);
         break;
        }
       }
      } while(0);
      $214 = $16;
      _cmsPipelineFree($214);
      $215 = $17;
      $216 = $6;
      HEAP32[$216>>2] = $215;
      $5 = 1;
      $245 = $5;
      STACKTOP = sp;return ($245|0);
     }
    }
   } while(0);
   $217 = $19;
   $218 = ($217|0)!=(0|0);
   if ($218) {
    $219 = $19;
    _cmsStageFree($219);
   }
   $220 = $11;
   $221 = ($220|0)!=(0|0);
   if ($221) {
    $14 = 0;
    while(1) {
     $222 = $14;
     $223 = $16;
     $224 = ((($223)) + 4|0);
     $225 = HEAP32[$224>>2]|0;
     $226 = ($222>>>0)<($225>>>0);
     if (!($226)) {
      break;
     }
     $227 = $11;
     $228 = $14;
     $229 = (($227) + ($228<<2)|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = ($230|0)!=(0|0);
     if ($231) {
      $232 = $11;
      $233 = $14;
      $234 = (($232) + ($233<<2)|0);
      $235 = HEAP32[$234>>2]|0;
      _cmsFreeToneCurve($235);
     }
     $236 = $14;
     $237 = (($236) + 1)|0;
     $14 = $237;
    }
    $238 = $16;
    $239 = ((($238)) + 32|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $11;
    __cmsFree($240,$241);
   }
   $242 = $17;
   $243 = ($242|0)!=(0|0);
   if ($243) {
    $244 = $17;
    _cmsPipelineFree($244);
   }
   $5 = 0;
   $245 = $5;
   STACKTOP = sp;return ($245|0);
  }
 }
 $5 = 0;
 $245 = $5;
 STACKTOP = sp;return ($245|0);
}
function _OptimizeMatrixShaper($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0;
 var $vararg_ptr18 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer11 = sp + 104|0;
 $vararg_buffer = sp + 72|0;
 $11 = sp + 176|0;
 $12 = sp + 172|0;
 $13 = sp + 168|0;
 $14 = sp + 164|0;
 $15 = sp;
 $17 = sp + 156|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $25 = $8;
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 >>> 3;
 $28 = $27 & 15;
 $29 = ($28|0)!=(3);
 if (!($29)) {
  $30 = $9;
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 >>> 3;
  $33 = $32 & 15;
  $34 = ($33|0)!=(3);
  if (!($34)) {
   $35 = $8;
   $36 = HEAP32[$35>>2]|0;
   $37 = (__cmsFormatterIs8bit($36)|0);
   $38 = ($37|0)!=(0);
   if (!($38)) {
    $5 = 0;
    $135 = $5;
    STACKTOP = sp;return ($135|0);
   }
   $39 = $6;
   $40 = HEAP32[$39>>2]|0;
   $18 = $40;
   $16 = 0;
   $41 = $18;
   HEAP32[$vararg_buffer>>2] = 1668707188;
   $vararg_ptr4 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 1835103334;
   $vararg_ptr5 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = 1835103334;
   $vararg_ptr6 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr6>>2] = 1668707188;
   $vararg_ptr7 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr7>>2] = $11;
   $vararg_ptr8 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr8>>2] = $13;
   $vararg_ptr9 = ((($vararg_buffer)) + 24|0);
   HEAP32[$vararg_ptr9>>2] = $14;
   $vararg_ptr10 = ((($vararg_buffer)) + 28|0);
   HEAP32[$vararg_ptr10>>2] = $12;
   $42 = (_cmsPipelineCheckAndRetreiveStages($41,4,$vararg_buffer)|0);
   $43 = ($42|0)!=(0);
   do {
    if ($43) {
     $44 = HEAP32[$13>>2]|0;
     $45 = (_cmsStageData($44)|0);
     $20 = $45;
     $46 = HEAP32[$14>>2]|0;
     $47 = (_cmsStageData($46)|0);
     $21 = $47;
     $48 = $20;
     $49 = ((($48)) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)!=(0|0);
     if ($51) {
      $5 = 0;
      $135 = $5;
      STACKTOP = sp;return ($135|0);
     } else {
      $52 = $21;
      $53 = HEAP32[$52>>2]|0;
      $54 = $20;
      $55 = HEAP32[$54>>2]|0;
      __cmsMAT3per($15,$53,$55);
      $56 = $21;
      $57 = ((($56)) + 4|0);
      $58 = HEAP32[$57>>2]|0;
      $19 = $58;
      $59 = (__cmsMAT3isIdentity($15)|0);
      $60 = ($59|0)!=(0);
      $61 = $19;
      $62 = ($61|0)==(0|0);
      $or$cond = $60 & $62;
      if (!($or$cond)) {
       break;
      }
      $16 = 1;
      break;
     }
    } else {
     $63 = $18;
     HEAP32[$vararg_buffer11>>2] = 1668707188;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = 1835103334;
     $vararg_ptr15 = ((($vararg_buffer11)) + 8|0);
     HEAP32[$vararg_ptr15>>2] = 1668707188;
     $vararg_ptr16 = ((($vararg_buffer11)) + 12|0);
     HEAP32[$vararg_ptr16>>2] = $11;
     $vararg_ptr17 = ((($vararg_buffer11)) + 16|0);
     HEAP32[$vararg_ptr17>>2] = $13;
     $vararg_ptr18 = ((($vararg_buffer11)) + 20|0);
     HEAP32[$vararg_ptr18>>2] = $12;
     $64 = (_cmsPipelineCheckAndRetreiveStages($63,3,$vararg_buffer11)|0);
     $65 = ($64|0)!=(0);
     if ($65) {
      $66 = HEAP32[$13>>2]|0;
      $67 = (_cmsStageData($66)|0);
      $22 = $67;
      $68 = $22;
      $69 = HEAP32[$68>>2]|0;
      dest=$15; src=$69; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $70 = $22;
      $71 = ((($70)) + 4|0);
      $72 = HEAP32[$71>>2]|0;
      $19 = $72;
      $73 = (__cmsMAT3isIdentity($15)|0);
      $74 = ($73|0)!=(0);
      $75 = $19;
      $76 = ($75|0)==(0|0);
      $or$cond3 = $74 & $76;
      if (!($or$cond3)) {
       break;
      }
      $16 = 1;
      break;
     } else {
      $5 = 0;
      $135 = $5;
      STACKTOP = sp;return ($135|0);
     }
    }
   } while(0);
   $77 = $18;
   $78 = ((($77)) + 32|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $18;
   $81 = ((($80)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $18;
   $84 = ((($83)) + 8|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (_cmsPipelineAlloc($79,$82,$85)|0);
   HEAP32[$17>>2] = $86;
   $87 = HEAP32[$17>>2]|0;
   $88 = ($87|0)!=(0|0);
   if (!($88)) {
    $5 = 0;
    $135 = $5;
    STACKTOP = sp;return ($135|0);
   }
   $89 = HEAP32[$17>>2]|0;
   $90 = HEAP32[$11>>2]|0;
   $91 = (_cmsStageDup($90)|0);
   $92 = (_cmsPipelineInsertStage($89,0,$91)|0);
   $93 = ($92|0)!=(0);
   do {
    if ($93) {
     $94 = $16;
     $95 = ($94|0)!=(0);
     if (!($95)) {
      $96 = HEAP32[$17>>2]|0;
      $97 = HEAP32[$17>>2]|0;
      $98 = ((($97)) + 32|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $19;
      $101 = (_cmsStageAllocMatrix($99,3,3,$15,$100)|0);
      $102 = (_cmsPipelineInsertStage($96,1,$101)|0);
      $103 = ($102|0)!=(0);
      if (!($103)) {
       break;
      }
     }
     $104 = HEAP32[$17>>2]|0;
     $105 = HEAP32[$12>>2]|0;
     $106 = (_cmsStageDup($105)|0);
     $107 = (_cmsPipelineInsertStage($104,1,$106)|0);
     $108 = ($107|0)!=(0);
     if ($108) {
      $109 = $16;
      $110 = ($109|0)!=(0);
      if ($110) {
       $111 = $7;
       $112 = $8;
       $113 = $9;
       $114 = $10;
       (_OptimizeByJoiningCurves($17,$111,$112,$113,$114)|0);
      } else {
       $115 = HEAP32[$11>>2]|0;
       $116 = (_cmsStageData($115)|0);
       $23 = $116;
       $117 = HEAP32[$12>>2]|0;
       $118 = (_cmsStageData($117)|0);
       $24 = $118;
       $119 = $10;
       $120 = HEAP32[$119>>2]|0;
       $121 = $120 | 64;
       HEAP32[$119>>2] = $121;
       $122 = HEAP32[$17>>2]|0;
       $123 = $23;
       $124 = ((($123)) + 4|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = $19;
       $127 = $24;
       $128 = ((($127)) + 4|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = $9;
       (_SetMatShaper($122,$125,$15,$126,$129,$130)|0);
      }
      $131 = $18;
      _cmsPipelineFree($131);
      $132 = HEAP32[$17>>2]|0;
      $133 = $6;
      HEAP32[$133>>2] = $132;
      $5 = 1;
      $135 = $5;
      STACKTOP = sp;return ($135|0);
     }
    }
   } while(0);
   $134 = HEAP32[$17>>2]|0;
   _cmsPipelineFree($134);
   $5 = 0;
   $135 = $5;
   STACKTOP = sp;return ($135|0);
  }
 }
 $5 = 0;
 $135 = $5;
 STACKTOP = sp;return ($135|0);
}
function _OptimizeByComputingLinearization($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $13 = sp + 272|0;
 $14 = sp + 208|0;
 $18 = sp + 128|0;
 $19 = sp + 64|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $22 = 0;
 $23 = 0;
 $35 = $8;
 $36 = HEAP32[$35>>2]|0;
 $37 = (__cmsFormatterIsFloat($36)|0);
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $39 = $9;
  $40 = HEAP32[$39>>2]|0;
  $41 = (__cmsFormatterIsFloat($40)|0);
  $42 = ($41|0)!=(0);
  if (!($42)) {
   $43 = $8;
   $44 = HEAP32[$43>>2]|0;
   $45 = $44 >>> 16;
   $46 = $45 & 31;
   $47 = ($46|0)!=(4);
   if ($47) {
    $5 = 0;
    $378 = $5;
    STACKTOP = sp;return ($378|0);
   }
   $48 = $8;
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 >>> 12;
   $51 = $50 & 1;
   $52 = ($51|0)!=(0);
   if ($52) {
    $5 = 0;
    $378 = $5;
    STACKTOP = sp;return ($378|0);
   }
   $53 = $9;
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 >>> 16;
   $56 = $55 & 31;
   $57 = ($56|0)!=(4);
   if ($57) {
    $5 = 0;
    $378 = $5;
    STACKTOP = sp;return ($378|0);
   }
   $58 = $9;
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 >>> 12;
   $61 = $60 & 1;
   $62 = ($61|0)!=(0);
   if ($62) {
    $5 = 0;
    $378 = $5;
    STACKTOP = sp;return ($378|0);
   }
   $63 = $8;
   $64 = HEAP32[$63>>2]|0;
   $65 = (__cmsFormatterIs8bit($64)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    $67 = $10;
    $68 = HEAP32[$67>>2]|0;
    $69 = $68 & 16;
    $70 = ($69|0)!=(0);
    if (!($70)) {
     $5 = 0;
     $378 = $5;
     STACKTOP = sp;return ($378|0);
    }
   }
   $71 = $6;
   $72 = HEAP32[$71>>2]|0;
   $11 = $72;
   $73 = $11;
   $74 = (_cmsPipelineGetPtrToFirstStage($73)|0);
   $28 = $74;
   while(1) {
    $75 = $28;
    $76 = ($75|0)!=(0|0);
    if (!($76)) {
     break;
    }
    $77 = $28;
    $78 = (_cmsStageType($77)|0);
    $79 = ($78|0)==(1852009504);
    if ($79) {
     label = 18;
     break;
    }
    $80 = $28;
    $81 = (_cmsStageNext($80)|0);
    $28 = $81;
   }
   if ((label|0) == 18) {
    $5 = 0;
    $378 = $5;
    STACKTOP = sp;return ($378|0);
   }
   $82 = $8;
   $83 = HEAP32[$82>>2]|0;
   $84 = $83 >>> 16;
   $85 = $84 & 31;
   $86 = (__cmsICCcolorSpace($85)|0);
   $25 = $86;
   $87 = $9;
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 >>> 16;
   $90 = $89 & 31;
   $91 = (__cmsICCcolorSpace($90)|0);
   $26 = $91;
   $92 = $25;
   $93 = ($92|0)==(0);
   $94 = $26;
   $95 = ($94|0)==(0);
   $or$cond = $93 | $95;
   if ($or$cond) {
    $5 = 0;
    $378 = $5;
    STACKTOP = sp;return ($378|0);
   }
   $96 = $25;
   $97 = $10;
   $98 = HEAP32[$97>>2]|0;
   $99 = (__cmsReasonableGridpointsByColorspace($96,$98)|0);
   $12 = $99;
   dest=$13; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   dest=$14; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $100 = $11;
   $101 = (_cmsPipelineGetPtrToLastStage($100)|0);
   $31 = $101;
   $102 = $31;
   $103 = (_cmsStageType($102)|0);
   $104 = ($103|0)==(1668707188);
   L37: do {
    if ($104) {
     $105 = $31;
     $106 = (_cmsStageData($105)|0);
     $32 = $106;
     $16 = 0;
     while(1) {
      $107 = $16;
      $108 = $32;
      $109 = HEAP32[$108>>2]|0;
      $110 = ($107>>>0)<($109>>>0);
      if (!($110)) {
       label = 27;
       break L37;
      }
      $111 = $32;
      $112 = ((($111)) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = $16;
      $115 = (($113) + ($114<<2)|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (_IsDegenerated($116)|0);
      $118 = ($117|0)!=(0);
      if ($118) {
       break L37;
      }
      $119 = $16;
      $120 = (($119) + 1)|0;
      $16 = $120;
     }
    } else {
     label = 27;
    }
   } while(0);
   L43: do {
    if ((label|0) == 27) {
     $15 = 0;
     while(1) {
      $121 = $15;
      $122 = $11;
      $123 = ((($122)) + 4|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($121>>>0)<($124>>>0);
      if (!($125)) {
       break;
      }
      $126 = $11;
      $127 = ((($126)) + 32|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (_cmsBuildTabulatedToneCurve16($128,4096,0)|0);
      $130 = $15;
      $131 = (($13) + ($130<<2)|0);
      HEAP32[$131>>2] = $129;
      $132 = $15;
      $133 = (($13) + ($132<<2)|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       break L43;
      }
      $136 = $15;
      $137 = (($136) + 1)|0;
      $15 = $137;
     }
     $16 = 0;
     while(1) {
      $138 = $16;
      $139 = ($138>>>0)<(4096);
      if (!($139)) {
       break;
      }
      $140 = $16;
      $141 = (+($140>>>0));
      $142 = $141 / 4095.0;
      $143 = $142;
      $17 = $143;
      $15 = 0;
      while(1) {
       $144 = $15;
       $145 = $11;
       $146 = ((($145)) + 4|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ($144>>>0)<($147>>>0);
       if (!($148)) {
        break;
       }
       $149 = $17;
       $150 = $15;
       $151 = (($18) + ($150<<2)|0);
       HEAPF32[$151>>2] = $149;
       $152 = $15;
       $153 = (($152) + 1)|0;
       $15 = $153;
      }
      $154 = $11;
      _cmsPipelineEvalFloat($18,$19,$154);
      $15 = 0;
      while(1) {
       $155 = $15;
       $156 = $11;
       $157 = ((($156)) + 4|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ($155>>>0)<($158>>>0);
       if (!($159)) {
        break;
       }
       $160 = $15;
       $161 = (($19) + ($160<<2)|0);
       $162 = +HEAPF32[$161>>2];
       $163 = $162;
       $164 = $163 * 65535.0;
       $165 = (__cmsQuickSaturateWord_377($164)|0);
       $166 = $15;
       $167 = (($13) + ($166<<2)|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ((($168)) + 24|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = $16;
       $172 = (($170) + ($171<<1)|0);
       HEAP16[$172>>1] = $165;
       $173 = $15;
       $174 = (($173) + 1)|0;
       $15 = $174;
      }
      $175 = $16;
      $176 = (($175) + 1)|0;
      $16 = $176;
     }
     $15 = 0;
     while(1) {
      $177 = $15;
      $178 = $11;
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($177>>>0)<($180>>>0);
      if (!($181)) {
       break;
      }
      $182 = $15;
      $183 = (($13) + ($182<<2)|0);
      $184 = HEAP32[$183>>2]|0;
      _SlopeLimiting($184);
      $185 = $15;
      $186 = (($185) + 1)|0;
      $15 = $186;
     }
     $20 = 1;
     $21 = 1;
     $15 = 0;
     while(1) {
      $187 = $20;
      $188 = ($187|0)!=(0);
      if (!($188)) {
       break;
      }
      $189 = $15;
      $190 = $11;
      $191 = ((($190)) + 4|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = ($189>>>0)<($192>>>0);
      if (!($193)) {
       break;
      }
      $194 = $15;
      $195 = (($13) + ($194<<2)|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = (_cmsIsToneCurveLinear($196)|0);
      $198 = ($197|0)!=(0);
      if (!($198)) {
       $21 = 0;
      }
      $199 = $15;
      $200 = (($13) + ($199<<2)|0);
      $201 = HEAP32[$200>>2]|0;
      $202 = (_cmsIsToneCurveMonotonic($201)|0);
      $203 = ($202|0)!=(0);
      if (!($203)) {
       $20 = 0;
      }
      $204 = $15;
      $205 = (($13) + ($204<<2)|0);
      $206 = HEAP32[$205>>2]|0;
      $207 = (_IsDegenerated($206)|0);
      $208 = ($207|0)!=(0);
      if ($208) {
       $20 = 0;
      }
      $209 = $15;
      $210 = (($209) + 1)|0;
      $15 = $210;
     }
     $211 = $20;
     $212 = ($211|0)!=(0);
     if ($212) {
      $15 = 0;
      while(1) {
       $213 = $15;
       $214 = $11;
       $215 = ((($214)) + 4|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = ($213>>>0)<($216>>>0);
       if (!($217)) {
        break;
       }
       $218 = $15;
       $219 = (($13) + ($218<<2)|0);
       $220 = HEAP32[$219>>2]|0;
       $221 = (_cmsReverseToneCurveEx(4096,$220)|0);
       $222 = $15;
       $223 = (($14) + ($222<<2)|0);
       HEAP32[$223>>2] = $221;
       $224 = $15;
       $225 = (($14) + ($224<<2)|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($226|0)==(0|0);
       if ($227) {
        break L43;
       }
       $228 = $15;
       $229 = (($228) + 1)|0;
       $15 = $229;
      }
      $230 = $11;
      $231 = (_cmsPipelineDup($230)|0);
      $23 = $231;
      $232 = $23;
      $233 = ($232|0)==(0|0);
      if (!($233)) {
       $234 = $23;
       $235 = $11;
       $236 = ((($235)) + 32|0);
       $237 = HEAP32[$236>>2]|0;
       $238 = $11;
       $239 = ((($238)) + 4|0);
       $240 = HEAP32[$239>>2]|0;
       $241 = (_cmsStageAllocToneCurves($237,$240,$14)|0);
       $242 = (_cmsPipelineInsertStage($234,0,$241)|0);
       $243 = ($242|0)!=(0);
       if ($243) {
        $244 = $11;
        $245 = ((($244)) + 32|0);
        $246 = HEAP32[$245>>2]|0;
        $247 = $11;
        $248 = ((($247)) + 4|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = $11;
        $251 = ((($250)) + 8|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = (_cmsPipelineAlloc($246,$249,$252)|0);
        $22 = $253;
        $254 = $22;
        $255 = ($254|0)==(0|0);
        if (!($255)) {
         $256 = $11;
         $257 = ((($256)) + 32|0);
         $258 = HEAP32[$257>>2]|0;
         $259 = $11;
         $260 = ((($259)) + 4|0);
         $261 = HEAP32[$260>>2]|0;
         $262 = (_cmsStageAllocToneCurves($258,$261,$13)|0);
         $27 = $262;
         $263 = $22;
         $264 = $27;
         $265 = (_cmsPipelineInsertStage($263,0,$264)|0);
         $266 = ($265|0)!=(0);
         if ($266) {
          $267 = $11;
          $268 = ((($267)) + 32|0);
          $269 = HEAP32[$268>>2]|0;
          $270 = $12;
          $271 = $11;
          $272 = ((($271)) + 4|0);
          $273 = HEAP32[$272>>2]|0;
          $274 = $11;
          $275 = ((($274)) + 8|0);
          $276 = HEAP32[$275>>2]|0;
          $277 = (_cmsStageAllocCLut16bit($269,$270,$273,$276,0)|0);
          $24 = $277;
          $278 = $22;
          $279 = $24;
          $280 = (_cmsPipelineInsertStage($278,1,$279)|0);
          $281 = ($280|0)!=(0);
          if ($281) {
           $282 = $24;
           $283 = $23;
           $284 = (_cmsStageSampleCLut16bit($282,351,$283,0)|0);
           $285 = ($284|0)!=(0);
           if ($285) {
            $15 = 0;
            while(1) {
             $286 = $15;
             $287 = $11;
             $288 = ((($287)) + 4|0);
             $289 = HEAP32[$288>>2]|0;
             $290 = ($286>>>0)<($289>>>0);
             if (!($290)) {
              break;
             }
             $291 = $15;
             $292 = (($13) + ($291<<2)|0);
             $293 = HEAP32[$292>>2]|0;
             $294 = ($293|0)!=(0|0);
             if ($294) {
              $295 = $15;
              $296 = (($13) + ($295<<2)|0);
              $297 = HEAP32[$296>>2]|0;
              _cmsFreeToneCurve($297);
             }
             $298 = $15;
             $299 = (($14) + ($298<<2)|0);
             $300 = HEAP32[$299>>2]|0;
             $301 = ($300|0)!=(0|0);
             if ($301) {
              $302 = $15;
              $303 = (($14) + ($302<<2)|0);
              $304 = HEAP32[$303>>2]|0;
              _cmsFreeToneCurve($304);
             }
             $305 = $15;
             $306 = (($305) + 1)|0;
             $15 = $306;
            }
            $307 = $23;
            _cmsPipelineFree($307);
            $308 = $27;
            $309 = (__cmsStageGetPtrToCurveSet($308)|0);
            $29 = $309;
            $310 = $24;
            $311 = ((($310)) + 32|0);
            $312 = HEAP32[$311>>2]|0;
            $30 = $312;
            $313 = $8;
            $314 = HEAP32[$313>>2]|0;
            $315 = (__cmsFormatterIs8bit($314)|0);
            $316 = ($315|0)!=(0);
            $317 = $22;
            $318 = ((($317)) + 32|0);
            $319 = HEAP32[$318>>2]|0;
            $320 = $30;
            $321 = ((($320)) + 4|0);
            $322 = HEAP32[$321>>2]|0;
            $323 = $29;
            do {
             if ($316) {
              $324 = (_PrelinOpt8alloc($319,$322,$323)|0);
              $33 = $324;
              $325 = $33;
              $326 = ($325|0)==(0|0);
              if (!($326)) {
               $327 = $22;
               $328 = $33;
               __cmsPipelineSetOptimizationParameters($327,359,$328,360,361);
               break;
              }
              $5 = 0;
              $378 = $5;
              STACKTOP = sp;return ($378|0);
             } else {
              $329 = (_PrelinOpt16alloc($319,$322,3,$323,3,0)|0);
              $34 = $329;
              $330 = $34;
              $331 = ($330|0)==(0|0);
              if (!($331)) {
               $332 = $22;
               $333 = $34;
               __cmsPipelineSetOptimizationParameters($332,352,$333,353,354);
               break;
              }
              $5 = 0;
              $378 = $5;
              STACKTOP = sp;return ($378|0);
             }
            } while(0);
            $334 = $7;
            $335 = ($334|0)==(3);
            if ($335) {
             $336 = $10;
             $337 = HEAP32[$336>>2]|0;
             $338 = $337 | 4;
             HEAP32[$336>>2] = $338;
            }
            $339 = $10;
            $340 = HEAP32[$339>>2]|0;
            $341 = $340 & 4;
            $342 = ($341|0)!=(0);
            do {
             if (!($342)) {
              $343 = $22;
              $344 = $25;
              $345 = $26;
              $346 = (_FixWhiteMisalignment($343,$344,$345)|0);
              $347 = ($346|0)!=(0);
              if ($347) {
               break;
              }
              $5 = 0;
              $378 = $5;
              STACKTOP = sp;return ($378|0);
             }
            } while(0);
            $348 = $11;
            _cmsPipelineFree($348);
            $349 = $22;
            $350 = $6;
            HEAP32[$350>>2] = $349;
            $5 = 1;
            $378 = $5;
            STACKTOP = sp;return ($378|0);
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   $15 = 0;
   while(1) {
    $351 = $15;
    $352 = $11;
    $353 = ((($352)) + 4|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ($351>>>0)<($354>>>0);
    if (!($355)) {
     break;
    }
    $356 = $15;
    $357 = (($13) + ($356<<2)|0);
    $358 = HEAP32[$357>>2]|0;
    $359 = ($358|0)!=(0|0);
    if ($359) {
     $360 = $15;
     $361 = (($13) + ($360<<2)|0);
     $362 = HEAP32[$361>>2]|0;
     _cmsFreeToneCurve($362);
    }
    $363 = $15;
    $364 = (($14) + ($363<<2)|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = ($365|0)!=(0|0);
    if ($366) {
     $367 = $15;
     $368 = (($14) + ($367<<2)|0);
     $369 = HEAP32[$368>>2]|0;
     _cmsFreeToneCurve($369);
    }
    $370 = $15;
    $371 = (($370) + 1)|0;
    $15 = $371;
   }
   $372 = $23;
   $373 = ($372|0)!=(0|0);
   if ($373) {
    $374 = $23;
    _cmsPipelineFree($374);
   }
   $375 = $22;
   $376 = ($375|0)!=(0|0);
   if ($376) {
    $377 = $22;
    _cmsPipelineFree($377);
   }
   $5 = 0;
   $378 = $5;
   STACKTOP = sp;return ($378|0);
  }
 }
 $5 = 0;
 $378 = $5;
 STACKTOP = sp;return ($378|0);
}
function _IsDegenerated($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $4 = 0;
 $5 = 0;
 $7 = $2;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $6 = $9;
 $3 = 0;
 while(1) {
  $10 = $3;
  $11 = $6;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   break;
  }
  $13 = $2;
  $14 = ((($13)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $3;
  $17 = (($15) + ($16<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = $4;
   $22 = (($21) + 1)|0;
   $4 = $22;
  }
  $23 = $2;
  $24 = ((($23)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $3;
  $27 = (($25) + ($26<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28&65535;
  $30 = ($29|0)==(65535);
  if ($30) {
   $31 = $5;
   $32 = (($31) + 1)|0;
   $5 = $32;
  }
  $33 = $3;
  $34 = (($33) + 1)|0;
  $3 = $34;
 }
 $35 = $4;
 $36 = ($35|0)==(1);
 $37 = $5;
 $38 = ($37|0)==(1);
 $or$cond = $36 & $38;
 if ($or$cond) {
  $1 = 0;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 $39 = $4;
 $40 = $6;
 $41 = (($40>>>0) / 20)&-1;
 $42 = ($39>>>0)>($41>>>0);
 if ($42) {
  $1 = 1;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 $43 = $5;
 $44 = $6;
 $45 = (($44>>>0) / 20)&-1;
 $46 = ($43>>>0)>($45>>>0);
 if ($46) {
  $1 = 1;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 } else {
  $1 = 0;
  $47 = $1;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function __cmsQuickSaturateWord_377($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 65535.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord_383($9)|0);
    $1 = $10;
    break;
   }
  }
 } while(0);
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function _SlopeLimiting($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0;
 var $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $10 = $1;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (+($12>>>0));
 $14 = $13 * 0.02;
 $15 = $14 + 0.5;
 $16 = (+Math_floor((+$15)));
 $17 = (~~(($16)));
 $4 = $17;
 $18 = $1;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $4;
 $22 = (($20) - ($21))|0;
 $23 = (($22) - 1)|0;
 $5 = $23;
 $24 = $1;
 $25 = (_cmsIsToneCurveDescending($24)|0);
 $26 = ($25|0)!=(0);
 if ($26) {
  $2 = 65535;
  $3 = 0;
 } else {
  $2 = 0;
  $3 = 65535;
 }
 $27 = $1;
 $28 = ((($27)) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $4;
 $31 = (($29) + ($30<<1)|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = (+($32&65535));
 $6 = $33;
 $34 = $6;
 $35 = $2;
 $36 = (+($35|0));
 $37 = $34 - $36;
 $38 = $4;
 $39 = (+($38|0));
 $40 = $37 / $39;
 $7 = $40;
 $41 = $6;
 $42 = $7;
 $43 = $4;
 $44 = (+($43|0));
 $45 = $42 * $44;
 $46 = $41 - $45;
 $8 = $46;
 $9 = 0;
 while(1) {
  $47 = $9;
  $48 = $4;
  $49 = ($47|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $9;
  $51 = (+($50|0));
  $52 = $7;
  $53 = $51 * $52;
  $54 = $8;
  $55 = $53 + $54;
  $56 = (__cmsQuickSaturateWord_377($55)|0);
  $57 = $1;
  $58 = ((($57)) + 24|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $9;
  $61 = (($59) + ($60<<1)|0);
  HEAP16[$61>>1] = $56;
  $62 = $9;
  $63 = (($62) + 1)|0;
  $9 = $63;
 }
 $64 = $1;
 $65 = ((($64)) + 24|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $5;
 $68 = (($66) + ($67<<1)|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = (+($69&65535));
 $6 = $70;
 $71 = $3;
 $72 = (+($71|0));
 $73 = $6;
 $74 = $72 - $73;
 $75 = $4;
 $76 = (+($75|0));
 $77 = $74 / $76;
 $7 = $77;
 $78 = $6;
 $79 = $7;
 $80 = $5;
 $81 = (+($80|0));
 $82 = $79 * $81;
 $83 = $78 - $82;
 $8 = $83;
 $84 = $5;
 $9 = $84;
 while(1) {
  $85 = $9;
  $86 = $1;
  $87 = ((($86)) + 20|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($85|0)<($88|0);
  if (!($89)) {
   break;
  }
  $90 = $9;
  $91 = (+($90|0));
  $92 = $7;
  $93 = $91 * $92;
  $94 = $8;
  $95 = $93 + $94;
  $96 = (__cmsQuickSaturateWord_377($95)|0);
  $97 = $1;
  $98 = ((($97)) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $9;
  $101 = (($99) + ($100<<1)|0);
  HEAP16[$101>>1] = $96;
  $102 = $9;
  $103 = (($102) + 1)|0;
  $9 = $103;
 }
 STACKTOP = sp;return;
}
function _XFormSampler16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $7 = sp + 72|0;
 $8 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $5;
 $6 = $10;
 $11 = $6;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13>>>0)<(16);
 if (!($14)) {
  ___assert_fail((27665|0),(27536|0),415,(27693|0));
  // unreachable;
 }
 $15 = $6;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17>>>0)<(16);
 if (!($18)) {
  ___assert_fail((27708|0),(27536|0),416,(27693|0));
  // unreachable;
 }
 $9 = 0;
 while(1) {
  $19 = $9;
  $20 = $6;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = $3;
  $25 = $9;
  $26 = (($24) + ($25<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = (+($28|0));
  $30 = $29 / 65535.0;
  $31 = $30;
  $32 = $9;
  $33 = (($7) + ($32<<2)|0);
  HEAPF32[$33>>2] = $31;
  $34 = $9;
  $35 = (($34) + 1)|0;
  $9 = $35;
 }
 $36 = $6;
 _cmsPipelineEvalFloat($7,$8,$36);
 $9 = 0;
 while(1) {
  $37 = $9;
  $38 = $6;
  $39 = ((($38)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37>>>0)<($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $9;
  $43 = (($8) + ($42<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44;
  $46 = $45 * 65535.0;
  $47 = (__cmsQuickSaturateWord_377($46)|0);
  $48 = $4;
  $49 = $9;
  $50 = (($48) + ($49<<1)|0);
  HEAP16[$50>>1] = $47;
  $51 = $9;
  $52 = (($51) + 1)|0;
  $9 = $52;
 }
 STACKTOP = sp;return 1;
}
function _PrelinOpt8alloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 36|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = (__cmsMallocZero($13,4616)|0);
 $12 = $14;
 $15 = $12;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $3 = 0;
  $163 = $3;
  STACKTOP = sp;return ($163|0);
 }
 $7 = 0;
 while(1) {
  $17 = $7;
  $18 = ($17|0)<(256);
  if (!($18)) {
   break;
  }
  $19 = $6;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $6;
   $22 = HEAP32[$21>>2]|0;
   $23 = $7;
   $24 = $23&65535;
   $25 = $24&65535;
   $26 = $25 << 8;
   $27 = $7;
   $28 = $26 | $27;
   $29 = $28&65535;
   $30 = (_cmsEvalToneCurve16($22,$29)|0);
   HEAP16[$8>>1] = $30;
   $31 = $6;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $7;
   $35 = $34&65535;
   $36 = $35&65535;
   $37 = $36 << 8;
   $38 = $7;
   $39 = $37 | $38;
   $40 = $39&65535;
   $41 = (_cmsEvalToneCurve16($33,$40)|0);
   $42 = ((($8)) + 2|0);
   HEAP16[$42>>1] = $41;
   $43 = $6;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $7;
   $47 = $46&65535;
   $48 = $47&65535;
   $49 = $48 << 8;
   $50 = $7;
   $51 = $49 | $50;
   $52 = $51&65535;
   $53 = (_cmsEvalToneCurve16($45,$52)|0);
   $$sink = $53;
  } else {
   $54 = $7;
   $55 = $54&65535;
   $56 = $55&65535;
   $57 = $56 << 8;
   $58 = $7;
   $59 = $57 | $58;
   $60 = $59&65535;
   HEAP16[$8>>1] = $60;
   $61 = $7;
   $62 = $61&65535;
   $63 = $62&65535;
   $64 = $63 << 8;
   $65 = $7;
   $66 = $64 | $65;
   $67 = $66&65535;
   $68 = ((($8)) + 2|0);
   HEAP16[$68>>1] = $67;
   $69 = $7;
   $70 = $69&65535;
   $71 = $70&65535;
   $72 = $71 << 8;
   $73 = $7;
   $74 = $72 | $73;
   $75 = $74&65535;
   $$sink = $75;
  }
  $76 = ((($8)) + 4|0);
  HEAP16[$76>>1] = $$sink;
  $77 = HEAP16[$8>>1]|0;
  $78 = $77&65535;
  $79 = $5;
  $80 = ((($79)) + 48|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = Math_imul($78, $81)|0;
  $83 = (__cmsToFixedDomain_380($82)|0);
  $9 = $83;
  $84 = ((($8)) + 2|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = $85&65535;
  $87 = $5;
  $88 = ((($87)) + 48|0);
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = Math_imul($86, $90)|0;
  $92 = (__cmsToFixedDomain_380($91)|0);
  $10 = $92;
  $93 = ((($8)) + 4|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94&65535;
  $96 = $5;
  $97 = ((($96)) + 48|0);
  $98 = ((($97)) + 8|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = Math_imul($95, $99)|0;
  $101 = (__cmsToFixedDomain_380($100)|0);
  $11 = $101;
  $102 = $5;
  $103 = ((($102)) + 80|0);
  $104 = ((($103)) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $9;
  $107 = $106 >> 16;
  $108 = Math_imul($105, $107)|0;
  $109 = $12;
  $110 = ((($109)) + 1544|0);
  $111 = $7;
  $112 = (($110) + ($111<<2)|0);
  HEAP32[$112>>2] = $108;
  $113 = $5;
  $114 = ((($113)) + 80|0);
  $115 = ((($114)) + 4|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $10;
  $118 = $117 >> 16;
  $119 = Math_imul($116, $118)|0;
  $120 = $12;
  $121 = ((($120)) + 2568|0);
  $122 = $7;
  $123 = (($121) + ($122<<2)|0);
  HEAP32[$123>>2] = $119;
  $124 = $5;
  $125 = ((($124)) + 80|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $11;
  $128 = $127 >> 16;
  $129 = Math_imul($126, $128)|0;
  $130 = $12;
  $131 = ((($130)) + 3592|0);
  $132 = $7;
  $133 = (($131) + ($132<<2)|0);
  HEAP32[$133>>2] = $129;
  $134 = $9;
  $135 = $134 & 65535;
  $136 = $135&65535;
  $137 = $12;
  $138 = ((($137)) + 8|0);
  $139 = $7;
  $140 = (($138) + ($139<<1)|0);
  HEAP16[$140>>1] = $136;
  $141 = $10;
  $142 = $141 & 65535;
  $143 = $142&65535;
  $144 = $12;
  $145 = ((($144)) + 520|0);
  $146 = $7;
  $147 = (($145) + ($146<<1)|0);
  HEAP16[$147>>1] = $143;
  $148 = $11;
  $149 = $148 & 65535;
  $150 = $149&65535;
  $151 = $12;
  $152 = ((($151)) + 1032|0);
  $153 = $7;
  $154 = (($152) + ($153<<1)|0);
  HEAP16[$154>>1] = $150;
  $155 = $7;
  $156 = (($155) + 1)|0;
  $7 = $156;
 }
 $157 = $4;
 $158 = $12;
 HEAP32[$158>>2] = $157;
 $159 = $5;
 $160 = $12;
 $161 = ((($160)) + 4|0);
 HEAP32[$161>>2] = $159;
 $162 = $12;
 $3 = $162;
 $163 = $3;
 STACKTOP = sp;return ($163|0);
}
function _PrelinEval8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $28 = $5;
 $24 = $28;
 $29 = $24;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $25 = $31;
 $32 = $25;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $26 = $34;
 $35 = $25;
 $36 = ((($35)) + 112|0);
 $37 = HEAP32[$36>>2]|0;
 $27 = $37;
 $38 = $3;
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = $40 >> 8;
 $42 = $41&255;
 $6 = $42;
 $43 = $3;
 $44 = ((($43)) + 2|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $47 = $46 >> 8;
 $48 = $47&255;
 $7 = $48;
 $49 = $3;
 $50 = ((($49)) + 4|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51&65535;
 $53 = $52 >> 8;
 $54 = $53&255;
 $8 = $54;
 $55 = $24;
 $56 = ((($55)) + 1544|0);
 $57 = $6;
 $58 = $57&255;
 $59 = (($56) + ($58<<2)|0);
 $60 = HEAP32[$59>>2]|0;
 $19 = $60;
 $18 = $60;
 $61 = $24;
 $62 = ((($61)) + 2568|0);
 $63 = $7;
 $64 = $63&255;
 $65 = (($62) + ($64<<2)|0);
 $66 = HEAP32[$65>>2]|0;
 $21 = $66;
 $20 = $66;
 $67 = $24;
 $68 = ((($67)) + 3592|0);
 $69 = $8;
 $70 = $69&255;
 $71 = (($68) + ($70<<2)|0);
 $72 = HEAP32[$71>>2]|0;
 $23 = $72;
 $22 = $72;
 $73 = $24;
 $74 = ((($73)) + 8|0);
 $75 = $6;
 $76 = $75&255;
 $77 = (($74) + ($76<<1)|0);
 $78 = HEAP16[$77>>1]|0;
 $79 = $78&65535;
 $9 = $79;
 $80 = $24;
 $81 = ((($80)) + 520|0);
 $82 = $7;
 $83 = $82&255;
 $84 = (($81) + ($83<<1)|0);
 $85 = HEAP16[$84>>1]|0;
 $86 = $85&65535;
 $10 = $86;
 $87 = $24;
 $88 = ((($87)) + 1032|0);
 $89 = $8;
 $90 = $89&255;
 $91 = (($88) + ($90<<1)|0);
 $92 = HEAP16[$91>>1]|0;
 $93 = $92&65535;
 $11 = $93;
 $94 = $18;
 $95 = $9;
 $96 = ($95|0)==(0);
 if ($96) {
  $102 = 0;
 } else {
  $97 = $25;
  $98 = ((($97)) + 80|0);
  $99 = ((($98)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $102 = $100;
 }
 $101 = (($94) + ($102))|0;
 $19 = $101;
 $103 = $20;
 $104 = $10;
 $105 = ($104|0)==(0);
 if ($105) {
  $111 = 0;
 } else {
  $106 = $25;
  $107 = ((($106)) + 80|0);
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $111 = $109;
 }
 $110 = (($103) + ($111))|0;
 $21 = $110;
 $112 = $22;
 $113 = $11;
 $114 = ($113|0)==(0);
 if ($114) {
  $119 = 0;
 } else {
  $115 = $25;
  $116 = ((($115)) + 80|0);
  $117 = HEAP32[$116>>2]|0;
  $119 = $117;
 }
 $118 = (($112) + ($119))|0;
 $23 = $118;
 $17 = 0;
 while(1) {
  $120 = $17;
  $121 = $26;
  $122 = ($120|0)<($121|0);
  if (!($122)) {
   break;
  }
  $123 = $27;
  $124 = $18;
  $125 = $20;
  $126 = (($124) + ($125))|0;
  $127 = $22;
  $128 = (($126) + ($127))|0;
  $129 = $17;
  $130 = (($128) + ($129))|0;
  $131 = (($123) + ($130<<1)|0);
  $132 = HEAP16[$131>>1]|0;
  $133 = $132&65535;
  $12 = $133;
  $134 = $9;
  $135 = $10;
  $136 = ($134|0)>=($135|0);
  if ($136) {
   $137 = $10;
   $138 = $11;
   $139 = ($137|0)>=($138|0);
   if ($139) {
    $140 = $27;
    $141 = $19;
    $142 = $20;
    $143 = (($141) + ($142))|0;
    $144 = $22;
    $145 = (($143) + ($144))|0;
    $146 = $17;
    $147 = (($145) + ($146))|0;
    $148 = (($140) + ($147<<1)|0);
    $149 = HEAP16[$148>>1]|0;
    $150 = $149&65535;
    $151 = $12;
    $152 = (($150) - ($151))|0;
    $13 = $152;
    $153 = $27;
    $154 = $19;
    $155 = $21;
    $156 = (($154) + ($155))|0;
    $157 = $22;
    $158 = (($156) + ($157))|0;
    $159 = $17;
    $160 = (($158) + ($159))|0;
    $161 = (($153) + ($160<<1)|0);
    $162 = HEAP16[$161>>1]|0;
    $163 = $162&65535;
    $164 = $27;
    $165 = $19;
    $166 = $20;
    $167 = (($165) + ($166))|0;
    $168 = $22;
    $169 = (($167) + ($168))|0;
    $170 = $17;
    $171 = (($169) + ($170))|0;
    $172 = (($164) + ($171<<1)|0);
    $173 = HEAP16[$172>>1]|0;
    $174 = $173&65535;
    $175 = (($163) - ($174))|0;
    $14 = $175;
    $176 = $27;
    $177 = $19;
    $178 = $21;
    $179 = (($177) + ($178))|0;
    $180 = $23;
    $181 = (($179) + ($180))|0;
    $182 = $17;
    $183 = (($181) + ($182))|0;
    $184 = (($176) + ($183<<1)|0);
    $185 = HEAP16[$184>>1]|0;
    $186 = $185&65535;
    $187 = $27;
    $188 = $19;
    $189 = $21;
    $190 = (($188) + ($189))|0;
    $191 = $22;
    $192 = (($190) + ($191))|0;
    $193 = $17;
    $194 = (($192) + ($193))|0;
    $195 = (($187) + ($194<<1)|0);
    $196 = HEAP16[$195>>1]|0;
    $197 = $196&65535;
    $198 = (($186) - ($197))|0;
    $15 = $198;
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
  do {
   if ((label|0) == 12) {
    label = 0;
    $199 = $9;
    $200 = $11;
    $201 = ($199|0)>=($200|0);
    if ($201) {
     $202 = $11;
     $203 = $10;
     $204 = ($202|0)>=($203|0);
     if ($204) {
      $205 = $27;
      $206 = $19;
      $207 = $20;
      $208 = (($206) + ($207))|0;
      $209 = $22;
      $210 = (($208) + ($209))|0;
      $211 = $17;
      $212 = (($210) + ($211))|0;
      $213 = (($205) + ($212<<1)|0);
      $214 = HEAP16[$213>>1]|0;
      $215 = $214&65535;
      $216 = $12;
      $217 = (($215) - ($216))|0;
      $13 = $217;
      $218 = $27;
      $219 = $19;
      $220 = $21;
      $221 = (($219) + ($220))|0;
      $222 = $23;
      $223 = (($221) + ($222))|0;
      $224 = $17;
      $225 = (($223) + ($224))|0;
      $226 = (($218) + ($225<<1)|0);
      $227 = HEAP16[$226>>1]|0;
      $228 = $227&65535;
      $229 = $27;
      $230 = $19;
      $231 = $20;
      $232 = (($230) + ($231))|0;
      $233 = $23;
      $234 = (($232) + ($233))|0;
      $235 = $17;
      $236 = (($234) + ($235))|0;
      $237 = (($229) + ($236<<1)|0);
      $238 = HEAP16[$237>>1]|0;
      $239 = $238&65535;
      $240 = (($228) - ($239))|0;
      $14 = $240;
      $241 = $27;
      $242 = $19;
      $243 = $20;
      $244 = (($242) + ($243))|0;
      $245 = $23;
      $246 = (($244) + ($245))|0;
      $247 = $17;
      $248 = (($246) + ($247))|0;
      $249 = (($241) + ($248<<1)|0);
      $250 = HEAP16[$249>>1]|0;
      $251 = $250&65535;
      $252 = $27;
      $253 = $19;
      $254 = $20;
      $255 = (($253) + ($254))|0;
      $256 = $22;
      $257 = (($255) + ($256))|0;
      $258 = $17;
      $259 = (($257) + ($258))|0;
      $260 = (($252) + ($259<<1)|0);
      $261 = HEAP16[$260>>1]|0;
      $262 = $261&65535;
      $263 = (($251) - ($262))|0;
      $15 = $263;
      break;
     }
    }
    $264 = $11;
    $265 = $9;
    $266 = ($264|0)>=($265|0);
    if ($266) {
     $267 = $9;
     $268 = $10;
     $269 = ($267|0)>=($268|0);
     if ($269) {
      $270 = $27;
      $271 = $19;
      $272 = $20;
      $273 = (($271) + ($272))|0;
      $274 = $23;
      $275 = (($273) + ($274))|0;
      $276 = $17;
      $277 = (($275) + ($276))|0;
      $278 = (($270) + ($277<<1)|0);
      $279 = HEAP16[$278>>1]|0;
      $280 = $279&65535;
      $281 = $27;
      $282 = $18;
      $283 = $20;
      $284 = (($282) + ($283))|0;
      $285 = $23;
      $286 = (($284) + ($285))|0;
      $287 = $17;
      $288 = (($286) + ($287))|0;
      $289 = (($281) + ($288<<1)|0);
      $290 = HEAP16[$289>>1]|0;
      $291 = $290&65535;
      $292 = (($280) - ($291))|0;
      $13 = $292;
      $293 = $27;
      $294 = $19;
      $295 = $21;
      $296 = (($294) + ($295))|0;
      $297 = $23;
      $298 = (($296) + ($297))|0;
      $299 = $17;
      $300 = (($298) + ($299))|0;
      $301 = (($293) + ($300<<1)|0);
      $302 = HEAP16[$301>>1]|0;
      $303 = $302&65535;
      $304 = $27;
      $305 = $19;
      $306 = $20;
      $307 = (($305) + ($306))|0;
      $308 = $23;
      $309 = (($307) + ($308))|0;
      $310 = $17;
      $311 = (($309) + ($310))|0;
      $312 = (($304) + ($311<<1)|0);
      $313 = HEAP16[$312>>1]|0;
      $314 = $313&65535;
      $315 = (($303) - ($314))|0;
      $14 = $315;
      $316 = $27;
      $317 = $18;
      $318 = $20;
      $319 = (($317) + ($318))|0;
      $320 = $23;
      $321 = (($319) + ($320))|0;
      $322 = $17;
      $323 = (($321) + ($322))|0;
      $324 = (($316) + ($323<<1)|0);
      $325 = HEAP16[$324>>1]|0;
      $326 = $325&65535;
      $327 = $12;
      $328 = (($326) - ($327))|0;
      $15 = $328;
      break;
     }
    }
    $329 = $10;
    $330 = $9;
    $331 = ($329|0)>=($330|0);
    if ($331) {
     $332 = $9;
     $333 = $11;
     $334 = ($332|0)>=($333|0);
     if ($334) {
      $335 = $27;
      $336 = $19;
      $337 = $21;
      $338 = (($336) + ($337))|0;
      $339 = $22;
      $340 = (($338) + ($339))|0;
      $341 = $17;
      $342 = (($340) + ($341))|0;
      $343 = (($335) + ($342<<1)|0);
      $344 = HEAP16[$343>>1]|0;
      $345 = $344&65535;
      $346 = $27;
      $347 = $18;
      $348 = $21;
      $349 = (($347) + ($348))|0;
      $350 = $22;
      $351 = (($349) + ($350))|0;
      $352 = $17;
      $353 = (($351) + ($352))|0;
      $354 = (($346) + ($353<<1)|0);
      $355 = HEAP16[$354>>1]|0;
      $356 = $355&65535;
      $357 = (($345) - ($356))|0;
      $13 = $357;
      $358 = $27;
      $359 = $18;
      $360 = $21;
      $361 = (($359) + ($360))|0;
      $362 = $22;
      $363 = (($361) + ($362))|0;
      $364 = $17;
      $365 = (($363) + ($364))|0;
      $366 = (($358) + ($365<<1)|0);
      $367 = HEAP16[$366>>1]|0;
      $368 = $367&65535;
      $369 = $12;
      $370 = (($368) - ($369))|0;
      $14 = $370;
      $371 = $27;
      $372 = $19;
      $373 = $21;
      $374 = (($372) + ($373))|0;
      $375 = $23;
      $376 = (($374) + ($375))|0;
      $377 = $17;
      $378 = (($376) + ($377))|0;
      $379 = (($371) + ($378<<1)|0);
      $380 = HEAP16[$379>>1]|0;
      $381 = $380&65535;
      $382 = $27;
      $383 = $19;
      $384 = $21;
      $385 = (($383) + ($384))|0;
      $386 = $22;
      $387 = (($385) + ($386))|0;
      $388 = $17;
      $389 = (($387) + ($388))|0;
      $390 = (($382) + ($389<<1)|0);
      $391 = HEAP16[$390>>1]|0;
      $392 = $391&65535;
      $393 = (($381) - ($392))|0;
      $15 = $393;
      break;
     }
    }
    $394 = $10;
    $395 = $11;
    $396 = ($394|0)>=($395|0);
    if ($396) {
     $397 = $11;
     $398 = $9;
     $399 = ($397|0)>=($398|0);
     if ($399) {
      $400 = $27;
      $401 = $19;
      $402 = $21;
      $403 = (($401) + ($402))|0;
      $404 = $23;
      $405 = (($403) + ($404))|0;
      $406 = $17;
      $407 = (($405) + ($406))|0;
      $408 = (($400) + ($407<<1)|0);
      $409 = HEAP16[$408>>1]|0;
      $410 = $409&65535;
      $411 = $27;
      $412 = $18;
      $413 = $21;
      $414 = (($412) + ($413))|0;
      $415 = $23;
      $416 = (($414) + ($415))|0;
      $417 = $17;
      $418 = (($416) + ($417))|0;
      $419 = (($411) + ($418<<1)|0);
      $420 = HEAP16[$419>>1]|0;
      $421 = $420&65535;
      $422 = (($410) - ($421))|0;
      $13 = $422;
      $423 = $27;
      $424 = $18;
      $425 = $21;
      $426 = (($424) + ($425))|0;
      $427 = $22;
      $428 = (($426) + ($427))|0;
      $429 = $17;
      $430 = (($428) + ($429))|0;
      $431 = (($423) + ($430<<1)|0);
      $432 = HEAP16[$431>>1]|0;
      $433 = $432&65535;
      $434 = $12;
      $435 = (($433) - ($434))|0;
      $14 = $435;
      $436 = $27;
      $437 = $18;
      $438 = $21;
      $439 = (($437) + ($438))|0;
      $440 = $23;
      $441 = (($439) + ($440))|0;
      $442 = $17;
      $443 = (($441) + ($442))|0;
      $444 = (($436) + ($443<<1)|0);
      $445 = HEAP16[$444>>1]|0;
      $446 = $445&65535;
      $447 = $27;
      $448 = $18;
      $449 = $21;
      $450 = (($448) + ($449))|0;
      $451 = $22;
      $452 = (($450) + ($451))|0;
      $453 = $17;
      $454 = (($452) + ($453))|0;
      $455 = (($447) + ($454<<1)|0);
      $456 = HEAP16[$455>>1]|0;
      $457 = $456&65535;
      $458 = (($446) - ($457))|0;
      $15 = $458;
      break;
     }
    }
    $459 = $11;
    $460 = $10;
    $461 = ($459|0)>=($460|0);
    if ($461) {
     $462 = $10;
     $463 = $9;
     $464 = ($462|0)>=($463|0);
     if ($464) {
      $465 = $27;
      $466 = $19;
      $467 = $21;
      $468 = (($466) + ($467))|0;
      $469 = $23;
      $470 = (($468) + ($469))|0;
      $471 = $17;
      $472 = (($470) + ($471))|0;
      $473 = (($465) + ($472<<1)|0);
      $474 = HEAP16[$473>>1]|0;
      $475 = $474&65535;
      $476 = $27;
      $477 = $18;
      $478 = $21;
      $479 = (($477) + ($478))|0;
      $480 = $23;
      $481 = (($479) + ($480))|0;
      $482 = $17;
      $483 = (($481) + ($482))|0;
      $484 = (($476) + ($483<<1)|0);
      $485 = HEAP16[$484>>1]|0;
      $486 = $485&65535;
      $487 = (($475) - ($486))|0;
      $13 = $487;
      $488 = $27;
      $489 = $18;
      $490 = $21;
      $491 = (($489) + ($490))|0;
      $492 = $23;
      $493 = (($491) + ($492))|0;
      $494 = $17;
      $495 = (($493) + ($494))|0;
      $496 = (($488) + ($495<<1)|0);
      $497 = HEAP16[$496>>1]|0;
      $498 = $497&65535;
      $499 = $27;
      $500 = $18;
      $501 = $20;
      $502 = (($500) + ($501))|0;
      $503 = $23;
      $504 = (($502) + ($503))|0;
      $505 = $17;
      $506 = (($504) + ($505))|0;
      $507 = (($499) + ($506<<1)|0);
      $508 = HEAP16[$507>>1]|0;
      $509 = $508&65535;
      $510 = (($498) - ($509))|0;
      $14 = $510;
      $511 = $27;
      $512 = $18;
      $513 = $20;
      $514 = (($512) + ($513))|0;
      $515 = $23;
      $516 = (($514) + ($515))|0;
      $517 = $17;
      $518 = (($516) + ($517))|0;
      $519 = (($511) + ($518<<1)|0);
      $520 = HEAP16[$519>>1]|0;
      $521 = $520&65535;
      $522 = $12;
      $523 = (($521) - ($522))|0;
      $15 = $523;
      break;
     }
    }
    $15 = 0;
    $14 = 0;
    $13 = 0;
   }
  } while(0);
  $524 = $13;
  $525 = $9;
  $526 = Math_imul($524, $525)|0;
  $527 = $14;
  $528 = $10;
  $529 = Math_imul($527, $528)|0;
  $530 = (($526) + ($529))|0;
  $531 = $15;
  $532 = $11;
  $533 = Math_imul($531, $532)|0;
  $534 = (($530) + ($533))|0;
  $535 = (($534) + 32769)|0;
  $16 = $535;
  $536 = $12;
  $537 = $16;
  $538 = $16;
  $539 = $538 >> 16;
  $540 = (($537) + ($539))|0;
  $541 = $540 >> 16;
  $542 = (($536) + ($541))|0;
  $543 = $542&65535;
  $544 = $4;
  $545 = $17;
  $546 = (($544) + ($545<<1)|0);
  HEAP16[$546>>1] = $543;
  $547 = $17;
  $548 = (($547) + 1)|0;
  $17 = $548;
 }
 STACKTOP = sp;return;
}
function _Prelin8free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __cmsFree($4,$5);
 STACKTOP = sp;return;
}
function _Prelin8dup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__cmsDupMem($4,$5,4616)|0);
 STACKTOP = sp;return ($6|0);
}
function _PrelinOpt16alloc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sink = 0, $$sink1 = 0, $$sink2 = 0, $$sink3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $15 = $7;
 $16 = (__cmsMallocZero($15,92)|0);
 $14 = $16;
 $17 = $14;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $6 = 0;
  $119 = $6;
  STACKTOP = sp;return ($119|0);
 }
 $19 = $9;
 $20 = $14;
 $21 = ((($20)) + 4|0);
 HEAP32[$21>>2] = $19;
 $22 = $11;
 $23 = $14;
 $24 = ((($23)) + 8|0);
 HEAP32[$24>>2] = $22;
 $13 = 0;
 while(1) {
  $25 = $13;
  $26 = $9;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $10;
  $29 = ($28|0)==(0|0);
  if ($29) {
   $30 = $14;
   $31 = ((($30)) + 44|0);
   $32 = $13;
   $33 = (($31) + ($32<<2)|0);
   HEAP32[$33>>2] = 0;
   $34 = $14;
   $35 = ((($34)) + 12|0);
   $36 = $13;
   $37 = (($35) + ($36<<2)|0);
   $$sink = 362;$$sink1 = $37;
  } else {
   $38 = $10;
   $39 = $13;
   $40 = (($38) + ($39<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   $43 = $14;
   $44 = ((($43)) + 44|0);
   $45 = $13;
   $46 = (($44) + ($45<<2)|0);
   HEAP32[$46>>2] = $42;
   $47 = $14;
   $48 = ((($47)) + 44|0);
   $49 = $13;
   $50 = (($48) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($51)) + 116|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $14;
   $55 = ((($54)) + 12|0);
   $56 = $13;
   $57 = (($55) + ($56<<2)|0);
   $$sink = $53;$$sink1 = $57;
  }
  HEAP32[$$sink1>>2] = $$sink;
  $58 = $13;
  $59 = (($58) + 1)|0;
  $13 = $59;
 }
 $60 = $8;
 $61 = $14;
 $62 = ((($61)) + 80|0);
 HEAP32[$62>>2] = $60;
 $63 = $8;
 $64 = ((($63)) + 116|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $14;
 $67 = ((($66)) + 76|0);
 HEAP32[$67>>2] = $65;
 $68 = $7;
 $69 = $11;
 $70 = (__cmsCalloc($68,$69,4)|0);
 $71 = $14;
 $72 = ((($71)) + 84|0);
 HEAP32[$72>>2] = $70;
 $73 = $7;
 $74 = $11;
 $75 = (__cmsCalloc($73,$74,4)|0);
 $76 = $14;
 $77 = ((($76)) + 88|0);
 HEAP32[$77>>2] = $75;
 $13 = 0;
 while(1) {
  $78 = $13;
  $79 = $11;
  $80 = ($78>>>0)<($79>>>0);
  if (!($80)) {
   break;
  }
  $81 = $12;
  $82 = ($81|0)==(0|0);
  if ($82) {
   $83 = $14;
   $84 = ((($83)) + 88|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $13;
   $87 = (($85) + ($86<<2)|0);
   HEAP32[$87>>2] = 0;
   $88 = $14;
   $89 = ((($88)) + 84|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $13;
   $92 = (($90) + ($91<<2)|0);
   $$sink2 = 362;$$sink3 = $92;
  } else {
   $93 = $12;
   $94 = $13;
   $95 = (($93) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP32[$96>>2]|0;
   $98 = $14;
   $99 = ((($98)) + 88|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $13;
   $102 = (($100) + ($101<<2)|0);
   HEAP32[$102>>2] = $97;
   $103 = $14;
   $104 = ((($103)) + 88|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $13;
   $107 = (($105) + ($106<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($108)) + 116|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $14;
   $112 = ((($111)) + 84|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $13;
   $115 = (($113) + ($114<<2)|0);
   $$sink2 = $110;$$sink3 = $115;
  }
  HEAP32[$$sink3>>2] = $$sink2;
  $116 = $13;
  $117 = (($116) + 1)|0;
  $13 = $117;
 }
 $118 = $14;
 $6 = $118;
 $119 = $6;
 STACKTOP = sp;return ($119|0);
}
function _PrelinEval16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 56|0;
 $8 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $5;
 $6 = $10;
 $9 = 0;
 while(1) {
  $11 = $9;
  $12 = $6;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11>>>0)<($14>>>0);
  $16 = $6;
  if (!($15)) {
   break;
  }
  $17 = ((($16)) + 12|0);
  $18 = $9;
  $19 = (($17) + ($18<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $3;
  $22 = $9;
  $23 = (($21) + ($22<<1)|0);
  $24 = $9;
  $25 = (($7) + ($24<<1)|0);
  $26 = $6;
  $27 = ((($26)) + 44|0);
  $28 = $9;
  $29 = (($27) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  FUNCTION_TABLE_viii[$20 & 511]($23,$25,$30);
  $31 = $9;
  $32 = (($31) + 1)|0;
  $9 = $32;
 }
 $33 = ((($16)) + 76|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $6;
 $36 = ((($35)) + 80|0);
 $37 = HEAP32[$36>>2]|0;
 FUNCTION_TABLE_viii[$34 & 511]($7,$8,$37);
 $9 = 0;
 while(1) {
  $38 = $9;
  $39 = $6;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($38>>>0)<($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = $6;
  $44 = ((($43)) + 84|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $9;
  $47 = (($45) + ($46<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $9;
  $50 = (($8) + ($49<<1)|0);
  $51 = $4;
  $52 = $9;
  $53 = (($51) + ($52<<1)|0);
  $54 = $6;
  $55 = ((($54)) + 88|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $9;
  $58 = (($56) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  FUNCTION_TABLE_viii[$48 & 511]($50,$53,$59);
  $60 = $9;
  $61 = (($60) + 1)|0;
  $9 = $61;
 }
 STACKTOP = sp;return;
}
function _PrelinOpt16free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $2;
 $7 = $4;
 $8 = ((($7)) + 84|0);
 $9 = HEAP32[$8>>2]|0;
 __cmsFree($6,$9);
 $10 = $2;
 $11 = $4;
 $12 = ((($11)) + 88|0);
 $13 = HEAP32[$12>>2]|0;
 __cmsFree($10,$13);
 $14 = $2;
 $15 = $4;
 __cmsFree($14,$15);
 STACKTOP = sp;return;
}
function _Prelin16dup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $5 = $7;
 $8 = $3;
 $9 = $5;
 $10 = (__cmsDupMem($8,$9,92)|0);
 $6 = $10;
 $11 = $6;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $2 = 0;
  $36 = $2;
  STACKTOP = sp;return ($36|0);
 } else {
  $13 = $3;
  $14 = $5;
  $15 = ((($14)) + 84|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $5;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19<<2;
  $21 = (__cmsDupMem($13,$16,$20)|0);
  $22 = $6;
  $23 = ((($22)) + 84|0);
  HEAP32[$23>>2] = $21;
  $24 = $3;
  $25 = $5;
  $26 = ((($25)) + 88|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $5;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30<<2;
  $32 = (__cmsDupMem($24,$27,$31)|0);
  $33 = $6;
  $34 = ((($33)) + 88|0);
  HEAP32[$34>>2] = $32;
  $35 = $6;
  $2 = $35;
  $36 = $2;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _FixWhiteMisalignment($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer18 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr21 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 $7 = sp + 104|0;
 $8 = sp + 100|0;
 $9 = sp + 192|0;
 $10 = sp + 160|0;
 $11 = sp + 128|0;
 $13 = sp + 92|0;
 $14 = sp + 88|0;
 $15 = sp + 84|0;
 $16 = sp + 80|0;
 $17 = sp + 76|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$15>>2] = 0;
 HEAP32[$16>>2] = 0;
 HEAP32[$17>>2] = 0;
 $21 = $5;
 $22 = (__cmsEndPointsBySpace($21,$7,0,$14)|0);
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $3 = 0;
  $131 = $3;
  STACKTOP = sp;return ($131|0);
 }
 $24 = $6;
 $25 = (__cmsEndPointsBySpace($24,$8,0,$13)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $3 = 0;
  $131 = $3;
  STACKTOP = sp;return ($131|0);
 }
 $27 = $4;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$14>>2]|0;
 $31 = ($29|0)!=($30|0);
 if ($31) {
  $3 = 0;
  $131 = $3;
  STACKTOP = sp;return ($131|0);
 }
 $32 = $4;
 $33 = ((($32)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = HEAP32[$13>>2]|0;
 $36 = ($34|0)!=($35|0);
 if ($36) {
  $3 = 0;
  $131 = $3;
  STACKTOP = sp;return ($131|0);
 }
 $37 = HEAP32[$7>>2]|0;
 $38 = $4;
 _cmsPipelineEval16($37,$11,$38);
 $39 = HEAP32[$13>>2]|0;
 $40 = HEAP32[$8>>2]|0;
 $41 = (_WhitesAreEqual($39,$40,$11)|0);
 $42 = ($41|0)!=(0);
 if ($42) {
  $3 = 1;
  $131 = $3;
  STACKTOP = sp;return ($131|0);
 }
 $43 = $4;
 HEAP32[$vararg_buffer>>2] = 1668707188;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 1668052340;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 1668707188;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $15;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $16;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $17;
 $44 = (_cmsPipelineCheckAndRetreiveStages($43,3,$vararg_buffer)|0);
 $45 = ($44|0)!=(0);
 if (!($45)) {
  $46 = $4;
  HEAP32[$vararg_buffer6>>2] = 1668707188;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 1668052340;
  $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $15;
  $vararg_ptr11 = ((($vararg_buffer6)) + 12|0);
  HEAP32[$vararg_ptr11>>2] = $16;
  $47 = (_cmsPipelineCheckAndRetreiveStages($46,2,$vararg_buffer6)|0);
  $48 = ($47|0)!=(0);
  if (!($48)) {
   $49 = $4;
   HEAP32[$vararg_buffer12>>2] = 1668052340;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = 1668707188;
   $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
   HEAP32[$vararg_ptr16>>2] = $16;
   $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
   HEAP32[$vararg_ptr17>>2] = $17;
   $50 = (_cmsPipelineCheckAndRetreiveStages($49,2,$vararg_buffer12)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    $52 = $4;
    HEAP32[$vararg_buffer18>>2] = 1668052340;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = $16;
    $53 = (_cmsPipelineCheckAndRetreiveStages($52,1,$vararg_buffer18)|0);
    $54 = ($53|0)!=(0);
    if (!($54)) {
     $3 = 0;
     $131 = $3;
     STACKTOP = sp;return ($131|0);
    }
   }
  }
 }
 $55 = HEAP32[$15>>2]|0;
 $56 = ($55|0)!=(0|0);
 L28: do {
  if ($56) {
   $57 = HEAP32[$15>>2]|0;
   $58 = (__cmsStageGetPtrToCurveSet($57)|0);
   $18 = $58;
   $12 = 0;
   while(1) {
    $59 = $12;
    $60 = HEAP32[$14>>2]|0;
    $61 = ($59>>>0)<($60>>>0);
    if (!($61)) {
     break L28;
    }
    $62 = $18;
    $63 = $12;
    $64 = (($62) + ($63<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = HEAP32[$7>>2]|0;
    $67 = $12;
    $68 = (($66) + ($67<<1)|0);
    $69 = HEAP16[$68>>1]|0;
    $70 = (_cmsEvalToneCurve16($65,$69)|0);
    $71 = $12;
    $72 = (($9) + ($71<<1)|0);
    HEAP16[$72>>1] = $70;
    $73 = $12;
    $74 = (($73) + 1)|0;
    $12 = $74;
   }
  } else {
   $12 = 0;
   while(1) {
    $75 = $12;
    $76 = HEAP32[$14>>2]|0;
    $77 = ($75>>>0)<($76>>>0);
    if (!($77)) {
     break L28;
    }
    $78 = HEAP32[$7>>2]|0;
    $79 = $12;
    $80 = (($78) + ($79<<1)|0);
    $81 = HEAP16[$80>>1]|0;
    $82 = $12;
    $83 = (($9) + ($82<<1)|0);
    HEAP16[$83>>1] = $81;
    $84 = $12;
    $85 = (($84) + 1)|0;
    $12 = $85;
   }
  }
 } while(0);
 $86 = HEAP32[$17>>2]|0;
 $87 = ($86|0)!=(0|0);
 L38: do {
  if ($87) {
   $88 = HEAP32[$17>>2]|0;
   $89 = (__cmsStageGetPtrToCurveSet($88)|0);
   $19 = $89;
   $12 = 0;
   while(1) {
    $90 = $12;
    $91 = HEAP32[$13>>2]|0;
    $92 = ($90>>>0)<($91>>>0);
    if (!($92)) {
     break L38;
    }
    $93 = $19;
    $94 = $12;
    $95 = (($93) + ($94<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (_cmsReverseToneCurve($96)|0);
    $20 = $97;
    $98 = $20;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $100 = HEAP32[$8>>2]|0;
     $101 = $12;
     $102 = (($100) + ($101<<1)|0);
     $103 = HEAP16[$102>>1]|0;
     $104 = $12;
     $105 = (($10) + ($104<<1)|0);
     HEAP16[$105>>1] = $103;
    } else {
     $106 = $20;
     $107 = HEAP32[$8>>2]|0;
     $108 = $12;
     $109 = (($107) + ($108<<1)|0);
     $110 = HEAP16[$109>>1]|0;
     $111 = (_cmsEvalToneCurve16($106,$110)|0);
     $112 = $12;
     $113 = (($10) + ($112<<1)|0);
     HEAP16[$113>>1] = $111;
     $114 = $20;
     _cmsFreeToneCurve($114);
    }
    $115 = $12;
    $116 = (($115) + 1)|0;
    $12 = $116;
   }
  } else {
   $12 = 0;
   while(1) {
    $117 = $12;
    $118 = HEAP32[$13>>2]|0;
    $119 = ($117>>>0)<($118>>>0);
    if (!($119)) {
     break L38;
    }
    $120 = HEAP32[$8>>2]|0;
    $121 = $12;
    $122 = (($120) + ($121<<1)|0);
    $123 = HEAP16[$122>>1]|0;
    $124 = $12;
    $125 = (($10) + ($124<<1)|0);
    HEAP16[$125>>1] = $123;
    $126 = $12;
    $127 = (($126) + 1)|0;
    $12 = $127;
   }
  }
 } while(0);
 $128 = HEAP32[$16>>2]|0;
 $129 = HEAP32[$13>>2]|0;
 $130 = HEAP32[$14>>2]|0;
 (_PatchLUT($128,$9,$10,$129,$130)|0);
 $3 = 1;
 $131 = $3;
 STACKTOP = sp;return ($131|0);
}
function _WhitesAreEqual($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $4;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = $5;
  $12 = $7;
  $13 = (($11) + ($12<<1)|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&65535;
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = (($15) - ($20))|0;
  $22 = (Math_abs(($21|0))|0);
  $23 = ($22|0)>(61440);
  if ($23) {
   label = 4;
   break;
  }
  $24 = $5;
  $25 = $7;
  $26 = (($24) + ($25<<1)|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = $6;
  $30 = $7;
  $31 = (($29) + ($30<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $34 = ($28|0)!=($33|0);
  if ($34) {
   label = 6;
   break;
  }
  $35 = $7;
  $36 = (($35) + 1)|0;
  $7 = $36;
 }
 if ((label|0) == 4) {
  $3 = 1;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 6) {
  $3 = 0;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 else if ((label|0) == 8) {
  $3 = 1;
  $37 = $3;
  STACKTOP = sp;return ($37|0);
 }
 return (0)|0;
}
function _PatchLUT($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0;
 var $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0.0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0.0, $226 = 0;
 var $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer1 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $23 = $6;
 $24 = ((($23)) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $11 = $25;
 $26 = $11;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $12 = $28;
 $29 = $6;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(1668052340);
 if ($32) {
  $33 = $6;
  $34 = HEAP32[$33>>2]|0;
  _cmsSignalError($34,3,27564,$vararg_buffer);
  $5 = 0;
  $255 = $5;
  STACKTOP = sp;return ($255|0);
 }
 $35 = $10;
 $36 = ($35|0)==(4);
 do {
  if ($36) {
   $37 = $7;
   $38 = HEAP16[$37>>1]|0;
   $39 = (+($38&65535));
   $40 = $12;
   $41 = ((($40)) + 48|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (+($42>>>0));
   $44 = $39 * $43;
   $45 = $44 / 65535.0;
   $13 = $45;
   $46 = $7;
   $47 = ((($46)) + 2|0);
   $48 = HEAP16[$47>>1]|0;
   $49 = (+($48&65535));
   $50 = $12;
   $51 = ((($50)) + 48|0);
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (+($53>>>0));
   $55 = $49 * $54;
   $56 = $55 / 65535.0;
   $14 = $56;
   $57 = $7;
   $58 = ((($57)) + 4|0);
   $59 = HEAP16[$58>>1]|0;
   $60 = (+($59&65535));
   $61 = $12;
   $62 = ((($61)) + 48|0);
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (+($64>>>0));
   $66 = $60 * $65;
   $67 = $66 / 65535.0;
   $15 = $67;
   $68 = $7;
   $69 = ((($68)) + 6|0);
   $70 = HEAP16[$69>>1]|0;
   $71 = (+($70&65535));
   $72 = $12;
   $73 = ((($72)) + 48|0);
   $74 = ((($73)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (+($75>>>0));
   $77 = $71 * $76;
   $78 = $77 / 65535.0;
   $16 = $78;
   $79 = $13;
   $80 = (+Math_floor((+$79)));
   $81 = (~~(($80)));
   $17 = $81;
   $82 = $14;
   $83 = (+Math_floor((+$82)));
   $84 = (~~(($83)));
   $18 = $84;
   $85 = $15;
   $86 = (+Math_floor((+$85)));
   $87 = (~~(($86)));
   $19 = $87;
   $88 = $16;
   $89 = (+Math_floor((+$88)));
   $90 = (~~(($89)));
   $20 = $90;
   $91 = $13;
   $92 = $17;
   $93 = (+($92|0));
   $94 = $91 - $93;
   $95 = $94 != 0.0;
   if (!($95)) {
    $96 = $14;
    $97 = $18;
    $98 = (+($97|0));
    $99 = $96 - $98;
    $100 = $99 != 0.0;
    if (!($100)) {
     $101 = $15;
     $102 = $19;
     $103 = (+($102|0));
     $104 = $101 - $103;
     $105 = $104 != 0.0;
     if (!($105)) {
      $106 = $16;
      $107 = $20;
      $108 = (+($107|0));
      $109 = $106 - $108;
      $110 = $109 != 0.0;
      if (!($110)) {
       $111 = $12;
       $112 = ((($111)) + 80|0);
       $113 = ((($112)) + 12|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = $17;
       $116 = Math_imul($114, $115)|0;
       $117 = $12;
       $118 = ((($117)) + 80|0);
       $119 = ((($118)) + 8|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $18;
       $122 = Math_imul($120, $121)|0;
       $123 = (($116) + ($122))|0;
       $124 = $12;
       $125 = ((($124)) + 80|0);
       $126 = ((($125)) + 4|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $19;
       $129 = Math_imul($127, $128)|0;
       $130 = (($123) + ($129))|0;
       $131 = $12;
       $132 = ((($131)) + 80|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = $20;
       $135 = Math_imul($133, $134)|0;
       $136 = (($130) + ($135))|0;
       $22 = $136;
       break;
      }
     }
    }
   }
   $5 = 0;
   $255 = $5;
   STACKTOP = sp;return ($255|0);
  } else {
   $137 = $10;
   $138 = ($137|0)==(3);
   if ($138) {
    $139 = $7;
    $140 = HEAP16[$139>>1]|0;
    $141 = (+($140&65535));
    $142 = $12;
    $143 = ((($142)) + 48|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = (+($144>>>0));
    $146 = $141 * $145;
    $147 = $146 / 65535.0;
    $13 = $147;
    $148 = $7;
    $149 = ((($148)) + 2|0);
    $150 = HEAP16[$149>>1]|0;
    $151 = (+($150&65535));
    $152 = $12;
    $153 = ((($152)) + 48|0);
    $154 = ((($153)) + 4|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = (+($155>>>0));
    $157 = $151 * $156;
    $158 = $157 / 65535.0;
    $14 = $158;
    $159 = $7;
    $160 = ((($159)) + 4|0);
    $161 = HEAP16[$160>>1]|0;
    $162 = (+($161&65535));
    $163 = $12;
    $164 = ((($163)) + 48|0);
    $165 = ((($164)) + 8|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = (+($166>>>0));
    $168 = $162 * $167;
    $169 = $168 / 65535.0;
    $15 = $169;
    $170 = $13;
    $171 = (+Math_floor((+$170)));
    $172 = (~~(($171)));
    $17 = $172;
    $173 = $14;
    $174 = (+Math_floor((+$173)));
    $175 = (~~(($174)));
    $18 = $175;
    $176 = $15;
    $177 = (+Math_floor((+$176)));
    $178 = (~~(($177)));
    $19 = $178;
    $179 = $13;
    $180 = $17;
    $181 = (+($180|0));
    $182 = $179 - $181;
    $183 = $182 != 0.0;
    if (!($183)) {
     $184 = $14;
     $185 = $18;
     $186 = (+($185|0));
     $187 = $184 - $186;
     $188 = $187 != 0.0;
     if (!($188)) {
      $189 = $15;
      $190 = $19;
      $191 = (+($190|0));
      $192 = $189 - $191;
      $193 = $192 != 0.0;
      if (!($193)) {
       $194 = $12;
       $195 = ((($194)) + 80|0);
       $196 = ((($195)) + 8|0);
       $197 = HEAP32[$196>>2]|0;
       $198 = $17;
       $199 = Math_imul($197, $198)|0;
       $200 = $12;
       $201 = ((($200)) + 80|0);
       $202 = ((($201)) + 4|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $18;
       $205 = Math_imul($203, $204)|0;
       $206 = (($199) + ($205))|0;
       $207 = $12;
       $208 = ((($207)) + 80|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = $19;
       $211 = Math_imul($209, $210)|0;
       $212 = (($206) + ($211))|0;
       $22 = $212;
       break;
      }
     }
    }
    $5 = 0;
    $255 = $5;
    STACKTOP = sp;return ($255|0);
   }
   $213 = $10;
   $214 = ($213|0)==(1);
   if (!($214)) {
    $237 = $6;
    $238 = HEAP32[$237>>2]|0;
    $239 = $10;
    HEAP32[$vararg_buffer1>>2] = $239;
    _cmsSignalError($238,3,27612,$vararg_buffer1);
    $5 = 0;
    $255 = $5;
    STACKTOP = sp;return ($255|0);
   }
   $215 = $7;
   $216 = HEAP16[$215>>1]|0;
   $217 = (+($216&65535));
   $218 = $12;
   $219 = ((($218)) + 48|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = (+($220>>>0));
   $222 = $217 * $221;
   $223 = $222 / 65535.0;
   $13 = $223;
   $224 = $13;
   $225 = (+Math_floor((+$224)));
   $226 = (~~(($225)));
   $17 = $226;
   $227 = $13;
   $228 = $17;
   $229 = (+($228|0));
   $230 = $227 - $229;
   $231 = $230 != 0.0;
   if (!($231)) {
    $232 = $12;
    $233 = ((($232)) + 80|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = $17;
    $236 = Math_imul($234, $235)|0;
    $22 = $236;
    break;
   }
   $5 = 0;
   $255 = $5;
   STACKTOP = sp;return ($255|0);
  }
 } while(0);
 $21 = 0;
 while(1) {
  $240 = $21;
  $241 = $9;
  $242 = ($240|0)<($241|0);
  if (!($242)) {
   break;
  }
  $243 = $8;
  $244 = $21;
  $245 = (($243) + ($244<<1)|0);
  $246 = HEAP16[$245>>1]|0;
  $247 = $11;
  $248 = HEAP32[$247>>2]|0;
  $249 = $22;
  $250 = $21;
  $251 = (($249) + ($250))|0;
  $252 = (($248) + ($251<<1)|0);
  HEAP16[$252>>1] = $246;
  $253 = $21;
  $254 = (($253) + 1)|0;
  $21 = $254;
 }
 $5 = 1;
 $255 = $5;
 STACKTOP = sp;return ($255|0);
}
function _Eval16nop1D($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = HEAP16[$6>>1]|0;
 $8 = $4;
 HEAP16[$8>>1] = $7;
 STACKTOP = sp;return;
}
function __cmsToFixedDomain_380($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = (($3) + 32767)|0;
 $5 = (($4|0) / 65535)&-1;
 $6 = (($2) + ($5))|0;
 STACKTOP = sp;return ($6|0);
}
function __cmsQuickFloorWord_383($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 32767.0;
 $4 = (__cmsQuickFloor_384($3)|0);
 $5 = $4&65535;
 $6 = $5&65535;
 $7 = (($6) + 32767)|0;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsQuickFloor_384($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function _SetMatShaper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $17 = $12;
 $18 = HEAP32[$17>>2]|0;
 $19 = (__cmsFormatterIs8bit($18)|0);
 $16 = $19;
 $20 = $7;
 $21 = ((($20)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__cmsMalloc($22,101436)|0);
 $13 = $23;
 $24 = $13;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $6 = 0;
  $114 = $6;
  STACKTOP = sp;return ($114|0);
 }
 $26 = $7;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $13;
 HEAP32[$29>>2] = $28;
 $30 = $13;
 $31 = ((($30)) + 4|0);
 $32 = $8;
 $33 = HEAP32[$32>>2]|0;
 _FillFirstShaper($31,$33);
 $34 = $13;
 $35 = ((($34)) + 1028|0);
 $36 = $8;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 _FillFirstShaper($35,$38);
 $39 = $13;
 $40 = ((($39)) + 2052|0);
 $41 = $8;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 _FillFirstShaper($40,$43);
 $44 = $13;
 $45 = ((($44)) + 3124|0);
 $46 = $11;
 $47 = HEAP32[$46>>2]|0;
 $48 = $16;
 _FillSecondShaper($45,$47,$48);
 $49 = $13;
 $50 = ((($49)) + 35894|0);
 $51 = $11;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = $16;
 _FillSecondShaper($50,$53,$54);
 $55 = $13;
 $56 = ((($55)) + 68664|0);
 $57 = $11;
 $58 = ((($57)) + 8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $16;
 _FillSecondShaper($56,$59,$60);
 $14 = 0;
 while(1) {
  $61 = $14;
  $62 = ($61|0)<(3);
  if (!($62)) {
   break;
  }
  $15 = 0;
  while(1) {
   $63 = $15;
   $64 = ($63|0)<(3);
   if (!($64)) {
    break;
   }
   $65 = $9;
   $66 = $14;
   $67 = (($65) + (($66*24)|0)|0);
   $68 = $15;
   $69 = (($67) + ($68<<3)|0);
   $70 = +HEAPF64[$69>>3];
   $71 = $70 * 16384.0;
   $72 = $71 + 0.5;
   $73 = (+Math_floor((+$72)));
   $74 = (~~(($73)));
   $75 = $13;
   $76 = ((($75)) + 3076|0);
   $77 = $14;
   $78 = (($76) + (($77*12)|0)|0);
   $79 = $15;
   $80 = (($78) + ($79<<2)|0);
   HEAP32[$80>>2] = $74;
   $81 = $15;
   $82 = (($81) + 1)|0;
   $15 = $82;
  }
  $83 = $14;
  $84 = (($83) + 1)|0;
  $14 = $84;
 }
 $14 = 0;
 while(1) {
  $85 = $14;
  $86 = ($85|0)<(3);
  if (!($86)) {
   break;
  }
  $87 = $10;
  $88 = ($87|0)==(0|0);
  if ($88) {
   $89 = $13;
   $90 = ((($89)) + 3112|0);
   $91 = $14;
   $92 = (($90) + ($91<<2)|0);
   $$sink = 0;$$sink1 = $92;
  } else {
   $93 = $10;
   $94 = $14;
   $95 = (($93) + ($94<<3)|0);
   $96 = +HEAPF64[$95>>3];
   $97 = $96 * 16384.0;
   $98 = $97 + 0.5;
   $99 = (+Math_floor((+$98)));
   $100 = (~~(($99)));
   $101 = $13;
   $102 = ((($101)) + 3112|0);
   $103 = $14;
   $104 = (($102) + ($103<<2)|0);
   $$sink = $100;$$sink1 = $104;
  }
  HEAP32[$$sink1>>2] = $$sink;
  $105 = $14;
  $106 = (($105) + 1)|0;
  $14 = $106;
 }
 $107 = $16;
 $108 = ($107|0)!=(0);
 if ($108) {
  $109 = $12;
  $110 = HEAP32[$109>>2]|0;
  $111 = $110 | 2097152;
  HEAP32[$109>>2] = $111;
 }
 $112 = $7;
 $113 = $13;
 __cmsPipelineSetOptimizationParameters($112,363,$113,364,365);
 $6 = 1;
 $114 = $6;
 STACKTOP = sp;return ($114|0);
}
function _FillFirstShaper($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $7 = $4;
  $8 = ($7|0)<(256);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = (+($9|0));
  $11 = $10 / 255.0;
  $12 = $11;
  $5 = $12;
  $13 = $3;
  $14 = $5;
  $15 = (+_cmsEvalToneCurveFloat($13,$14));
  $6 = $15;
  $16 = $6;
  $17 = $16;
  $18 = $17 < 131072.0;
  if ($18) {
   $19 = $6;
   $20 = $19;
   $21 = $20 * 16384.0;
   $22 = $21 + 0.5;
   $23 = (+Math_floor((+$22)));
   $24 = (~~(($23)));
   $25 = $2;
   $26 = $4;
   $27 = (($25) + ($26<<2)|0);
   $$sink = $24;$$sink1 = $27;
  } else {
   $28 = $2;
   $29 = $4;
   $30 = (($28) + ($29<<2)|0);
   $$sink = 2147483647;$$sink1 = $30;
  }
  HEAP32[$$sink1>>2] = $$sink;
  $31 = $4;
  $32 = (($31) + 1)|0;
  $4 = $32;
 }
 STACKTOP = sp;return;
}
function _FillSecondShaper($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 while(1) {
  $11 = $6;
  $12 = ($11|0)<(16385);
  if (!($12)) {
   break;
  }
  $13 = $6;
  $14 = (+($13|0));
  $15 = $14 / 16384.0;
  $16 = $15;
  $7 = $16;
  $17 = $4;
  $18 = $7;
  $19 = (+_cmsEvalToneCurveFloat($17,$18));
  $8 = $19;
  $20 = $8;
  $21 = $20 < 0.0;
  if ($21) {
   $8 = 0.0;
  }
  $22 = $8;
  $23 = $22;
  $24 = $23 > 1.0;
  if ($24) {
   $8 = 1.0;
  }
  $25 = $5;
  $26 = ($25|0)!=(0);
  $27 = $8;
  $28 = $27;
  $29 = $28 * 65535.0;
  $30 = (__cmsQuickSaturateWord_377($29)|0);
  if ($26) {
   $9 = $30;
   $31 = $9;
   $32 = $31&65535;
   $33 = ($32*65281)|0;
   $34 = (($33) + 8388608)|0;
   $35 = $34 >>> 24;
   $36 = $35 & 255;
   $37 = $36&255;
   $10 = $37;
   $38 = $10;
   $39 = $38&255;
   $40 = $39&65535;
   $41 = $40 << 8;
   $42 = $10;
   $43 = $42&255;
   $44 = $41 | $43;
   $45 = $44&65535;
   $46 = $3;
   $47 = $6;
   $48 = (($46) + ($47<<1)|0);
   $$sink = $45;$$sink1 = $48;
  } else {
   $49 = $3;
   $50 = $6;
   $51 = (($49) + ($50<<1)|0);
   $$sink = $30;$$sink1 = $51;
  }
  HEAP16[$$sink1>>1] = $$sink;
  $52 = $6;
  $53 = (($52) + 1)|0;
  $6 = $53;
 }
 STACKTOP = sp;return;
}
function _MatShaperEval16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $16 = $5;
 $6 = $16;
 $17 = $3;
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = $19 & 255;
 $13 = $20;
 $21 = $3;
 $22 = ((($21)) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = $24 & 255;
 $14 = $25;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = $29 & 255;
 $15 = $30;
 $31 = $6;
 $32 = ((($31)) + 4|0);
 $33 = $13;
 $34 = (($32) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $10 = $35;
 $36 = $6;
 $37 = ((($36)) + 1028|0);
 $38 = $14;
 $39 = (($37) + ($38<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $11 = $40;
 $41 = $6;
 $42 = ((($41)) + 2052|0);
 $43 = $15;
 $44 = (($42) + ($43<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $12 = $45;
 $46 = $6;
 $47 = ((($46)) + 3076|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $10;
 $50 = Math_imul($48, $49)|0;
 $51 = $6;
 $52 = ((($51)) + 3076|0);
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $11;
 $56 = Math_imul($54, $55)|0;
 $57 = (($50) + ($56))|0;
 $58 = $6;
 $59 = ((($58)) + 3076|0);
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $12;
 $63 = Math_imul($61, $62)|0;
 $64 = (($57) + ($63))|0;
 $65 = $6;
 $66 = ((($65)) + 3112|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($64) + ($67))|0;
 $69 = (($68) + 8192)|0;
 $70 = $69 >> 14;
 $7 = $70;
 $71 = $6;
 $72 = ((($71)) + 3076|0);
 $73 = ((($72)) + 12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $10;
 $76 = Math_imul($74, $75)|0;
 $77 = $6;
 $78 = ((($77)) + 3076|0);
 $79 = ((($78)) + 12|0);
 $80 = ((($79)) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $11;
 $83 = Math_imul($81, $82)|0;
 $84 = (($76) + ($83))|0;
 $85 = $6;
 $86 = ((($85)) + 3076|0);
 $87 = ((($86)) + 12|0);
 $88 = ((($87)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $12;
 $91 = Math_imul($89, $90)|0;
 $92 = (($84) + ($91))|0;
 $93 = $6;
 $94 = ((($93)) + 3112|0);
 $95 = ((($94)) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($92) + ($96))|0;
 $98 = (($97) + 8192)|0;
 $99 = $98 >> 14;
 $8 = $99;
 $100 = $6;
 $101 = ((($100)) + 3076|0);
 $102 = ((($101)) + 24|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $10;
 $105 = Math_imul($103, $104)|0;
 $106 = $6;
 $107 = ((($106)) + 3076|0);
 $108 = ((($107)) + 24|0);
 $109 = ((($108)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $11;
 $112 = Math_imul($110, $111)|0;
 $113 = (($105) + ($112))|0;
 $114 = $6;
 $115 = ((($114)) + 3076|0);
 $116 = ((($115)) + 24|0);
 $117 = ((($116)) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = $12;
 $120 = Math_imul($118, $119)|0;
 $121 = (($113) + ($120))|0;
 $122 = $6;
 $123 = ((($122)) + 3112|0);
 $124 = ((($123)) + 8|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (($121) + ($125))|0;
 $127 = (($126) + 8192)|0;
 $128 = $127 >> 14;
 $9 = $128;
 $129 = $7;
 $130 = ($129|0)<(0);
 if ($130) {
  $135 = 0;
 } else {
  $131 = $7;
  $132 = ($131|0)>(16384);
  $133 = $7;
  $134 = $132 ? 16384 : $133;
  $135 = $134;
 }
 $13 = $135;
 $136 = $8;
 $137 = ($136|0)<(0);
 if ($137) {
  $142 = 0;
 } else {
  $138 = $8;
  $139 = ($138|0)>(16384);
  $140 = $8;
  $141 = $139 ? 16384 : $140;
  $142 = $141;
 }
 $14 = $142;
 $143 = $9;
 $144 = ($143|0)<(0);
 if ($144) {
  $149 = 0;
  $15 = $149;
  $150 = $6;
  $151 = ((($150)) + 3124|0);
  $152 = $13;
  $153 = (($151) + ($152<<1)|0);
  $154 = HEAP16[$153>>1]|0;
  $155 = $4;
  HEAP16[$155>>1] = $154;
  $156 = $6;
  $157 = ((($156)) + 35894|0);
  $158 = $14;
  $159 = (($157) + ($158<<1)|0);
  $160 = HEAP16[$159>>1]|0;
  $161 = $4;
  $162 = ((($161)) + 2|0);
  HEAP16[$162>>1] = $160;
  $163 = $6;
  $164 = ((($163)) + 68664|0);
  $165 = $15;
  $166 = (($164) + ($165<<1)|0);
  $167 = HEAP16[$166>>1]|0;
  $168 = $4;
  $169 = ((($168)) + 4|0);
  HEAP16[$169>>1] = $167;
  STACKTOP = sp;return;
 }
 $145 = $9;
 $146 = ($145|0)>(16384);
 $147 = $9;
 $148 = $146 ? 16384 : $147;
 $149 = $148;
 $15 = $149;
 $150 = $6;
 $151 = ((($150)) + 3124|0);
 $152 = $13;
 $153 = (($151) + ($152<<1)|0);
 $154 = HEAP16[$153>>1]|0;
 $155 = $4;
 HEAP16[$155>>1] = $154;
 $156 = $6;
 $157 = ((($156)) + 35894|0);
 $158 = $14;
 $159 = (($157) + ($158<<1)|0);
 $160 = HEAP16[$159>>1]|0;
 $161 = $4;
 $162 = ((($161)) + 2|0);
 HEAP16[$162>>1] = $160;
 $163 = $6;
 $164 = ((($163)) + 68664|0);
 $165 = $15;
 $166 = (($164) + ($165<<1)|0);
 $167 = HEAP16[$166>>1]|0;
 $168 = $4;
 $169 = ((($168)) + 4|0);
 HEAP16[$169>>1] = $167;
 STACKTOP = sp;return;
}
function _FreeMatShaper($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $2;
  $7 = $3;
  __cmsFree($6,$7);
 }
 STACKTOP = sp;return;
}
function _DupMatShaper($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (__cmsDupMem($4,$5,101436)|0);
 STACKTOP = sp;return ($6|0);
}
function _AllCurvesAreLinear($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = (__cmsStageGetPtrToCurveSet($6)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $1 = 0;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 $10 = $2;
 $11 = (_cmsStageOutputChannels($10)|0);
 $5 = $11;
 $4 = 0;
 while(1) {
  $12 = $4;
  $13 = $5;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $3;
  $16 = $4;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_cmsIsToneCurveLinear($18)|0);
  $20 = ($19|0)!=(0);
  if (!($20)) {
   label = 6;
   break;
  }
  $21 = $4;
  $22 = (($21) + 1)|0;
  $4 = $22;
 }
 if ((label|0) == 6) {
  $1 = 0;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 8) {
  $1 = 1;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _CurvesAlloc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $5;
 $13 = (__cmsMallocZero($12,16)|0);
 $11 = $13;
 $14 = $11;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $4 = 0;
  $115 = $4;
  STACKTOP = sp;return ($115|0);
 }
 $16 = $6;
 $17 = $11;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = $7;
 $20 = $11;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $5;
 $23 = $6;
 $24 = (__cmsCalloc($22,$23,4)|0);
 $25 = $11;
 $26 = ((($25)) + 12|0);
 HEAP32[$26>>2] = $24;
 $27 = $11;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = $5;
  $32 = $11;
  __cmsFree($31,$32);
  $4 = 0;
  $115 = $4;
  STACKTOP = sp;return ($115|0);
 }
 $9 = 0;
 while(1) {
  $33 = $9;
  $34 = $6;
  $35 = ($33>>>0)<($34>>>0);
  if (!($35)) {
   label = 18;
   break;
  }
  $36 = $5;
  $37 = $7;
  $38 = (__cmsCalloc($36,$37,2)|0);
  $39 = $11;
  $40 = ((($39)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $9;
  $43 = (($41) + ($42<<2)|0);
  HEAP32[$43>>2] = $38;
  $44 = $11;
  $45 = ((($44)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $9;
  $48 = (($46) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  if ($50) {
   break;
  }
  $65 = $7;
  $66 = ($65|0)==(256);
  $10 = 0;
  L13: do {
   if ($66) {
    while(1) {
     $67 = $10;
     $68 = $7;
     $69 = ($67>>>0)<($68>>>0);
     if (!($69)) {
      break L13;
     }
     $70 = $8;
     $71 = $9;
     $72 = (($70) + ($71<<2)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = $10;
     $75 = $74&65535;
     $76 = $75&65535;
     $77 = $76 << 8;
     $78 = $10;
     $79 = $77 | $78;
     $80 = $79&65535;
     $81 = (_cmsEvalToneCurve16($73,$80)|0);
     $82 = $11;
     $83 = ((($82)) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $9;
     $86 = (($84) + ($85<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $10;
     $89 = (($87) + ($88<<1)|0);
     HEAP16[$89>>1] = $81;
     $90 = $10;
     $91 = (($90) + 1)|0;
     $10 = $91;
    }
   } else {
    while(1) {
     $92 = $10;
     $93 = $7;
     $94 = ($92>>>0)<($93>>>0);
     if (!($94)) {
      break L13;
     }
     $95 = $8;
     $96 = $9;
     $97 = (($95) + ($96<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $10;
     $100 = $99&65535;
     $101 = (_cmsEvalToneCurve16($98,$100)|0);
     $102 = $11;
     $103 = ((($102)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = $9;
     $106 = (($104) + ($105<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $10;
     $109 = (($107) + ($108<<1)|0);
     HEAP16[$109>>1] = $101;
     $110 = $10;
     $111 = (($110) + 1)|0;
     $10 = $111;
    }
   }
  } while(0);
  $112 = $9;
  $113 = (($112) + 1)|0;
  $9 = $113;
 }
 if ((label|0) == 18) {
  $114 = $11;
  $4 = $114;
  $115 = $4;
  STACKTOP = sp;return ($115|0);
 }
 $10 = 0;
 while(1) {
  $51 = $10;
  $52 = $9;
  $53 = ($51>>>0)<($52>>>0);
  $54 = $5;
  $55 = $11;
  $56 = ((($55)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  if (!($53)) {
   break;
  }
  $58 = $10;
  $59 = (($57) + ($58<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  __cmsFree($54,$60);
  $61 = $10;
  $62 = (($61) + 1)|0;
  $10 = $62;
 }
 __cmsFree($54,$57);
 $63 = $5;
 $64 = $11;
 __cmsFree($63,$64);
 $4 = 0;
 $115 = $4;
 STACKTOP = sp;return ($115|0);
}
function _FastEvaluateCurves8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $6 = $9;
 $8 = 0;
 while(1) {
  $10 = $8;
  $11 = $6;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10>>>0)<($13>>>0);
  if (!($14)) {
   break;
  }
  $15 = $3;
  $16 = $8;
  $17 = (($15) + ($16<<1)|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = $19 >> 8;
  $7 = $20;
  $21 = $6;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $8;
  $25 = (($23) + ($24<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $7;
  $28 = (($26) + ($27<<1)|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $4;
  $31 = $8;
  $32 = (($30) + ($31<<1)|0);
  HEAP16[$32>>1] = $29;
  $33 = $8;
  $34 = (($33) + 1)|0;
  $8 = $34;
 }
 STACKTOP = sp;return;
}
function _CurvesFree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $4 = $6;
 $5 = 0;
 while(1) {
  $7 = $5;
  $8 = $4;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7>>>0)<($10>>>0);
  $12 = $2;
  $13 = $4;
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  if (!($11)) {
   break;
  }
  $16 = $5;
  $17 = (($15) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  __cmsFree($12,$18);
  $19 = $5;
  $20 = (($19) + 1)|0;
  $5 = $20;
 }
 __cmsFree($12,$15);
 $21 = $2;
 $22 = $3;
 __cmsFree($21,$22);
 STACKTOP = sp;return;
}
function _CurvesDup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $4;
 $9 = (__cmsDupMem($7,$8,16)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $2 = 0;
  $48 = $2;
  STACKTOP = sp;return ($48|0);
 }
 $12 = $3;
 $13 = $5;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $5;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<2;
 $20 = (__cmsDupMem($12,$15,$19)|0);
 $21 = $5;
 $22 = ((($21)) + 12|0);
 HEAP32[$22>>2] = $20;
 $6 = 0;
 while(1) {
  $23 = $6;
  $24 = $5;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $3;
  $29 = $5;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $6;
  $33 = (($31) + ($32<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $5;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37<<1;
  $39 = (__cmsDupMem($28,$34,$38)|0);
  $40 = $5;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $6;
  $44 = (($42) + ($43<<2)|0);
  HEAP32[$44>>2] = $39;
  $45 = $6;
  $46 = (($45) + 1)|0;
  $6 = $46;
 }
 $47 = $5;
 $2 = $47;
 $48 = $2;
 STACKTOP = sp;return ($48|0);
}
function _FastEvaluateCurves16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $6 = $8;
 $7 = 0;
 while(1) {
  $9 = $7;
  $10 = $6;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<($12>>>0);
  if (!($13)) {
   break;
  }
  $14 = $6;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $7;
  $18 = (($16) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = $7;
  $22 = (($20) + ($21<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = (($19) + ($24<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $4;
  $28 = $7;
  $29 = (($27) + ($28<<1)|0);
  HEAP16[$29>>1] = $26;
  $30 = $7;
  $31 = (($30) + 1)|0;
  $7 = $31;
 }
 STACKTOP = sp;return;
}
function __Remove1Op($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $4 = $6;
 $5 = 0;
 while(1) {
  $7 = $4;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $3;
  $15 = ($13|0)==($14|0);
  $16 = $4;
  if ($15) {
   __RemoveElement($16);
   $5 = 1;
   continue;
  } else {
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 36|0);
   $4 = $18;
   continue;
  }
 }
 $19 = $5;
 STACKTOP = sp;return ($19|0);
}
function __Remove2Op($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = 0;
 $10 = $4;
 $7 = $10;
 $11 = $7;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = $9;
  $3 = $14;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 while(1) {
  $15 = $7;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   label = 10;
   break;
  }
  $18 = $7;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 36|0);
  $8 = $20;
  $21 = $8;
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  if ($23) {
   label = 5;
   break;
  }
  $25 = $7;
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $5;
  $30 = ($28|0)==($29|0);
  if ($30) {
   $31 = $8;
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $6;
   $36 = ($34|0)==($35|0);
   if ($36) {
    $37 = $8;
    __RemoveElement($37);
    $38 = $7;
    __RemoveElement($38);
    $9 = 1;
    continue;
   }
  }
  $39 = $7;
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($40)) + 36|0);
  $7 = $41;
 }
 if ((label|0) == 5) {
  $24 = $9;
  $3 = $24;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 10) {
  $42 = $9;
  $3 = $42;
  $43 = $3;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function __MultiplyMatrix($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $9 = sp;
 $2 = $0;
 $6 = 0;
 $11 = $2;
 $3 = $11;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = $6;
  $1 = $15;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 while(1) {
  $16 = $3;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 21;
   break;
  }
  $19 = $3;
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 36|0);
  $4 = $21;
  $22 = $4;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0|0);
  if ($24) {
   label = 5;
   break;
  }
  $26 = $3;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(1835103334);
  if ($30) {
   $31 = $4;
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(1835103334);
   if ($35) {
    $36 = $3;
    $37 = HEAP32[$36>>2]|0;
    $38 = (_cmsStageData($37)|0);
    $7 = $38;
    $39 = $4;
    $40 = HEAP32[$39>>2]|0;
    $41 = (_cmsStageData($40)|0);
    $8 = $41;
    $42 = $7;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)!=(0|0);
    if ($45) {
     label = 14;
     break;
    }
    $46 = $8;
    $47 = ((($46)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(0|0);
    if ($49) {
     label = 14;
     break;
    }
    $50 = $3;
    $51 = HEAP32[$50>>2]|0;
    $52 = (_cmsStageInputChannels($51)|0);
    $53 = ($52|0)!=(3);
    if ($53) {
     label = 14;
     break;
    }
    $54 = $3;
    $55 = HEAP32[$54>>2]|0;
    $56 = (_cmsStageOutputChannels($55)|0);
    $57 = ($56|0)!=(3);
    if ($57) {
     label = 14;
     break;
    }
    $58 = $4;
    $59 = HEAP32[$58>>2]|0;
    $60 = (_cmsStageInputChannels($59)|0);
    $61 = ($60|0)!=(3);
    if ($61) {
     label = 14;
     break;
    }
    $62 = $4;
    $63 = HEAP32[$62>>2]|0;
    $64 = (_cmsStageOutputChannels($63)|0);
    $65 = ($64|0)!=(3);
    if ($65) {
     label = 14;
     break;
    }
    $66 = $8;
    $67 = HEAP32[$66>>2]|0;
    $68 = $7;
    $69 = HEAP32[$68>>2]|0;
    __cmsMAT3per($9,$67,$69);
    $70 = $4;
    $71 = HEAP32[$70>>2]|0;
    $72 = ((($71)) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    $5 = $73;
    $74 = $4;
    __RemoveElement($74);
    $75 = $3;
    __RemoveElement($75);
    $76 = (_isFloatMatrixIdentity($9)|0);
    $77 = ($76|0)!=(0);
    if (!($77)) {
     $78 = $2;
     $79 = ((($78)) + 32|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = (_cmsStageAllocMatrix($80,3,3,$9,0)|0);
     $10 = $81;
     $82 = $10;
     $83 = ($82|0)==(0|0);
     if ($83) {
      label = 17;
      break;
     }
     $84 = $5;
     $85 = $10;
     $86 = ((($85)) + 36|0);
     HEAP32[$86>>2] = $84;
     $87 = $10;
     $88 = $3;
     HEAP32[$88>>2] = $87;
    }
    $6 = 1;
    continue;
   }
  }
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($90)) + 36|0);
  $3 = $91;
 }
 if ((label|0) == 5) {
  $25 = $6;
  $1 = $25;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 14) {
  $1 = 0;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 17) {
  $1 = 0;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 else if ((label|0) == 21) {
  $92 = $6;
  $1 = $92;
  $93 = $1;
  STACKTOP = sp;return ($93|0);
 }
 return (0)|0;
}
function __RemoveElement($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 $6 = $2;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $3 = $8;
 $9 = $3;
 $10 = $1;
 HEAP32[$10>>2] = $9;
 $11 = $2;
 _cmsStageFree($11);
 STACKTOP = sp;return;
}
function _isFloatMatrixIdentity($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp;
 $2 = $0;
 __cmsMAT3identity($3);
 $4 = 0;
 L1: while(1) {
  $6 = $4;
  $7 = ($6|0)<(3);
  if (!($7)) {
   label = 9;
   break;
  }
  $5 = 0;
  while(1) {
   $8 = $5;
   $9 = ($8|0)<(3);
   if (!($9)) {
    break;
   }
   $10 = $2;
   $11 = $4;
   $12 = (($10) + (($11*24)|0)|0);
   $13 = $5;
   $14 = (($12) + ($13<<3)|0);
   $15 = +HEAPF64[$14>>3];
   $16 = $4;
   $17 = (($3) + (($16*24)|0)|0);
   $18 = $5;
   $19 = (($17) + ($18<<3)|0);
   $20 = +HEAPF64[$19>>3];
   $21 = (_CloseEnoughFloat($15,$20)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    label = 6;
    break L1;
   }
   $23 = $5;
   $24 = (($23) + 1)|0;
   $5 = $24;
  }
  $25 = $4;
  $26 = (($25) + 1)|0;
  $4 = $26;
 }
 if ((label|0) == 6) {
  $1 = 0;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 9) {
  $1 = 1;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _CloseEnoughFloat($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $4 - $5;
 $7 = (+Math_abs((+$6)));
 $8 = $7 < 9.9999997473787516E-6;
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function __cmsGetFormatter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $12 = $5;
 $13 = (__cmsContextGetClientChunk($12,7)|0);
 $9 = $13;
 $14 = $9;
 $15 = HEAP32[$14>>2]|0;
 $10 = $15;
 while(1) {
  $16 = $10;
  $17 = ($16|0)!=(0|0);
  if (!($17)) {
   break;
  }
  $18 = $10;
  $19 = HEAP32[$18>>2]|0;
  $20 = $6;
  $21 = $7;
  $22 = $8;
  FUNCTION_TABLE_viiii[$19 & 0]($11,$20,$21,$22);
  $23 = HEAP32[$11>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   label = 4;
   break;
  }
  $25 = $10;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $10 = $27;
 }
 if ((label|0) == 4) {
  ;HEAP32[$0>>2]=HEAP32[$11>>2]|0;
  STACKTOP = sp;return;
 }
 $28 = $7;
 $29 = ($28|0)==(0);
 $30 = $6;
 $31 = $8;
 if ($29) {
  __cmsGetStockInputFormatter($0,$30,$31);
  STACKTOP = sp;return;
 } else {
  __cmsGetStockOutputFormatter($0,$30,$31);
  STACKTOP = sp;return;
 }
}
function __cmsGetStockInputFormatter($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $3 = $1;
 $4 = $2;
 $9 = $4;
 L1: do {
  switch ($9|0) {
  case 0:  {
   $5 = 0;
   while(1) {
    $10 = $5;
    $11 = ($10>>>0)<(43);
    if (!($11)) {
     break L1;
    }
    $12 = $5;
    $13 = (14092 + (($12*12)|0)|0);
    $7 = $13;
    $14 = $3;
    $15 = $7;
    $16 = ((($15)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 ^ -1;
    $19 = $14 & $18;
    $20 = $7;
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)==($21|0);
    if ($22) {
     break;
    }
    $26 = $5;
    $27 = (($26) + 1)|0;
    $5 = $27;
   }
   $23 = $7;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$6>>2] = $25;
   ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $5 = 0;
   while(1) {
    $28 = $5;
    $29 = ($28>>>0)<(7);
    if (!($29)) {
     break L1;
    }
    $30 = $5;
    $31 = (14608 + (($30*12)|0)|0);
    $8 = $31;
    $32 = $3;
    $33 = $8;
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 ^ -1;
    $37 = $32 & $36;
    $38 = $8;
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if ($40) {
     break;
    }
    $44 = $5;
    $45 = (($44) + 1)|0;
    $5 = $45;
   }
   $41 = $8;
   $42 = ((($41)) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$6>>2] = $43;
   ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;
   STACKTOP = sp;return;
   break;
  }
  default: {
  }
  }
 } while(0);
 HEAP32[$6>>2] = 0;
 ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;
 STACKTOP = sp;return;
}
function __cmsGetStockOutputFormatter($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 8|0;
 $3 = $1;
 $4 = $2;
 $9 = $3;
 $10 = $9 & -2097153;
 $3 = $10;
 $11 = $4;
 L1: do {
  switch ($11|0) {
  case 0:  {
   $5 = 0;
   while(1) {
    $12 = $5;
    $13 = ($12>>>0)<(55);
    if (!($13)) {
     break L1;
    }
    $14 = $5;
    $15 = (13348 + (($14*12)|0)|0);
    $7 = $15;
    $16 = $3;
    $17 = $7;
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 ^ -1;
    $21 = $16 & $20;
    $22 = $7;
    $23 = HEAP32[$22>>2]|0;
    $24 = ($21|0)==($23|0);
    if ($24) {
     break;
    }
    $28 = $5;
    $29 = (($28) + 1)|0;
    $5 = $29;
   }
   $25 = $7;
   $26 = ((($25)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$6>>2] = $27;
   ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   $5 = 0;
   while(1) {
    $30 = $5;
    $31 = ($30>>>0)<(7);
    if (!($31)) {
     break L1;
    }
    $32 = $5;
    $33 = (14008 + (($32*12)|0)|0);
    $8 = $33;
    $34 = $3;
    $35 = $8;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37 ^ -1;
    $39 = $34 & $38;
    $40 = $8;
    $41 = HEAP32[$40>>2]|0;
    $42 = ($39|0)==($41|0);
    if ($42) {
     break;
    }
    $46 = $5;
    $47 = (($46) + 1)|0;
    $5 = $47;
   }
   $43 = $8;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   HEAP32[$6>>2] = $45;
   ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;
   STACKTOP = sp;return;
   break;
  }
  default: {
  }
  }
 } while(0);
 HEAP32[$6>>2] = 0;
 ;HEAP32[$0>>2]=HEAP32[$6>>2]|0;
 STACKTOP = sp;return;
}
function _PackLabFloatFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $5;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 12;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $5;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_PixelSize($19)|0);
  $21 = $8;
  $22 = (($21>>>0) / ($20>>>0))&-1;
  $8 = $22;
  $23 = $6;
  $24 = +HEAPF32[$23>>2];
  $25 = $24;
  $26 = $25 * 100.0;
  $27 = $26;
  $28 = $9;
  HEAPF32[$28>>2] = $27;
  $29 = $6;
  $30 = ((($29)) + 4|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $31;
  $33 = $32 * 255.0;
  $34 = $33 - 128.0;
  $35 = $34;
  $36 = $9;
  $37 = $8;
  $38 = (($36) + ($37<<2)|0);
  HEAPF32[$38>>2] = $35;
  $39 = $6;
  $40 = ((($39)) + 8|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $41;
  $43 = $42 * 255.0;
  $44 = $43 - 128.0;
  $45 = $44;
  $46 = $9;
  $47 = $8;
  $48 = $47<<1;
  $49 = (($46) + ($48<<2)|0);
  HEAPF32[$49>>2] = $45;
  $50 = $7;
  $51 = ((($50)) + 4|0);
  $4 = $51;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 } else {
  $52 = $6;
  $53 = +HEAPF32[$52>>2];
  $54 = $53;
  $55 = $54 * 100.0;
  $56 = $55;
  $57 = $9;
  HEAPF32[$57>>2] = $56;
  $58 = $6;
  $59 = ((($58)) + 4|0);
  $60 = +HEAPF32[$59>>2];
  $61 = $60;
  $62 = $61 * 255.0;
  $63 = $62 - 128.0;
  $64 = $63;
  $65 = $9;
  $66 = ((($65)) + 4|0);
  HEAPF32[$66>>2] = $64;
  $67 = $6;
  $68 = ((($67)) + 8|0);
  $69 = +HEAPF32[$68>>2];
  $70 = $69;
  $71 = $70 * 255.0;
  $72 = $71 - 128.0;
  $73 = $72;
  $74 = $9;
  $75 = ((($74)) + 8|0);
  HEAPF32[$75>>2] = $73;
  $76 = $7;
  $77 = $5;
  $78 = ((($77)) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $79 >>> 7;
  $81 = $80 & 7;
  $82 = $81<<2;
  $83 = (12 + ($82))|0;
  $84 = (($76) + ($83)|0);
  $4 = $84;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 return (0)|0;
}
function _PackXYZFloatFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $5;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 12;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $5;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_PixelSize($19)|0);
  $21 = $8;
  $22 = (($21>>>0) / ($20>>>0))&-1;
  $8 = $22;
  $23 = $6;
  $24 = +HEAPF32[$23>>2];
  $25 = $24;
  $26 = $25 * 1.999969482421875;
  $27 = $26;
  $28 = $9;
  HEAPF32[$28>>2] = $27;
  $29 = $6;
  $30 = ((($29)) + 4|0);
  $31 = +HEAPF32[$30>>2];
  $32 = $31;
  $33 = $32 * 1.999969482421875;
  $34 = $33;
  $35 = $9;
  $36 = $8;
  $37 = (($35) + ($36<<2)|0);
  HEAPF32[$37>>2] = $34;
  $38 = $6;
  $39 = ((($38)) + 8|0);
  $40 = +HEAPF32[$39>>2];
  $41 = $40;
  $42 = $41 * 1.999969482421875;
  $43 = $42;
  $44 = $9;
  $45 = $8;
  $46 = $45<<1;
  $47 = (($44) + ($46<<2)|0);
  HEAPF32[$47>>2] = $43;
  $48 = $7;
  $49 = ((($48)) + 4|0);
  $4 = $49;
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 } else {
  $50 = $6;
  $51 = +HEAPF32[$50>>2];
  $52 = $51;
  $53 = $52 * 1.999969482421875;
  $54 = $53;
  $55 = $9;
  HEAPF32[$55>>2] = $54;
  $56 = $6;
  $57 = ((($56)) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $58;
  $60 = $59 * 1.999969482421875;
  $61 = $60;
  $62 = $9;
  $63 = ((($62)) + 4|0);
  HEAPF32[$63>>2] = $61;
  $64 = $6;
  $65 = ((($64)) + 8|0);
  $66 = +HEAPF32[$65>>2];
  $67 = $66;
  $68 = $67 * 1.999969482421875;
  $69 = $68;
  $70 = $9;
  $71 = ((($70)) + 8|0);
  HEAPF32[$71>>2] = $69;
  $72 = $7;
  $73 = $5;
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 >>> 7;
  $77 = $76 & 7;
  $78 = $77<<2;
  $79 = (12 + ($78))|0;
  $80 = (($72) + ($79)|0);
  $4 = $80;
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _PackLabDoubleFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $5;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 12;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $5;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_PixelSize($19)|0);
  $21 = $8;
  $22 = (($21>>>0) / ($20>>>0))&-1;
  $8 = $22;
  $23 = $6;
  $24 = +HEAPF32[$23>>2];
  $25 = $24;
  $26 = $25 * 100.0;
  $27 = $9;
  HEAPF64[$27>>3] = $26;
  $28 = $6;
  $29 = ((($28)) + 4|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $30;
  $32 = $31 * 255.0;
  $33 = $32 - 128.0;
  $34 = $9;
  $35 = $8;
  $36 = (($34) + ($35<<3)|0);
  HEAPF64[$36>>3] = $33;
  $37 = $6;
  $38 = ((($37)) + 8|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $39;
  $41 = $40 * 255.0;
  $42 = $41 - 128.0;
  $43 = $9;
  $44 = $8;
  $45 = $44<<1;
  $46 = (($43) + ($45<<3)|0);
  HEAPF64[$46>>3] = $42;
  $47 = $7;
  $48 = ((($47)) + 8|0);
  $4 = $48;
  $79 = $4;
  STACKTOP = sp;return ($79|0);
 } else {
  $49 = $6;
  $50 = +HEAPF32[$49>>2];
  $51 = $50;
  $52 = $51 * 100.0;
  $53 = $9;
  HEAPF64[$53>>3] = $52;
  $54 = $6;
  $55 = ((($54)) + 4|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $56;
  $58 = $57 * 255.0;
  $59 = $58 - 128.0;
  $60 = $9;
  $61 = ((($60)) + 8|0);
  HEAPF64[$61>>3] = $59;
  $62 = $6;
  $63 = ((($62)) + 8|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $64;
  $66 = $65 * 255.0;
  $67 = $66 - 128.0;
  $68 = $9;
  $69 = ((($68)) + 16|0);
  HEAPF64[$69>>3] = $67;
  $70 = $7;
  $71 = $5;
  $72 = ((($71)) + 4|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 >>> 7;
  $75 = $74 & 7;
  $76 = $75<<3;
  $77 = (24 + ($76))|0;
  $78 = (($70) + ($77)|0);
  $4 = $78;
  $79 = $4;
  STACKTOP = sp;return ($79|0);
 }
 return (0)|0;
}
function _PackXYZDoubleFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $5;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 12;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $5;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_PixelSize($19)|0);
  $21 = $8;
  $22 = (($21>>>0) / ($20>>>0))&-1;
  $8 = $22;
  $23 = $6;
  $24 = +HEAPF32[$23>>2];
  $25 = $24;
  $26 = $25 * 1.999969482421875;
  $27 = $9;
  HEAPF64[$27>>3] = $26;
  $28 = $6;
  $29 = ((($28)) + 4|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $30;
  $32 = $31 * 1.999969482421875;
  $33 = $9;
  $34 = $8;
  $35 = (($33) + ($34<<3)|0);
  HEAPF64[$35>>3] = $32;
  $36 = $6;
  $37 = ((($36)) + 8|0);
  $38 = +HEAPF32[$37>>2];
  $39 = $38;
  $40 = $39 * 1.999969482421875;
  $41 = $9;
  $42 = $8;
  $43 = $42<<1;
  $44 = (($41) + ($43<<3)|0);
  HEAPF64[$44>>3] = $40;
  $45 = $7;
  $46 = ((($45)) + 8|0);
  $4 = $46;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 } else {
  $47 = $6;
  $48 = +HEAPF32[$47>>2];
  $49 = $48;
  $50 = $49 * 1.999969482421875;
  $51 = $9;
  HEAPF64[$51>>3] = $50;
  $52 = $6;
  $53 = ((($52)) + 4|0);
  $54 = +HEAPF32[$53>>2];
  $55 = $54;
  $56 = $55 * 1.999969482421875;
  $57 = $9;
  $58 = ((($57)) + 8|0);
  HEAPF64[$58>>3] = $56;
  $59 = $6;
  $60 = ((($59)) + 8|0);
  $61 = +HEAPF32[$60>>2];
  $62 = $61;
  $63 = $62 * 1.999969482421875;
  $64 = $9;
  $65 = ((($64)) + 16|0);
  HEAPF64[$65>>3] = $63;
  $66 = $7;
  $67 = $5;
  $68 = ((($67)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $69 >>> 7;
  $71 = $70 & 7;
  $72 = $71<<3;
  $73 = (24 + ($72))|0;
  $74 = (($66) + ($73)|0);
  $4 = $74;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _PackFloatsFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0;
 var $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 3;
 $26 = $25 & 15;
 $9 = $26;
 $27 = $5;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 10;
 $31 = $30 & 1;
 $10 = $31;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 >>> 13;
 $36 = $35 & 1;
 $11 = $36;
 $37 = $5;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $12 = $41;
 $42 = $5;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 14;
 $46 = $45 & 1;
 $13 = $46;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 12;
 $51 = $50 & 1;
 $14 = $51;
 $52 = $10;
 $53 = $13;
 $54 = $52 ^ $53;
 $15 = $54;
 $55 = $5;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (_IsInkSpace($57)|0);
 $59 = ($58|0)!=(0);
 $60 = $59 ? 100.0 : 1.0;
 $16 = $60;
 $61 = $7;
 $17 = $61;
 $18 = 0.0;
 $20 = 0;
 $62 = $5;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (_PixelSize($64)|0);
 $66 = $8;
 $67 = (($66>>>0) / ($65>>>0))&-1;
 $8 = $67;
 $68 = $15;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $12;
  $20 = $70;
 }
 $19 = 0;
 while(1) {
  $71 = $19;
  $72 = $9;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $10;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $9;
   $77 = $19;
   $78 = (($76) - ($77))|0;
   $79 = (($78) - 1)|0;
   $81 = $79;
  } else {
   $80 = $19;
   $81 = $80;
  }
  $21 = $81;
  $82 = $6;
  $83 = $21;
  $84 = (($82) + ($83<<2)|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $85;
  $87 = $16;
  $88 = $86 * $87;
  $18 = $88;
  $89 = $11;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $16;
   $92 = $18;
   $93 = $91 - $92;
   $18 = $93;
  }
  $94 = $14;
  $95 = ($94|0)!=(0);
  $96 = $18;
  $97 = $96;
  $98 = $7;
  $99 = $19;
  $100 = $20;
  $101 = (($99) + ($100))|0;
  $102 = $8;
  $103 = Math_imul($101, $102)|0;
  $$sink1 = $95 ? $103 : $101;
  $104 = (($98) + ($$sink1<<2)|0);
  HEAPF32[$104>>2] = $97;
  $105 = $19;
  $106 = (($105) + 1)|0;
  $19 = $106;
 }
 $107 = $12;
 $108 = ($107|0)==(0);
 $109 = $13;
 $110 = ($109|0)!=(0);
 $or$cond = $108 & $110;
 if ($or$cond) {
  $111 = $17;
  $112 = ((($111)) + 4|0);
  $113 = $17;
  $114 = $9;
  $115 = (($114) - 1)|0;
  $116 = $115<<2;
  _memmove(($112|0),($113|0),($116|0))|0;
  $117 = $18;
  $118 = $117;
  $119 = $17;
  HEAPF32[$119>>2] = $118;
 }
 $120 = $5;
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $122 >>> 12;
 $124 = $123 & 1;
 $125 = ($124|0)!=(0);
 $126 = $7;
 if ($125) {
  $127 = ((($126)) + 4|0);
  $4 = $127;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 } else {
  $128 = $9;
  $129 = $12;
  $130 = (($128) + ($129))|0;
  $131 = $130<<2;
  $132 = (($126) + ($131)|0);
  $4 = $132;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 }
 return (0)|0;
}
function _PackDoublesFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0.0;
 var $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 3;
 $26 = $25 & 15;
 $9 = $26;
 $27 = $5;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 10;
 $31 = $30 & 1;
 $10 = $31;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 >>> 13;
 $36 = $35 & 1;
 $11 = $36;
 $37 = $5;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $12 = $41;
 $42 = $5;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 14;
 $46 = $45 & 1;
 $13 = $46;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 12;
 $51 = $50 & 1;
 $14 = $51;
 $52 = $10;
 $53 = $13;
 $54 = $52 ^ $53;
 $15 = $54;
 $55 = $5;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (_IsInkSpace($57)|0);
 $59 = ($58|0)!=(0);
 $60 = $59 ? 100.0 : 1.0;
 $16 = $60;
 $17 = 0.0;
 $61 = $7;
 $18 = $61;
 $20 = 0;
 $62 = $5;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (_PixelSize($64)|0);
 $66 = $8;
 $67 = (($66>>>0) / ($65>>>0))&-1;
 $8 = $67;
 $68 = $15;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $12;
  $20 = $70;
 }
 $19 = 0;
 while(1) {
  $71 = $19;
  $72 = $9;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $10;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $9;
   $77 = $19;
   $78 = (($76) - ($77))|0;
   $79 = (($78) - 1)|0;
   $81 = $79;
  } else {
   $80 = $19;
   $81 = $80;
  }
  $21 = $81;
  $82 = $6;
  $83 = $21;
  $84 = (($82) + ($83<<2)|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $85;
  $87 = $16;
  $88 = $86 * $87;
  $17 = $88;
  $89 = $11;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $16;
   $92 = $17;
   $93 = $91 - $92;
   $17 = $93;
  }
  $94 = $14;
  $95 = ($94|0)!=(0);
  $96 = $17;
  $97 = $7;
  $98 = $19;
  $99 = $20;
  $100 = (($98) + ($99))|0;
  $101 = $8;
  $102 = Math_imul($100, $101)|0;
  $$sink1 = $95 ? $102 : $100;
  $103 = (($97) + ($$sink1<<3)|0);
  HEAPF64[$103>>3] = $96;
  $104 = $19;
  $105 = (($104) + 1)|0;
  $19 = $105;
 }
 $106 = $12;
 $107 = ($106|0)==(0);
 $108 = $13;
 $109 = ($108|0)!=(0);
 $or$cond = $107 & $109;
 if ($or$cond) {
  $110 = $18;
  $111 = ((($110)) + 8|0);
  $112 = $18;
  $113 = $9;
  $114 = (($113) - 1)|0;
  $115 = $114<<3;
  _memmove(($111|0),($112|0),($115|0))|0;
  $116 = $17;
  $117 = $18;
  HEAPF64[$117>>3] = $116;
 }
 $118 = $5;
 $119 = ((($118)) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $120 >>> 12;
 $122 = $121 & 1;
 $123 = ($122|0)!=(0);
 $124 = $7;
 if ($123) {
  $125 = ((($124)) + 8|0);
  $4 = $125;
  $131 = $4;
  STACKTOP = sp;return ($131|0);
 } else {
  $126 = $9;
  $127 = $12;
  $128 = (($126) + ($127))|0;
  $129 = $128<<3;
  $130 = (($124) + ($129)|0);
  $4 = $130;
  $131 = $4;
  STACKTOP = sp;return ($131|0);
 }
 return (0)|0;
}
function _PackHalfFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 3;
 $26 = $25 & 15;
 $9 = $26;
 $27 = $5;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 10;
 $31 = $30 & 1;
 $10 = $31;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 >>> 13;
 $36 = $35 & 1;
 $11 = $36;
 $37 = $5;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $12 = $41;
 $42 = $5;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 14;
 $46 = $45 & 1;
 $13 = $46;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 12;
 $51 = $50 & 1;
 $14 = $51;
 $52 = $10;
 $53 = $13;
 $54 = $52 ^ $53;
 $15 = $54;
 $55 = $5;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (_IsInkSpace($57)|0);
 $59 = ($58|0)!=(0);
 $60 = $59 ? 100.0 : 1.0;
 $16 = $60;
 $61 = $7;
 $17 = $61;
 $18 = 0.0;
 $20 = 0;
 $62 = $5;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (_PixelSize($64)|0);
 $66 = $8;
 $67 = (($66>>>0) / ($65>>>0))&-1;
 $8 = $67;
 $68 = $15;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $12;
  $20 = $70;
 }
 $19 = 0;
 while(1) {
  $71 = $19;
  $72 = $9;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $10;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $9;
   $77 = $19;
   $78 = (($76) - ($77))|0;
   $79 = (($78) - 1)|0;
   $81 = $79;
  } else {
   $80 = $19;
   $81 = $80;
  }
  $21 = $81;
  $82 = $6;
  $83 = $21;
  $84 = (($82) + ($83<<2)|0);
  $85 = +HEAPF32[$84>>2];
  $86 = $16;
  $87 = $85 * $86;
  $18 = $87;
  $88 = $11;
  $89 = ($88|0)!=(0);
  if ($89) {
   $90 = $16;
   $91 = $18;
   $92 = $90 - $91;
   $18 = $92;
  }
  $93 = $14;
  $94 = ($93|0)!=(0);
  $95 = $18;
  $96 = (__cmsFloat2Half($95)|0);
  $97 = $7;
  $98 = $19;
  $99 = $20;
  $100 = (($98) + ($99))|0;
  $101 = $8;
  $102 = Math_imul($100, $101)|0;
  $$sink1 = $94 ? $102 : $100;
  $103 = (($97) + ($$sink1<<1)|0);
  HEAP16[$103>>1] = $96;
  $104 = $19;
  $105 = (($104) + 1)|0;
  $19 = $105;
 }
 $106 = $12;
 $107 = ($106|0)==(0);
 $108 = $13;
 $109 = ($108|0)!=(0);
 $or$cond = $107 & $109;
 if ($or$cond) {
  $110 = $17;
  $111 = ((($110)) + 2|0);
  $112 = $17;
  $113 = $9;
  $114 = (($113) - 1)|0;
  $115 = $114<<1;
  _memmove(($111|0),($112|0),($115|0))|0;
  $116 = $18;
  $117 = (__cmsFloat2Half($116)|0);
  $118 = $17;
  HEAP16[$118>>1] = $117;
 }
 $119 = $5;
 $120 = ((($119)) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $121 >>> 12;
 $123 = $122 & 1;
 $124 = ($123|0)!=(0);
 $125 = $7;
 if ($124) {
  $126 = ((($125)) + 2|0);
  $4 = $126;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 } else {
  $127 = $9;
  $128 = $12;
  $129 = (($127) + ($128))|0;
  $130 = $129<<1;
  $131 = (($125) + ($130)|0);
  $4 = $131;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 return (0)|0;
}
function _IsInkSpace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 >>> 16;
 $5 = $4 & 31;
 switch ($5|0) {
 case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 22: case 21: case 20: case 19: case 6: case 5:  {
  $1 = 1;
  break;
 }
 default: {
  $1 = 0;
 }
 }
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _PixelSize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = $4 & 7;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0);
 if ($7) {
  $1 = 8;
 } else {
  $8 = $3;
  $1 = $8;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _PackLabDoubleFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 12;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 $17 = $7;
 if ($16) {
  $10 = $17;
  $18 = $6;
  _cmsLabEncoded2Float($9,$18);
  $19 = +HEAPF64[$9>>3];
  $20 = $10;
  HEAPF64[$20>>3] = $19;
  $21 = ((($9)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $10;
  $24 = $8;
  $25 = (($23) + ($24<<3)|0);
  HEAPF64[$25>>3] = $22;
  $26 = ((($9)) + 16|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $10;
  $29 = $8;
  $30 = $29<<1;
  $31 = (($28) + ($30<<3)|0);
  HEAPF64[$31>>3] = $27;
  $32 = $7;
  $33 = ((($32)) + 8|0);
  $4 = $33;
  $44 = $4;
  STACKTOP = sp;return ($44|0);
 } else {
  $34 = $6;
  _cmsLabEncoded2Float($17,$34);
  $35 = $7;
  $36 = $5;
  $37 = ((($36)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 >>> 7;
  $40 = $39 & 7;
  $41 = $40<<3;
  $42 = (24 + ($41))|0;
  $43 = (($35) + ($42)|0);
  $4 = $43;
  $44 = $4;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _PackXYZDoubleFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 >>> 12;
 $15 = $14 & 1;
 $16 = ($15|0)!=(0);
 $17 = $7;
 if ($16) {
  $10 = $17;
  $18 = $6;
  _cmsXYZEncoded2Float($9,$18);
  $19 = $5;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_PixelSize($21)|0);
  $23 = $8;
  $24 = (($23>>>0) / ($22>>>0))&-1;
  $8 = $24;
  $25 = +HEAPF64[$9>>3];
  $26 = $10;
  HEAPF64[$26>>3] = $25;
  $27 = ((($9)) + 8|0);
  $28 = +HEAPF64[$27>>3];
  $29 = $10;
  $30 = $8;
  $31 = (($29) + ($30<<3)|0);
  HEAPF64[$31>>3] = $28;
  $32 = ((($9)) + 16|0);
  $33 = +HEAPF64[$32>>3];
  $34 = $10;
  $35 = $8;
  $36 = $35<<1;
  $37 = (($34) + ($36<<3)|0);
  HEAPF64[$37>>3] = $33;
  $38 = $7;
  $39 = ((($38)) + 8|0);
  $4 = $39;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 } else {
  $40 = $6;
  _cmsXYZEncoded2Float($17,$40);
  $41 = $7;
  $42 = $5;
  $43 = ((($42)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $44 >>> 7;
  $46 = $45 & 7;
  $47 = $46<<3;
  $48 = (24 + ($47))|0;
  $49 = (($41) + ($48)|0);
  $4 = $49;
  $50 = $4;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _PackLabFloatFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $6;
 _cmsLabEncoded2Float($9,$11);
 $12 = $5;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >>> 12;
 $16 = $15 & 1;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $7;
  $10 = $18;
  $19 = $5;
  $20 = ((($19)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_PixelSize($21)|0);
  $23 = $8;
  $24 = (($23>>>0) / ($22>>>0))&-1;
  $8 = $24;
  $25 = +HEAPF64[$9>>3];
  $26 = $25;
  $27 = $10;
  HEAPF32[$27>>2] = $26;
  $28 = ((($9)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $29;
  $31 = $10;
  $32 = $8;
  $33 = (($31) + ($32<<2)|0);
  HEAPF32[$33>>2] = $30;
  $34 = ((($9)) + 16|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $35;
  $37 = $10;
  $38 = $8;
  $39 = $38<<1;
  $40 = (($37) + ($39<<2)|0);
  HEAPF32[$40>>2] = $36;
  $41 = $7;
  $42 = ((($41)) + 4|0);
  $4 = $42;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 } else {
  $43 = +HEAPF64[$9>>3];
  $44 = $43;
  $45 = $7;
  HEAPF32[$45>>2] = $44;
  $46 = ((($9)) + 8|0);
  $47 = +HEAPF64[$46>>3];
  $48 = $47;
  $49 = $7;
  $50 = ((($49)) + 4|0);
  HEAPF32[$50>>2] = $48;
  $51 = ((($9)) + 16|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $52;
  $54 = $7;
  $55 = ((($54)) + 8|0);
  HEAPF32[$55>>2] = $53;
  $56 = $7;
  $57 = $5;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $59 >>> 7;
  $61 = $60 & 7;
  $62 = (3 + ($61))|0;
  $63 = $62<<2;
  $64 = (($56) + ($63)|0);
  $4 = $64;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _PackXYZFloatFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = sp + 24|0;
 $11 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 >>> 12;
 $17 = $16 & 1;
 $18 = ($17|0)!=(0);
 $19 = $7;
 if ($18) {
  $10 = $19;
  $20 = $6;
  _cmsXYZEncoded2Float($9,$20);
  $21 = $5;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_PixelSize($23)|0);
  $25 = $8;
  $26 = (($25>>>0) / ($24>>>0))&-1;
  $8 = $26;
  $27 = +HEAPF64[$9>>3];
  $28 = $27;
  $29 = $10;
  HEAPF32[$29>>2] = $28;
  $30 = ((($9)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $31;
  $33 = $10;
  $34 = $8;
  $35 = (($33) + ($34<<2)|0);
  HEAPF32[$35>>2] = $32;
  $36 = ((($9)) + 16|0);
  $37 = +HEAPF64[$36>>3];
  $38 = $37;
  $39 = $10;
  $40 = $8;
  $41 = $40<<1;
  $42 = (($39) + ($41<<2)|0);
  HEAPF32[$42>>2] = $38;
  $43 = $7;
  $44 = ((($43)) + 4|0);
  $4 = $44;
  $68 = $4;
  STACKTOP = sp;return ($68|0);
 } else {
  $12 = $19;
  $45 = $6;
  _cmsXYZEncoded2Float($11,$45);
  $46 = +HEAPF64[$11>>3];
  $47 = $46;
  $48 = $12;
  HEAPF32[$48>>2] = $47;
  $49 = ((($11)) + 8|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $50;
  $52 = $12;
  $53 = ((($52)) + 4|0);
  HEAPF32[$53>>2] = $51;
  $54 = ((($11)) + 16|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $55;
  $57 = $12;
  $58 = ((($57)) + 8|0);
  HEAPF32[$58>>2] = $56;
  $59 = $7;
  $60 = $5;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $62 >>> 7;
  $64 = $63 & 7;
  $65 = $64<<2;
  $66 = (12 + ($65))|0;
  $67 = (($59) + ($66)|0);
  $4 = $67;
  $68 = $4;
  STACKTOP = sp;return ($68|0);
 }
 return (0)|0;
}
function _PackDoubleFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0.0;
 var $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 3;
 $26 = $25 & 15;
 $9 = $26;
 $27 = $5;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 10;
 $31 = $30 & 1;
 $10 = $31;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 >>> 13;
 $36 = $35 & 1;
 $11 = $36;
 $37 = $5;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $12 = $41;
 $42 = $5;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 14;
 $46 = $45 & 1;
 $13 = $46;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 12;
 $51 = $50 & 1;
 $14 = $51;
 $52 = $10;
 $53 = $13;
 $54 = $52 ^ $53;
 $15 = $54;
 $55 = $5;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (_IsInkSpace($57)|0);
 $59 = ($58|0)!=(0);
 $60 = $59 ? 655.35000000000002 : 65535.0;
 $16 = $60;
 $17 = 0.0;
 $61 = $7;
 $18 = $61;
 $20 = 0;
 $62 = $5;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (_PixelSize($64)|0);
 $66 = $8;
 $67 = (($66>>>0) / ($65>>>0))&-1;
 $8 = $67;
 $68 = $15;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $12;
  $20 = $70;
 }
 $19 = 0;
 while(1) {
  $71 = $19;
  $72 = $9;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $10;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $9;
   $77 = $19;
   $78 = (($76) - ($77))|0;
   $79 = (($78) - 1)|0;
   $81 = $79;
  } else {
   $80 = $19;
   $81 = $80;
  }
  $21 = $81;
  $82 = $6;
  $83 = $21;
  $84 = (($82) + ($83<<1)|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = (+($85&65535));
  $87 = $16;
  $88 = $86 / $87;
  $17 = $88;
  $89 = $11;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $16;
   $92 = $17;
   $93 = $91 - $92;
   $17 = $93;
  }
  $94 = $14;
  $95 = ($94|0)!=(0);
  $96 = $17;
  $97 = $7;
  $98 = $19;
  $99 = $20;
  $100 = (($98) + ($99))|0;
  $101 = $8;
  $102 = Math_imul($100, $101)|0;
  $$sink1 = $95 ? $102 : $100;
  $103 = (($97) + ($$sink1<<3)|0);
  HEAPF64[$103>>3] = $96;
  $104 = $19;
  $105 = (($104) + 1)|0;
  $19 = $105;
 }
 $106 = $12;
 $107 = ($106|0)==(0);
 $108 = $13;
 $109 = ($108|0)!=(0);
 $or$cond = $107 & $109;
 if ($or$cond) {
  $110 = $18;
  $111 = ((($110)) + 8|0);
  $112 = $18;
  $113 = $9;
  $114 = (($113) - 1)|0;
  $115 = $114<<3;
  _memmove(($111|0),($112|0),($115|0))|0;
  $116 = $17;
  $117 = $18;
  HEAPF64[$117>>3] = $116;
 }
 $118 = $5;
 $119 = ((($118)) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $120 >>> 12;
 $122 = $121 & 1;
 $123 = ($122|0)!=(0);
 $124 = $7;
 if ($123) {
  $125 = ((($124)) + 8|0);
  $4 = $125;
  $131 = $4;
  STACKTOP = sp;return ($131|0);
 } else {
  $126 = $9;
  $127 = $12;
  $128 = (($126) + ($127))|0;
  $129 = $128<<3;
  $130 = (($124) + ($129)|0);
  $4 = $130;
  $131 = $4;
  STACKTOP = sp;return ($131|0);
 }
 return (0)|0;
}
function _PackFloatFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0;
 var $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 3;
 $26 = $25 & 15;
 $9 = $26;
 $27 = $5;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 10;
 $31 = $30 & 1;
 $10 = $31;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 >>> 13;
 $36 = $35 & 1;
 $11 = $36;
 $37 = $5;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $12 = $41;
 $42 = $5;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 14;
 $46 = $45 & 1;
 $13 = $46;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 12;
 $51 = $50 & 1;
 $14 = $51;
 $52 = $10;
 $53 = $13;
 $54 = $52 ^ $53;
 $15 = $54;
 $55 = $5;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (_IsInkSpace($57)|0);
 $59 = ($58|0)!=(0);
 $60 = $59 ? 655.35000000000002 : 65535.0;
 $16 = $60;
 $17 = 0.0;
 $61 = $7;
 $18 = $61;
 $20 = 0;
 $62 = $5;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (_PixelSize($64)|0);
 $66 = $8;
 $67 = (($66>>>0) / ($65>>>0))&-1;
 $8 = $67;
 $68 = $15;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $12;
  $20 = $70;
 }
 $19 = 0;
 while(1) {
  $71 = $19;
  $72 = $9;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $10;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $9;
   $77 = $19;
   $78 = (($76) - ($77))|0;
   $79 = (($78) - 1)|0;
   $81 = $79;
  } else {
   $80 = $19;
   $81 = $80;
  }
  $21 = $81;
  $82 = $6;
  $83 = $21;
  $84 = (($82) + ($83<<1)|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = (+($85&65535));
  $87 = $16;
  $88 = $86 / $87;
  $17 = $88;
  $89 = $11;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $16;
   $92 = $17;
   $93 = $91 - $92;
   $17 = $93;
  }
  $94 = $14;
  $95 = ($94|0)!=(0);
  $96 = $17;
  $97 = $96;
  $98 = $7;
  $99 = $19;
  $100 = $20;
  $101 = (($99) + ($100))|0;
  $102 = $8;
  $103 = Math_imul($101, $102)|0;
  $$sink1 = $95 ? $103 : $101;
  $104 = (($98) + ($$sink1<<2)|0);
  HEAPF32[$104>>2] = $97;
  $105 = $19;
  $106 = (($105) + 1)|0;
  $19 = $106;
 }
 $107 = $12;
 $108 = ($107|0)==(0);
 $109 = $13;
 $110 = ($109|0)!=(0);
 $or$cond = $108 & $110;
 if ($or$cond) {
  $111 = $18;
  $112 = ((($111)) + 4|0);
  $113 = $18;
  $114 = $9;
  $115 = (($114) - 1)|0;
  $116 = $115<<2;
  _memmove(($112|0),($113|0),($116|0))|0;
  $117 = $17;
  $118 = $117;
  $119 = $18;
  HEAPF32[$119>>2] = $118;
 }
 $120 = $5;
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $122 >>> 12;
 $124 = $123 & 1;
 $125 = ($124|0)!=(0);
 $126 = $7;
 if ($125) {
  $127 = ((($126)) + 4|0);
  $4 = $127;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 } else {
  $128 = $9;
  $129 = $12;
  $130 = (($128) + ($129))|0;
  $131 = $130<<2;
  $132 = (($126) + ($131)|0);
  $4 = $132;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 }
 return (0)|0;
}
function _PackHalfFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0;
 var $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 3;
 $26 = $25 & 15;
 $9 = $26;
 $27 = $5;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 10;
 $31 = $30 & 1;
 $10 = $31;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 >>> 13;
 $36 = $35 & 1;
 $11 = $36;
 $37 = $5;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $12 = $41;
 $42 = $5;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 14;
 $46 = $45 & 1;
 $13 = $46;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 12;
 $51 = $50 & 1;
 $14 = $51;
 $52 = $10;
 $53 = $13;
 $54 = $52 ^ $53;
 $15 = $54;
 $55 = $5;
 $56 = ((($55)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (_IsInkSpace($57)|0);
 $59 = ($58|0)!=(0);
 $60 = $59 ? 655.3499755859375 : 65535.0;
 $16 = $60;
 $17 = 0.0;
 $61 = $7;
 $18 = $61;
 $20 = 0;
 $62 = $5;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (_PixelSize($64)|0);
 $66 = $8;
 $67 = (($66>>>0) / ($65>>>0))&-1;
 $8 = $67;
 $68 = $15;
 $69 = ($68|0)!=(0);
 if ($69) {
  $70 = $12;
  $20 = $70;
 }
 $19 = 0;
 while(1) {
  $71 = $19;
  $72 = $9;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $10;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $9;
   $77 = $19;
   $78 = (($76) - ($77))|0;
   $79 = (($78) - 1)|0;
   $81 = $79;
  } else {
   $80 = $19;
   $81 = $80;
  }
  $21 = $81;
  $82 = $6;
  $83 = $21;
  $84 = (($82) + ($83<<1)|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = (+($85&65535));
  $87 = $16;
  $88 = $86 / $87;
  $17 = $88;
  $89 = $11;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $16;
   $92 = $17;
   $93 = $91 - $92;
   $17 = $93;
  }
  $94 = $14;
  $95 = ($94|0)!=(0);
  $96 = $17;
  $97 = (__cmsFloat2Half($96)|0);
  $98 = $7;
  $99 = $19;
  $100 = $20;
  $101 = (($99) + ($100))|0;
  $102 = $8;
  $103 = Math_imul($101, $102)|0;
  $$sink1 = $95 ? $103 : $101;
  $104 = (($98) + ($$sink1<<1)|0);
  HEAP16[$104>>1] = $97;
  $105 = $19;
  $106 = (($105) + 1)|0;
  $19 = $106;
 }
 $107 = $12;
 $108 = ($107|0)==(0);
 $109 = $13;
 $110 = ($109|0)!=(0);
 $or$cond = $108 & $110;
 if ($or$cond) {
  $111 = $18;
  $112 = ((($111)) + 2|0);
  $113 = $18;
  $114 = $9;
  $115 = (($114) - 1)|0;
  $116 = $115<<1;
  _memmove(($112|0),($113|0),($116|0))|0;
  $117 = $17;
  $118 = (__cmsFloat2Half($117)|0);
  $119 = $18;
  HEAP16[$119>>1] = $118;
 }
 $120 = $5;
 $121 = ((($120)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $122 >>> 12;
 $124 = $123 & 1;
 $125 = ($124|0)!=(0);
 $126 = $7;
 if ($125) {
  $127 = ((($126)) + 2|0);
  $4 = $127;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 } else {
  $128 = $9;
  $129 = $12;
  $130 = (($128) + ($129))|0;
  $131 = $130<<1;
  $132 = (($126) + ($131)|0);
  $4 = $132;
  $133 = $4;
  STACKTOP = sp;return ($133|0);
 }
 return (0)|0;
}
function _Pack1Byte($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10*65281)|0;
 $12 = (($11) + 8388608)|0;
 $13 = $12 >>> 24;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $6;
 $17 = ((($16)) + 1|0);
 $6 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $6;
 STACKTOP = sp;return ($18|0);
}
function _Pack1ByteSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10*65281)|0;
 $12 = (($11) + 8388608)|0;
 $13 = $12 >>> 24;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $6;
 $17 = ((($16)) + 1|0);
 $6 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $6;
 $19 = ((($18)) + 1|0);
 $6 = $19;
 $20 = $6;
 STACKTOP = sp;return ($20|0);
}
function _Pack1ByteSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 1|0);
 $6 = $9;
 $10 = $5;
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ($12*65281)|0;
 $14 = (($13) + 8388608)|0;
 $15 = $14 >>> 24;
 $16 = $15 & 255;
 $17 = $16&255;
 $18 = $6;
 $19 = ((($18)) + 1|0);
 $6 = $19;
 HEAP8[$18>>0] = $17;
 $20 = $6;
 STACKTOP = sp;return ($20|0);
}
function _Pack1ByteReversed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (65535 - ($10))|0;
 $12 = $11&65535;
 $13 = $12&65535;
 $14 = ($13*65281)|0;
 $15 = (($14) + 8388608)|0;
 $16 = $15 >>> 24;
 $17 = $16 & 255;
 $18 = $17&255;
 $19 = $6;
 $20 = ((($19)) + 1|0);
 $6 = $20;
 HEAP8[$19>>0] = $18;
 $21 = $6;
 STACKTOP = sp;return ($21|0);
}
function _PackLabV2_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = (_FomLabV4ToLabV2($9)|0);
 $11 = $10&65535;
 $12 = ($11*65281)|0;
 $13 = (($12) + 8388608)|0;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $6;
 $18 = ((($17)) + 1|0);
 $6 = $18;
 HEAP8[$17>>0] = $16;
 $19 = $5;
 $20 = ((($19)) + 2|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = (_FomLabV4ToLabV2($21)|0);
 $23 = $22&65535;
 $24 = ($23*65281)|0;
 $25 = (($24) + 8388608)|0;
 $26 = $25 >>> 24;
 $27 = $26 & 255;
 $28 = $27&255;
 $29 = $6;
 $30 = ((($29)) + 1|0);
 $6 = $30;
 HEAP8[$29>>0] = $28;
 $31 = $5;
 $32 = ((($31)) + 4|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = (_FomLabV4ToLabV2($33)|0);
 $35 = $34&65535;
 $36 = ($35*65281)|0;
 $37 = (($36) + 8388608)|0;
 $38 = $37 >>> 24;
 $39 = $38 & 255;
 $40 = $39&255;
 $41 = $6;
 $42 = ((($41)) + 1|0);
 $6 = $42;
 HEAP8[$41>>0] = $40;
 $43 = $6;
 STACKTOP = sp;return ($43|0);
}
function _PackALabV2_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 1|0);
 $6 = $9;
 $10 = $5;
 $11 = HEAP16[$10>>1]|0;
 $12 = (_FomLabV4ToLabV2($11)|0);
 $13 = $12&65535;
 $14 = ($13*65281)|0;
 $15 = (($14) + 8388608)|0;
 $16 = $15 >>> 24;
 $17 = $16 & 255;
 $18 = $17&255;
 $19 = $6;
 $20 = ((($19)) + 1|0);
 $6 = $20;
 HEAP8[$19>>0] = $18;
 $21 = $5;
 $22 = ((($21)) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = (_FomLabV4ToLabV2($23)|0);
 $25 = $24&65535;
 $26 = ($25*65281)|0;
 $27 = (($26) + 8388608)|0;
 $28 = $27 >>> 24;
 $29 = $28 & 255;
 $30 = $29&255;
 $31 = $6;
 $32 = ((($31)) + 1|0);
 $6 = $32;
 HEAP8[$31>>0] = $30;
 $33 = $5;
 $34 = ((($33)) + 4|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = (_FomLabV4ToLabV2($35)|0);
 $37 = $36&65535;
 $38 = ($37*65281)|0;
 $39 = (($38) + 8388608)|0;
 $40 = $39 >>> 24;
 $41 = $40 & 255;
 $42 = $41&255;
 $43 = $6;
 $44 = ((($43)) + 1|0);
 $6 = $44;
 HEAP8[$43>>0] = $42;
 $45 = $6;
 STACKTOP = sp;return ($45|0);
}
function _PackLabV2_16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = (_FomLabV4ToLabV2($9)|0);
 $11 = $6;
 HEAP16[$11>>1] = $10;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $5;
 $15 = ((($14)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = (_FomLabV4ToLabV2($16)|0);
 $18 = $6;
 HEAP16[$18>>1] = $17;
 $19 = $6;
 $20 = ((($19)) + 2|0);
 $6 = $20;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = (_FomLabV4ToLabV2($23)|0);
 $25 = $6;
 HEAP16[$25>>1] = $24;
 $26 = $6;
 $27 = ((($26)) + 2|0);
 $6 = $27;
 $28 = $6;
 STACKTOP = sp;return ($28|0);
}
function _Pack3BytesOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 & 255;
 $12 = $11&255;
 $13 = $6;
 $14 = ((($13)) + 1|0);
 $6 = $14;
 HEAP8[$13>>0] = $12;
 $15 = $5;
 $16 = ((($15)) + 2|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = $18 & 255;
 $20 = $19&255;
 $21 = $6;
 $22 = ((($21)) + 1|0);
 $6 = $22;
 HEAP8[$21>>0] = $20;
 $23 = $5;
 $24 = ((($23)) + 4|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = $26 & 255;
 $28 = $27&255;
 $29 = $6;
 $30 = ((($29)) + 1|0);
 $6 = $30;
 HEAP8[$29>>0] = $28;
 $31 = $6;
 STACKTOP = sp;return ($31|0);
}
function _Pack3BytesAndSkip1Optimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 & 255;
 $12 = $11&255;
 $13 = $6;
 $14 = ((($13)) + 1|0);
 $6 = $14;
 HEAP8[$13>>0] = $12;
 $15 = $5;
 $16 = ((($15)) + 2|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = $18 & 255;
 $20 = $19&255;
 $21 = $6;
 $22 = ((($21)) + 1|0);
 $6 = $22;
 HEAP8[$21>>0] = $20;
 $23 = $5;
 $24 = ((($23)) + 4|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = $26 & 255;
 $28 = $27&255;
 $29 = $6;
 $30 = ((($29)) + 1|0);
 $6 = $30;
 HEAP8[$29>>0] = $28;
 $31 = $6;
 $32 = ((($31)) + 1|0);
 $6 = $32;
 $33 = $6;
 STACKTOP = sp;return ($33|0);
}
function _Pack3BytesAndSkip1SwapFirstOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 1|0);
 $6 = $9;
 $10 = $5;
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = $12 & 255;
 $14 = $13&255;
 $15 = $6;
 $16 = ((($15)) + 1|0);
 $6 = $16;
 HEAP8[$15>>0] = $14;
 $17 = $5;
 $18 = ((($17)) + 2|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = $20 & 255;
 $22 = $21&255;
 $23 = $6;
 $24 = ((($23)) + 1|0);
 $6 = $24;
 HEAP8[$23>>0] = $22;
 $25 = $5;
 $26 = ((($25)) + 4|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = $28 & 255;
 $30 = $29&255;
 $31 = $6;
 $32 = ((($31)) + 1|0);
 $6 = $32;
 HEAP8[$31>>0] = $30;
 $33 = $6;
 STACKTOP = sp;return ($33|0);
}
function _Pack3BytesAndSkip1SwapSwapFirstOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 & 255;
 $13 = $12&255;
 $14 = $6;
 $15 = ((($14)) + 1|0);
 $6 = $15;
 HEAP8[$14>>0] = $13;
 $16 = $5;
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = $19 & 255;
 $21 = $20&255;
 $22 = $6;
 $23 = ((($22)) + 1|0);
 $6 = $23;
 HEAP8[$22>>0] = $21;
 $24 = $5;
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = $26 & 255;
 $28 = $27&255;
 $29 = $6;
 $30 = ((($29)) + 1|0);
 $6 = $30;
 HEAP8[$29>>0] = $28;
 $31 = $6;
 $32 = ((($31)) + 1|0);
 $6 = $32;
 $33 = $6;
 STACKTOP = sp;return ($33|0);
}
function _Pack3BytesAndSkip1SwapOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 1|0);
 $6 = $9;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $6;
 $17 = ((($16)) + 1|0);
 $6 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $5;
 $19 = ((($18)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = $21 & 255;
 $23 = $22&255;
 $24 = $6;
 $25 = ((($24)) + 1|0);
 $6 = $25;
 HEAP8[$24>>0] = $23;
 $26 = $5;
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = $28 & 255;
 $30 = $29&255;
 $31 = $6;
 $32 = ((($31)) + 1|0);
 $6 = $32;
 HEAP8[$31>>0] = $30;
 $33 = $6;
 STACKTOP = sp;return ($33|0);
}
function _Pack3BytesSwapOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $11 & 255;
 $13 = $12&255;
 $14 = $6;
 $15 = ((($14)) + 1|0);
 $6 = $15;
 HEAP8[$14>>0] = $13;
 $16 = $5;
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = $19 & 255;
 $21 = $20&255;
 $22 = $6;
 $23 = ((($22)) + 1|0);
 $6 = $23;
 HEAP8[$22>>0] = $21;
 $24 = $5;
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = $26 & 255;
 $28 = $27&255;
 $29 = $6;
 $30 = ((($29)) + 1|0);
 $6 = $30;
 HEAP8[$29>>0] = $28;
 $31 = $6;
 STACKTOP = sp;return ($31|0);
}
function _Pack3Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10*65281)|0;
 $12 = (($11) + 8388608)|0;
 $13 = $12 >>> 24;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $6;
 $17 = ((($16)) + 1|0);
 $6 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $5;
 $19 = ((($18)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24 & 255;
 $26 = $25&255;
 $27 = $6;
 $28 = ((($27)) + 1|0);
 $6 = $28;
 HEAP8[$27>>0] = $26;
 $29 = $5;
 $30 = ((($29)) + 4|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32*65281)|0;
 $34 = (($33) + 8388608)|0;
 $35 = $34 >>> 24;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = $6;
 $39 = ((($38)) + 1|0);
 $6 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $6;
 STACKTOP = sp;return ($40|0);
}
function _Pack3BytesAndSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10*65281)|0;
 $12 = (($11) + 8388608)|0;
 $13 = $12 >>> 24;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $6;
 $17 = ((($16)) + 1|0);
 $6 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $5;
 $19 = ((($18)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24 & 255;
 $26 = $25&255;
 $27 = $6;
 $28 = ((($27)) + 1|0);
 $6 = $28;
 HEAP8[$27>>0] = $26;
 $29 = $5;
 $30 = ((($29)) + 4|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32*65281)|0;
 $34 = (($33) + 8388608)|0;
 $35 = $34 >>> 24;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = $6;
 $39 = ((($38)) + 1|0);
 $6 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $6;
 $41 = ((($40)) + 1|0);
 $6 = $41;
 $42 = $6;
 STACKTOP = sp;return ($42|0);
}
function _Pack3BytesAndSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 1|0);
 $6 = $9;
 $10 = $5;
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = ($12*65281)|0;
 $14 = (($13) + 8388608)|0;
 $15 = $14 >>> 24;
 $16 = $15 & 255;
 $17 = $16&255;
 $18 = $6;
 $19 = ((($18)) + 1|0);
 $6 = $19;
 HEAP8[$18>>0] = $17;
 $20 = $5;
 $21 = ((($20)) + 2|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = ($23*65281)|0;
 $25 = (($24) + 8388608)|0;
 $26 = $25 >>> 24;
 $27 = $26 & 255;
 $28 = $27&255;
 $29 = $6;
 $30 = ((($29)) + 1|0);
 $6 = $30;
 HEAP8[$29>>0] = $28;
 $31 = $5;
 $32 = ((($31)) + 4|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ($34*65281)|0;
 $36 = (($35) + 8388608)|0;
 $37 = $36 >>> 24;
 $38 = $37 & 255;
 $39 = $38&255;
 $40 = $6;
 $41 = ((($40)) + 1|0);
 $6 = $41;
 HEAP8[$40>>0] = $39;
 $42 = $6;
 STACKTOP = sp;return ($42|0);
}
function _Pack3BytesAndSkip1SwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11*65281)|0;
 $13 = (($12) + 8388608)|0;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $6;
 $18 = ((($17)) + 1|0);
 $6 = $18;
 HEAP8[$17>>0] = $16;
 $19 = $5;
 $20 = ((($19)) + 2|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22*65281)|0;
 $24 = (($23) + 8388608)|0;
 $25 = $24 >>> 24;
 $26 = $25 & 255;
 $27 = $26&255;
 $28 = $6;
 $29 = ((($28)) + 1|0);
 $6 = $29;
 HEAP8[$28>>0] = $27;
 $30 = $5;
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32*65281)|0;
 $34 = (($33) + 8388608)|0;
 $35 = $34 >>> 24;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = $6;
 $39 = ((($38)) + 1|0);
 $6 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $6;
 $41 = ((($40)) + 1|0);
 $6 = $41;
 $42 = $6;
 STACKTOP = sp;return ($42|0);
}
function _Pack3BytesAndSkip1Swap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 1|0);
 $6 = $9;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($13*65281)|0;
 $15 = (($14) + 8388608)|0;
 $16 = $15 >>> 24;
 $17 = $16 & 255;
 $18 = $17&255;
 $19 = $6;
 $20 = ((($19)) + 1|0);
 $6 = $20;
 HEAP8[$19>>0] = $18;
 $21 = $5;
 $22 = ((($21)) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = ($24*65281)|0;
 $26 = (($25) + 8388608)|0;
 $27 = $26 >>> 24;
 $28 = $27 & 255;
 $29 = $28&255;
 $30 = $6;
 $31 = ((($30)) + 1|0);
 $6 = $31;
 HEAP8[$30>>0] = $29;
 $32 = $5;
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ($34*65281)|0;
 $36 = (($35) + 8388608)|0;
 $37 = $36 >>> 24;
 $38 = $37 & 255;
 $39 = $38&255;
 $40 = $6;
 $41 = ((($40)) + 1|0);
 $6 = $41;
 HEAP8[$40>>0] = $39;
 $42 = $6;
 STACKTOP = sp;return ($42|0);
}
function _Pack3BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11*65281)|0;
 $13 = (($12) + 8388608)|0;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $6;
 $18 = ((($17)) + 1|0);
 $6 = $18;
 HEAP8[$17>>0] = $16;
 $19 = $5;
 $20 = ((($19)) + 2|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22*65281)|0;
 $24 = (($23) + 8388608)|0;
 $25 = $24 >>> 24;
 $26 = $25 & 255;
 $27 = $26&255;
 $28 = $6;
 $29 = ((($28)) + 1|0);
 $6 = $29;
 HEAP8[$28>>0] = $27;
 $30 = $5;
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32*65281)|0;
 $34 = (($33) + 8388608)|0;
 $35 = $34 >>> 24;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = $6;
 $39 = ((($38)) + 1|0);
 $6 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $6;
 STACKTOP = sp;return ($40|0);
}
function _Pack6Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10*65281)|0;
 $12 = (($11) + 8388608)|0;
 $13 = $12 >>> 24;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $6;
 $17 = ((($16)) + 1|0);
 $6 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $5;
 $19 = ((($18)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24 & 255;
 $26 = $25&255;
 $27 = $6;
 $28 = ((($27)) + 1|0);
 $6 = $28;
 HEAP8[$27>>0] = $26;
 $29 = $5;
 $30 = ((($29)) + 4|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32*65281)|0;
 $34 = (($33) + 8388608)|0;
 $35 = $34 >>> 24;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = $6;
 $39 = ((($38)) + 1|0);
 $6 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $5;
 $41 = ((($40)) + 6|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = ($43*65281)|0;
 $45 = (($44) + 8388608)|0;
 $46 = $45 >>> 24;
 $47 = $46 & 255;
 $48 = $47&255;
 $49 = $6;
 $50 = ((($49)) + 1|0);
 $6 = $50;
 HEAP8[$49>>0] = $48;
 $51 = $5;
 $52 = ((($51)) + 8|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 $55 = ($54*65281)|0;
 $56 = (($55) + 8388608)|0;
 $57 = $56 >>> 24;
 $58 = $57 & 255;
 $59 = $58&255;
 $60 = $6;
 $61 = ((($60)) + 1|0);
 $6 = $61;
 HEAP8[$60>>0] = $59;
 $62 = $5;
 $63 = ((($62)) + 10|0);
 $64 = HEAP16[$63>>1]|0;
 $65 = $64&65535;
 $66 = ($65*65281)|0;
 $67 = (($66) + 8388608)|0;
 $68 = $67 >>> 24;
 $69 = $68 & 255;
 $70 = $69&255;
 $71 = $6;
 $72 = ((($71)) + 1|0);
 $6 = $72;
 HEAP8[$71>>0] = $70;
 $73 = $6;
 STACKTOP = sp;return ($73|0);
}
function _Pack6BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 10|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11*65281)|0;
 $13 = (($12) + 8388608)|0;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $6;
 $18 = ((($17)) + 1|0);
 $6 = $18;
 HEAP8[$17>>0] = $16;
 $19 = $5;
 $20 = ((($19)) + 8|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22*65281)|0;
 $24 = (($23) + 8388608)|0;
 $25 = $24 >>> 24;
 $26 = $25 & 255;
 $27 = $26&255;
 $28 = $6;
 $29 = ((($28)) + 1|0);
 $6 = $29;
 HEAP8[$28>>0] = $27;
 $30 = $5;
 $31 = ((($30)) + 6|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = ($33*65281)|0;
 $35 = (($34) + 8388608)|0;
 $36 = $35 >>> 24;
 $37 = $36 & 255;
 $38 = $37&255;
 $39 = $6;
 $40 = ((($39)) + 1|0);
 $6 = $40;
 HEAP8[$39>>0] = $38;
 $41 = $5;
 $42 = ((($41)) + 4|0);
 $43 = HEAP16[$42>>1]|0;
 $44 = $43&65535;
 $45 = ($44*65281)|0;
 $46 = (($45) + 8388608)|0;
 $47 = $46 >>> 24;
 $48 = $47 & 255;
 $49 = $48&255;
 $50 = $6;
 $51 = ((($50)) + 1|0);
 $6 = $51;
 HEAP8[$50>>0] = $49;
 $52 = $5;
 $53 = ((($52)) + 2|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = $54&65535;
 $56 = ($55*65281)|0;
 $57 = (($56) + 8388608)|0;
 $58 = $57 >>> 24;
 $59 = $58 & 255;
 $60 = $59&255;
 $61 = $6;
 $62 = ((($61)) + 1|0);
 $6 = $62;
 HEAP8[$61>>0] = $60;
 $63 = $5;
 $64 = HEAP16[$63>>1]|0;
 $65 = $64&65535;
 $66 = ($65*65281)|0;
 $67 = (($66) + 8388608)|0;
 $68 = $67 >>> 24;
 $69 = $68 & 255;
 $70 = $69&255;
 $71 = $6;
 $72 = ((($71)) + 1|0);
 $6 = $72;
 HEAP8[$71>>0] = $70;
 $73 = $6;
 STACKTOP = sp;return ($73|0);
}
function _Pack4Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10*65281)|0;
 $12 = (($11) + 8388608)|0;
 $13 = $12 >>> 24;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $6;
 $17 = ((($16)) + 1|0);
 $6 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $5;
 $19 = ((($18)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24 & 255;
 $26 = $25&255;
 $27 = $6;
 $28 = ((($27)) + 1|0);
 $6 = $28;
 HEAP8[$27>>0] = $26;
 $29 = $5;
 $30 = ((($29)) + 4|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32*65281)|0;
 $34 = (($33) + 8388608)|0;
 $35 = $34 >>> 24;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = $6;
 $39 = ((($38)) + 1|0);
 $6 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $5;
 $41 = ((($40)) + 6|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = ($43*65281)|0;
 $45 = (($44) + 8388608)|0;
 $46 = $45 >>> 24;
 $47 = $46 & 255;
 $48 = $47&255;
 $49 = $6;
 $50 = ((($49)) + 1|0);
 $6 = $50;
 HEAP8[$49>>0] = $48;
 $51 = $6;
 STACKTOP = sp;return ($51|0);
}
function _Pack4BytesReverse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($10*65281)|0;
 $12 = (($11) + 8388608)|0;
 $13 = $12 >>> 24;
 $14 = $13 & 255;
 $15 = $14&255;
 $16 = $15&255;
 $17 = (255 - ($16))|0;
 $18 = $17&255;
 $19 = $6;
 $20 = ((($19)) + 1|0);
 $6 = $20;
 HEAP8[$19>>0] = $18;
 $21 = $5;
 $22 = ((($21)) + 2|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $25 = ($24*65281)|0;
 $26 = (($25) + 8388608)|0;
 $27 = $26 >>> 24;
 $28 = $27 & 255;
 $29 = $28&255;
 $30 = $29&255;
 $31 = (255 - ($30))|0;
 $32 = $31&255;
 $33 = $6;
 $34 = ((($33)) + 1|0);
 $6 = $34;
 HEAP8[$33>>0] = $32;
 $35 = $5;
 $36 = ((($35)) + 4|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = ($38*65281)|0;
 $40 = (($39) + 8388608)|0;
 $41 = $40 >>> 24;
 $42 = $41 & 255;
 $43 = $42&255;
 $44 = $43&255;
 $45 = (255 - ($44))|0;
 $46 = $45&255;
 $47 = $6;
 $48 = ((($47)) + 1|0);
 $6 = $48;
 HEAP8[$47>>0] = $46;
 $49 = $5;
 $50 = ((($49)) + 6|0);
 $51 = HEAP16[$50>>1]|0;
 $52 = $51&65535;
 $53 = ($52*65281)|0;
 $54 = (($53) + 8388608)|0;
 $55 = $54 >>> 24;
 $56 = $55 & 255;
 $57 = $56&255;
 $58 = $57&255;
 $59 = (255 - ($58))|0;
 $60 = $59&255;
 $61 = $6;
 $62 = ((($61)) + 1|0);
 $6 = $62;
 HEAP8[$61>>0] = $60;
 $63 = $6;
 STACKTOP = sp;return ($63|0);
}
function _Pack4BytesSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11*65281)|0;
 $13 = (($12) + 8388608)|0;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $6;
 $18 = ((($17)) + 1|0);
 $6 = $18;
 HEAP8[$17>>0] = $16;
 $19 = $5;
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24 & 255;
 $26 = $25&255;
 $27 = $6;
 $28 = ((($27)) + 1|0);
 $6 = $28;
 HEAP8[$27>>0] = $26;
 $29 = $5;
 $30 = ((($29)) + 2|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32*65281)|0;
 $34 = (($33) + 8388608)|0;
 $35 = $34 >>> 24;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = $6;
 $39 = ((($38)) + 1|0);
 $6 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = ($43*65281)|0;
 $45 = (($44) + 8388608)|0;
 $46 = $45 >>> 24;
 $47 = $46 & 255;
 $48 = $47&255;
 $49 = $6;
 $50 = ((($49)) + 1|0);
 $6 = $50;
 HEAP8[$49>>0] = $48;
 $51 = $6;
 STACKTOP = sp;return ($51|0);
}
function _Pack4BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11*65281)|0;
 $13 = (($12) + 8388608)|0;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $6;
 $18 = ((($17)) + 1|0);
 $6 = $18;
 HEAP8[$17>>0] = $16;
 $19 = $5;
 $20 = ((($19)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22*65281)|0;
 $24 = (($23) + 8388608)|0;
 $25 = $24 >>> 24;
 $26 = $25 & 255;
 $27 = $26&255;
 $28 = $6;
 $29 = ((($28)) + 1|0);
 $6 = $29;
 HEAP8[$28>>0] = $27;
 $30 = $5;
 $31 = ((($30)) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = ($33*65281)|0;
 $35 = (($34) + 8388608)|0;
 $36 = $35 >>> 24;
 $37 = $36 & 255;
 $38 = $37&255;
 $39 = $6;
 $40 = ((($39)) + 1|0);
 $6 = $40;
 HEAP8[$39>>0] = $38;
 $41 = $5;
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = ($43*65281)|0;
 $45 = (($44) + 8388608)|0;
 $46 = $45 >>> 24;
 $47 = $46 & 255;
 $48 = $47&255;
 $49 = $6;
 $50 = ((($49)) + 1|0);
 $6 = $50;
 HEAP8[$49>>0] = $48;
 $51 = $6;
 STACKTOP = sp;return ($51|0);
}
function _Pack4BytesSwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($11*65281)|0;
 $13 = (($12) + 8388608)|0;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $15&255;
 $17 = $6;
 $18 = ((($17)) + 1|0);
 $6 = $18;
 HEAP8[$17>>0] = $16;
 $19 = $5;
 $20 = ((($19)) + 2|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22*65281)|0;
 $24 = (($23) + 8388608)|0;
 $25 = $24 >>> 24;
 $26 = $25 & 255;
 $27 = $26&255;
 $28 = $6;
 $29 = ((($28)) + 1|0);
 $6 = $29;
 HEAP8[$28>>0] = $27;
 $30 = $5;
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32*65281)|0;
 $34 = (($33) + 8388608)|0;
 $35 = $34 >>> 24;
 $36 = $35 & 255;
 $37 = $36&255;
 $38 = $6;
 $39 = ((($38)) + 1|0);
 $6 = $39;
 HEAP8[$38>>0] = $37;
 $40 = $5;
 $41 = ((($40)) + 6|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = ($43*65281)|0;
 $45 = (($44) + 8388608)|0;
 $46 = $45 >>> 24;
 $47 = $46 & 255;
 $48 = $47&255;
 $49 = $6;
 $50 = ((($49)) + 1|0);
 $6 = $50;
 HEAP8[$49>>0] = $48;
 $51 = $6;
 STACKTOP = sp;return ($51|0);
}
function _PackAnyBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $18 = $4;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 >>> 3;
 $22 = $21 & 15;
 $8 = $22;
 $23 = $4;
 $24 = ((($23)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 >>> 10;
 $27 = $26 & 1;
 $9 = $27;
 $28 = $4;
 $29 = ((($28)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 >>> 13;
 $32 = $31 & 1;
 $10 = $32;
 $33 = $4;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 >>> 7;
 $37 = $36 & 7;
 $11 = $37;
 $38 = $4;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 >>> 14;
 $42 = $41 & 1;
 $12 = $42;
 $43 = $9;
 $44 = $12;
 $45 = $43 ^ $44;
 $13 = $45;
 $15 = 0;
 $46 = $6;
 $14 = $46;
 $47 = $13;
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $11;
  $50 = $6;
  $51 = (($50) + ($49)|0);
  $6 = $51;
 }
 $16 = 0;
 while(1) {
  $52 = $16;
  $53 = $8;
  $54 = ($52>>>0)<($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = $9;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $8;
   $58 = $16;
   $59 = (($57) - ($58))|0;
   $60 = (($59) - 1)|0;
   $62 = $60;
  } else {
   $61 = $16;
   $62 = $61;
  }
  $17 = $62;
  $63 = $5;
  $64 = $17;
  $65 = (($63) + ($64<<1)|0);
  $66 = HEAP16[$65>>1]|0;
  $67 = $66&65535;
  $68 = ($67*65281)|0;
  $69 = (($68) + 8388608)|0;
  $70 = $69 >>> 24;
  $71 = $70 & 255;
  $72 = $71&255;
  $15 = $72;
  $73 = $10;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $15;
   $76 = $75&255;
   $77 = (255 - ($76))|0;
   $78 = $77&255;
   $15 = $78;
  }
  $79 = $15;
  $80 = $6;
  $81 = ((($80)) + 1|0);
  $6 = $81;
  HEAP8[$80>>0] = $79;
  $82 = $16;
  $83 = (($82) + 1)|0;
  $16 = $83;
 }
 $84 = $13;
 $85 = ($84|0)!=(0);
 if (!($85)) {
  $86 = $11;
  $87 = $6;
  $88 = (($87) + ($86)|0);
  $6 = $88;
 }
 $89 = $11;
 $90 = ($89|0)==(0);
 $91 = $12;
 $92 = ($91|0)!=(0);
 $or$cond = $90 & $92;
 if (!($or$cond)) {
  $100 = $6;
  STACKTOP = sp;return ($100|0);
 }
 $93 = $14;
 $94 = ((($93)) + 1|0);
 $95 = $14;
 $96 = $8;
 $97 = (($96) - 1)|0;
 _memmove(($94|0),($95|0),($97|0))|0;
 $98 = $15;
 $99 = $14;
 HEAP8[$99>>0] = $98;
 $100 = $6;
 STACKTOP = sp;return ($100|0);
}
function _PackPlanarBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $16 = $4;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 3;
 $20 = $19 & 15;
 $8 = $20;
 $21 = $4;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 10;
 $25 = $24 & 1;
 $9 = $25;
 $26 = $4;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >>> 14;
 $30 = $29 & 1;
 $10 = $30;
 $31 = $4;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 >>> 13;
 $35 = $34 & 1;
 $11 = $35;
 $36 = $6;
 $13 = $36;
 $37 = $9;
 $38 = $10;
 $39 = $37 ^ $38;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $4;
  $42 = ((($41)) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 >>> 7;
  $45 = $44 & 7;
  $46 = $7;
  $47 = Math_imul($45, $46)|0;
  $48 = $6;
  $49 = (($48) + ($47)|0);
  $6 = $49;
 }
 $12 = 0;
 while(1) {
  $50 = $12;
  $51 = $8;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
  $53 = $9;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $8;
   $56 = $12;
   $57 = (($55) - ($56))|0;
   $58 = (($57) - 1)|0;
   $60 = $58;
  } else {
   $59 = $12;
   $60 = $59;
  }
  $14 = $60;
  $61 = $5;
  $62 = $14;
  $63 = (($61) + ($62<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64&65535;
  $66 = ($65*65281)|0;
  $67 = (($66) + 8388608)|0;
  $68 = $67 >>> 24;
  $69 = $68 & 255;
  $70 = $69&255;
  $15 = $70;
  $71 = $11;
  $72 = ($71|0)!=(0);
  $73 = $15;
  $74 = $73&255;
  if ($72) {
   $75 = (255 - ($74))|0;
   $76 = $75&255;
   $77 = $76&255;
   $79 = $77;
  } else {
   $79 = $74;
  }
  $78 = $79&255;
  $80 = $6;
  HEAP8[$80>>0] = $78;
  $81 = $7;
  $82 = $6;
  $83 = (($82) + ($81)|0);
  $6 = $83;
  $84 = $12;
  $85 = (($84) + 1)|0;
  $12 = $85;
 }
 $86 = $13;
 $87 = ((($86)) + 1|0);
 STACKTOP = sp;return ($87|0);
}
function _Pack1Word($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $6;
 HEAP16[$10>>1] = $9;
 $11 = $6;
 $12 = ((($11)) + 2|0);
 $6 = $12;
 $13 = $6;
 STACKTOP = sp;return ($13|0);
}
function _Pack1WordSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $6;
 HEAP16[$10>>1] = $9;
 $11 = $6;
 $12 = ((($11)) + 4|0);
 $6 = $12;
 $13 = $6;
 STACKTOP = sp;return ($13|0);
}
function _Pack1WordSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 2|0);
 $6 = $9;
 $10 = $5;
 $11 = HEAP16[$10>>1]|0;
 $12 = $6;
 HEAP16[$12>>1] = $11;
 $13 = $6;
 $14 = ((($13)) + 2|0);
 $6 = $14;
 $15 = $6;
 STACKTOP = sp;return ($15|0);
}
function _Pack1WordReversed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (65535 - ($10))|0;
 $12 = $11&65535;
 $13 = $6;
 HEAP16[$13>>1] = $12;
 $14 = $6;
 $15 = ((($14)) + 2|0);
 $6 = $15;
 $16 = $6;
 STACKTOP = sp;return ($16|0);
}
function _Pack1WordBigEndian($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 << 8;
 $12 = $11&65535;
 $13 = $12&65535;
 $14 = $5;
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 >> 8;
 $18 = $13 | $17;
 $19 = $18&65535;
 $20 = $6;
 HEAP16[$20>>1] = $19;
 $21 = $6;
 $22 = ((($21)) + 2|0);
 $6 = $22;
 $23 = $6;
 STACKTOP = sp;return ($23|0);
}
function _Pack3Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $6;
 HEAP16[$10>>1] = $9;
 $11 = $6;
 $12 = ((($11)) + 2|0);
 $6 = $12;
 $13 = $5;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $6;
 HEAP16[$16>>1] = $15;
 $17 = $6;
 $18 = ((($17)) + 2|0);
 $6 = $18;
 $19 = $5;
 $20 = ((($19)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $6;
 HEAP16[$22>>1] = $21;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 STACKTOP = sp;return ($25|0);
}
function _Pack3WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $6;
 HEAP16[$11>>1] = $10;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $5;
 $15 = ((($14)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $6;
 HEAP16[$17>>1] = $16;
 $18 = $6;
 $19 = ((($18)) + 2|0);
 $6 = $19;
 $20 = $5;
 $21 = HEAP16[$20>>1]|0;
 $22 = $6;
 HEAP16[$22>>1] = $21;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 STACKTOP = sp;return ($25|0);
}
function _Pack3WordsBigEndian($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 << 8;
 $12 = $11&65535;
 $13 = $12&65535;
 $14 = $5;
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 >> 8;
 $18 = $13 | $17;
 $19 = $18&65535;
 $20 = $6;
 HEAP16[$20>>1] = $19;
 $21 = $6;
 $22 = ((($21)) + 2|0);
 $6 = $22;
 $23 = $5;
 $24 = ((($23)) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = $26 << 8;
 $28 = $27&65535;
 $29 = $28&65535;
 $30 = $5;
 $31 = ((($30)) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = $33 >> 8;
 $35 = $29 | $34;
 $36 = $35&65535;
 $37 = $6;
 HEAP16[$37>>1] = $36;
 $38 = $6;
 $39 = ((($38)) + 2|0);
 $6 = $39;
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = $43 << 8;
 $45 = $44&65535;
 $46 = $45&65535;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = $50 >> 8;
 $52 = $46 | $51;
 $53 = $52&65535;
 $54 = $6;
 HEAP16[$54>>1] = $53;
 $55 = $6;
 $56 = ((($55)) + 2|0);
 $6 = $56;
 $57 = $6;
 STACKTOP = sp;return ($57|0);
}
function _Pack3WordsAndSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $6;
 HEAP16[$10>>1] = $9;
 $11 = $6;
 $12 = ((($11)) + 2|0);
 $6 = $12;
 $13 = $5;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $6;
 HEAP16[$16>>1] = $15;
 $17 = $6;
 $18 = ((($17)) + 2|0);
 $6 = $18;
 $19 = $5;
 $20 = ((($19)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $6;
 HEAP16[$22>>1] = $21;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 $26 = ((($25)) + 2|0);
 $6 = $26;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _Pack3WordsAndSkip1Swap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 2|0);
 $6 = $9;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $6;
 HEAP16[$13>>1] = $12;
 $14 = $6;
 $15 = ((($14)) + 2|0);
 $6 = $15;
 $16 = $5;
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $6;
 HEAP16[$19>>1] = $18;
 $20 = $6;
 $21 = ((($20)) + 2|0);
 $6 = $21;
 $22 = $5;
 $23 = HEAP16[$22>>1]|0;
 $24 = $6;
 HEAP16[$24>>1] = $23;
 $25 = $6;
 $26 = ((($25)) + 2|0);
 $6 = $26;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _Pack3WordsAndSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 2|0);
 $6 = $9;
 $10 = $5;
 $11 = HEAP16[$10>>1]|0;
 $12 = $6;
 HEAP16[$12>>1] = $11;
 $13 = $6;
 $14 = ((($13)) + 2|0);
 $6 = $14;
 $15 = $5;
 $16 = ((($15)) + 2|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $6;
 HEAP16[$18>>1] = $17;
 $19 = $6;
 $20 = ((($19)) + 2|0);
 $6 = $20;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $6;
 HEAP16[$24>>1] = $23;
 $25 = $6;
 $26 = ((($25)) + 2|0);
 $6 = $26;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _Pack3WordsAndSkip1SwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $6;
 HEAP16[$11>>1] = $10;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $5;
 $15 = ((($14)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $6;
 HEAP16[$17>>1] = $16;
 $18 = $6;
 $19 = ((($18)) + 2|0);
 $6 = $19;
 $20 = $5;
 $21 = HEAP16[$20>>1]|0;
 $22 = $6;
 HEAP16[$22>>1] = $21;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 $26 = ((($25)) + 2|0);
 $6 = $26;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _Pack4Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $6;
 HEAP16[$10>>1] = $9;
 $11 = $6;
 $12 = ((($11)) + 2|0);
 $6 = $12;
 $13 = $5;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $6;
 HEAP16[$16>>1] = $15;
 $17 = $6;
 $18 = ((($17)) + 2|0);
 $6 = $18;
 $19 = $5;
 $20 = ((($19)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $6;
 HEAP16[$22>>1] = $21;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $5;
 $26 = ((($25)) + 6|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $6;
 HEAP16[$28>>1] = $27;
 $29 = $6;
 $30 = ((($29)) + 2|0);
 $6 = $30;
 $31 = $6;
 STACKTOP = sp;return ($31|0);
}
function _Pack4WordsReverse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (65535 - ($10))|0;
 $12 = $11&65535;
 $13 = $6;
 HEAP16[$13>>1] = $12;
 $14 = $6;
 $15 = ((($14)) + 2|0);
 $6 = $15;
 $16 = $5;
 $17 = ((($16)) + 2|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = (65535 - ($19))|0;
 $21 = $20&65535;
 $22 = $6;
 HEAP16[$22>>1] = $21;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $5;
 $26 = ((($25)) + 4|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27&65535;
 $29 = (65535 - ($28))|0;
 $30 = $29&65535;
 $31 = $6;
 HEAP16[$31>>1] = $30;
 $32 = $6;
 $33 = ((($32)) + 2|0);
 $6 = $33;
 $34 = $5;
 $35 = ((($34)) + 6|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = (65535 - ($37))|0;
 $39 = $38&65535;
 $40 = $6;
 HEAP16[$40>>1] = $39;
 $41 = $6;
 $42 = ((($41)) + 2|0);
 $6 = $42;
 $43 = $6;
 STACKTOP = sp;return ($43|0);
}
function _Pack4WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $6;
 HEAP16[$11>>1] = $10;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $6;
 HEAP16[$17>>1] = $16;
 $18 = $6;
 $19 = ((($18)) + 2|0);
 $6 = $19;
 $20 = $5;
 $21 = ((($20)) + 2|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $6;
 HEAP16[$23>>1] = $22;
 $24 = $6;
 $25 = ((($24)) + 2|0);
 $6 = $25;
 $26 = $5;
 $27 = HEAP16[$26>>1]|0;
 $28 = $6;
 HEAP16[$28>>1] = $27;
 $29 = $6;
 $30 = ((($29)) + 2|0);
 $6 = $30;
 $31 = $6;
 STACKTOP = sp;return ($31|0);
}
function _Pack4WordsBigEndian($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = $10 << 8;
 $12 = $11&65535;
 $13 = $12&65535;
 $14 = $5;
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 >> 8;
 $18 = $13 | $17;
 $19 = $18&65535;
 $20 = $6;
 HEAP16[$20>>1] = $19;
 $21 = $6;
 $22 = ((($21)) + 2|0);
 $6 = $22;
 $23 = $5;
 $24 = ((($23)) + 2|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = $26 << 8;
 $28 = $27&65535;
 $29 = $28&65535;
 $30 = $5;
 $31 = ((($30)) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = $33 >> 8;
 $35 = $29 | $34;
 $36 = $35&65535;
 $37 = $6;
 HEAP16[$37>>1] = $36;
 $38 = $6;
 $39 = ((($38)) + 2|0);
 $6 = $39;
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = $43 << 8;
 $45 = $44&65535;
 $46 = $45&65535;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = $50 >> 8;
 $52 = $46 | $51;
 $53 = $52&65535;
 $54 = $6;
 HEAP16[$54>>1] = $53;
 $55 = $6;
 $56 = ((($55)) + 2|0);
 $6 = $56;
 $57 = $5;
 $58 = ((($57)) + 6|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = $59&65535;
 $61 = $60 << 8;
 $62 = $61&65535;
 $63 = $62&65535;
 $64 = $5;
 $65 = ((($64)) + 6|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66&65535;
 $68 = $67 >> 8;
 $69 = $63 | $68;
 $70 = $69&65535;
 $71 = $6;
 HEAP16[$71>>1] = $70;
 $72 = $6;
 $73 = ((($72)) + 2|0);
 $6 = $73;
 $74 = $6;
 STACKTOP = sp;return ($74|0);
}
function _Pack6Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP16[$8>>1]|0;
 $10 = $6;
 HEAP16[$10>>1] = $9;
 $11 = $6;
 $12 = ((($11)) + 2|0);
 $6 = $12;
 $13 = $5;
 $14 = ((($13)) + 2|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $6;
 HEAP16[$16>>1] = $15;
 $17 = $6;
 $18 = ((($17)) + 2|0);
 $6 = $18;
 $19 = $5;
 $20 = ((($19)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $6;
 HEAP16[$22>>1] = $21;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $5;
 $26 = ((($25)) + 6|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $6;
 HEAP16[$28>>1] = $27;
 $29 = $6;
 $30 = ((($29)) + 2|0);
 $6 = $30;
 $31 = $5;
 $32 = ((($31)) + 8|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $6;
 HEAP16[$34>>1] = $33;
 $35 = $6;
 $36 = ((($35)) + 2|0);
 $6 = $36;
 $37 = $5;
 $38 = ((($37)) + 10|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $6;
 HEAP16[$40>>1] = $39;
 $41 = $6;
 $42 = ((($41)) + 2|0);
 $6 = $42;
 $43 = $6;
 STACKTOP = sp;return ($43|0);
}
function _Pack6WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = ((($8)) + 10|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $6;
 HEAP16[$11>>1] = $10;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $5;
 $15 = ((($14)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $6;
 HEAP16[$17>>1] = $16;
 $18 = $6;
 $19 = ((($18)) + 2|0);
 $6 = $19;
 $20 = $5;
 $21 = ((($20)) + 6|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $6;
 HEAP16[$23>>1] = $22;
 $24 = $6;
 $25 = ((($24)) + 2|0);
 $6 = $25;
 $26 = $5;
 $27 = ((($26)) + 4|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $6;
 HEAP16[$29>>1] = $28;
 $30 = $6;
 $31 = ((($30)) + 2|0);
 $6 = $31;
 $32 = $5;
 $33 = ((($32)) + 2|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $6;
 HEAP16[$35>>1] = $34;
 $36 = $6;
 $37 = ((($36)) + 2|0);
 $6 = $37;
 $38 = $5;
 $39 = HEAP16[$38>>1]|0;
 $40 = $6;
 HEAP16[$40>>1] = $39;
 $41 = $6;
 $42 = ((($41)) + 2|0);
 $6 = $42;
 $43 = $6;
 STACKTOP = sp;return ($43|0);
}
function _PackPlanarWords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $16 = $4;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 3;
 $20 = $19 & 15;
 $8 = $20;
 $21 = $4;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 10;
 $25 = $24 & 1;
 $9 = $25;
 $26 = $4;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >>> 13;
 $30 = $29 & 1;
 $10 = $30;
 $31 = $4;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 >>> 11;
 $35 = $34 & 1;
 $11 = $35;
 $36 = $6;
 $13 = $36;
 $37 = $9;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $4;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 >>> 7;
  $43 = $42 & 7;
  $44 = $7;
  $45 = Math_imul($43, $44)|0;
  $46 = $6;
  $47 = (($46) + ($45)|0);
  $6 = $47;
 }
 $12 = 0;
 while(1) {
  $48 = $12;
  $49 = $8;
  $50 = ($48>>>0)<($49>>>0);
  if (!($50)) {
   break;
  }
  $51 = $9;
  $52 = ($51|0)!=(0);
  if ($52) {
   $53 = $8;
   $54 = $12;
   $55 = (($53) - ($54))|0;
   $56 = (($55) - 1)|0;
   $58 = $56;
  } else {
   $57 = $12;
   $58 = $57;
  }
  $15 = $58;
  $59 = $5;
  $60 = $15;
  $61 = (($59) + ($60<<1)|0);
  $62 = HEAP16[$61>>1]|0;
  $14 = $62;
  $63 = $11;
  $64 = ($63|0)!=(0);
  if ($64) {
   $65 = $14;
   $66 = $65&65535;
   $67 = $66 << 8;
   $68 = $67&65535;
   $69 = $68&65535;
   $70 = $14;
   $71 = $70&65535;
   $72 = $71 >> 8;
   $73 = $69 | $72;
   $74 = $73&65535;
   $14 = $74;
  }
  $75 = $10;
  $76 = ($75|0)!=(0);
  if ($76) {
   $77 = $14;
   $78 = $77&65535;
   $79 = (65535 - ($78))|0;
   $80 = $79&65535;
   $14 = $80;
  }
  $81 = $14;
  $82 = $6;
  HEAP16[$82>>1] = $81;
  $83 = $7;
  $84 = $6;
  $85 = (($84) + ($83)|0);
  $6 = $85;
  $86 = $12;
  $87 = (($86) + 1)|0;
  $12 = $87;
 }
 $88 = $13;
 $89 = ((($88)) + 2|0);
 STACKTOP = sp;return ($89|0);
}
function _PackAnyWords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $19 = $4;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> 3;
 $23 = $22 & 15;
 $8 = $23;
 $24 = $4;
 $25 = ((($24)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 >>> 11;
 $28 = $27 & 1;
 $9 = $28;
 $29 = $4;
 $30 = ((($29)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 10;
 $33 = $32 & 1;
 $10 = $33;
 $34 = $4;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 >>> 13;
 $38 = $37 & 1;
 $11 = $38;
 $39 = $4;
 $40 = ((($39)) + 4|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 >>> 7;
 $43 = $42 & 7;
 $12 = $43;
 $44 = $4;
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 >>> 14;
 $48 = $47 & 1;
 $13 = $48;
 $49 = $10;
 $50 = $13;
 $51 = $49 ^ $50;
 $14 = $51;
 $16 = 0;
 $52 = $6;
 $15 = $52;
 $53 = $14;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = $12;
  $56 = $55<<1;
  $57 = $6;
  $58 = (($57) + ($56)|0);
  $6 = $58;
 }
 $17 = 0;
 while(1) {
  $59 = $17;
  $60 = $8;
  $61 = ($59>>>0)<($60>>>0);
  if (!($61)) {
   break;
  }
  $62 = $10;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $8;
   $65 = $17;
   $66 = (($64) - ($65))|0;
   $67 = (($66) - 1)|0;
   $69 = $67;
  } else {
   $68 = $17;
   $69 = $68;
  }
  $18 = $69;
  $70 = $5;
  $71 = $18;
  $72 = (($70) + ($71<<1)|0);
  $73 = HEAP16[$72>>1]|0;
  $16 = $73;
  $74 = $9;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $16;
   $77 = $76&65535;
   $78 = $77 << 8;
   $79 = $78&65535;
   $80 = $79&65535;
   $81 = $16;
   $82 = $81&65535;
   $83 = $82 >> 8;
   $84 = $80 | $83;
   $85 = $84&65535;
   $16 = $85;
  }
  $86 = $11;
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = $16;
   $89 = $88&65535;
   $90 = (65535 - ($89))|0;
   $91 = $90&65535;
   $16 = $91;
  }
  $92 = $16;
  $93 = $6;
  HEAP16[$93>>1] = $92;
  $94 = $6;
  $95 = ((($94)) + 2|0);
  $6 = $95;
  $96 = $17;
  $97 = (($96) + 1)|0;
  $17 = $97;
 }
 $98 = $14;
 $99 = ($98|0)!=(0);
 if (!($99)) {
  $100 = $12;
  $101 = $100<<1;
  $102 = $6;
  $103 = (($102) + ($101)|0);
  $6 = $103;
 }
 $104 = $12;
 $105 = ($104|0)==(0);
 $106 = $13;
 $107 = ($106|0)!=(0);
 $or$cond = $105 & $107;
 if (!($or$cond)) {
  $116 = $6;
  STACKTOP = sp;return ($116|0);
 }
 $108 = $15;
 $109 = ((($108)) + 2|0);
 $110 = $15;
 $111 = $8;
 $112 = (($111) - 1)|0;
 $113 = $112<<1;
 _memmove(($109|0),($110|0),($113|0))|0;
 $114 = $16;
 $115 = $15;
 HEAP16[$115>>1] = $114;
 $116 = $6;
 STACKTOP = sp;return ($116|0);
}
function _FomLabV4ToLabV2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2&65535;
 $4 = $3 << 8;
 $5 = (($4) + 128)|0;
 $6 = (($5|0) / 257)&-1;
 $7 = $6&65535;
 STACKTOP = sp;return ($7|0);
}
function _UnrollLabDoubleToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 12;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $5;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_PixelSize($17)|0);
  $19 = $8;
  $20 = (($19>>>0) / ($18>>>0))&-1;
  $8 = $20;
  $21 = $9;
  $22 = +HEAPF64[$21>>3];
  $23 = $22 / 100.0;
  $24 = $23;
  $25 = $6;
  HEAPF32[$25>>2] = $24;
  $26 = $9;
  $27 = $8;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $29 + 128.0;
  $31 = $30 / 255.0;
  $32 = $31;
  $33 = $6;
  $34 = ((($33)) + 4|0);
  HEAPF32[$34>>2] = $32;
  $35 = $9;
  $36 = $8;
  $37 = $36<<1;
  $38 = (($35) + ($37<<3)|0);
  $39 = +HEAPF64[$38>>3];
  $40 = $39 + 128.0;
  $41 = $40 / 255.0;
  $42 = $41;
  $43 = $6;
  $44 = ((($43)) + 8|0);
  HEAPF32[$44>>2] = $42;
  $45 = $7;
  $46 = ((($45)) + 8|0);
  $4 = $46;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 } else {
  $47 = $9;
  $48 = +HEAPF64[$47>>3];
  $49 = $48 / 100.0;
  $50 = $49;
  $51 = $6;
  HEAPF32[$51>>2] = $50;
  $52 = $9;
  $53 = ((($52)) + 8|0);
  $54 = +HEAPF64[$53>>3];
  $55 = $54 + 128.0;
  $56 = $55 / 255.0;
  $57 = $56;
  $58 = $6;
  $59 = ((($58)) + 4|0);
  HEAPF32[$59>>2] = $57;
  $60 = $9;
  $61 = ((($60)) + 16|0);
  $62 = +HEAPF64[$61>>3];
  $63 = $62 + 128.0;
  $64 = $63 / 255.0;
  $65 = $64;
  $66 = $6;
  $67 = ((($66)) + 8|0);
  HEAPF32[$67>>2] = $65;
  $68 = $5;
  $69 = HEAP32[$68>>2]|0;
  $70 = $69 >>> 7;
  $71 = $70 & 7;
  $72 = (3 + ($71))|0;
  $73 = $72<<3;
  $74 = $7;
  $75 = (($74) + ($73)|0);
  $7 = $75;
  $76 = $7;
  $4 = $76;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 return (0)|0;
}
function _UnrollLabFloatToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 12;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $5;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_PixelSize($17)|0);
  $19 = $8;
  $20 = (($19>>>0) / ($18>>>0))&-1;
  $8 = $20;
  $21 = $9;
  $22 = +HEAPF32[$21>>2];
  $23 = $22;
  $24 = $23 / 100.0;
  $25 = $24;
  $26 = $6;
  HEAPF32[$26>>2] = $25;
  $27 = $9;
  $28 = $8;
  $29 = (($27) + ($28<<2)|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $30 + 128.0;
  $32 = $31;
  $33 = $32 / 255.0;
  $34 = $33;
  $35 = $6;
  $36 = ((($35)) + 4|0);
  HEAPF32[$36>>2] = $34;
  $37 = $9;
  $38 = $8;
  $39 = $38<<1;
  $40 = (($37) + ($39<<2)|0);
  $41 = +HEAPF32[$40>>2];
  $42 = $41 + 128.0;
  $43 = $42;
  $44 = $43 / 255.0;
  $45 = $44;
  $46 = $6;
  $47 = ((($46)) + 8|0);
  HEAPF32[$47>>2] = $45;
  $48 = $7;
  $49 = ((($48)) + 4|0);
  $4 = $49;
  $83 = $4;
  STACKTOP = sp;return ($83|0);
 } else {
  $50 = $9;
  $51 = +HEAPF32[$50>>2];
  $52 = $51;
  $53 = $52 / 100.0;
  $54 = $53;
  $55 = $6;
  HEAPF32[$55>>2] = $54;
  $56 = $9;
  $57 = ((($56)) + 4|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $58 + 128.0;
  $60 = $59;
  $61 = $60 / 255.0;
  $62 = $61;
  $63 = $6;
  $64 = ((($63)) + 4|0);
  HEAPF32[$64>>2] = $62;
  $65 = $9;
  $66 = ((($65)) + 8|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $67 + 128.0;
  $69 = $68;
  $70 = $69 / 255.0;
  $71 = $70;
  $72 = $6;
  $73 = ((($72)) + 8|0);
  HEAPF32[$73>>2] = $71;
  $74 = $5;
  $75 = HEAP32[$74>>2]|0;
  $76 = $75 >>> 7;
  $77 = $76 & 7;
  $78 = (3 + ($77))|0;
  $79 = $78<<2;
  $80 = $7;
  $81 = (($80) + ($79)|0);
  $7 = $81;
  $82 = $7;
  $4 = $82;
  $83 = $4;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _UnrollXYZDoubleToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 12;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $5;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_PixelSize($17)|0);
  $19 = $8;
  $20 = (($19>>>0) / ($18>>>0))&-1;
  $8 = $20;
  $21 = $9;
  $22 = +HEAPF64[$21>>3];
  $23 = $22 / 1.999969482421875;
  $24 = $23;
  $25 = $6;
  HEAPF32[$25>>2] = $24;
  $26 = $9;
  $27 = $8;
  $28 = (($26) + ($27<<3)|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $29 / 1.999969482421875;
  $31 = $30;
  $32 = $6;
  $33 = ((($32)) + 4|0);
  HEAPF32[$33>>2] = $31;
  $34 = $9;
  $35 = $8;
  $36 = $35<<1;
  $37 = (($34) + ($36<<3)|0);
  $38 = +HEAPF64[$37>>3];
  $39 = $38 / 1.999969482421875;
  $40 = $39;
  $41 = $6;
  $42 = ((($41)) + 8|0);
  HEAPF32[$42>>2] = $40;
  $43 = $7;
  $44 = ((($43)) + 8|0);
  $4 = $44;
  $73 = $4;
  STACKTOP = sp;return ($73|0);
 } else {
  $45 = $9;
  $46 = +HEAPF64[$45>>3];
  $47 = $46 / 1.999969482421875;
  $48 = $47;
  $49 = $6;
  HEAPF32[$49>>2] = $48;
  $50 = $9;
  $51 = ((($50)) + 8|0);
  $52 = +HEAPF64[$51>>3];
  $53 = $52 / 1.999969482421875;
  $54 = $53;
  $55 = $6;
  $56 = ((($55)) + 4|0);
  HEAPF32[$56>>2] = $54;
  $57 = $9;
  $58 = ((($57)) + 16|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $59 / 1.999969482421875;
  $61 = $60;
  $62 = $6;
  $63 = ((($62)) + 8|0);
  HEAPF32[$63>>2] = $61;
  $64 = $5;
  $65 = HEAP32[$64>>2]|0;
  $66 = $65 >>> 7;
  $67 = $66 & 7;
  $68 = (3 + ($67))|0;
  $69 = $68<<3;
  $70 = $7;
  $71 = (($70) + ($69)|0);
  $7 = $71;
  $72 = $7;
  $4 = $72;
  $73 = $4;
  STACKTOP = sp;return ($73|0);
 }
 return (0)|0;
}
function _UnrollXYZFloatToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 >>> 12;
 $14 = $13 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $5;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_PixelSize($17)|0);
  $19 = $8;
  $20 = (($19>>>0) / ($18>>>0))&-1;
  $8 = $20;
  $21 = $9;
  $22 = +HEAPF32[$21>>2];
  $23 = $22;
  $24 = $23 / 1.999969482421875;
  $25 = $24;
  $26 = $6;
  HEAPF32[$26>>2] = $25;
  $27 = $9;
  $28 = $8;
  $29 = (($27) + ($28<<2)|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $30;
  $32 = $31 / 1.999969482421875;
  $33 = $32;
  $34 = $6;
  $35 = ((($34)) + 4|0);
  HEAPF32[$35>>2] = $33;
  $36 = $9;
  $37 = $8;
  $38 = $37<<1;
  $39 = (($36) + ($38<<2)|0);
  $40 = +HEAPF32[$39>>2];
  $41 = $40;
  $42 = $41 / 1.999969482421875;
  $43 = $42;
  $44 = $6;
  $45 = ((($44)) + 8|0);
  HEAPF32[$45>>2] = $43;
  $46 = $7;
  $47 = ((($46)) + 4|0);
  $4 = $47;
  $79 = $4;
  STACKTOP = sp;return ($79|0);
 } else {
  $48 = $9;
  $49 = +HEAPF32[$48>>2];
  $50 = $49;
  $51 = $50 / 1.999969482421875;
  $52 = $51;
  $53 = $6;
  HEAPF32[$53>>2] = $52;
  $54 = $9;
  $55 = ((($54)) + 4|0);
  $56 = +HEAPF32[$55>>2];
  $57 = $56;
  $58 = $57 / 1.999969482421875;
  $59 = $58;
  $60 = $6;
  $61 = ((($60)) + 4|0);
  HEAPF32[$61>>2] = $59;
  $62 = $9;
  $63 = ((($62)) + 8|0);
  $64 = +HEAPF32[$63>>2];
  $65 = $64;
  $66 = $65 / 1.999969482421875;
  $67 = $66;
  $68 = $6;
  $69 = ((($68)) + 8|0);
  HEAPF32[$69>>2] = $67;
  $70 = $5;
  $71 = HEAP32[$70>>2]|0;
  $72 = $71 >>> 7;
  $73 = $72 & 7;
  $74 = (3 + ($73))|0;
  $75 = $74<<2;
  $76 = $7;
  $77 = (($76) + ($75)|0);
  $7 = $77;
  $78 = $7;
  $4 = $78;
  $79 = $4;
  STACKTOP = sp;return ($79|0);
 }
 return (0)|0;
}
function _UnrollFloatsToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 3;
 $25 = $24 & 15;
 $9 = $25;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 >>> 10;
 $29 = $28 & 1;
 $10 = $29;
 $30 = $5;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 13;
 $33 = $32 & 1;
 $11 = $33;
 $34 = $5;
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 >>> 14;
 $37 = $36 & 1;
 $12 = $37;
 $38 = $5;
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $13 = $41;
 $42 = $10;
 $43 = $12;
 $44 = $42 ^ $43;
 $14 = $44;
 $45 = $5;
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 >>> 12;
 $48 = $47 & 1;
 $15 = $48;
 $18 = 0;
 $49 = $5;
 $50 = HEAP32[$49>>2]|0;
 $51 = (_IsInkSpace($50)|0);
 $52 = ($51|0)!=(0);
 $53 = $52 ? 100.0 : 1.0;
 $19 = $53;
 $54 = $5;
 $55 = HEAP32[$54>>2]|0;
 $56 = (_PixelSize($55)|0);
 $57 = $8;
 $58 = (($57>>>0) / ($56>>>0))&-1;
 $8 = $58;
 $59 = $14;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = $13;
  $18 = $61;
 }
 $17 = 0;
 while(1) {
  $62 = $17;
  $63 = $9;
  $64 = ($62>>>0)<($63>>>0);
  if (!($64)) {
   break;
  }
  $65 = $10;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $9;
   $68 = $17;
   $69 = (($67) - ($68))|0;
   $70 = (($69) - 1)|0;
   $72 = $70;
  } else {
   $71 = $17;
   $72 = $71;
  }
  $20 = $72;
  $73 = $15;
  $74 = ($73|0)!=(0);
  $75 = $7;
  $76 = $17;
  $77 = $18;
  $78 = (($76) + ($77))|0;
  if ($74) {
   $79 = $8;
   $80 = Math_imul($78, $79)|0;
   $81 = (($75) + ($80<<2)|0);
   $82 = +HEAPF32[$81>>2];
   $16 = $82;
  } else {
   $83 = (($75) + ($78<<2)|0);
   $84 = +HEAPF32[$83>>2];
   $16 = $84;
  }
  $85 = $19;
  $86 = $16;
  $87 = $86 / $85;
  $16 = $87;
  $88 = $11;
  $89 = ($88|0)!=(0);
  $90 = $16;
  $91 = 1.0 - $90;
  $92 = $89 ? $91 : $90;
  $93 = $6;
  $94 = $20;
  $95 = (($93) + ($94<<2)|0);
  HEAPF32[$95>>2] = $92;
  $96 = $17;
  $97 = (($96) + 1)|0;
  $17 = $97;
 }
 $98 = $13;
 $99 = ($98|0)==(0);
 $100 = $12;
 $101 = ($100|0)!=(0);
 $or$cond = $99 & $101;
 if ($or$cond) {
  $102 = $6;
  $103 = +HEAPF32[$102>>2];
  $21 = $103;
  $104 = $6;
  $105 = $6;
  $106 = ((($105)) + 4|0);
  $107 = $9;
  $108 = (($107) - 1)|0;
  $109 = $108<<2;
  _memmove(($104|0),($106|0),($109|0))|0;
  $110 = $21;
  $111 = $6;
  $112 = $9;
  $113 = (($112) - 1)|0;
  $114 = (($111) + ($113<<2)|0);
  HEAPF32[$114>>2] = $110;
 }
 $115 = $5;
 $116 = HEAP32[$115>>2]|0;
 $117 = $116 >>> 12;
 $118 = $117 & 1;
 $119 = ($118|0)!=(0);
 $120 = $7;
 if ($119) {
  $121 = ((($120)) + 4|0);
  $4 = $121;
  $127 = $4;
  STACKTOP = sp;return ($127|0);
 } else {
  $122 = $9;
  $123 = $13;
  $124 = (($122) + ($123))|0;
  $125 = $124<<2;
  $126 = (($120) + ($125)|0);
  $4 = $126;
  $127 = $4;
  STACKTOP = sp;return ($127|0);
 }
 return (0)|0;
}
function _UnrollDoublesToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 3;
 $25 = $24 & 15;
 $9 = $25;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 >>> 10;
 $29 = $28 & 1;
 $10 = $29;
 $30 = $5;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 13;
 $33 = $32 & 1;
 $11 = $33;
 $34 = $5;
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 >>> 14;
 $37 = $36 & 1;
 $12 = $37;
 $38 = $5;
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $13 = $41;
 $42 = $10;
 $43 = $12;
 $44 = $42 ^ $43;
 $14 = $44;
 $45 = $5;
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 >>> 12;
 $48 = $47 & 1;
 $15 = $48;
 $18 = 0;
 $49 = $5;
 $50 = HEAP32[$49>>2]|0;
 $51 = (_IsInkSpace($50)|0);
 $52 = ($51|0)!=(0);
 $53 = $52 ? 100.0 : 1.0;
 $19 = $53;
 $54 = $5;
 $55 = HEAP32[$54>>2]|0;
 $56 = (_PixelSize($55)|0);
 $57 = $8;
 $58 = (($57>>>0) / ($56>>>0))&-1;
 $8 = $58;
 $59 = $14;
 $60 = ($59|0)!=(0);
 if ($60) {
  $61 = $13;
  $18 = $61;
 }
 $17 = 0;
 while(1) {
  $62 = $17;
  $63 = $9;
  $64 = ($62>>>0)<($63>>>0);
  if (!($64)) {
   break;
  }
  $65 = $10;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $9;
   $68 = $17;
   $69 = (($67) - ($68))|0;
   $70 = (($69) - 1)|0;
   $72 = $70;
  } else {
   $71 = $17;
   $72 = $71;
  }
  $20 = $72;
  $73 = $15;
  $74 = ($73|0)!=(0);
  $75 = $7;
  $76 = $17;
  $77 = $18;
  $78 = (($76) + ($77))|0;
  if ($74) {
   $79 = $8;
   $80 = Math_imul($78, $79)|0;
   $81 = (($75) + ($80<<3)|0);
   $82 = +HEAPF64[$81>>3];
   $16 = $82;
  } else {
   $83 = (($75) + ($78<<3)|0);
   $84 = +HEAPF64[$83>>3];
   $16 = $84;
  }
  $85 = $19;
  $86 = $16;
  $87 = $86 / $85;
  $16 = $87;
  $88 = $11;
  $89 = ($88|0)!=(0);
  $90 = $16;
  $91 = 1.0 - $90;
  $92 = $89 ? $91 : $90;
  $93 = $92;
  $94 = $6;
  $95 = $20;
  $96 = (($94) + ($95<<2)|0);
  HEAPF32[$96>>2] = $93;
  $97 = $17;
  $98 = (($97) + 1)|0;
  $17 = $98;
 }
 $99 = $13;
 $100 = ($99|0)==(0);
 $101 = $12;
 $102 = ($101|0)!=(0);
 $or$cond = $100 & $102;
 if ($or$cond) {
  $103 = $6;
  $104 = +HEAPF32[$103>>2];
  $21 = $104;
  $105 = $6;
  $106 = $6;
  $107 = ((($106)) + 4|0);
  $108 = $9;
  $109 = (($108) - 1)|0;
  $110 = $109<<2;
  _memmove(($105|0),($107|0),($110|0))|0;
  $111 = $21;
  $112 = $6;
  $113 = $9;
  $114 = (($113) - 1)|0;
  $115 = (($112) + ($114<<2)|0);
  HEAPF32[$115>>2] = $111;
 }
 $116 = $5;
 $117 = HEAP32[$116>>2]|0;
 $118 = $117 >>> 12;
 $119 = $118 & 1;
 $120 = ($119|0)!=(0);
 $121 = $7;
 if ($120) {
  $122 = ((($121)) + 8|0);
  $4 = $122;
  $128 = $4;
  STACKTOP = sp;return ($128|0);
 } else {
  $123 = $9;
  $124 = $13;
  $125 = (($123) + ($124))|0;
  $126 = $125<<3;
  $127 = (($121) + ($126)|0);
  $4 = $127;
  $128 = $4;
  STACKTOP = sp;return ($128|0);
 }
 return (0)|0;
}
function _UnrollHalfToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0;
 var $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0;
 var $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 3;
 $25 = $24 & 15;
 $9 = $25;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 >>> 10;
 $29 = $28 & 1;
 $10 = $29;
 $30 = $5;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 13;
 $33 = $32 & 1;
 $11 = $33;
 $34 = $5;
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 >>> 14;
 $37 = $36 & 1;
 $12 = $37;
 $38 = $5;
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $13 = $41;
 $42 = $10;
 $43 = $12;
 $44 = $42 ^ $43;
 $14 = $44;
 $45 = $5;
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 >>> 12;
 $48 = $47 & 1;
 $15 = $48;
 $18 = 0;
 $49 = $5;
 $50 = HEAP32[$49>>2]|0;
 $51 = (_IsInkSpace($50)|0);
 $52 = ($51|0)!=(0);
 $53 = $52 ? 100.0 : 1.0;
 $19 = $53;
 $54 = $5;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_PixelSize($56)|0);
 $58 = $8;
 $59 = (($58>>>0) / ($57>>>0))&-1;
 $8 = $59;
 $60 = $14;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $13;
  $18 = $62;
 }
 $17 = 0;
 while(1) {
  $63 = $17;
  $64 = $9;
  $65 = ($63>>>0)<($64>>>0);
  if (!($65)) {
   break;
  }
  $66 = $10;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = $9;
   $69 = $17;
   $70 = (($68) - ($69))|0;
   $71 = (($70) - 1)|0;
   $73 = $71;
  } else {
   $72 = $17;
   $73 = $72;
  }
  $20 = $73;
  $74 = $15;
  $75 = ($74|0)!=(0);
  $76 = $7;
  $77 = $17;
  $78 = $18;
  $79 = (($77) + ($78))|0;
  if ($75) {
   $80 = $8;
   $81 = Math_imul($79, $80)|0;
   $82 = (($76) + ($81<<1)|0);
   $83 = HEAP16[$82>>1]|0;
   $84 = (+__cmsHalf2Float($83));
   $16 = $84;
  } else {
   $85 = (($76) + ($79<<1)|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = (+__cmsHalf2Float($86));
   $16 = $87;
  }
  $88 = $19;
  $89 = $16;
  $90 = $89 / $88;
  $16 = $90;
  $91 = $11;
  $92 = ($91|0)!=(0);
  $93 = $16;
  $94 = 1.0 - $93;
  $95 = $92 ? $94 : $93;
  $96 = $6;
  $97 = $20;
  $98 = (($96) + ($97<<2)|0);
  HEAPF32[$98>>2] = $95;
  $99 = $17;
  $100 = (($99) + 1)|0;
  $17 = $100;
 }
 $101 = $13;
 $102 = ($101|0)==(0);
 $103 = $12;
 $104 = ($103|0)!=(0);
 $or$cond = $102 & $104;
 if ($or$cond) {
  $105 = $6;
  $106 = +HEAPF32[$105>>2];
  $21 = $106;
  $107 = $6;
  $108 = $6;
  $109 = ((($108)) + 4|0);
  $110 = $9;
  $111 = (($110) - 1)|0;
  $112 = $111<<2;
  _memmove(($107|0),($109|0),($112|0))|0;
  $113 = $21;
  $114 = $6;
  $115 = $9;
  $116 = (($115) - 1)|0;
  $117 = (($114) + ($116<<2)|0);
  HEAPF32[$117>>2] = $113;
 }
 $118 = $5;
 $119 = HEAP32[$118>>2]|0;
 $120 = $119 >>> 12;
 $121 = $120 & 1;
 $122 = ($121|0)!=(0);
 $123 = $7;
 if ($122) {
  $124 = ((($123)) + 2|0);
  $4 = $124;
  $130 = $4;
  STACKTOP = sp;return ($130|0);
 } else {
  $125 = $9;
  $126 = $13;
  $127 = (($125) + ($126))|0;
  $128 = $127<<1;
  $129 = (($123) + ($128)|0);
  $4 = $129;
  $130 = $4;
  STACKTOP = sp;return ($130|0);
 }
 return (0)|0;
}
function _UnrollLabDoubleTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >>> 12;
 $16 = $15 & 1;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $7;
  $10 = $18;
  $19 = $7;
  $20 = $8;
  $21 = (($19) + ($20)|0);
  $11 = $21;
  $22 = $7;
  $23 = $8;
  $24 = $23<<1;
  $25 = (($22) + ($24)|0);
  $12 = $25;
  $26 = $10;
  $27 = +HEAPF64[$26>>3];
  HEAPF64[$9>>3] = $27;
  $28 = $11;
  $29 = +HEAPF64[$28>>3];
  $30 = ((($9)) + 8|0);
  HEAPF64[$30>>3] = $29;
  $31 = $12;
  $32 = +HEAPF64[$31>>3];
  $33 = ((($9)) + 16|0);
  HEAPF64[$33>>3] = $32;
  $34 = $6;
  _cmsFloat2LabEncoded($34,$9);
  $35 = $7;
  $36 = ((($35)) + 8|0);
  $4 = $36;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 } else {
  $37 = $6;
  $38 = $7;
  _cmsFloat2LabEncoded($37,$38);
  $39 = $5;
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 >>> 7;
  $42 = $41 & 7;
  $43 = $42<<3;
  $44 = (24 + ($43))|0;
  $45 = $7;
  $46 = (($45) + ($44)|0);
  $7 = $46;
  $47 = $7;
  $4 = $47;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _UnrollXYZDoubleTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0;
 var $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >>> 12;
 $16 = $15 & 1;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $7;
  $10 = $18;
  $19 = $7;
  $20 = $8;
  $21 = (($19) + ($20)|0);
  $11 = $21;
  $22 = $7;
  $23 = $8;
  $24 = $23<<1;
  $25 = (($22) + ($24)|0);
  $12 = $25;
  $26 = $10;
  $27 = +HEAPF64[$26>>3];
  HEAPF64[$9>>3] = $27;
  $28 = $11;
  $29 = +HEAPF64[$28>>3];
  $30 = ((($9)) + 8|0);
  HEAPF64[$30>>3] = $29;
  $31 = $12;
  $32 = +HEAPF64[$31>>3];
  $33 = ((($9)) + 16|0);
  HEAPF64[$33>>3] = $32;
  $34 = $6;
  _cmsFloat2XYZEncoded($34,$9);
  $35 = $7;
  $36 = ((($35)) + 8|0);
  $4 = $36;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 } else {
  $37 = $6;
  $38 = $7;
  _cmsFloat2XYZEncoded($37,$38);
  $39 = $5;
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 >>> 7;
  $42 = $41 & 7;
  $43 = $42<<3;
  $44 = (24 + ($43))|0;
  $45 = $7;
  $46 = (($45) + ($44)|0);
  $7 = $46;
  $47 = $7;
  $4 = $47;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _UnrollLabFloatTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 >>> 12;
 $16 = $15 & 1;
 $17 = ($16|0)!=(0);
 $18 = $7;
 if ($17) {
  $10 = $18;
  $19 = $7;
  $20 = $8;
  $21 = (($19) + ($20)|0);
  $11 = $21;
  $22 = $7;
  $23 = $8;
  $24 = $23<<1;
  $25 = (($22) + ($24)|0);
  $12 = $25;
  $26 = $10;
  $27 = +HEAPF32[$26>>2];
  $28 = $27;
  HEAPF64[$9>>3] = $28;
  $29 = $11;
  $30 = +HEAPF32[$29>>2];
  $31 = $30;
  $32 = ((($9)) + 8|0);
  HEAPF64[$32>>3] = $31;
  $33 = $12;
  $34 = +HEAPF32[$33>>2];
  $35 = $34;
  $36 = ((($9)) + 16|0);
  HEAPF64[$36>>3] = $35;
  $37 = $6;
  _cmsFloat2LabEncoded($37,$9);
  $38 = $7;
  $39 = ((($38)) + 4|0);
  $4 = $39;
  $62 = $4;
  STACKTOP = sp;return ($62|0);
 } else {
  $40 = +HEAPF32[$18>>2];
  $41 = $40;
  HEAPF64[$9>>3] = $41;
  $42 = $7;
  $43 = ((($42)) + 4|0);
  $44 = +HEAPF32[$43>>2];
  $45 = $44;
  $46 = ((($9)) + 8|0);
  HEAPF64[$46>>3] = $45;
  $47 = $7;
  $48 = ((($47)) + 8|0);
  $49 = +HEAPF32[$48>>2];
  $50 = $49;
  $51 = ((($9)) + 16|0);
  HEAPF64[$51>>3] = $50;
  $52 = $6;
  _cmsFloat2LabEncoded($52,$9);
  $53 = $5;
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 >>> 7;
  $56 = $55 & 7;
  $57 = (3 + ($56))|0;
  $58 = $57<<2;
  $59 = $7;
  $60 = (($59) + ($58)|0);
  $7 = $60;
  $61 = $7;
  $4 = $61;
  $62 = $4;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _UnrollXYZFloatTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 24|0;
 $14 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $15 = $5;
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 12;
 $18 = $17 & 1;
 $19 = ($18|0)!=(0);
 $20 = $7;
 if ($19) {
  $10 = $20;
  $21 = $7;
  $22 = $8;
  $23 = (($21) + ($22)|0);
  $11 = $23;
  $24 = $7;
  $25 = $8;
  $26 = $25<<1;
  $27 = (($24) + ($26)|0);
  $12 = $27;
  $28 = $10;
  $29 = +HEAPF32[$28>>2];
  $30 = $29;
  HEAPF64[$9>>3] = $30;
  $31 = $11;
  $32 = +HEAPF32[$31>>2];
  $33 = $32;
  $34 = ((($9)) + 8|0);
  HEAPF64[$34>>3] = $33;
  $35 = $12;
  $36 = +HEAPF32[$35>>2];
  $37 = $36;
  $38 = ((($9)) + 16|0);
  HEAPF64[$38>>3] = $37;
  $39 = $6;
  _cmsFloat2XYZEncoded($39,$9);
  $40 = $7;
  $41 = ((($40)) + 4|0);
  $4 = $41;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 } else {
  $13 = $20;
  $42 = $13;
  $43 = +HEAPF32[$42>>2];
  $44 = $43;
  HEAPF64[$14>>3] = $44;
  $45 = $13;
  $46 = ((($45)) + 4|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $47;
  $49 = ((($14)) + 8|0);
  HEAPF64[$49>>3] = $48;
  $50 = $13;
  $51 = ((($50)) + 8|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $52;
  $54 = ((($14)) + 16|0);
  HEAPF64[$54>>3] = $53;
  $55 = $6;
  _cmsFloat2XYZEncoded($55,$14);
  $56 = $5;
  $57 = HEAP32[$56>>2]|0;
  $58 = $57 >>> 7;
  $59 = $58 & 7;
  $60 = $59<<2;
  $61 = (12 + ($60))|0;
  $62 = $7;
  $63 = (($62) + ($61)|0);
  $7 = $63;
  $64 = $7;
  $4 = $64;
  $65 = $4;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _UnrollDouble1Chan($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $8 = $9;
 $10 = $8;
 $11 = +HEAPF64[$10>>3];
 $12 = $11 * 65535.0;
 $13 = (__cmsQuickSaturateWord_389($12)|0);
 $14 = $5;
 $15 = ((($14)) + 4|0);
 HEAP16[$15>>1] = $13;
 $16 = $5;
 $17 = ((($16)) + 2|0);
 HEAP16[$17>>1] = $13;
 $18 = $5;
 HEAP16[$18>>1] = $13;
 $19 = $6;
 $20 = ((($19)) + 8|0);
 STACKTOP = sp;return ($20|0);
}
function _UnrollDoubleTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $23 = $5;
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 3;
 $26 = $25 & 15;
 $9 = $26;
 $27 = $5;
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >>> 10;
 $30 = $29 & 1;
 $10 = $30;
 $31 = $5;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 >>> 13;
 $34 = $33 & 1;
 $11 = $34;
 $35 = $5;
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 >>> 14;
 $38 = $37 & 1;
 $12 = $38;
 $39 = $5;
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 >>> 7;
 $42 = $41 & 7;
 $13 = $42;
 $43 = $10;
 $44 = $12;
 $45 = $43 ^ $44;
 $14 = $45;
 $46 = $5;
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 >>> 12;
 $49 = $48 & 1;
 $15 = $49;
 $19 = 0;
 $50 = $5;
 $51 = HEAP32[$50>>2]|0;
 $52 = (_IsInkSpace($51)|0);
 $53 = ($52|0)!=(0);
 $54 = $53 ? 655.35000000000002 : 65535.0;
 $20 = $54;
 $55 = $5;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_PixelSize($56)|0);
 $58 = $8;
 $59 = (($58>>>0) / ($57>>>0))&-1;
 $8 = $59;
 $60 = $14;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $13;
  $19 = $62;
 }
 $18 = 0;
 while(1) {
  $63 = $18;
  $64 = $9;
  $65 = ($63>>>0)<($64>>>0);
  if (!($65)) {
   break;
  }
  $66 = $10;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = $9;
   $69 = $18;
   $70 = (($68) - ($69))|0;
   $71 = (($70) - 1)|0;
   $73 = $71;
  } else {
   $72 = $18;
   $73 = $72;
  }
  $21 = $73;
  $74 = $15;
  $75 = ($74|0)!=(0);
  $76 = $7;
  $77 = $18;
  $78 = $19;
  $79 = (($77) + ($78))|0;
  if ($75) {
   $80 = $8;
   $81 = Math_imul($79, $80)|0;
   $82 = (($76) + ($81<<3)|0);
   $83 = +HEAPF64[$82>>3];
   $84 = $83;
   $85 = $84;
   $16 = $85;
  } else {
   $86 = (($76) + ($79<<3)|0);
   $87 = +HEAPF64[$86>>3];
   $88 = $87;
   $89 = $88;
   $16 = $89;
  }
  $90 = $16;
  $91 = $20;
  $92 = $90 * $91;
  $93 = (__cmsQuickSaturateWord_389($92)|0);
  $17 = $93;
  $94 = $11;
  $95 = ($94|0)!=(0);
  if ($95) {
   $96 = $17;
   $97 = $96&65535;
   $98 = (65535 - ($97))|0;
   $99 = $98&65535;
   $17 = $99;
  }
  $100 = $17;
  $101 = $6;
  $102 = $21;
  $103 = (($101) + ($102<<1)|0);
  HEAP16[$103>>1] = $100;
  $104 = $18;
  $105 = (($104) + 1)|0;
  $18 = $105;
 }
 $106 = $13;
 $107 = ($106|0)==(0);
 $108 = $12;
 $109 = ($108|0)!=(0);
 $or$cond = $107 & $109;
 if ($or$cond) {
  $110 = $6;
  $111 = HEAP16[$110>>1]|0;
  $22 = $111;
  $112 = $6;
  $113 = $6;
  $114 = ((($113)) + 2|0);
  $115 = $9;
  $116 = (($115) - 1)|0;
  $117 = $116<<1;
  _memmove(($112|0),($114|0),($117|0))|0;
  $118 = $22;
  $119 = $6;
  $120 = $9;
  $121 = (($120) - 1)|0;
  $122 = (($119) + ($121<<1)|0);
  HEAP16[$122>>1] = $118;
 }
 $123 = $5;
 $124 = HEAP32[$123>>2]|0;
 $125 = $124 >>> 12;
 $126 = $125 & 1;
 $127 = ($126|0)!=(0);
 $128 = $7;
 if ($127) {
  $129 = ((($128)) + 8|0);
  $4 = $129;
  $135 = $4;
  STACKTOP = sp;return ($135|0);
 } else {
  $130 = $9;
  $131 = $13;
  $132 = (($130) + ($131))|0;
  $133 = $132<<3;
  $134 = (($128) + ($133)|0);
  $4 = $134;
  $135 = $4;
  STACKTOP = sp;return ($135|0);
 }
 return (0)|0;
}
function _UnrollFloatTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0.0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $23 = $5;
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 3;
 $26 = $25 & 15;
 $9 = $26;
 $27 = $5;
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >>> 10;
 $30 = $29 & 1;
 $10 = $30;
 $31 = $5;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 >>> 13;
 $34 = $33 & 1;
 $11 = $34;
 $35 = $5;
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 >>> 14;
 $38 = $37 & 1;
 $12 = $38;
 $39 = $5;
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 >>> 7;
 $42 = $41 & 7;
 $13 = $42;
 $43 = $10;
 $44 = $12;
 $45 = $43 ^ $44;
 $14 = $45;
 $46 = $5;
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 >>> 12;
 $49 = $48 & 1;
 $15 = $49;
 $19 = 0;
 $50 = $5;
 $51 = HEAP32[$50>>2]|0;
 $52 = (_IsInkSpace($51)|0);
 $53 = ($52|0)!=(0);
 $54 = $53 ? 655.35000000000002 : 65535.0;
 $20 = $54;
 $55 = $5;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_PixelSize($56)|0);
 $58 = $8;
 $59 = (($58>>>0) / ($57>>>0))&-1;
 $8 = $59;
 $60 = $14;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $13;
  $19 = $62;
 }
 $18 = 0;
 while(1) {
  $63 = $18;
  $64 = $9;
  $65 = ($63>>>0)<($64>>>0);
  if (!($65)) {
   break;
  }
  $66 = $10;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = $9;
   $69 = $18;
   $70 = (($68) - ($69))|0;
   $71 = (($70) - 1)|0;
   $73 = $71;
  } else {
   $72 = $18;
   $73 = $72;
  }
  $21 = $73;
  $74 = $15;
  $75 = ($74|0)!=(0);
  $76 = $7;
  $77 = $18;
  $78 = $19;
  $79 = (($77) + ($78))|0;
  if ($75) {
   $80 = $8;
   $81 = Math_imul($79, $80)|0;
   $82 = (($76) + ($81<<2)|0);
   $83 = +HEAPF32[$82>>2];
   $16 = $83;
  } else {
   $84 = (($76) + ($79<<2)|0);
   $85 = +HEAPF32[$84>>2];
   $16 = $85;
  }
  $86 = $16;
  $87 = $86;
  $88 = $20;
  $89 = $87 * $88;
  $90 = (__cmsQuickSaturateWord_389($89)|0);
  $17 = $90;
  $91 = $11;
  $92 = ($91|0)!=(0);
  if ($92) {
   $93 = $17;
   $94 = $93&65535;
   $95 = (65535 - ($94))|0;
   $96 = $95&65535;
   $17 = $96;
  }
  $97 = $17;
  $98 = $6;
  $99 = $21;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = $97;
  $101 = $18;
  $102 = (($101) + 1)|0;
  $18 = $102;
 }
 $103 = $13;
 $104 = ($103|0)==(0);
 $105 = $12;
 $106 = ($105|0)!=(0);
 $or$cond = $104 & $106;
 if ($or$cond) {
  $107 = $6;
  $108 = HEAP16[$107>>1]|0;
  $22 = $108;
  $109 = $6;
  $110 = $6;
  $111 = ((($110)) + 2|0);
  $112 = $9;
  $113 = (($112) - 1)|0;
  $114 = $113<<1;
  _memmove(($109|0),($111|0),($114|0))|0;
  $115 = $22;
  $116 = $6;
  $117 = $9;
  $118 = (($117) - 1)|0;
  $119 = (($116) + ($118<<1)|0);
  HEAP16[$119>>1] = $115;
 }
 $120 = $5;
 $121 = HEAP32[$120>>2]|0;
 $122 = $121 >>> 12;
 $123 = $122 & 1;
 $124 = ($123|0)!=(0);
 $125 = $7;
 if ($124) {
  $126 = ((($125)) + 4|0);
  $4 = $126;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 } else {
  $127 = $9;
  $128 = $13;
  $129 = (($127) + ($128))|0;
  $130 = $129<<2;
  $131 = (($125) + ($130)|0);
  $4 = $131;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 return (0)|0;
}
function _UnrollHalfTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0.0;
 var $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0;
 var $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $22 = $5;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 3;
 $25 = $24 & 15;
 $9 = $25;
 $26 = $5;
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 >>> 10;
 $29 = $28 & 1;
 $10 = $29;
 $30 = $5;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 13;
 $33 = $32 & 1;
 $11 = $33;
 $34 = $5;
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 >>> 14;
 $37 = $36 & 1;
 $12 = $37;
 $38 = $5;
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 7;
 $41 = $40 & 7;
 $13 = $41;
 $42 = $10;
 $43 = $12;
 $44 = $42 ^ $43;
 $14 = $44;
 $45 = $5;
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 >>> 12;
 $48 = $47 & 1;
 $15 = $48;
 $18 = 0;
 $49 = $5;
 $50 = HEAP32[$49>>2]|0;
 $51 = (_IsInkSpace($50)|0);
 $52 = ($51|0)!=(0);
 $53 = $52 ? 655.3499755859375 : 65535.0;
 $19 = $53;
 $54 = $5;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_PixelSize($56)|0);
 $58 = $8;
 $59 = (($58>>>0) / ($57>>>0))&-1;
 $8 = $59;
 $60 = $14;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $13;
  $18 = $62;
 }
 $17 = 0;
 while(1) {
  $63 = $17;
  $64 = $9;
  $65 = ($63>>>0)<($64>>>0);
  if (!($65)) {
   break;
  }
  $66 = $10;
  $67 = ($66|0)!=(0);
  if ($67) {
   $68 = $9;
   $69 = $17;
   $70 = (($68) - ($69))|0;
   $71 = (($70) - 1)|0;
   $73 = $71;
  } else {
   $72 = $17;
   $73 = $72;
  }
  $20 = $73;
  $74 = $15;
  $75 = ($74|0)!=(0);
  $76 = $7;
  $77 = $17;
  $78 = $18;
  $79 = (($77) + ($78))|0;
  if ($75) {
   $80 = $8;
   $81 = Math_imul($79, $80)|0;
   $82 = (($76) + ($81<<1)|0);
   $83 = HEAP16[$82>>1]|0;
   $84 = (+__cmsHalf2Float($83));
   $16 = $84;
  } else {
   $85 = (($76) + ($79<<1)|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = (+__cmsHalf2Float($86));
   $16 = $87;
  }
  $88 = $11;
  $89 = ($88|0)!=(0);
  if ($89) {
   $90 = $19;
   $91 = $16;
   $92 = $90 - $91;
   $16 = $92;
  }
  $93 = $16;
  $94 = $19;
  $95 = $93 * $94;
  $96 = $95;
  $97 = (__cmsQuickSaturateWord_389($96)|0);
  $98 = $6;
  $99 = $20;
  $100 = (($98) + ($99<<1)|0);
  HEAP16[$100>>1] = $97;
  $101 = $17;
  $102 = (($101) + 1)|0;
  $17 = $102;
 }
 $103 = $13;
 $104 = ($103|0)==(0);
 $105 = $12;
 $106 = ($105|0)!=(0);
 $or$cond = $104 & $106;
 if ($or$cond) {
  $107 = $6;
  $108 = HEAP16[$107>>1]|0;
  $21 = $108;
  $109 = $6;
  $110 = $6;
  $111 = ((($110)) + 2|0);
  $112 = $9;
  $113 = (($112) - 1)|0;
  $114 = $113<<1;
  _memmove(($109|0),($111|0),($114|0))|0;
  $115 = $21;
  $116 = $6;
  $117 = $9;
  $118 = (($117) - 1)|0;
  $119 = (($116) + ($118<<1)|0);
  HEAP16[$119>>1] = $115;
 }
 $120 = $5;
 $121 = HEAP32[$120>>2]|0;
 $122 = $121 >>> 12;
 $123 = $122 & 1;
 $124 = ($123|0)!=(0);
 $125 = $7;
 if ($124) {
  $126 = ((($125)) + 2|0);
  $4 = $126;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 } else {
  $127 = $9;
  $128 = $13;
  $129 = (($127) + ($128))|0;
  $130 = $129<<1;
  $131 = (($125) + ($130)|0);
  $4 = $131;
  $132 = $4;
  STACKTOP = sp;return ($132|0);
 }
 return (0)|0;
}
function _Unroll1Byte($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 $19 = ((($18)) + 4|0);
 HEAP16[$19>>1] = $17;
 $20 = $5;
 $21 = ((($20)) + 2|0);
 HEAP16[$21>>1] = $17;
 $22 = $5;
 HEAP16[$22>>1] = $17;
 $23 = $6;
 $24 = ((($23)) + 1|0);
 $6 = $24;
 $25 = $6;
 STACKTOP = sp;return ($25|0);
}
function _Unroll1ByteSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 $19 = ((($18)) + 4|0);
 HEAP16[$19>>1] = $17;
 $20 = $5;
 $21 = ((($20)) + 2|0);
 HEAP16[$21>>1] = $17;
 $22 = $5;
 HEAP16[$22>>1] = $17;
 $23 = $6;
 $24 = ((($23)) + 1|0);
 $6 = $24;
 $25 = $6;
 $26 = ((($25)) + 1|0);
 $6 = $26;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _Unroll1ByteSkip2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 $19 = ((($18)) + 4|0);
 HEAP16[$19>>1] = $17;
 $20 = $5;
 $21 = ((($20)) + 2|0);
 HEAP16[$21>>1] = $17;
 $22 = $5;
 HEAP16[$22>>1] = $17;
 $23 = $6;
 $24 = ((($23)) + 1|0);
 $6 = $24;
 $25 = $6;
 $26 = ((($25)) + 2|0);
 $6 = $26;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _Unroll1ByteReversed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $17&65535;
 $19 = (65535 - ($18))|0;
 $20 = $19&65535;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 HEAP16[$22>>1] = $20;
 $23 = $5;
 $24 = ((($23)) + 2|0);
 HEAP16[$24>>1] = $20;
 $25 = $5;
 HEAP16[$25>>1] = $20;
 $26 = $6;
 $27 = ((($26)) + 1|0);
 $6 = $27;
 $28 = $6;
 STACKTOP = sp;return ($28|0);
}
function _Unroll2Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 HEAP16[$18>>1] = $17;
 $19 = $6;
 $20 = ((($19)) + 1|0);
 $6 = $20;
 $21 = $6;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23&65535;
 $25 = $24 << 8;
 $26 = $6;
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $25 | $28;
 $30 = $29&65535;
 $31 = $5;
 $32 = ((($31)) + 2|0);
 HEAP16[$32>>1] = $30;
 $33 = $6;
 $34 = ((($33)) + 1|0);
 $6 = $34;
 $35 = $6;
 STACKTOP = sp;return ($35|0);
}
function _UnrollLabV2_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = (_FomLabV2ToLabV4($17)|0);
 $19 = $5;
 HEAP16[$19>>1] = $18;
 $20 = $6;
 $21 = ((($20)) + 1|0);
 $6 = $21;
 $22 = $6;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24&65535;
 $26 = $25 << 8;
 $27 = $6;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 | $29;
 $31 = $30&65535;
 $32 = (_FomLabV2ToLabV4($31)|0);
 $33 = $5;
 $34 = ((($33)) + 2|0);
 HEAP16[$34>>1] = $32;
 $35 = $6;
 $36 = ((($35)) + 1|0);
 $6 = $36;
 $37 = $6;
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39&65535;
 $41 = $40 << 8;
 $42 = $6;
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $41 | $44;
 $46 = $45&65535;
 $47 = (_FomLabV2ToLabV4($46)|0);
 $48 = $5;
 $49 = ((($48)) + 4|0);
 HEAP16[$49>>1] = $47;
 $50 = $6;
 $51 = ((($50)) + 1|0);
 $6 = $51;
 $52 = $6;
 STACKTOP = sp;return ($52|0);
}
function _UnrollALabV2_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 1|0);
 $6 = $9;
 $10 = $6;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12&65535;
 $14 = $13 << 8;
 $15 = $6;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = $18&65535;
 $20 = (_FomLabV2ToLabV4($19)|0);
 $21 = $5;
 HEAP16[$21>>1] = $20;
 $22 = $6;
 $23 = ((($22)) + 1|0);
 $6 = $23;
 $24 = $6;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26&65535;
 $28 = $27 << 8;
 $29 = $6;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $28 | $31;
 $33 = $32&65535;
 $34 = (_FomLabV2ToLabV4($33)|0);
 $35 = $5;
 $36 = ((($35)) + 2|0);
 HEAP16[$36>>1] = $34;
 $37 = $6;
 $38 = ((($37)) + 1|0);
 $6 = $38;
 $39 = $6;
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41&65535;
 $43 = $42 << 8;
 $44 = $6;
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = $43 | $46;
 $48 = $47&65535;
 $49 = (_FomLabV2ToLabV4($48)|0);
 $50 = $5;
 $51 = ((($50)) + 4|0);
 HEAP16[$51>>1] = $49;
 $52 = $6;
 $53 = ((($52)) + 1|0);
 $6 = $53;
 $54 = $6;
 STACKTOP = sp;return ($54|0);
}
function _UnrollLabV2_16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = (_FomLabV2ToLabV4($9)|0);
 $11 = $5;
 HEAP16[$11>>1] = $10;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $6;
 $15 = HEAP16[$14>>1]|0;
 $16 = (_FomLabV2ToLabV4($15)|0);
 $17 = $5;
 $18 = ((($17)) + 2|0);
 HEAP16[$18>>1] = $16;
 $19 = $6;
 $20 = ((($19)) + 2|0);
 $6 = $20;
 $21 = $6;
 $22 = HEAP16[$21>>1]|0;
 $23 = (_FomLabV2ToLabV4($22)|0);
 $24 = $5;
 $25 = ((($24)) + 4|0);
 HEAP16[$25>>1] = $23;
 $26 = $6;
 $27 = ((($26)) + 2|0);
 $6 = $27;
 $28 = $6;
 STACKTOP = sp;return ($28|0);
}
function _Unroll3Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 HEAP16[$18>>1] = $17;
 $19 = $6;
 $20 = ((($19)) + 1|0);
 $6 = $20;
 $21 = $6;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23&65535;
 $25 = $24 << 8;
 $26 = $6;
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $25 | $28;
 $30 = $29&65535;
 $31 = $5;
 $32 = ((($31)) + 2|0);
 HEAP16[$32>>1] = $30;
 $33 = $6;
 $34 = ((($33)) + 1|0);
 $6 = $34;
 $35 = $6;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37&65535;
 $39 = $38 << 8;
 $40 = $6;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $39 | $42;
 $44 = $43&65535;
 $45 = $5;
 $46 = ((($45)) + 4|0);
 HEAP16[$46>>1] = $44;
 $47 = $6;
 $48 = ((($47)) + 1|0);
 $6 = $48;
 $49 = $6;
 STACKTOP = sp;return ($49|0);
}
function _Unroll3BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 $19 = ((($18)) + 4|0);
 HEAP16[$19>>1] = $17;
 $20 = $6;
 $21 = ((($20)) + 1|0);
 $6 = $21;
 $22 = $6;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24&65535;
 $26 = $25 << 8;
 $27 = $6;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 | $29;
 $31 = $30&65535;
 $32 = $5;
 $33 = ((($32)) + 2|0);
 HEAP16[$33>>1] = $31;
 $34 = $6;
 $35 = ((($34)) + 1|0);
 $6 = $35;
 $36 = $6;
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38&65535;
 $40 = $39 << 8;
 $41 = $6;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $40 | $43;
 $45 = $44&65535;
 $46 = $5;
 HEAP16[$46>>1] = $45;
 $47 = $6;
 $48 = ((($47)) + 1|0);
 $6 = $48;
 $49 = $6;
 STACKTOP = sp;return ($49|0);
}
function _Unroll3BytesSkip1Swap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 1|0);
 $6 = $9;
 $10 = $6;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12&65535;
 $14 = $13 << 8;
 $15 = $6;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = $18&65535;
 $20 = $5;
 $21 = ((($20)) + 4|0);
 HEAP16[$21>>1] = $19;
 $22 = $6;
 $23 = ((($22)) + 1|0);
 $6 = $23;
 $24 = $6;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26&65535;
 $28 = $27 << 8;
 $29 = $6;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $28 | $31;
 $33 = $32&65535;
 $34 = $5;
 $35 = ((($34)) + 2|0);
 HEAP16[$35>>1] = $33;
 $36 = $6;
 $37 = ((($36)) + 1|0);
 $6 = $37;
 $38 = $6;
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $40&65535;
 $42 = $41 << 8;
 $43 = $6;
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $42 | $45;
 $47 = $46&65535;
 $48 = $5;
 HEAP16[$48>>1] = $47;
 $49 = $6;
 $50 = ((($49)) + 1|0);
 $6 = $50;
 $51 = $6;
 STACKTOP = sp;return ($51|0);
}
function _Unroll3BytesSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 1|0);
 $6 = $9;
 $10 = $6;
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12&65535;
 $14 = $13 << 8;
 $15 = $6;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = $18&65535;
 $20 = $5;
 HEAP16[$20>>1] = $19;
 $21 = $6;
 $22 = ((($21)) + 1|0);
 $6 = $22;
 $23 = $6;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25&65535;
 $27 = $26 << 8;
 $28 = $6;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $27 | $30;
 $32 = $31&65535;
 $33 = $5;
 $34 = ((($33)) + 2|0);
 HEAP16[$34>>1] = $32;
 $35 = $6;
 $36 = ((($35)) + 1|0);
 $6 = $36;
 $37 = $6;
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39&65535;
 $41 = $40 << 8;
 $42 = $6;
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $41 | $44;
 $46 = $45&65535;
 $47 = $5;
 $48 = ((($47)) + 4|0);
 HEAP16[$48>>1] = $46;
 $49 = $6;
 $50 = ((($49)) + 1|0);
 $6 = $50;
 $51 = $6;
 STACKTOP = sp;return ($51|0);
}
function _Unroll3BytesSkip1SwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 $19 = ((($18)) + 4|0);
 HEAP16[$19>>1] = $17;
 $20 = $6;
 $21 = ((($20)) + 1|0);
 $6 = $21;
 $22 = $6;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24&65535;
 $26 = $25 << 8;
 $27 = $6;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 | $29;
 $31 = $30&65535;
 $32 = $5;
 $33 = ((($32)) + 2|0);
 HEAP16[$33>>1] = $31;
 $34 = $6;
 $35 = ((($34)) + 1|0);
 $6 = $35;
 $36 = $6;
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38&65535;
 $40 = $39 << 8;
 $41 = $6;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $40 | $43;
 $45 = $44&65535;
 $46 = $5;
 HEAP16[$46>>1] = $45;
 $47 = $6;
 $48 = ((($47)) + 1|0);
 $6 = $48;
 $49 = $6;
 $50 = ((($49)) + 1|0);
 $6 = $50;
 $51 = $6;
 STACKTOP = sp;return ($51|0);
}
function _Unroll4Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 HEAP16[$18>>1] = $17;
 $19 = $6;
 $20 = ((($19)) + 1|0);
 $6 = $20;
 $21 = $6;
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23&65535;
 $25 = $24 << 8;
 $26 = $6;
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $25 | $28;
 $30 = $29&65535;
 $31 = $5;
 $32 = ((($31)) + 2|0);
 HEAP16[$32>>1] = $30;
 $33 = $6;
 $34 = ((($33)) + 1|0);
 $6 = $34;
 $35 = $6;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37&65535;
 $39 = $38 << 8;
 $40 = $6;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $39 | $42;
 $44 = $43&65535;
 $45 = $5;
 $46 = ((($45)) + 4|0);
 HEAP16[$46>>1] = $44;
 $47 = $6;
 $48 = ((($47)) + 1|0);
 $6 = $48;
 $49 = $6;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51&65535;
 $53 = $52 << 8;
 $54 = $6;
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $53 | $56;
 $58 = $57&65535;
 $59 = $5;
 $60 = ((($59)) + 6|0);
 HEAP16[$60>>1] = $58;
 $61 = $6;
 $62 = ((($61)) + 1|0);
 $6 = $62;
 $63 = $6;
 STACKTOP = sp;return ($63|0);
}
function _Unroll4BytesReverse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (255 - ($10))|0;
 $12 = $11&255;
 $13 = $12&255;
 $14 = $13&65535;
 $15 = $14 << 8;
 $16 = $6;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (255 - ($18))|0;
 $20 = $19&255;
 $21 = $20&255;
 $22 = $15 | $21;
 $23 = $22&65535;
 $24 = $5;
 HEAP16[$24>>1] = $23;
 $25 = $6;
 $26 = ((($25)) + 1|0);
 $6 = $26;
 $27 = $6;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = (255 - ($29))|0;
 $31 = $30&255;
 $32 = $31&255;
 $33 = $32&65535;
 $34 = $33 << 8;
 $35 = $6;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = (255 - ($37))|0;
 $39 = $38&255;
 $40 = $39&255;
 $41 = $34 | $40;
 $42 = $41&65535;
 $43 = $5;
 $44 = ((($43)) + 2|0);
 HEAP16[$44>>1] = $42;
 $45 = $6;
 $46 = ((($45)) + 1|0);
 $6 = $46;
 $47 = $6;
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (255 - ($49))|0;
 $51 = $50&255;
 $52 = $51&255;
 $53 = $52&65535;
 $54 = $53 << 8;
 $55 = $6;
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = (255 - ($57))|0;
 $59 = $58&255;
 $60 = $59&255;
 $61 = $54 | $60;
 $62 = $61&65535;
 $63 = $5;
 $64 = ((($63)) + 4|0);
 HEAP16[$64>>1] = $62;
 $65 = $6;
 $66 = ((($65)) + 1|0);
 $6 = $66;
 $67 = $6;
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = (255 - ($69))|0;
 $71 = $70&255;
 $72 = $71&255;
 $73 = $72&65535;
 $74 = $73 << 8;
 $75 = $6;
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = (255 - ($77))|0;
 $79 = $78&255;
 $80 = $79&255;
 $81 = $74 | $80;
 $82 = $81&65535;
 $83 = $5;
 $84 = ((($83)) + 6|0);
 HEAP16[$84>>1] = $82;
 $85 = $6;
 $86 = ((($85)) + 1|0);
 $6 = $86;
 $87 = $6;
 STACKTOP = sp;return ($87|0);
}
function _Unroll4BytesSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 $19 = ((($18)) + 6|0);
 HEAP16[$19>>1] = $17;
 $20 = $6;
 $21 = ((($20)) + 1|0);
 $6 = $21;
 $22 = $6;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24&65535;
 $26 = $25 << 8;
 $27 = $6;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 | $29;
 $31 = $30&65535;
 $32 = $5;
 HEAP16[$32>>1] = $31;
 $33 = $6;
 $34 = ((($33)) + 1|0);
 $6 = $34;
 $35 = $6;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37&65535;
 $39 = $38 << 8;
 $40 = $6;
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $39 | $42;
 $44 = $43&65535;
 $45 = $5;
 $46 = ((($45)) + 2|0);
 HEAP16[$46>>1] = $44;
 $47 = $6;
 $48 = ((($47)) + 1|0);
 $6 = $48;
 $49 = $6;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51&65535;
 $53 = $52 << 8;
 $54 = $6;
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $53 | $56;
 $58 = $57&65535;
 $59 = $5;
 $60 = ((($59)) + 4|0);
 HEAP16[$60>>1] = $58;
 $61 = $6;
 $62 = ((($61)) + 1|0);
 $6 = $62;
 $63 = $6;
 STACKTOP = sp;return ($63|0);
}
function _Unroll4BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 $19 = ((($18)) + 6|0);
 HEAP16[$19>>1] = $17;
 $20 = $6;
 $21 = ((($20)) + 1|0);
 $6 = $21;
 $22 = $6;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24&65535;
 $26 = $25 << 8;
 $27 = $6;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 | $29;
 $31 = $30&65535;
 $32 = $5;
 $33 = ((($32)) + 4|0);
 HEAP16[$33>>1] = $31;
 $34 = $6;
 $35 = ((($34)) + 1|0);
 $6 = $35;
 $36 = $6;
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38&65535;
 $40 = $39 << 8;
 $41 = $6;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $40 | $43;
 $45 = $44&65535;
 $46 = $5;
 $47 = ((($46)) + 2|0);
 HEAP16[$47>>1] = $45;
 $48 = $6;
 $49 = ((($48)) + 1|0);
 $6 = $49;
 $50 = $6;
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $52&65535;
 $54 = $53 << 8;
 $55 = $6;
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $54 | $57;
 $59 = $58&65535;
 $60 = $5;
 HEAP16[$60>>1] = $59;
 $61 = $6;
 $62 = ((($61)) + 1|0);
 $6 = $62;
 $63 = $6;
 STACKTOP = sp;return ($63|0);
}
function _Unroll4BytesSwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10&65535;
 $12 = $11 << 8;
 $13 = $6;
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = $16&65535;
 $18 = $5;
 $19 = ((($18)) + 4|0);
 HEAP16[$19>>1] = $17;
 $20 = $6;
 $21 = ((($20)) + 1|0);
 $6 = $21;
 $22 = $6;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24&65535;
 $26 = $25 << 8;
 $27 = $6;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 | $29;
 $31 = $30&65535;
 $32 = $5;
 $33 = ((($32)) + 2|0);
 HEAP16[$33>>1] = $31;
 $34 = $6;
 $35 = ((($34)) + 1|0);
 $6 = $35;
 $36 = $6;
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38&65535;
 $40 = $39 << 8;
 $41 = $6;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $40 | $43;
 $45 = $44&65535;
 $46 = $5;
 HEAP16[$46>>1] = $45;
 $47 = $6;
 $48 = ((($47)) + 1|0);
 $6 = $48;
 $49 = $6;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51&65535;
 $53 = $52 << 8;
 $54 = $6;
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $53 | $56;
 $58 = $57&65535;
 $59 = $5;
 $60 = ((($59)) + 6|0);
 HEAP16[$60>>1] = $58;
 $61 = $6;
 $62 = ((($61)) + 1|0);
 $6 = $62;
 $63 = $6;
 STACKTOP = sp;return ($63|0);
}
function _UnrollPlanarBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 3;
 $19 = $18 & 15;
 $8 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> 10;
 $23 = $22 & 1;
 $9 = $23;
 $24 = $4;
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 >>> 14;
 $27 = $26 & 1;
 $10 = $27;
 $28 = $4;
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 13;
 $31 = $30 & 1;
 $11 = $31;
 $32 = $6;
 $13 = $32;
 $33 = $9;
 $34 = $10;
 $35 = $33 ^ $34;
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $4;
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 >>> 7;
  $40 = $39 & 7;
  $41 = $7;
  $42 = Math_imul($40, $41)|0;
  $43 = $6;
  $44 = (($43) + ($42)|0);
  $6 = $44;
 }
 $12 = 0;
 while(1) {
  $45 = $12;
  $46 = $8;
  $47 = ($45>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = $9;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $8;
   $51 = $12;
   $52 = (($50) - ($51))|0;
   $53 = (($52) - 1)|0;
   $55 = $53;
  } else {
   $54 = $12;
   $55 = $54;
  }
  $14 = $55;
  $56 = $6;
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = $58&65535;
  $60 = $59 << 8;
  $61 = $6;
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $60 | $63;
  $65 = $64&65535;
  $15 = $65;
  $66 = $11;
  $67 = ($66|0)!=(0);
  $68 = $15;
  $69 = $68&65535;
  if ($67) {
   $70 = (65535 - ($69))|0;
   $71 = $70&65535;
   $72 = $71&65535;
   $74 = $72;
  } else {
   $74 = $69;
  }
  $73 = $74&65535;
  $75 = $5;
  $76 = $14;
  $77 = (($75) + ($76<<1)|0);
  HEAP16[$77>>1] = $73;
  $78 = $7;
  $79 = $6;
  $80 = (($79) + ($78)|0);
  $6 = $80;
  $81 = $12;
  $82 = (($81) + 1)|0;
  $12 = $82;
 }
 $83 = $13;
 $84 = ((($83)) + 1|0);
 STACKTOP = sp;return ($84|0);
}
function _UnrollChunkyBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $18 = $4;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 >>> 3;
 $21 = $20 & 15;
 $8 = $21;
 $22 = $4;
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 >>> 10;
 $25 = $24 & 1;
 $9 = $25;
 $26 = $4;
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 >>> 13;
 $29 = $28 & 1;
 $10 = $29;
 $30 = $4;
 $31 = HEAP32[$30>>2]|0;
 $32 = $31 >>> 14;
 $33 = $32 & 1;
 $11 = $33;
 $34 = $4;
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 >>> 7;
 $37 = $36 & 7;
 $12 = $37;
 $38 = $9;
 $39 = $11;
 $40 = $38 ^ $39;
 $13 = $40;
 $41 = $13;
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $12;
  $44 = $6;
  $45 = (($44) + ($43)|0);
  $6 = $45;
 }
 $15 = 0;
 while(1) {
  $46 = $15;
  $47 = $8;
  $48 = ($46>>>0)<($47>>>0);
  if (!($48)) {
   break;
  }
  $49 = $9;
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = $8;
   $52 = $15;
   $53 = (($51) - ($52))|0;
   $54 = (($53) - 1)|0;
   $56 = $54;
  } else {
   $55 = $15;
   $56 = $55;
  }
  $16 = $56;
  $57 = $6;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $59&65535;
  $61 = $60 << 8;
  $62 = $6;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $61 | $64;
  $66 = $65&65535;
  $14 = $66;
  $67 = $10;
  $68 = ($67|0)!=(0);
  $69 = $14;
  $70 = $69&65535;
  if ($68) {
   $71 = (65535 - ($70))|0;
   $72 = $71&65535;
   $73 = $72&65535;
   $75 = $73;
  } else {
   $75 = $70;
  }
  $74 = $75&65535;
  $14 = $74;
  $76 = $14;
  $77 = $5;
  $78 = $16;
  $79 = (($77) + ($78<<1)|0);
  HEAP16[$79>>1] = $76;
  $80 = $6;
  $81 = ((($80)) + 1|0);
  $6 = $81;
  $82 = $15;
  $83 = (($82) + 1)|0;
  $15 = $83;
 }
 $84 = $13;
 $85 = ($84|0)!=(0);
 if (!($85)) {
  $86 = $12;
  $87 = $6;
  $88 = (($87) + ($86)|0);
  $6 = $88;
 }
 $89 = $12;
 $90 = ($89|0)==(0);
 $91 = $11;
 $92 = ($91|0)!=(0);
 $or$cond = $90 & $92;
 if (!($or$cond)) {
  $106 = $6;
  STACKTOP = sp;return ($106|0);
 }
 $93 = $5;
 $94 = HEAP16[$93>>1]|0;
 $17 = $94;
 $95 = $5;
 $96 = $5;
 $97 = ((($96)) + 2|0);
 $98 = $8;
 $99 = (($98) - 1)|0;
 $100 = $99<<1;
 _memmove(($95|0),($97|0),($100|0))|0;
 $101 = $17;
 $102 = $5;
 $103 = $8;
 $104 = (($103) - 1)|0;
 $105 = (($102) + ($104<<1)|0);
 HEAP16[$105>>1] = $101;
 $106 = $6;
 STACKTOP = sp;return ($106|0);
}
function _Unroll1Word($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 HEAP16[$11>>1] = $9;
 $12 = $5;
 $13 = ((($12)) + 2|0);
 HEAP16[$13>>1] = $9;
 $14 = $5;
 HEAP16[$14>>1] = $9;
 $15 = $6;
 $16 = ((($15)) + 2|0);
 $6 = $16;
 $17 = $6;
 STACKTOP = sp;return ($17|0);
}
function _Unroll1WordReversed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (65535 - ($10))|0;
 $12 = $11&65535;
 $13 = $5;
 $14 = ((($13)) + 4|0);
 HEAP16[$14>>1] = $12;
 $15 = $5;
 $16 = ((($15)) + 2|0);
 HEAP16[$16>>1] = $12;
 $17 = $5;
 HEAP16[$17>>1] = $12;
 $18 = $6;
 $19 = ((($18)) + 2|0);
 $6 = $19;
 $20 = $6;
 STACKTOP = sp;return ($20|0);
}
function _Unroll1WordSkip3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 HEAP16[$11>>1] = $9;
 $12 = $5;
 $13 = ((($12)) + 2|0);
 HEAP16[$13>>1] = $9;
 $14 = $5;
 HEAP16[$14>>1] = $9;
 $15 = $6;
 $16 = ((($15)) + 8|0);
 $6 = $16;
 $17 = $6;
 STACKTOP = sp;return ($17|0);
}
function _Unroll2Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $5;
 HEAP16[$10>>1] = $9;
 $11 = $6;
 $12 = ((($11)) + 2|0);
 $6 = $12;
 $13 = $6;
 $14 = HEAP16[$13>>1]|0;
 $15 = $5;
 $16 = ((($15)) + 2|0);
 HEAP16[$16>>1] = $14;
 $17 = $6;
 $18 = ((($17)) + 2|0);
 $6 = $18;
 $19 = $6;
 STACKTOP = sp;return ($19|0);
}
function _Unroll3Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $5;
 HEAP16[$10>>1] = $9;
 $11 = $6;
 $12 = ((($11)) + 2|0);
 $6 = $12;
 $13 = $6;
 $14 = HEAP16[$13>>1]|0;
 $15 = $5;
 $16 = ((($15)) + 2|0);
 HEAP16[$16>>1] = $14;
 $17 = $6;
 $18 = ((($17)) + 2|0);
 $6 = $18;
 $19 = $6;
 $20 = HEAP16[$19>>1]|0;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 HEAP16[$22>>1] = $20;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 STACKTOP = sp;return ($25|0);
}
function _Unroll4Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $5;
 HEAP16[$10>>1] = $9;
 $11 = $6;
 $12 = ((($11)) + 2|0);
 $6 = $12;
 $13 = $6;
 $14 = HEAP16[$13>>1]|0;
 $15 = $5;
 $16 = ((($15)) + 2|0);
 HEAP16[$16>>1] = $14;
 $17 = $6;
 $18 = ((($17)) + 2|0);
 $6 = $18;
 $19 = $6;
 $20 = HEAP16[$19>>1]|0;
 $21 = $5;
 $22 = ((($21)) + 4|0);
 HEAP16[$22>>1] = $20;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 $26 = HEAP16[$25>>1]|0;
 $27 = $5;
 $28 = ((($27)) + 6|0);
 HEAP16[$28>>1] = $26;
 $29 = $6;
 $30 = ((($29)) + 2|0);
 $6 = $30;
 $31 = $6;
 STACKTOP = sp;return ($31|0);
}
function _Unroll3WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 HEAP16[$11>>1] = $9;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $6;
 $15 = HEAP16[$14>>1]|0;
 $16 = $5;
 $17 = ((($16)) + 2|0);
 HEAP16[$17>>1] = $15;
 $18 = $6;
 $19 = ((($18)) + 2|0);
 $6 = $19;
 $20 = $6;
 $21 = HEAP16[$20>>1]|0;
 $22 = $5;
 HEAP16[$22>>1] = $21;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 STACKTOP = sp;return ($25|0);
}
function _Unroll3WordsSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 2|0);
 $6 = $9;
 $10 = $6;
 $11 = HEAP16[$10>>1]|0;
 $12 = $5;
 HEAP16[$12>>1] = $11;
 $13 = $6;
 $14 = ((($13)) + 2|0);
 $6 = $14;
 $15 = $6;
 $16 = HEAP16[$15>>1]|0;
 $17 = $5;
 $18 = ((($17)) + 2|0);
 HEAP16[$18>>1] = $16;
 $19 = $6;
 $20 = ((($19)) + 2|0);
 $6 = $20;
 $21 = $6;
 $22 = HEAP16[$21>>1]|0;
 $23 = $5;
 $24 = ((($23)) + 4|0);
 HEAP16[$24>>1] = $22;
 $25 = $6;
 $26 = ((($25)) + 2|0);
 $6 = $26;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _Unroll3WordsSkip1Swap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = ((($8)) + 2|0);
 $6 = $9;
 $10 = $6;
 $11 = HEAP16[$10>>1]|0;
 $12 = $5;
 $13 = ((($12)) + 4|0);
 HEAP16[$13>>1] = $11;
 $14 = $6;
 $15 = ((($14)) + 2|0);
 $6 = $15;
 $16 = $6;
 $17 = HEAP16[$16>>1]|0;
 $18 = $5;
 $19 = ((($18)) + 2|0);
 HEAP16[$19>>1] = $17;
 $20 = $6;
 $21 = ((($20)) + 2|0);
 $6 = $21;
 $22 = $6;
 $23 = HEAP16[$22>>1]|0;
 $24 = $5;
 HEAP16[$24>>1] = $23;
 $25 = $6;
 $26 = ((($25)) + 2|0);
 $6 = $26;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _Unroll4WordsReverse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = (65535 - ($10))|0;
 $12 = $11&65535;
 $13 = $5;
 HEAP16[$13>>1] = $12;
 $14 = $6;
 $15 = ((($14)) + 2|0);
 $6 = $15;
 $16 = $6;
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = (65535 - ($18))|0;
 $20 = $19&65535;
 $21 = $5;
 $22 = ((($21)) + 2|0);
 HEAP16[$22>>1] = $20;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = (65535 - ($27))|0;
 $29 = $28&65535;
 $30 = $5;
 $31 = ((($30)) + 4|0);
 HEAP16[$31>>1] = $29;
 $32 = $6;
 $33 = ((($32)) + 2|0);
 $6 = $33;
 $34 = $6;
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = (65535 - ($36))|0;
 $38 = $37&65535;
 $39 = $5;
 $40 = ((($39)) + 6|0);
 HEAP16[$40>>1] = $38;
 $41 = $6;
 $42 = ((($41)) + 2|0);
 $6 = $42;
 $43 = $6;
 STACKTOP = sp;return ($43|0);
}
function _Unroll4WordsSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $5;
 $11 = ((($10)) + 6|0);
 HEAP16[$11>>1] = $9;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $6;
 $15 = HEAP16[$14>>1]|0;
 $16 = $5;
 HEAP16[$16>>1] = $15;
 $17 = $6;
 $18 = ((($17)) + 2|0);
 $6 = $18;
 $19 = $6;
 $20 = HEAP16[$19>>1]|0;
 $21 = $5;
 $22 = ((($21)) + 2|0);
 HEAP16[$22>>1] = $20;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 $26 = HEAP16[$25>>1]|0;
 $27 = $5;
 $28 = ((($27)) + 4|0);
 HEAP16[$28>>1] = $26;
 $29 = $6;
 $30 = ((($29)) + 2|0);
 $6 = $30;
 $31 = $6;
 STACKTOP = sp;return ($31|0);
}
function _Unroll4WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $5;
 $11 = ((($10)) + 6|0);
 HEAP16[$11>>1] = $9;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $6;
 $15 = HEAP16[$14>>1]|0;
 $16 = $5;
 $17 = ((($16)) + 4|0);
 HEAP16[$17>>1] = $15;
 $18 = $6;
 $19 = ((($18)) + 2|0);
 $6 = $19;
 $20 = $6;
 $21 = HEAP16[$20>>1]|0;
 $22 = $5;
 $23 = ((($22)) + 2|0);
 HEAP16[$23>>1] = $21;
 $24 = $6;
 $25 = ((($24)) + 2|0);
 $6 = $25;
 $26 = $6;
 $27 = HEAP16[$26>>1]|0;
 $28 = $5;
 HEAP16[$28>>1] = $27;
 $29 = $6;
 $30 = ((($29)) + 2|0);
 $6 = $30;
 $31 = $6;
 STACKTOP = sp;return ($31|0);
}
function _Unroll4WordsSwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $6;
 $9 = HEAP16[$8>>1]|0;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 HEAP16[$11>>1] = $9;
 $12 = $6;
 $13 = ((($12)) + 2|0);
 $6 = $13;
 $14 = $6;
 $15 = HEAP16[$14>>1]|0;
 $16 = $5;
 $17 = ((($16)) + 2|0);
 HEAP16[$17>>1] = $15;
 $18 = $6;
 $19 = ((($18)) + 2|0);
 $6 = $19;
 $20 = $6;
 $21 = HEAP16[$20>>1]|0;
 $22 = $5;
 HEAP16[$22>>1] = $21;
 $23 = $6;
 $24 = ((($23)) + 2|0);
 $6 = $24;
 $25 = $6;
 $26 = HEAP16[$25>>1]|0;
 $27 = $5;
 $28 = ((($27)) + 6|0);
 HEAP16[$28>>1] = $26;
 $29 = $6;
 $30 = ((($29)) + 2|0);
 $6 = $30;
 $31 = $6;
 STACKTOP = sp;return ($31|0);
}
function _UnrollPlanarWords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 >>> 3;
 $19 = $18 & 15;
 $8 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 >>> 10;
 $23 = $22 & 1;
 $9 = $23;
 $24 = $4;
 $25 = HEAP32[$24>>2]|0;
 $26 = $25 >>> 13;
 $27 = $26 & 1;
 $10 = $27;
 $28 = $4;
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 >>> 11;
 $31 = $30 & 1;
 $11 = $31;
 $32 = $6;
 $13 = $32;
 $33 = $9;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $4;
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 >>> 7;
  $38 = $37 & 7;
  $39 = $7;
  $40 = Math_imul($38, $39)|0;
  $41 = $6;
  $42 = (($41) + ($40)|0);
  $6 = $42;
 }
 $12 = 0;
 while(1) {
  $43 = $12;
  $44 = $8;
  $45 = ($43>>>0)<($44>>>0);
  if (!($45)) {
   break;
  }
  $46 = $9;
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $8;
   $49 = $12;
   $50 = (($48) - ($49))|0;
   $51 = (($50) - 1)|0;
   $53 = $51;
  } else {
   $52 = $12;
   $53 = $52;
  }
  $14 = $53;
  $54 = $6;
  $55 = HEAP16[$54>>1]|0;
  $15 = $55;
  $56 = $11;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = $15;
   $59 = $58&65535;
   $60 = $59 << 8;
   $61 = $60&65535;
   $62 = $61&65535;
   $63 = $15;
   $64 = $63&65535;
   $65 = $64 >> 8;
   $66 = $62 | $65;
   $67 = $66&65535;
   $15 = $67;
  }
  $68 = $10;
  $69 = ($68|0)!=(0);
  $70 = $15;
  $71 = $70&65535;
  if ($69) {
   $72 = (65535 - ($71))|0;
   $73 = $72&65535;
   $74 = $73&65535;
   $76 = $74;
  } else {
   $76 = $71;
  }
  $75 = $76&65535;
  $77 = $5;
  $78 = $14;
  $79 = (($77) + ($78<<1)|0);
  HEAP16[$79>>1] = $75;
  $80 = $7;
  $81 = $6;
  $82 = (($81) + ($80)|0);
  $6 = $82;
  $83 = $12;
  $84 = (($83) + 1)|0;
  $12 = $84;
 }
 $85 = $13;
 $86 = ((($85)) + 2|0);
 STACKTOP = sp;return ($86|0);
}
function _UnrollAnyWords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $19 = $4;
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 >>> 3;
 $22 = $21 & 15;
 $8 = $22;
 $23 = $4;
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 11;
 $26 = $25 & 1;
 $9 = $26;
 $27 = $4;
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 >>> 10;
 $30 = $29 & 1;
 $10 = $30;
 $31 = $4;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 >>> 13;
 $34 = $33 & 1;
 $11 = $34;
 $35 = $4;
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 >>> 14;
 $38 = $37 & 1;
 $12 = $38;
 $39 = $4;
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 >>> 7;
 $42 = $41 & 7;
 $13 = $42;
 $43 = $10;
 $44 = $12;
 $45 = $43 ^ $44;
 $14 = $45;
 $46 = $14;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $13;
  $49 = $48<<1;
  $50 = $6;
  $51 = (($50) + ($49)|0);
  $6 = $51;
 }
 $15 = 0;
 while(1) {
  $52 = $15;
  $53 = $8;
  $54 = ($52>>>0)<($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = $10;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $8;
   $58 = $15;
   $59 = (($57) - ($58))|0;
   $60 = (($59) - 1)|0;
   $62 = $60;
  } else {
   $61 = $15;
   $62 = $61;
  }
  $16 = $62;
  $63 = $6;
  $64 = HEAP16[$63>>1]|0;
  $17 = $64;
  $65 = $9;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $17;
   $68 = $67&65535;
   $69 = $68 << 8;
   $70 = $69&65535;
   $71 = $70&65535;
   $72 = $17;
   $73 = $72&65535;
   $74 = $73 >> 8;
   $75 = $71 | $74;
   $76 = $75&65535;
   $17 = $76;
  }
  $77 = $11;
  $78 = ($77|0)!=(0);
  $79 = $17;
  $80 = $79&65535;
  if ($78) {
   $81 = (65535 - ($80))|0;
   $82 = $81&65535;
   $83 = $82&65535;
   $85 = $83;
  } else {
   $85 = $80;
  }
  $84 = $85&65535;
  $86 = $5;
  $87 = $16;
  $88 = (($86) + ($87<<1)|0);
  HEAP16[$88>>1] = $84;
  $89 = $6;
  $90 = ((($89)) + 2|0);
  $6 = $90;
  $91 = $15;
  $92 = (($91) + 1)|0;
  $15 = $92;
 }
 $93 = $14;
 $94 = ($93|0)!=(0);
 if (!($94)) {
  $95 = $13;
  $96 = $95<<1;
  $97 = $6;
  $98 = (($97) + ($96)|0);
  $6 = $98;
 }
 $99 = $13;
 $100 = ($99|0)==(0);
 $101 = $12;
 $102 = ($101|0)!=(0);
 $or$cond = $100 & $102;
 if (!($or$cond)) {
  $116 = $6;
  STACKTOP = sp;return ($116|0);
 }
 $103 = $5;
 $104 = HEAP16[$103>>1]|0;
 $18 = $104;
 $105 = $5;
 $106 = $5;
 $107 = ((($106)) + 2|0);
 $108 = $8;
 $109 = (($108) - 1)|0;
 $110 = $109<<1;
 _memmove(($105|0),($107|0),($110|0))|0;
 $111 = $18;
 $112 = $5;
 $113 = $8;
 $114 = (($113) - 1)|0;
 $115 = (($112) + ($114<<1)|0);
 HEAP16[$115>>1] = $111;
 $116 = $6;
 STACKTOP = sp;return ($116|0);
}
function _FomLabV2ToLabV4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = $4&65535;
 $6 = $5 << 8;
 $7 = $2;
 $8 = $7&65535;
 $9 = $6 | $8;
 $10 = $9 >> 8;
 $3 = $10;
 $11 = $3;
 $12 = ($11|0)>(65535);
 if ($12) {
  $1 = -1;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 } else {
  $13 = $3;
  $14 = $13&65535;
  $1 = $14;
  $15 = $1;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __cmsQuickSaturateWord_389($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 65535.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord_390($9)|0);
    $1 = $10;
    break;
   }
  }
 } while(0);
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function __cmsQuickFloorWord_390($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 32767.0;
 $4 = (__cmsQuickFloor_391($3)|0);
 $5 = $4&65535;
 $6 = $5&65535;
 $7 = (($6) + 32767)|0;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsQuickFloor_391($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function __cmsFormatterIsFloat($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 >>> 22;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 $6 = $5 ? 1 : 0;
 STACKTOP = sp;return ($6|0);
}
function __cmsFormatterIs8bit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3 & 7;
 $2 = $4;
 $5 = $2;
 $6 = ($5|0)==(1);
 $7 = $6&1;
 STACKTOP = sp;return ($7|0);
}
function _cmsFormatterForColorspaceOfProfile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $3;
 $11 = (_cmsGetColorSpace($10)|0);
 $6 = $11;
 $12 = $6;
 $13 = (__cmsLCMScolorSpace($12)|0);
 $7 = $13;
 $14 = $6;
 $15 = (_cmsChannelsOf($14)|0);
 $8 = $15;
 $16 = $5;
 $17 = ($16|0)!=(0);
 $18 = $17 ? 1 : 0;
 $9 = $18;
 $19 = $9;
 $20 = $19 << 22;
 $21 = $7;
 $22 = $21 << 16;
 $23 = $20 | $22;
 $24 = $4;
 $25 = $23 | $24;
 $26 = $8;
 $27 = $26 << 3;
 $28 = $25 | $27;
 STACKTOP = sp;return ($28|0);
}
function _cmsXYZ2xyY($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF64[$5>>3];
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $6 + $9;
 $11 = $3;
 $12 = ((($11)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $10 + $13;
 $15 = 1.0 / $14;
 $4 = $15;
 $16 = $3;
 $17 = +HEAPF64[$16>>3];
 $18 = $4;
 $19 = $17 * $18;
 $20 = $2;
 HEAPF64[$20>>3] = $19;
 $21 = $3;
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $4;
 $25 = $23 * $24;
 $26 = $2;
 $27 = ((($26)) + 8|0);
 HEAPF64[$27>>3] = $25;
 $28 = $3;
 $29 = ((($28)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $2;
 $32 = ((($31)) + 16|0);
 HEAPF64[$32>>3] = $30;
 STACKTOP = sp;return;
}
function _cmsxyY2XYZ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = +HEAPF64[$4>>3];
 $6 = $3;
 $7 = ((($6)) + 8|0);
 $8 = +HEAPF64[$7>>3];
 $9 = $5 / $8;
 $10 = $3;
 $11 = ((($10)) + 16|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $9 * $12;
 $14 = $2;
 HEAPF64[$14>>3] = $13;
 $15 = $3;
 $16 = ((($15)) + 16|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $2;
 $19 = ((($18)) + 8|0);
 HEAPF64[$19>>3] = $17;
 $20 = $3;
 $21 = +HEAPF64[$20>>3];
 $22 = 1.0 - $21;
 $23 = $3;
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $22 - $25;
 $27 = $3;
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 / $29;
 $31 = $3;
 $32 = ((($31)) + 16|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $30 * $33;
 $35 = $2;
 $36 = ((($35)) + 16|0);
 HEAPF64[$36>>3] = $34;
 STACKTOP = sp;return;
}
function _cmsXYZ2Lab($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (_cmsD50_XYZ()|0);
  $3 = $11;
 }
 $12 = $5;
 $13 = +HEAPF64[$12>>3];
 $14 = $3;
 $15 = +HEAPF64[$14>>3];
 $16 = $13 / $15;
 $17 = (+_f($16));
 $6 = $17;
 $18 = $5;
 $19 = ((($18)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $3;
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $20 / $23;
 $25 = (+_f($24));
 $7 = $25;
 $26 = $5;
 $27 = ((($26)) + 16|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $3;
 $30 = ((($29)) + 16|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $28 / $31;
 $33 = (+_f($32));
 $8 = $33;
 $34 = $7;
 $35 = 116.0 * $34;
 $36 = $35 - 16.0;
 $37 = $4;
 HEAPF64[$37>>3] = $36;
 $38 = $6;
 $39 = $7;
 $40 = $38 - $39;
 $41 = 500.0 * $40;
 $42 = $4;
 $43 = ((($42)) + 8|0);
 HEAPF64[$43>>3] = $41;
 $44 = $7;
 $45 = $8;
 $46 = $44 - $45;
 $47 = 200.0 * $46;
 $48 = $4;
 $49 = ((($48)) + 16|0);
 HEAPF64[$49>>3] = $47;
 STACKTOP = sp;return;
}
function _f($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 0.0088564516790356311;
 $4 = $2;
 $5 = $4 <= 0.0088564516790356311;
 $6 = $2;
 if ($5) {
  $7 = 7.7870370370370372 * $6;
  $8 = $7 + 0.13793103448275862;
  $1 = $8;
  $10 = $1;
  STACKTOP = sp;return (+$10);
 } else {
  $9 = (+Math_pow((+$6),0.33333333333333331));
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return (+$10);
 }
 return +(0.0);
}
function _cmsLab2XYZ($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = (_cmsD50_XYZ()|0);
  $3 = $11;
 }
 $12 = $5;
 $13 = +HEAPF64[$12>>3];
 $14 = $13 + 16.0;
 $15 = $14 / 116.0;
 $7 = $15;
 $16 = $7;
 $17 = $5;
 $18 = ((($17)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = 0.002 * $19;
 $21 = $16 + $20;
 $6 = $21;
 $22 = $7;
 $23 = $5;
 $24 = ((($23)) + 16|0);
 $25 = +HEAPF64[$24>>3];
 $26 = 0.0050000000000000001 * $25;
 $27 = $22 - $26;
 $8 = $27;
 $28 = $6;
 $29 = (+_f_1($28));
 $30 = $3;
 $31 = +HEAPF64[$30>>3];
 $32 = $29 * $31;
 $33 = $4;
 HEAPF64[$33>>3] = $32;
 $34 = $7;
 $35 = (+_f_1($34));
 $36 = $3;
 $37 = ((($36)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $35 * $38;
 $40 = $4;
 $41 = ((($40)) + 8|0);
 HEAPF64[$41>>3] = $39;
 $42 = $8;
 $43 = (+_f_1($42));
 $44 = $3;
 $45 = ((($44)) + 16|0);
 $46 = +HEAPF64[$45>>3];
 $47 = $43 * $46;
 $48 = $4;
 $49 = ((($48)) + 16|0);
 HEAPF64[$49>>3] = $47;
 STACKTOP = sp;return;
}
function _f_1($0) {
 $0 = +$0;
 var $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 0.20689655172413793;
 $4 = $2;
 $5 = $4 <= 0.20689655172413793;
 $6 = $2;
 if ($5) {
  $7 = $6 - 0.13793103448275862;
  $8 = 0.12841854934601665 * $7;
  $1 = $8;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 } else {
  $9 = $2;
  $10 = $6 * $9;
  $11 = $2;
  $12 = $10 * $11;
  $1 = $12;
  $13 = $1;
  STACKTOP = sp;return (+$13);
 }
 return +(0.0);
}
function _cmsLabEncoded2Float($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP16[$4>>1]|0;
 $6 = (+_L2float4($5));
 $7 = $2;
 HEAPF64[$7>>3] = $6;
 $8 = $3;
 $9 = ((($8)) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = (+_ab2float4($10));
 $12 = $2;
 $13 = ((($12)) + 8|0);
 HEAPF64[$13>>3] = $11;
 $14 = $3;
 $15 = ((($14)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = (+_ab2float4($16));
 $18 = $2;
 $19 = ((($18)) + 16|0);
 HEAPF64[$19>>3] = $17;
 STACKTOP = sp;return;
}
function _L2float4($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+($2&65535));
 $4 = $3 / 655.35000000000002;
 STACKTOP = sp;return (+$4);
}
function _ab2float4($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (+($2&65535));
 $4 = $3 / 257.0;
 $5 = $4 - 128.0;
 STACKTOP = sp;return (+$5);
}
function __cmsQuickSaturateWord_408($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 65535.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord_409($9)|0);
    $1 = $10;
    break;
   }
  }
 } while(0);
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function __cmsQuickFloorWord_409($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 32767.0;
 $4 = (__cmsQuickFloor_410($3)|0);
 $5 = $4&65535;
 $6 = $5&65535;
 $7 = (($6) + 32767)|0;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsQuickFloor_410($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function _cmsFloat2LabEncoded($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF64[$5>>3];
 $7 = (+_Clamp_L_doubleV4($6));
 HEAPF64[$4>>3] = $7;
 $8 = $3;
 $9 = ((($8)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = (+_Clamp_ab_doubleV4($10));
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 $13 = $3;
 $14 = ((($13)) + 16|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (+_Clamp_ab_doubleV4($15));
 $17 = ((($4)) + 16|0);
 HEAPF64[$17>>3] = $16;
 $18 = +HEAPF64[$4>>3];
 $19 = (_L2Fix4($18)|0);
 $20 = $2;
 HEAP16[$20>>1] = $19;
 $21 = ((($4)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (_ab2Fix4($22)|0);
 $24 = $2;
 $25 = ((($24)) + 2|0);
 HEAP16[$25>>1] = $23;
 $26 = ((($4)) + 16|0);
 $27 = +HEAPF64[$26>>3];
 $28 = (_ab2Fix4($27)|0);
 $29 = $2;
 $30 = ((($29)) + 4|0);
 HEAP16[$30>>1] = $28;
 STACKTOP = sp;return;
}
function _Clamp_L_doubleV4($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 < 0.0;
 if ($3) {
  $1 = 0.0;
 }
 $4 = $1;
 $5 = $4 > 100.0;
 if ($5) {
  $1 = 100.0;
 }
 $6 = $1;
 STACKTOP = sp;return (+$6);
}
function _Clamp_ab_doubleV4($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 < -128.0;
 if ($3) {
  $1 = -128.0;
 }
 $4 = $1;
 $5 = $4 > 127.0;
 if ($5) {
  $1 = 127.0;
 }
 $6 = $1;
 STACKTOP = sp;return (+$6);
}
function _L2Fix4($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 * 655.35000000000002;
 $4 = (__cmsQuickSaturateWord_408($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _ab2Fix4($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 + 128.0;
 $4 = $3 * 257.0;
 $5 = (__cmsQuickSaturateWord_408($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _Sqr($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $1;
 $4 = $2 * $3;
 STACKTOP = sp;return (+$4);
}
function _cmsFloat2XYZEncoded($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = +HEAPF64[$5>>3];
 HEAPF64[$4>>3] = $6;
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($4)) + 8|0);
 HEAPF64[$10>>3] = $9;
 $11 = $3;
 $12 = ((($11)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($4)) + 16|0);
 HEAPF64[$14>>3] = $13;
 $15 = ((($4)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = $16 <= 0.0;
 if ($17) {
  HEAPF64[$4>>3] = 0.0;
  $18 = ((($4)) + 8|0);
  HEAPF64[$18>>3] = 0.0;
  $19 = ((($4)) + 16|0);
  HEAPF64[$19>>3] = 0.0;
 }
 $20 = +HEAPF64[$4>>3];
 $21 = $20 > 1.999969482421875;
 if ($21) {
  HEAPF64[$4>>3] = 1.999969482421875;
 }
 $22 = +HEAPF64[$4>>3];
 $23 = $22 < 0.0;
 if ($23) {
  HEAPF64[$4>>3] = 0.0;
 }
 $24 = ((($4)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $25 > 1.999969482421875;
 if ($26) {
  $27 = ((($4)) + 8|0);
  HEAPF64[$27>>3] = 1.999969482421875;
 }
 $28 = ((($4)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 < 0.0;
 if ($30) {
  $31 = ((($4)) + 8|0);
  HEAPF64[$31>>3] = 0.0;
 }
 $32 = ((($4)) + 16|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $33 > 1.999969482421875;
 if ($34) {
  $35 = ((($4)) + 16|0);
  HEAPF64[$35>>3] = 1.999969482421875;
 }
 $36 = ((($4)) + 16|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $37 < 0.0;
 if ($38) {
  $39 = ((($4)) + 16|0);
  HEAPF64[$39>>3] = 0.0;
 }
 $40 = +HEAPF64[$4>>3];
 $41 = (_XYZ2Fix($40)|0);
 $42 = $2;
 HEAP16[$42>>1] = $41;
 $43 = ((($4)) + 8|0);
 $44 = +HEAPF64[$43>>3];
 $45 = (_XYZ2Fix($44)|0);
 $46 = $2;
 $47 = ((($46)) + 2|0);
 HEAP16[$47>>1] = $45;
 $48 = ((($4)) + 16|0);
 $49 = +HEAPF64[$48>>3];
 $50 = (_XYZ2Fix($49)|0);
 $51 = $2;
 $52 = ((($51)) + 4|0);
 HEAP16[$52>>1] = $50;
 STACKTOP = sp;return;
}
function _XYZ2Fix($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 * 32768.0;
 $4 = (__cmsQuickSaturateWord_408($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _cmsXYZEncoded2Float($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP16[$4>>1]|0;
 $6 = (+_XYZ2float($5));
 $7 = $2;
 HEAPF64[$7>>3] = $6;
 $8 = $3;
 $9 = ((($8)) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = (+_XYZ2float($10));
 $12 = $2;
 $13 = ((($12)) + 8|0);
 HEAPF64[$13>>3] = $11;
 $14 = $3;
 $15 = ((($14)) + 4|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = (+_XYZ2float($16));
 $18 = $2;
 $19 = ((($18)) + 16|0);
 HEAPF64[$19>>3] = $17;
 STACKTOP = sp;return;
}
function _XYZ2float($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3&65535;
 $5 = $4 << 1;
 $2 = $5;
 $6 = $2;
 $7 = (+__cms15Fixed16toDouble($6));
 STACKTOP = sp;return (+$7);
}
function _cmsDeltaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = +HEAPF64[$7>>3];
 $9 = $3;
 $10 = +HEAPF64[$9>>3];
 $11 = $8 - $10;
 $12 = (+Math_abs((+$11)));
 $4 = $12;
 $13 = $2;
 $14 = ((($13)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $3;
 $17 = ((($16)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = (+Math_abs((+$19)));
 $5 = $20;
 $21 = $2;
 $22 = ((($21)) + 16|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $3;
 $25 = ((($24)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $23 - $26;
 $28 = (+Math_abs((+$27)));
 $6 = $28;
 $29 = $4;
 $30 = (+_Sqr($29));
 $31 = $5;
 $32 = (+_Sqr($31));
 $33 = $30 + $32;
 $34 = $6;
 $35 = (+_Sqr($34));
 $36 = $33 + $35;
 $37 = (+Math_pow((+$36),0.5));
 STACKTOP = sp;return (+$37);
}
function __cmsReasonableGridpointsByColorspace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = $6 & 16711680;
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = $4;
   $10 = $9 >>> 16;
   $11 = $10 & 255;
   $2 = $11;
  } else {
   $12 = $3;
   $13 = (_cmsChannelsOf($12)|0);
   $5 = $13;
   $14 = $4;
   $15 = $14 & 1024;
   $16 = ($15|0)!=(0);
   if ($16) {
    $17 = $5;
    $18 = ($17>>>0)>(4);
    if ($18) {
     $2 = 7;
     break;
    }
    $19 = $5;
    $20 = ($19|0)==(4);
    if ($20) {
     $2 = 23;
     break;
    } else {
     $2 = 49;
     break;
    }
   }
   $21 = $4;
   $22 = $21 & 2048;
   $23 = ($22|0)!=(0);
   $24 = $5;
   $25 = ($24>>>0)>(4);
   if ($23) {
    if ($25) {
     $2 = 6;
     break;
    }
    $26 = $5;
    $27 = ($26|0)==(1);
    if ($27) {
     $2 = 33;
     break;
    } else {
     $2 = 17;
     break;
    }
   } else {
    if ($25) {
     $2 = 7;
     break;
    }
    $28 = $5;
    $29 = ($28|0)==(4);
    if ($29) {
     $2 = 17;
     break;
    } else {
     $2 = 33;
     break;
    }
   }
  }
 } while(0);
 $30 = $2;
 STACKTOP = sp;return ($30|0);
}
function _cmsChannelsOf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch$split112D = 0, $switch$split142D = 0, $switch$split172D = 0, $switch$split202D = 0, $switch$split22D = 0, $switch$split232D = 0, $switch$split262D = 0, $switch$split292D = 0, $switch$split2D = 0, $switch$split322D = 0, $switch$split352D = 0, $switch$split382D = 0, $switch$split412D = 0, $switch$split442D = 0, $switch$split472D = 0, $switch$split502D = 0;
 var $switch$split52D = 0, $switch$split532D = 0, $switch$split562D = 0, $switch$split592D = 0, $switch$split622D = 0, $switch$split652D = 0, $switch$split682D = 0, $switch$split712D = 0, $switch$split742D = 0, $switch$split772D = 0, $switch$split802D = 0, $switch$split82D = 0, $switch$split832D = 0, $switch$split862D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $switch$split2D = ($3|0)<(1282766368);
 L1: do {
  if ($switch$split2D) {
   $switch$split22D = ($3|0)<(1111706706);
   if ($switch$split22D) {
    $switch$split82D = ($3|0)<(910380114);
    if ($switch$split82D) {
     $switch$split202D = ($3|0)<(860048466);
     if ($switch$split202D) {
      $switch$split382D = ($3|0)<(843271250);
      if ($switch$split382D) {
       switch ($3|0) {
       case 826494034:  {
        label = 2;
        break L1;
        break;
       }
       default: {
        label = 17;
        break L1;
       }
       }
      } else {
       switch ($3|0) {
       case 843271250:  {
        label = 3;
        break L1;
        break;
       }
       default: {
        label = 17;
        break L1;
       }
       }
      }
     }
     $switch$split412D = ($3|0)<(876825682);
     if ($switch$split412D) {
      switch ($3|0) {
      case 860048466:  {
       label = 4;
       break L1;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     }
     $switch$split682D = ($3|0)<(893602898);
     if ($switch$split682D) {
      switch ($3|0) {
      case 876825682:  {
       label = 5;
       break L1;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     } else {
      switch ($3|0) {
      case 893602898:  {
       label = 6;
       break L1;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     }
    } else {
     $switch$split232D = ($3|0)<(943934546);
     if ($switch$split232D) {
      $switch$split442D = ($3|0)<(927157330);
      if ($switch$split442D) {
       switch ($3|0) {
       case 910380114:  {
        label = 7;
        break L1;
        break;
       }
       default: {
        label = 17;
        break L1;
       }
       }
      } else {
       switch ($3|0) {
       case 927157330:  {
        label = 8;
        break L1;
        break;
       }
       default: {
        label = 17;
        break L1;
       }
       }
      }
     }
     $switch$split472D = ($3|0)<(960711762);
     if ($switch$split472D) {
      switch ($3|0) {
      case 943934546:  {
       label = 9;
       break L1;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     }
     $switch$split712D = ($3|0)<(1094929490);
     if ($switch$split712D) {
      switch ($3|0) {
      case 960711762:  {
       label = 10;
       break L1;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     } else {
      switch ($3|0) {
      case 1094929490:  {
       label = 11;
       break L1;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     }
    }
   }
   $switch$split112D = ($3|0)<(1162038354);
   if ($switch$split112D) {
    $switch$split262D = ($3|0)<(1129142560);
    if ($switch$split262D) {
     $switch$split502D = ($3|0)<(1128483922);
     if ($switch$split502D) {
      switch ($3|0) {
      case 1111706706:  {
       label = 12;
       break L1;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     } else {
      switch ($3|0) {
      case 1128483922:  {
       label = 13;
       break L1;
       break;
      }
      default: {
       label = 17;
       break L1;
      }
      }
     }
    }
    $switch$split532D = ($3|0)<(1129142603);
    if ($switch$split532D) {
     switch ($3|0) {
     case 1129142560:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
    $switch$split742D = ($3|0)<(1145261138);
    if ($switch$split742D) {
     switch ($3|0) {
     case 1129142603:  {
      label = 5;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    } else {
     switch ($3|0) {
     case 1145261138:  {
      label = 14;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
   }
   $switch$split292D = ($3|0)<(1212961568);
   if ($switch$split292D) {
    $switch$split562D = ($3|0)<(1178815570);
    if ($switch$split562D) {
     switch ($3|0) {
     case 1162038354:  {
      label = 15;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
    $switch$split772D = ($3|0)<(1196573017);
    if ($switch$split772D) {
     switch ($3|0) {
     case 1178815570:  {
      label = 16;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    } else {
     switch ($3|0) {
     case 1196573017:  {
      label = 2;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
   } else {
    $switch$split592D = ($3|0)<(1213421088);
    if ($switch$split592D) {
     switch ($3|0) {
     case 1212961568:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
    $switch$split802D = ($3|0)<(1281450528);
    if ($switch$split802D) {
     switch ($3|0) {
     case 1213421088:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    } else {
     switch ($3|0) {
     case 1281450528:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
   }
  } else {
   $switch$split52D = ($3|0)<(1296255033);
   if ($switch$split52D) {
    $switch$split142D = ($3|0)<(1296255028);
    if (!($switch$split142D)) {
     switch ($3|0) {
     case 1296255028:  {
      label = 5;
      break L1;
      break;
     }
     case 1296255029:  {
      label = 6;
      break L1;
      break;
     }
     case 1296255030:  {
      label = 7;
      break L1;
      break;
     }
     case 1296255031:  {
      label = 8;
      break L1;
      break;
     }
     case 1296255032:  {
      label = 9;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
    $switch$split322D = ($3|0)<(1296255025);
    if ($switch$split322D) {
     switch ($3|0) {
     case 1282766411:  {
      label = 5;
      break L1;
      break;
     }
     case 1282766368:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    } else {
     switch ($3|0) {
     case 1296255027:  {
      label = 4;
      break L1;
      break;
     }
     case 1296255025:  {
      label = 2;
      break L1;
      break;
     }
     case 1296255026:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
   }
   $switch$split172D = ($3|0)<(1296255045);
   if ($switch$split172D) {
    switch ($3|0) {
    case 1296255033:  {
     label = 10;
     break L1;
     break;
    }
    case 1296255041:  {
     label = 11;
     break L1;
     break;
    }
    case 1296255042:  {
     label = 12;
     break L1;
     break;
    }
    case 1296255043:  {
     label = 13;
     break L1;
     break;
    }
    case 1296255044:  {
     label = 14;
     break L1;
     break;
    }
    default: {
     label = 17;
     break L1;
    }
    }
   }
   $switch$split352D = ($3|0)<(1482250784);
   if ($switch$split352D) {
    $switch$split622D = ($3|0)<(1296255046);
    if ($switch$split622D) {
     switch ($3|0) {
     case 1296255045:  {
      label = 15;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
    $switch$split832D = ($3|0)<(1380401696);
    if ($switch$split832D) {
     switch ($3|0) {
     case 1296255046:  {
      label = 16;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    } else {
     switch ($3|0) {
     case 1380401696:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
   } else {
    $switch$split652D = ($3|0)<(1497588338);
    if ($switch$split652D) {
     switch ($3|0) {
     case 1482250784:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
    $switch$split862D = ($3|0)<(1501067552);
    if ($switch$split862D) {
     switch ($3|0) {
     case 1497588338:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    } else {
     switch ($3|0) {
     case 1501067552:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 17;
      break L1;
     }
     }
    }
   }
  }
 } while(0);
 switch (label|0) {
  case 2: {
   $1 = 1;
   break;
  }
  case 3: {
   $1 = 2;
   break;
  }
  case 4: {
   $1 = 3;
   break;
  }
  case 5: {
   $1 = 4;
   break;
  }
  case 6: {
   $1 = 5;
   break;
  }
  case 7: {
   $1 = 6;
   break;
  }
  case 8: {
   $1 = 7;
   break;
  }
  case 9: {
   $1 = 8;
   break;
  }
  case 10: {
   $1 = 9;
   break;
  }
  case 11: {
   $1 = 10;
   break;
  }
  case 12: {
   $1 = 11;
   break;
  }
  case 13: {
   $1 = 12;
   break;
  }
  case 14: {
   $1 = 13;
   break;
  }
  case 15: {
   $1 = 14;
   break;
  }
  case 16: {
   $1 = 15;
   break;
  }
  case 17: {
   $1 = 3;
   break;
  }
 }
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function __cmsEndPointsBySpace($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, $switch$split52D = 0, $switch$split82D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $switch$split2D = ($9|0)<(1196573017);
 L1: do {
  if ($switch$split2D) {
   switch ($9|0) {
   case 1129142603:  {
    $37 = $6;
    $38 = ($37|0)!=(0|0);
    if ($38) {
     $39 = $6;
     HEAP32[$39>>2] = 33088;
    }
    $40 = $7;
    $41 = ($40|0)!=(0|0);
    if ($41) {
     $42 = $7;
     HEAP32[$42>>2] = 24460;
    }
    $43 = $8;
    $44 = ($43|0)!=(0|0);
    if ($44) {
     $45 = $8;
     HEAP32[$45>>2] = 4;
    }
    $4 = 1;
    $55 = $4;
    STACKTOP = sp;return ($55|0);
    break;
   }
   case 1129142560:  {
    $46 = $6;
    $47 = ($46|0)!=(0|0);
    if ($47) {
     $48 = $6;
     HEAP32[$48>>2] = 33096;
    }
    $49 = $7;
    $50 = ($49|0)!=(0|0);
    if ($50) {
     $51 = $7;
     HEAP32[$51>>2] = 24468;
    }
    $52 = $8;
    $53 = ($52|0)!=(0|0);
    if ($53) {
     $54 = $8;
     HEAP32[$54>>2] = 3;
    }
    $4 = 1;
    $55 = $4;
    STACKTOP = sp;return ($55|0);
    break;
   }
   default: {
    break L1;
   }
   }
  } else {
   $switch$split52D = ($9|0)<(1281450528);
   if ($switch$split52D) {
    switch ($9|0) {
    case 1196573017:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $10 = $6;
    $11 = ($10|0)!=(0|0);
    if ($11) {
     $12 = $6;
     HEAP32[$12>>2] = 24428;
    }
    $13 = $7;
    $14 = ($13|0)!=(0|0);
    if ($14) {
     $15 = $7;
     HEAP32[$15>>2] = 33072;
    }
    $16 = $8;
    $17 = ($16|0)!=(0|0);
    if ($17) {
     $18 = $8;
     HEAP32[$18>>2] = 1;
    }
    $4 = 1;
    $55 = $4;
    STACKTOP = sp;return ($55|0);
   }
   $switch$split82D = ($9|0)<(1380401696);
   if ($switch$split82D) {
    switch ($9|0) {
    case 1281450528:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $28 = $6;
    $29 = ($28|0)!=(0|0);
    if ($29) {
     $30 = $6;
     HEAP32[$30>>2] = 24444;
    }
    $31 = $7;
    $32 = ($31|0)!=(0|0);
    if ($32) {
     $33 = $7;
     HEAP32[$33>>2] = 24452;
    }
    $34 = $8;
    $35 = ($34|0)!=(0|0);
    if ($35) {
     $36 = $8;
     HEAP32[$36>>2] = 3;
    }
    $4 = 1;
    $55 = $4;
    STACKTOP = sp;return ($55|0);
   } else {
    switch ($9|0) {
    case 1380401696:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $19 = $6;
    $20 = ($19|0)!=(0|0);
    if ($20) {
     $21 = $6;
     HEAP32[$21>>2] = 24436;
    }
    $22 = $7;
    $23 = ($22|0)!=(0|0);
    if ($23) {
     $24 = $7;
     HEAP32[$24>>2] = 33080;
    }
    $25 = $8;
    $26 = ($25|0)!=(0|0);
    if ($26) {
     $27 = $8;
     HEAP32[$27>>2] = 3;
    }
    $4 = 1;
    $55 = $4;
    STACKTOP = sp;return ($55|0);
   }
  }
 } while(0);
 $4 = 0;
 $55 = $4;
 STACKTOP = sp;return ($55|0);
}
function __cmsICCcolorSpace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 do {
  switch ($3|0) {
  case 3: case 1:  {
   $1 = 1196573017;
   break;
  }
  case 4: case 2:  {
   $1 = 1380401696;
   break;
  }
  case 5:  {
   $1 = 1129142560;
   break;
  }
  case 6:  {
   $1 = 1129142603;
   break;
  }
  case 7:  {
   $1 = 1497588338;
   break;
  }
  case 8:  {
   $1 = 1282766368;
   break;
  }
  case 9:  {
   $1 = 1482250784;
   break;
  }
  case 10: case 30:  {
   $1 = 1281450528;
   break;
  }
  case 11:  {
   $1 = 1282766411;
   break;
  }
  case 12:  {
   $1 = 1213421088;
   break;
  }
  case 13:  {
   $1 = 1212961568;
   break;
  }
  case 14:  {
   $1 = 1501067552;
   break;
  }
  case 15:  {
   $1 = 1296255025;
   break;
  }
  case 16:  {
   $1 = 1296255026;
   break;
  }
  case 17:  {
   $1 = 1296255027;
   break;
  }
  case 18:  {
   $1 = 1296255028;
   break;
  }
  case 19:  {
   $1 = 1296255029;
   break;
  }
  case 20:  {
   $1 = 1296255030;
   break;
  }
  case 21:  {
   $1 = 1296255031;
   break;
  }
  case 22:  {
   $1 = 1296255032;
   break;
  }
  case 23:  {
   $1 = 1296255033;
   break;
  }
  case 24:  {
   $1 = 1296255041;
   break;
  }
  case 25:  {
   $1 = 1296255042;
   break;
  }
  case 26:  {
   $1 = 1296255043;
   break;
  }
  case 27:  {
   $1 = 1296255044;
   break;
  }
  case 28:  {
   $1 = 1296255045;
   break;
  }
  case 29:  {
   $1 = 1296255046;
   break;
  }
  default: {
   $1 = 0;
  }
  }
 } while(0);
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function __cmsLCMScolorSpace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch$split112D = 0, $switch$split142D = 0, $switch$split172D = 0, $switch$split202D = 0, $switch$split22D = 0, $switch$split232D = 0, $switch$split262D = 0, $switch$split292D = 0, $switch$split2D = 0, $switch$split322D = 0, $switch$split352D = 0, $switch$split382D = 0, $switch$split412D = 0, $switch$split442D = 0, $switch$split472D = 0, $switch$split502D = 0;
 var $switch$split52D = 0, $switch$split532D = 0, $switch$split562D = 0, $switch$split592D = 0, $switch$split622D = 0, $switch$split652D = 0, $switch$split682D = 0, $switch$split712D = 0, $switch$split742D = 0, $switch$split772D = 0, $switch$split802D = 0, $switch$split82D = 0, $switch$split832D = 0, $switch$split862D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $switch$split2D = ($3|0)<(1282766368);
 L1: do {
  if ($switch$split2D) {
   $switch$split22D = ($3|0)<(1111706706);
   if ($switch$split22D) {
    $switch$split82D = ($3|0)<(910380114);
    if ($switch$split82D) {
     $switch$split202D = ($3|0)<(860048466);
     if ($switch$split202D) {
      $switch$split382D = ($3|0)<(843271250);
      if ($switch$split382D) {
       switch ($3|0) {
       case 826494034:  {
        label = 14;
        break L1;
        break;
       }
       default: {
        label = 29;
        break L1;
       }
       }
      } else {
       switch ($3|0) {
       case 843271250:  {
        label = 15;
        break L1;
        break;
       }
       default: {
        label = 29;
        break L1;
       }
       }
      }
     }
     $switch$split412D = ($3|0)<(876825682);
     if ($switch$split412D) {
      switch ($3|0) {
      case 860048466:  {
       label = 16;
       break L1;
       break;
      }
      default: {
       label = 29;
       break L1;
      }
      }
     }
     $switch$split682D = ($3|0)<(893602898);
     if ($switch$split682D) {
      switch ($3|0) {
      case 876825682:  {
       label = 17;
       break L1;
       break;
      }
      default: {
       label = 29;
       break L1;
      }
      }
     } else {
      switch ($3|0) {
      case 893602898:  {
       label = 18;
       break L1;
       break;
      }
      default: {
       label = 29;
       break L1;
      }
      }
     }
    } else {
     $switch$split232D = ($3|0)<(943934546);
     if ($switch$split232D) {
      $switch$split442D = ($3|0)<(927157330);
      if ($switch$split442D) {
       switch ($3|0) {
       case 910380114:  {
        label = 19;
        break L1;
        break;
       }
       default: {
        label = 29;
        break L1;
       }
       }
      } else {
       switch ($3|0) {
       case 927157330:  {
        label = 20;
        break L1;
        break;
       }
       default: {
        label = 29;
        break L1;
       }
       }
      }
     }
     $switch$split472D = ($3|0)<(960711762);
     if ($switch$split472D) {
      switch ($3|0) {
      case 943934546:  {
       label = 21;
       break L1;
       break;
      }
      default: {
       label = 29;
       break L1;
      }
      }
     }
     $switch$split712D = ($3|0)<(1094929490);
     if ($switch$split712D) {
      switch ($3|0) {
      case 960711762:  {
       label = 22;
       break L1;
       break;
      }
      default: {
       label = 29;
       break L1;
      }
      }
     } else {
      switch ($3|0) {
      case 1094929490:  {
       label = 23;
       break L1;
       break;
      }
      default: {
       label = 29;
       break L1;
      }
      }
     }
    }
   }
   $switch$split112D = ($3|0)<(1162038354);
   if ($switch$split112D) {
    $switch$split262D = ($3|0)<(1129142560);
    if ($switch$split262D) {
     $switch$split502D = ($3|0)<(1128483922);
     if ($switch$split502D) {
      switch ($3|0) {
      case 1111706706:  {
       label = 24;
       break L1;
       break;
      }
      default: {
       label = 29;
       break L1;
      }
      }
     } else {
      switch ($3|0) {
      case 1128483922:  {
       label = 25;
       break L1;
       break;
      }
      default: {
       label = 29;
       break L1;
      }
      }
     }
    }
    $switch$split532D = ($3|0)<(1129142603);
    if ($switch$split532D) {
     switch ($3|0) {
     case 1129142560:  {
      break;
     }
     default: {
      label = 29;
      break L1;
     }
     }
     $1 = 5;
     break;
    }
    $switch$split742D = ($3|0)<(1145261138);
    if (!($switch$split742D)) {
     switch ($3|0) {
     case 1145261138:  {
      label = 26;
      break L1;
      break;
     }
     default: {
      label = 29;
      break L1;
     }
     }
    }
    switch ($3|0) {
    case 1129142603:  {
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
    $1 = 6;
    break;
   }
   $switch$split292D = ($3|0)<(1212961568);
   if ($switch$split292D) {
    $switch$split562D = ($3|0)<(1178815570);
    if ($switch$split562D) {
     switch ($3|0) {
     case 1162038354:  {
      label = 27;
      break L1;
      break;
     }
     default: {
      label = 29;
      break L1;
     }
     }
    }
    $switch$split772D = ($3|0)<(1196573017);
    if ($switch$split772D) {
     switch ($3|0) {
     case 1178815570:  {
      label = 28;
      break L1;
      break;
     }
     default: {
      label = 29;
      break L1;
     }
     }
    }
    switch ($3|0) {
    case 1196573017:  {
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
    $1 = 3;
    break;
   }
   $switch$split592D = ($3|0)<(1213421088);
   if ($switch$split592D) {
    switch ($3|0) {
    case 1212961568:  {
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
    $1 = 13;
    break;
   }
   $switch$split802D = ($3|0)<(1281450528);
   if ($switch$split802D) {
    switch ($3|0) {
    case 1213421088:  {
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
    $1 = 12;
    break;
   } else {
    switch ($3|0) {
    case 1281450528:  {
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
    $1 = 10;
    break;
   }
  } else {
   $switch$split52D = ($3|0)<(1296255033);
   if ($switch$split52D) {
    $switch$split142D = ($3|0)<(1296255028);
    if (!($switch$split142D)) {
     switch ($3|0) {
     case 1296255028:  {
      label = 17;
      break L1;
      break;
     }
     case 1296255029:  {
      label = 18;
      break L1;
      break;
     }
     case 1296255030:  {
      label = 19;
      break L1;
      break;
     }
     case 1296255031:  {
      label = 20;
      break L1;
      break;
     }
     case 1296255032:  {
      label = 21;
      break L1;
      break;
     }
     default: {
      label = 29;
      break L1;
     }
     }
    }
    $switch$split322D = ($3|0)<(1296255025);
    if (!($switch$split322D)) {
     switch ($3|0) {
     case 1296255025:  {
      label = 14;
      break L1;
      break;
     }
     case 1296255026:  {
      label = 15;
      break L1;
      break;
     }
     case 1296255027:  {
      label = 16;
      break L1;
      break;
     }
     default: {
      label = 29;
      break L1;
     }
     }
    }
    switch ($3|0) {
    case 1282766368:  {
     $1 = 8;
     break L1;
     break;
    }
    case 1282766411:  {
     $1 = 11;
     break L1;
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
   }
   $switch$split172D = ($3|0)<(1296255045);
   if ($switch$split172D) {
    switch ($3|0) {
    case 1296255033:  {
     label = 22;
     break L1;
     break;
    }
    case 1296255041:  {
     label = 23;
     break L1;
     break;
    }
    case 1296255042:  {
     label = 24;
     break L1;
     break;
    }
    case 1296255043:  {
     label = 25;
     break L1;
     break;
    }
    case 1296255044:  {
     label = 26;
     break L1;
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
   }
   $switch$split352D = ($3|0)<(1482250784);
   if ($switch$split352D) {
    $switch$split622D = ($3|0)<(1296255046);
    if ($switch$split622D) {
     switch ($3|0) {
     case 1296255045:  {
      label = 27;
      break L1;
      break;
     }
     default: {
      label = 29;
      break L1;
     }
     }
    }
    $switch$split832D = ($3|0)<(1380401696);
    if ($switch$split832D) {
     switch ($3|0) {
     case 1296255046:  {
      label = 28;
      break L1;
      break;
     }
     default: {
      label = 29;
      break L1;
     }
     }
    }
    switch ($3|0) {
    case 1380401696:  {
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
    $1 = 4;
    break;
   }
   $switch$split652D = ($3|0)<(1497588338);
   if ($switch$split652D) {
    switch ($3|0) {
    case 1482250784:  {
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
    $1 = 9;
    break;
   }
   $switch$split862D = ($3|0)<(1501067552);
   if ($switch$split862D) {
    switch ($3|0) {
    case 1497588338:  {
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
    $1 = 7;
    break;
   } else {
    switch ($3|0) {
    case 1501067552:  {
     break;
    }
    default: {
     label = 29;
     break L1;
    }
    }
    $1 = 14;
    break;
   }
  }
 } while(0);
 switch (label|0) {
  case 14: {
   $1 = 15;
   break;
  }
  case 15: {
   $1 = 16;
   break;
  }
  case 16: {
   $1 = 17;
   break;
  }
  case 17: {
   $1 = 18;
   break;
  }
  case 18: {
   $1 = 19;
   break;
  }
  case 19: {
   $1 = 20;
   break;
  }
  case 20: {
   $1 = 21;
   break;
  }
  case 21: {
   $1 = 22;
   break;
  }
  case 22: {
   $1 = 23;
   break;
  }
  case 23: {
   $1 = 24;
   break;
  }
  case 24: {
   $1 = 25;
   break;
  }
  case 25: {
   $1 = 26;
   break;
  }
  case 26: {
   $1 = 27;
   break;
  }
  case 27: {
   $1 = 28;
   break;
  }
  case 28: {
   $1 = 29;
   break;
  }
  case 29: {
   $1 = 0;
   break;
  }
 }
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function __cmsAdjustEndianess16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 HEAP16[$1>>1] = $0;
 $2 = $1;
 $4 = $2;
 $5 = HEAP8[$4>>0]|0;
 $3 = $5;
 $6 = $2;
 $7 = ((($6)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $2;
 HEAP8[$9>>0] = $8;
 $10 = $3;
 $11 = $2;
 $12 = ((($11)) + 1|0);
 HEAP8[$12>>0] = $10;
 $13 = HEAP16[$1>>1]|0;
 STACKTOP = sp;return ($13|0);
}
function __cmsAdjustEndianess32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 HEAP32[$1>>2] = $0;
 $2 = $1;
 $5 = $2;
 $6 = ((($5)) + 1|0);
 $2 = $6;
 $7 = HEAP8[$5>>0]|0;
 $3 = $7;
 $8 = $2;
 $9 = ((($8)) + 1|0);
 $2 = $9;
 $10 = HEAP8[$8>>0]|0;
 $4 = $10;
 $11 = $2;
 $12 = HEAP8[$11>>0]|0;
 $13 = $2;
 $14 = ((($13)) + -1|0);
 HEAP8[$14>>0] = $12;
 $15 = $4;
 $16 = $2;
 $17 = ((($16)) + 1|0);
 $2 = $17;
 HEAP8[$16>>0] = $15;
 $18 = $2;
 $19 = HEAP8[$18>>0]|0;
 $20 = $2;
 $21 = ((($20)) + -3|0);
 HEAP8[$21>>0] = $19;
 $22 = $3;
 $23 = $2;
 HEAP8[$23>>0] = $22;
 $24 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($24|0);
}
function __cmsAdjustEndianess64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $6 = $3;
 $4 = $6;
 $7 = $2;
 $5 = $7;
 $8 = $2;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $4;
  $11 = HEAP8[$10>>0]|0;
  $12 = $5;
  $13 = ((($12)) + 7|0);
  HEAP8[$13>>0] = $11;
  $14 = $4;
  $15 = ((($14)) + 1|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $5;
  $18 = ((($17)) + 6|0);
  HEAP8[$18>>0] = $16;
  $19 = $4;
  $20 = ((($19)) + 2|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $5;
  $23 = ((($22)) + 5|0);
  HEAP8[$23>>0] = $21;
  $24 = $4;
  $25 = ((($24)) + 3|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $5;
  $28 = ((($27)) + 4|0);
  HEAP8[$28>>0] = $26;
  $29 = $4;
  $30 = ((($29)) + 4|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $5;
  $33 = ((($32)) + 3|0);
  HEAP8[$33>>0] = $31;
  $34 = $4;
  $35 = ((($34)) + 5|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $5;
  $38 = ((($37)) + 2|0);
  HEAP8[$38>>0] = $36;
  $39 = $4;
  $40 = ((($39)) + 6|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $5;
  $43 = ((($42)) + 1|0);
  HEAP8[$43>>0] = $41;
  $44 = $4;
  $45 = ((($44)) + 7|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $5;
  HEAP8[$47>>0] = $46;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((27758|0),(27781|0),87,(27812|0));
  // unreachable;
 }
}
function __cmsReadUInt8Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),115,(27834|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = (FUNCTION_TABLE_iiiii[$10 & 511]($11,$5,1,1)|0);
 $13 = ($12|0)!=(1);
 if ($13) {
  $2 = 0;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP8[$5>>0]|0;
  $17 = $4;
  HEAP8[$17>>0] = $16;
 }
 $2 = 1;
 $18 = $2;
 STACKTOP = sp;return ($18|0);
}
function __cmsReadUInt16Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),128,(27854|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = (FUNCTION_TABLE_iiiii[$10 & 511]($11,$5,2,1)|0);
 $13 = ($12|0)!=(1);
 if ($13) {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP16[$5>>1]|0;
  $17 = (__cmsAdjustEndianess16($16)|0);
  $18 = $4;
  HEAP16[$18>>1] = $17;
 }
 $2 = 1;
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function __cmsReadUInt16Array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((28572|0),(27781|0),141,(27875|0));
  // unreachable;
 }
 $7 = 0;
 while(1) {
  $10 = $7;
  $11 = $5;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   label = 11;
   break;
  }
  $13 = $6;
  $14 = ($13|0)!=(0|0);
  $15 = $4;
  if ($14) {
   $16 = $6;
   $17 = $7;
   $18 = (($16) + ($17<<1)|0);
   $19 = (__cmsReadUInt16Number($15,$18)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    label = 7;
    break;
   }
  } else {
   $21 = (__cmsReadUInt16Number($15,0)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    label = 9;
    break;
   }
  }
  $23 = $7;
  $24 = (($23) + 1)|0;
  $7 = $24;
 }
 if ((label|0) == 7) {
  $3 = 0;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 9) {
  $3 = 0;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 11) {
  $3 = 1;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function __cmsReadUInt32Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),160,(27895|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = (FUNCTION_TABLE_iiiii[$10 & 511]($11,$5,4,1)|0);
 $13 = ($12|0)!=(1);
 if ($13) {
  $2 = 0;
  $19 = $2;
  STACKTOP = sp;return ($19|0);
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[$5>>2]|0;
  $17 = (__cmsAdjustEndianess32($16)|0);
  $18 = $4;
  HEAP32[$18>>2] = $17;
 }
 $2 = 1;
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function __cmsReadFloat32Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),173,(27916|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = (FUNCTION_TABLE_iiiii[$10 & 511]($11,$5,4,1)|0);
 $13 = ($12|0)!=(1);
 if ($13) {
  $2 = 0;
  $38 = $2;
  STACKTOP = sp;return ($38|0);
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  $2 = 1;
  $38 = $2;
  STACKTOP = sp;return ($38|0);
 }
 $16 = HEAP32[$5>>2]|0;
 $17 = (__cmsAdjustEndianess32($16)|0);
 HEAP32[$5>>2] = $17;
 $18 = +HEAPF32[$5>>2];
 $19 = $4;
 HEAPF32[$19>>2] = $18;
 $20 = $4;
 $21 = +HEAPF32[$20>>2];
 $22 = $21;
 $23 = $22 > 1.0E+20;
 if (!($23)) {
  $24 = $4;
  $25 = +HEAPF32[$24>>2];
  $26 = $25;
  $27 = $26 < -1.0E+20;
  if (!($27)) {
   $28 = $4;
   $29 = +HEAPF32[$28>>2];
   $30 = (___fpclassifyf($29)|0);
   $31 = ($30|0)==(2);
   if ($31) {
    $37 = 1;
   } else {
    $32 = $4;
    $33 = +HEAPF32[$32>>2];
    $34 = (___fpclassifyf($33)|0);
    $35 = ($34|0)==(4);
    $37 = $35;
   }
   $36 = $37&1;
   $2 = $36;
   $38 = $2;
   STACKTOP = sp;return ($38|0);
  }
 }
 $2 = 0;
 $38 = $2;
 STACKTOP = sp;return ($38|0);
}
function __cmsReadUInt64Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),205,(27938|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = (FUNCTION_TABLE_iiiii[$10 & 511]($11,$5,8,1)|0);
 $13 = ($12|0)!=(1);
 if ($13) {
  $2 = 0;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $4;
  __cmsAdjustEndianess64($16,$5);
 }
 $2 = 1;
 $17 = $2;
 STACKTOP = sp;return ($17|0);
}
function __cmsRead15Fixed16Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),223,(27959|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = (FUNCTION_TABLE_iiiii[$10 & 511]($11,$5,4,1)|0);
 $13 = ($12|0)!=(1);
 if ($13) {
  $2 = 0;
  $20 = $2;
  STACKTOP = sp;return ($20|0);
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[$5>>2]|0;
  $17 = (__cmsAdjustEndianess32($16)|0);
  $18 = (+__cms15Fixed16toDouble($17));
  $19 = $4;
  HEAPF64[$19>>3] = $18;
 }
 $2 = 1;
 $20 = $2;
 STACKTOP = sp;return ($20|0);
}
function __cms15Fixed16toDouble($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $7 = $1;
 $8 = ($7|0)<(0);
 $9 = $8 ? -1 : 1;
 $10 = (+($9|0));
 $3 = $10;
 $11 = $1;
 $12 = (Math_abs(($11|0))|0);
 $1 = $12;
 $13 = $1;
 $14 = $13 >> 16;
 $15 = $14&65535;
 $16 = $15&65535;
 $17 = $16 & 65535;
 $5 = $17;
 $18 = $1;
 $19 = $18 & 65535;
 $20 = $19&65535;
 $21 = $20&65535;
 $6 = $21;
 $22 = $6;
 $23 = (+($22|0));
 $24 = $23 / 65536.0;
 $4 = $24;
 $25 = $5;
 $26 = (+($25|0));
 $27 = $4;
 $28 = $26 + $27;
 $2 = $28;
 $29 = $3;
 $30 = $2;
 $31 = $29 * $30;
 STACKTOP = sp;return (+$31);
}
function __cmsReadXYZNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),240,(27983|0));
  // unreachable;
 }
 $8 = $3;
 $9 = ((($8)) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $3;
 $12 = (FUNCTION_TABLE_iiiii[$10 & 511]($11,$5,12,1)|0);
 $13 = ($12|0)!=(1);
 if ($13) {
  $2 = 0;
  $32 = $2;
  STACKTOP = sp;return ($32|0);
 }
 $14 = $4;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = HEAP32[$5>>2]|0;
  $17 = (__cmsAdjustEndianess32($16)|0);
  $18 = (+__cms15Fixed16toDouble($17));
  $19 = $4;
  HEAPF64[$19>>3] = $18;
  $20 = ((($5)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__cmsAdjustEndianess32($21)|0);
  $23 = (+__cms15Fixed16toDouble($22));
  $24 = $4;
  $25 = ((($24)) + 8|0);
  HEAPF64[$25>>3] = $23;
  $26 = ((($5)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (__cmsAdjustEndianess32($27)|0);
  $29 = (+__cms15Fixed16toDouble($28));
  $30 = $4;
  $31 = ((($30)) + 16|0);
  HEAPF64[$31>>3] = $29;
 }
 $2 = 1;
 $32 = $2;
 STACKTOP = sp;return ($32|0);
}
function __cmsWriteUInt8Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $3 = $0;
 HEAP8[$4>>0] = $1;
 $5 = $3;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((28572|0),(27781|0),255,(28001|0));
  // unreachable;
 }
 $7 = $3;
 $8 = ((($7)) + 288|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = (FUNCTION_TABLE_iiii[$9 & 511]($10,1,$4)|0);
 $12 = ($11|0)!=(1);
 if ($12) {
  $2 = 0;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  $2 = 1;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function __cmsWriteUInt16Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),267,(28022|0));
  // unreachable;
 }
 $8 = $4;
 $9 = (__cmsAdjustEndianess16($8)|0);
 HEAP16[$5>>1] = $9;
 $10 = $3;
 $11 = ((($10)) + 288|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = (FUNCTION_TABLE_iiii[$12 & 511]($13,2,$5)|0);
 $15 = ($14|0)!=(1);
 if ($15) {
  $2 = 0;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 } else {
  $2 = 1;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __cmsWriteUInt16Array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((28572|0),(27781|0),280,(28044|0));
  // unreachable;
 }
 $10 = $6;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((28065|0),(27781|0),281,(28044|0));
  // unreachable;
 }
 $7 = 0;
 while(1) {
  $12 = $7;
  $13 = $5;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 10;
   break;
  }
  $15 = $4;
  $16 = $6;
  $17 = $7;
  $18 = (($16) + ($17<<1)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = (__cmsWriteUInt16Number($15,$19)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   label = 8;
   break;
  }
  $22 = $7;
  $23 = (($22) + 1)|0;
  $7 = $23;
 }
 if ((label|0) == 8) {
  $3 = 0;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 10) {
  $3 = 1;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __cmsWriteUInt32Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),294,(28087|0));
  // unreachable;
 }
 $8 = $4;
 $9 = (__cmsAdjustEndianess32($8)|0);
 HEAP32[$5>>2] = $9;
 $10 = $3;
 $11 = ((($10)) + 288|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $3;
 $14 = (FUNCTION_TABLE_iiii[$12 & 511]($13,4,$5)|0);
 $15 = ($14|0)!=(1);
 if ($15) {
  $2 = 0;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 } else {
  $2 = 1;
  $16 = $2;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __cmsWriteFloat32Number($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 4|0;
 $5 = sp;
 $3 = $0;
 HEAPF32[$4>>2] = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),308,(28109|0));
  // unreachable;
 }
 $8 = HEAP32[$4>>2]|0;
 HEAP32[$5>>2] = $8;
 $9 = HEAP32[$5>>2]|0;
 $10 = (__cmsAdjustEndianess32($9)|0);
 HEAP32[$5>>2] = $10;
 $11 = $3;
 $12 = ((($11)) + 288|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (FUNCTION_TABLE_iiii[$13 & 511]($14,4,$5)|0);
 $16 = ($15|0)!=(1);
 if ($16) {
  $2 = 0;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 } else {
  $2 = 1;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __cmsWriteUInt64Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),322,(28132|0));
  // unreachable;
 }
 $8 = $4;
 __cmsAdjustEndianess64($5,$8);
 $9 = $3;
 $10 = ((($9)) + 288|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = (FUNCTION_TABLE_iiii[$11 & 511]($12,8,$5)|0);
 $14 = ($13|0)!=(1);
 if ($14) {
  $2 = 0;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 } else {
  $2 = 1;
  $15 = $2;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __cmsWrite15Fixed16Number($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  ___assert_fail((28572|0),(27781|0),335,(28154|0));
  // unreachable;
 }
 $8 = $4;
 $9 = (__cmsDoubleTo15Fixed16($8)|0);
 $10 = (__cmsAdjustEndianess32($9)|0);
 HEAP32[$5>>2] = $10;
 $11 = $3;
 $12 = ((($11)) + 288|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (FUNCTION_TABLE_iiii[$13 & 511]($14,4,$5)|0);
 $16 = ($15|0)!=(1);
 if ($16) {
  $2 = 0;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 } else {
  $2 = 1;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function __cmsDoubleTo15Fixed16($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 * 65536.0;
 $4 = $3 + 0.5;
 $5 = (+Math_floor((+$4)));
 $6 = (~~(($5)));
 STACKTOP = sp;return ($6|0);
}
function __cmsWriteXYZNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((28572|0),(27781|0),348,(28179|0));
  // unreachable;
 }
 $7 = $3;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $3;
  $10 = +HEAPF64[$9>>3];
  $11 = (__cmsDoubleTo15Fixed16($10)|0);
  $12 = (__cmsAdjustEndianess32($11)|0);
  HEAP32[$4>>2] = $12;
  $13 = $3;
  $14 = ((($13)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = (__cmsDoubleTo15Fixed16($15)|0);
  $17 = (__cmsAdjustEndianess32($16)|0);
  $18 = ((($4)) + 4|0);
  HEAP32[$18>>2] = $17;
  $19 = $3;
  $20 = ((($19)) + 16|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (__cmsDoubleTo15Fixed16($21)|0);
  $23 = (__cmsAdjustEndianess32($22)|0);
  $24 = ((($4)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = $2;
  $26 = ((($25)) + 288|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $2;
  $29 = (FUNCTION_TABLE_iiii[$27 & 511]($28,12,$4)|0);
  STACKTOP = sp;return ($29|0);
 } else {
  ___assert_fail((28198|0),(27781|0),349,(28179|0));
  // unreachable;
 }
 return (0)|0;
}
function __cms8Fixed8toDouble($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = $4&65535;
 $6 = $5 & 255;
 $7 = $6&255;
 $3 = $7;
 $8 = $1;
 $9 = $8&65535;
 $10 = $9 >> 8;
 $11 = $10 & 255;
 $12 = $11&255;
 $2 = $12;
 $13 = $2;
 $14 = (+($13&255));
 $15 = $3;
 $16 = (+($15&255));
 $17 = $16 / 256.0;
 $18 = $14 + $17;
 STACKTOP = sp;return (+$18);
}
function __cmsDoubleTo8Fixed8($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = (__cmsDoubleTo15Fixed16($3)|0);
 $2 = $4;
 $5 = $2;
 $6 = $5 >> 8;
 $7 = $6 & 65535;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsDecodeDateTimeNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((28218|0),(27781|0),404,(28239|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $2;
  $9 = ((($8)) + 10|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = (__cmsAdjustEndianess16($10)|0);
  $12 = $11&65535;
  $13 = $3;
  HEAP32[$13>>2] = $12;
  $14 = $2;
  $15 = ((($14)) + 8|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = (__cmsAdjustEndianess16($16)|0);
  $18 = $17&65535;
  $19 = $3;
  $20 = ((($19)) + 4|0);
  HEAP32[$20>>2] = $18;
  $21 = $2;
  $22 = ((($21)) + 6|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = (__cmsAdjustEndianess16($23)|0);
  $25 = $24&65535;
  $26 = $3;
  $27 = ((($26)) + 8|0);
  HEAP32[$27>>2] = $25;
  $28 = $2;
  $29 = ((($28)) + 4|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = (__cmsAdjustEndianess16($30)|0);
  $32 = $31&65535;
  $33 = $3;
  $34 = ((($33)) + 12|0);
  HEAP32[$34>>2] = $32;
  $35 = $2;
  $36 = ((($35)) + 2|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = (__cmsAdjustEndianess16($37)|0);
  $39 = $38&65535;
  $40 = (($39) - 1)|0;
  $41 = $3;
  $42 = ((($41)) + 16|0);
  HEAP32[$42>>2] = $40;
  $43 = $2;
  $44 = HEAP16[$43>>1]|0;
  $45 = (__cmsAdjustEndianess16($44)|0);
  $46 = $45&65535;
  $47 = (($46) - 1900)|0;
  $48 = $3;
  $49 = ((($48)) + 20|0);
  HEAP32[$49>>2] = $47;
  $50 = $3;
  $51 = ((($50)) + 24|0);
  HEAP32[$51>>2] = -1;
  $52 = $3;
  $53 = ((($52)) + 28|0);
  HEAP32[$53>>2] = -1;
  $54 = $3;
  $55 = ((($54)) + 32|0);
  HEAP32[$55>>2] = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((28264|0),(27781|0),405,(28239|0));
  // unreachable;
 }
}
function __cmsEncodeDateTimeNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((28218|0),(27781|0),420,(28287|0));
  // unreachable;
 }
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = HEAP32[$8>>2]|0;
  $10 = $9&65535;
  $11 = (__cmsAdjustEndianess16($10)|0);
  $12 = $2;
  $13 = ((($12)) + 10|0);
  HEAP16[$13>>1] = $11;
  $14 = $3;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16&65535;
  $18 = (__cmsAdjustEndianess16($17)|0);
  $19 = $2;
  $20 = ((($19)) + 8|0);
  HEAP16[$20>>1] = $18;
  $21 = $3;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23&65535;
  $25 = (__cmsAdjustEndianess16($24)|0);
  $26 = $2;
  $27 = ((($26)) + 6|0);
  HEAP16[$27>>1] = $25;
  $28 = $3;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30&65535;
  $32 = (__cmsAdjustEndianess16($31)|0);
  $33 = $2;
  $34 = ((($33)) + 4|0);
  HEAP16[$34>>1] = $32;
  $35 = $3;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 1)|0;
  $39 = $38&65535;
  $40 = (__cmsAdjustEndianess16($39)|0);
  $41 = $2;
  $42 = ((($41)) + 2|0);
  HEAP16[$42>>1] = $40;
  $43 = $3;
  $44 = ((($43)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 1900)|0;
  $47 = $46&65535;
  $48 = (__cmsAdjustEndianess16($47)|0);
  $49 = $2;
  HEAP16[$49>>1] = $48;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((28264|0),(27781|0),421,(28287|0));
  // unreachable;
 }
}
function __cmsReadTypeBase($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((28572|0),(27781|0),436,(28312|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ((($6)) + 272|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = (FUNCTION_TABLE_iiiii[$8 & 511]($9,$3,8,1)|0);
 $11 = ($10|0)!=(1);
 if ($11) {
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $12 = HEAP32[$3>>2]|0;
  $13 = (__cmsAdjustEndianess32($12)|0);
  $1 = $13;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function __cmsWriteTypeBase($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $3;
  $8 = (__cmsAdjustEndianess32($7)|0);
  HEAP32[$4>>2] = $8;
  $9 = ((($4)) + 4|0);
  ;HEAP32[$9>>2]=0|0;
  $10 = $2;
  $11 = ((($10)) + 288|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  $14 = (FUNCTION_TABLE_iiii[$12 & 511]($13,8,$4)|0);
  STACKTOP = sp;return ($14|0);
 } else {
  ___assert_fail((28572|0),(27781|0),449,(28329|0));
  // unreachable;
 }
 return (0)|0;
}
function __cmsReadAlignment($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $2 = $0;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((28572|0),(27781|0),462,(28347|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ((($9)) + 284|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = (FUNCTION_TABLE_ii[$11 & 511]($12)|0);
 $5 = $13;
 $14 = $5;
 $15 = (($14) + 3)|0;
 $16 = $15 & -4;
 $4 = $16;
 $17 = $4;
 $18 = $5;
 $19 = (($17) - ($18))|0;
 $6 = $19;
 $20 = $6;
 $21 = ($20|0)==(0);
 if ($21) {
  $1 = 1;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $22 = $6;
 $23 = ($22>>>0)>(4);
 if ($23) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 } else {
  $24 = $2;
  $25 = ((($24)) + 272|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $2;
  $28 = $6;
  $29 = (FUNCTION_TABLE_iiiii[$26 & 511]($27,$3,$28,1)|0);
  $30 = ($29|0)==(1);
  $31 = $30&1;
  $1 = $31;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function __cmsWriteAlignment($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 20|0;
 $2 = $0;
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  ___assert_fail((28572|0),(27781|0),479,(28365|0));
  // unreachable;
 }
 $9 = $2;
 $10 = ((($9)) + 284|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = (FUNCTION_TABLE_ii[$11 & 511]($12)|0);
 $5 = $13;
 $14 = $5;
 $15 = (($14) + 3)|0;
 $16 = $15 & -4;
 $4 = $16;
 $17 = $4;
 $18 = $5;
 $19 = (($17) - ($18))|0;
 $6 = $19;
 $20 = $6;
 $21 = ($20|0)==(0);
 if ($21) {
  $1 = 1;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 }
 $22 = $6;
 $23 = ($22>>>0)>(4);
 if ($23) {
  $1 = 0;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 } else {
  $24 = $6;
  _memset(($3|0),0,($24|0))|0;
  $25 = $2;
  $26 = ((($25)) + 288|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $2;
  $29 = $6;
  $30 = (FUNCTION_TABLE_iiii[$27 & 511]($28,$29,$3)|0);
  $1 = $30;
  $31 = $1;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function __cmsGetContext($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 do {
  if ($7) {
   $1 = 14692;
  } else {
   $8 = HEAP32[8119]|0;
   $4 = $8;
   while(1) {
    $9 = $4;
    $10 = ($9|0)!=(0|0);
    if (!($10)) {
     label = 8;
     break;
    }
    $11 = $3;
    $12 = $4;
    $13 = ($11|0)==($12|0);
    $14 = $4;
    if ($13) {
     label = 6;
     break;
    }
    $15 = HEAP32[$14>>2]|0;
    $4 = $15;
   }
   if ((label|0) == 6) {
    $1 = $14;
    break;
   }
   else if ((label|0) == 8) {
    $1 = 14692;
    break;
   }
  }
 } while(0);
 $16 = $1;
 STACKTOP = sp;return ($16|0);
}
function __cmsContextGetClientChunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = ($7|0)<(0);
 $9 = $4;
 $10 = ($9>>>0)>=(15);
 $or$cond = $8 | $10;
 $11 = $3;
 if ($or$cond) {
  _cmsSignalError($11,3,28384,$vararg_buffer);
  ___assert_fail((28426|0),(27781|0),701,(28430|0));
  // unreachable;
 }
 $12 = (__cmsGetContext($11)|0);
 $5 = $12;
 $13 = $5;
 $14 = ((($13)) + 8|0);
 $15 = $4;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $6 = $17;
 $18 = $6;
 $19 = ($18|0)!=(0|0);
 if ($19) {
  $20 = $6;
  $2 = $20;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 } else {
  $21 = $4;
  $22 = ((14700) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $2 = $23;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _cmsDetectBlackPoint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $6;
 $11 = (_cmsGetDeviceClass($10)|0);
 $9 = $11;
 $12 = $9;
 $13 = ($12|0)==(1818848875);
 $14 = $9;
 $15 = ($14|0)==(1633842036);
 $or$cond = $13 | $15;
 $16 = $9;
 $17 = ($16|0)==(1852662636);
 $or$cond3 = $or$cond | $17;
 if ($or$cond3) {
  $18 = $5;
  $19 = ((($18)) + 16|0);
  HEAPF64[$19>>3] = 0.0;
  $20 = $5;
  $21 = ((($20)) + 8|0);
  HEAPF64[$21>>3] = 0.0;
  $22 = $5;
  HEAPF64[$22>>3] = 0.0;
  $4 = 0;
  $68 = $4;
  STACKTOP = sp;return ($68|0);
 }
 $23 = $7;
 $24 = ($23|0)!=(0);
 $25 = $7;
 $26 = ($25|0)!=(1);
 $or$cond5 = $24 & $26;
 $27 = $7;
 $28 = ($27|0)!=(2);
 $or$cond7 = $or$cond5 & $28;
 if ($or$cond7) {
  $29 = $5;
  $30 = ((($29)) + 16|0);
  HEAPF64[$30>>3] = 0.0;
  $31 = $5;
  $32 = ((($31)) + 8|0);
  HEAPF64[$32>>3] = 0.0;
  $33 = $5;
  HEAPF64[$33>>3] = 0.0;
  $4 = 0;
  $68 = $4;
  STACKTOP = sp;return ($68|0);
 }
 $34 = $6;
 $35 = (_cmsGetEncodedICCversion($34)|0);
 $36 = ($35>>>0)>=(67108864);
 if ($36) {
  $37 = $7;
  $38 = ($37|0)==(0);
  $39 = $7;
  $40 = ($39|0)==(2);
  $or$cond9 = $38 | $40;
  if ($or$cond9) {
   $41 = $6;
   $42 = (_cmsIsMatrixShaper($41)|0);
   $43 = ($42|0)!=(0);
   if ($43) {
    $44 = $6;
    $45 = $5;
    $46 = (_BlackPointAsDarkerColorant($44,1,$45,0)|0);
    $4 = $46;
    $68 = $4;
    STACKTOP = sp;return ($68|0);
   } else {
    $47 = $5;
    HEAPF64[$47>>3] = 0.0033600000000000001;
    $48 = $5;
    $49 = ((($48)) + 8|0);
    HEAPF64[$49>>3] = 0.0034730999999999998;
    $50 = $5;
    $51 = ((($50)) + 16|0);
    HEAPF64[$51>>3] = 0.0028700000000000002;
    $4 = 1;
    $68 = $4;
    STACKTOP = sp;return ($68|0);
   }
  }
 }
 $52 = $7;
 $53 = ($52|0)==(1);
 if ($53) {
  $54 = $6;
  $55 = (_cmsGetDeviceClass($54)|0);
  $56 = ($55|0)==(1886549106);
  if ($56) {
   $57 = $6;
   $58 = (_cmsGetColorSpace($57)|0);
   $59 = ($58|0)==(1129142603);
   if ($59) {
    $60 = $5;
    $61 = $6;
    $62 = (_BlackPointUsingPerceptualBlack($60,$61)|0);
    $4 = $62;
    $68 = $4;
    STACKTOP = sp;return ($68|0);
   }
  }
 }
 $63 = $6;
 $64 = $7;
 $65 = $5;
 $66 = $8;
 $67 = (_BlackPointAsDarkerColorant($63,$64,$65,$66)|0);
 $4 = $67;
 $68 = $4;
 STACKTOP = sp;return ($68|0);
}
function _BlackPointAsDarkerColorant($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 72|0;
 $12 = sp + 60|0;
 $15 = sp + 24|0;
 $16 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $18 = $5;
 $19 = (_cmsGetProfileContextID($18)|0);
 $17 = $19;
 $20 = $5;
 $21 = $6;
 $22 = (_cmsIsIntentSupported($20,$21,0)|0);
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $24 = $7;
  $25 = ((($24)) + 16|0);
  HEAPF64[$25>>3] = 0.0;
  $26 = $7;
  $27 = ((($26)) + 8|0);
  HEAPF64[$27>>3] = 0.0;
  $28 = $7;
  HEAPF64[$28>>3] = 0.0;
  $4 = 0;
  $84 = $4;
  STACKTOP = sp;return ($84|0);
 }
 $29 = $5;
 $30 = (_cmsFormatterForColorspaceOfProfile($29,2,0)|0);
 $13 = $30;
 $31 = $5;
 $32 = (_cmsGetColorSpace($31)|0);
 $11 = $32;
 $33 = $11;
 $34 = (__cmsEndPointsBySpace($33,0,$9,$12)|0);
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $36 = $7;
  $37 = ((($36)) + 16|0);
  HEAPF64[$37>>3] = 0.0;
  $38 = $7;
  $39 = ((($38)) + 8|0);
  HEAPF64[$39>>3] = 0.0;
  $40 = $7;
  HEAPF64[$40>>3] = 0.0;
  $4 = 0;
  $84 = $4;
  STACKTOP = sp;return ($84|0);
 }
 $41 = HEAP32[$12>>2]|0;
 $42 = $13;
 $43 = $42 >>> 3;
 $44 = $43 & 15;
 $45 = ($41|0)!=($44|0);
 if ($45) {
  $46 = $7;
  $47 = ((($46)) + 16|0);
  HEAPF64[$47>>3] = 0.0;
  $48 = $7;
  $49 = ((($48)) + 8|0);
  HEAPF64[$49>>3] = 0.0;
  $50 = $7;
  HEAPF64[$50>>3] = 0.0;
  $4 = 0;
  $84 = $4;
  STACKTOP = sp;return ($84|0);
 }
 $51 = $17;
 $52 = (_cmsCreateLab2ProfileTHR($51,0)|0);
 $14 = $52;
 $53 = $14;
 $54 = ($53|0)==(0|0);
 if ($54) {
  $55 = $7;
  $56 = ((($55)) + 16|0);
  HEAPF64[$56>>3] = 0.0;
  $57 = $7;
  $58 = ((($57)) + 8|0);
  HEAPF64[$58>>3] = 0.0;
  $59 = $7;
  HEAPF64[$59>>3] = 0.0;
  $4 = 0;
  $84 = $4;
  STACKTOP = sp;return ($84|0);
 }
 $60 = $17;
 $61 = $5;
 $62 = $13;
 $63 = $14;
 $64 = $6;
 $65 = (_cmsCreateTransformTHR($60,$61,$62,$63,4849688,$64,320)|0);
 $10 = $65;
 $66 = $14;
 (_cmsCloseProfile($66)|0);
 $67 = $10;
 $68 = ($67|0)==(0|0);
 if ($68) {
  $69 = $7;
  $70 = ((($69)) + 16|0);
  HEAPF64[$70>>3] = 0.0;
  $71 = $7;
  $72 = ((($71)) + 8|0);
  HEAPF64[$72>>3] = 0.0;
  $73 = $7;
  HEAPF64[$73>>3] = 0.0;
  $4 = 0;
  $84 = $4;
  STACKTOP = sp;return ($84|0);
 }
 $74 = $10;
 $75 = HEAP32[$9>>2]|0;
 _cmsDoTransform($74,$75,$15,1);
 $76 = ((($15)) + 16|0);
 HEAPF64[$76>>3] = 0.0;
 $77 = ((($15)) + 8|0);
 HEAPF64[$77>>3] = 0.0;
 $78 = +HEAPF64[$15>>3];
 $79 = $78 > 50.0;
 if ($79) {
  HEAPF64[$15>>3] = 50.0;
 }
 $80 = $10;
 _cmsDeleteTransform($80);
 _cmsLab2XYZ(0,$16,$15);
 $81 = $7;
 $82 = ($81|0)!=(0|0);
 if ($82) {
  $83 = $7;
  ;HEAP32[$83>>2]=HEAP32[$16>>2]|0;HEAP32[$83+4>>2]=HEAP32[$16+4>>2]|0;HEAP32[$83+8>>2]=HEAP32[$16+8>>2]|0;HEAP32[$83+12>>2]=HEAP32[$16+12>>2]|0;HEAP32[$83+16>>2]=HEAP32[$16+16>>2]|0;HEAP32[$83+20>>2]=HEAP32[$16+20>>2]|0;
 }
 $4 = 1;
 $84 = $4;
 STACKTOP = sp;return ($84|0);
}
function _BlackPointUsingPerceptualBlack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $6 = sp + 48|0;
 $7 = sp + 24|0;
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = (_cmsIsIntentSupported($9,0,0)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = $3;
  $13 = ((($12)) + 16|0);
  HEAPF64[$13>>3] = 0.0;
  $14 = $3;
  $15 = ((($14)) + 8|0);
  HEAPF64[$15>>3] = 0.0;
  $16 = $3;
  HEAPF64[$16>>3] = 0.0;
  $2 = 1;
  $37 = $2;
  STACKTOP = sp;return ($37|0);
 }
 $17 = $4;
 $18 = (_CreateRoundtripXForm($17,0)|0);
 $5 = $18;
 $19 = $5;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = $3;
  $22 = ((($21)) + 16|0);
  HEAPF64[$22>>3] = 0.0;
  $23 = $3;
  $24 = ((($23)) + 8|0);
  HEAPF64[$24>>3] = 0.0;
  $25 = $3;
  HEAPF64[$25>>3] = 0.0;
  $2 = 0;
  $37 = $2;
  STACKTOP = sp;return ($37|0);
 }
 $26 = ((($6)) + 16|0);
 HEAPF64[$26>>3] = 0.0;
 $27 = ((($6)) + 8|0);
 HEAPF64[$27>>3] = 0.0;
 HEAPF64[$6>>3] = 0.0;
 $28 = $5;
 _cmsDoTransform($28,$6,$7,1);
 $29 = +HEAPF64[$7>>3];
 $30 = $29 > 50.0;
 if ($30) {
  HEAPF64[$7>>3] = 50.0;
 }
 $31 = ((($7)) + 16|0);
 HEAPF64[$31>>3] = 0.0;
 $32 = ((($7)) + 8|0);
 HEAPF64[$32>>3] = 0.0;
 $33 = $5;
 _cmsDeleteTransform($33);
 _cmsLab2XYZ(0,$8,$7);
 $34 = $3;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $3;
  ;HEAP32[$36>>2]=HEAP32[$8>>2]|0;HEAP32[$36+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$36+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$36+16>>2]=HEAP32[$8+16>>2]|0;HEAP32[$36+20>>2]=HEAP32[$8+20>>2]|0;
 }
 $2 = 1;
 $37 = $2;
 STACKTOP = sp;return ($37|0);
}
function _CreateRoundtripXForm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp + 64|0;
 $8 = sp;
 $9 = sp + 48|0;
 $10 = sp + 32|0;
 $2 = $0;
 $3 = $1;
 $11 = $2;
 $12 = (_cmsGetProfileContextID($11)|0);
 $4 = $12;
 $13 = $4;
 $14 = (_cmsCreateLab4ProfileTHR($13,0)|0);
 $5 = $14;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 ;HEAP32[$8>>2]=HEAP32[584>>2]|0;HEAP32[$8+4>>2]=HEAP32[584+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[584+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[584+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[584+16>>2]|0;HEAP32[$8+20>>2]=HEAP32[584+20>>2]|0;HEAP32[$8+24>>2]=HEAP32[584+24>>2]|0;HEAP32[$8+28>>2]=HEAP32[584+28>>2]|0;
 $15 = $5;
 HEAP32[$9>>2] = $15;
 $16 = $2;
 $17 = ((($9)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = $2;
 $19 = ((($9)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = $5;
 $21 = ((($9)) + 12|0);
 HEAP32[$21>>2] = $20;
 HEAP32[$10>>2] = 1;
 $22 = $3;
 $23 = ((($10)) + 4|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($10)) + 8|0);
 HEAP32[$24>>2] = 1;
 $25 = ((($10)) + 12|0);
 HEAP32[$25>>2] = 1;
 $26 = $4;
 $27 = (_cmsCreateExtendedTransform($26,4,$9,$7,$10,$8,0,0,4849688,4849688,320)|0);
 $6 = $27;
 $28 = $5;
 (_cmsCloseProfile($28)|0);
 $29 = $6;
 STACKTOP = sp;return ($29|0);
}
function _cmsDetectDestinationBlackPoint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink14 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0;
 var $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0.0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0.0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0.0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(10432|0);
 $11 = sp + 10352|0;
 $12 = sp + 10328|0;
 $13 = sp + 10304|0;
 $14 = sp + 8256|0;
 $15 = sp + 6208|0;
 $19 = sp + 4144|0;
 $20 = sp + 2096|0;
 $21 = sp + 48|0;
 $27 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = 0;
 $18 = 1;
 $29 = $6;
 $30 = (_cmsGetDeviceClass($29)|0);
 $26 = $30;
 $31 = $26;
 $32 = ($31|0)==(1818848875);
 $33 = $26;
 $34 = ($33|0)==(1633842036);
 $or$cond = $32 | $34;
 $35 = $26;
 $36 = ($35|0)==(1852662636);
 $or$cond3 = $or$cond | $36;
 if ($or$cond3) {
  $37 = $5;
  $38 = ((($37)) + 16|0);
  HEAPF64[$38>>3] = 0.0;
  $39 = $5;
  $40 = ((($39)) + 8|0);
  HEAPF64[$40>>3] = 0.0;
  $41 = $5;
  HEAPF64[$41>>3] = 0.0;
  $4 = 0;
  $269 = $4;
  STACKTOP = sp;return ($269|0);
 }
 $42 = $7;
 $43 = ($42|0)!=(0);
 $44 = $7;
 $45 = ($44|0)!=(1);
 $or$cond5 = $43 & $45;
 $46 = $7;
 $47 = ($46|0)!=(2);
 $or$cond7 = $or$cond5 & $47;
 if ($or$cond7) {
  $48 = $5;
  $49 = ((($48)) + 16|0);
  HEAPF64[$49>>3] = 0.0;
  $50 = $5;
  $51 = ((($50)) + 8|0);
  HEAPF64[$51>>3] = 0.0;
  $52 = $5;
  HEAPF64[$52>>3] = 0.0;
  $4 = 0;
  $269 = $4;
  STACKTOP = sp;return ($269|0);
 }
 $53 = $6;
 $54 = (_cmsGetEncodedICCversion($53)|0);
 $55 = ($54>>>0)>=(67108864);
 if ($55) {
  $56 = $7;
  $57 = ($56|0)==(0);
  $58 = $7;
  $59 = ($58|0)==(2);
  $or$cond9 = $57 | $59;
  if ($or$cond9) {
   $60 = $6;
   $61 = (_cmsIsMatrixShaper($60)|0);
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = $6;
    $64 = $5;
    $65 = (_BlackPointAsDarkerColorant($63,1,$64,0)|0);
    $4 = $65;
    $269 = $4;
    STACKTOP = sp;return ($269|0);
   } else {
    $66 = $5;
    HEAPF64[$66>>3] = 0.0033600000000000001;
    $67 = $5;
    $68 = ((($67)) + 8|0);
    HEAPF64[$68>>3] = 0.0034730999999999998;
    $69 = $5;
    $70 = ((($69)) + 16|0);
    HEAPF64[$70>>3] = 0.0028700000000000002;
    $4 = 1;
    $269 = $4;
    STACKTOP = sp;return ($269|0);
   }
  }
 }
 $71 = $6;
 $72 = (_cmsGetColorSpace($71)|0);
 $9 = $72;
 $73 = $6;
 $74 = $7;
 $75 = (_cmsIsCLUT($73,$74,1)|0);
 $76 = ($75|0)!=(0);
 if ($76) {
  $77 = $9;
  $78 = ($77|0)!=(1196573017);
  $79 = $9;
  $80 = ($79|0)!=(1380401696);
  $or$cond11 = $78 & $80;
  $81 = $9;
  $82 = ($81|0)!=(1129142603);
  $or$cond13 = $or$cond11 & $82;
  if (!($or$cond13)) {
   $88 = $7;
   $89 = ($88|0)==(1);
   do {
    if ($89) {
     $90 = $6;
     $91 = $7;
     $92 = $8;
     $93 = (_cmsDetectBlackPoint($27,$90,$91,$92)|0);
     $94 = ($93|0)!=(0);
     if ($94) {
      _cmsXYZ2Lab(0,$11,$27);
      break;
     }
     $4 = 0;
     $269 = $4;
     STACKTOP = sp;return ($269|0);
    } else {
     HEAPF64[$11>>3] = 0.0;
     $95 = ((($11)) + 8|0);
     HEAPF64[$95>>3] = 0.0;
     $96 = ((($11)) + 16|0);
     HEAPF64[$96>>3] = 0.0;
    }
   } while(0);
   $97 = $6;
   $98 = $7;
   $99 = (_CreateRoundtripXForm($97,$98)|0);
   $10 = $99;
   $100 = $10;
   $101 = ($100|0)==(0|0);
   if ($101) {
    $4 = 0;
    $269 = $4;
    STACKTOP = sp;return ($269|0);
   }
   $25 = 0;
   while(1) {
    $102 = $25;
    $103 = ($102|0)<(256);
    if (!($103)) {
     break;
    }
    $104 = $25;
    $105 = (+($104|0));
    $106 = $105 * 100.0;
    $107 = $106 / 255.0;
    HEAPF64[$13>>3] = $107;
    $108 = ((($11)) + 8|0);
    $109 = +HEAPF64[$108>>3];
    $110 = -50.0 > $109;
    $111 = ((($11)) + 8|0);
    $112 = +HEAPF64[$111>>3];
    $113 = $110 ? -50.0 : $112;
    $114 = 50.0 < $113;
    if ($114) {
     $122 = 50.0;
    } else {
     $115 = ((($11)) + 8|0);
     $116 = +HEAPF64[$115>>3];
     $117 = -50.0 > $116;
     $118 = ((($11)) + 8|0);
     $119 = +HEAPF64[$118>>3];
     $120 = $117 ? -50.0 : $119;
     $122 = $120;
    }
    $121 = ((($13)) + 8|0);
    HEAPF64[$121>>3] = $122;
    $123 = ((($11)) + 16|0);
    $124 = +HEAPF64[$123>>3];
    $125 = -50.0 > $124;
    $126 = ((($11)) + 16|0);
    $127 = +HEAPF64[$126>>3];
    $128 = $125 ? -50.0 : $127;
    $129 = 50.0 < $128;
    if ($129) {
     $137 = 50.0;
    } else {
     $130 = ((($11)) + 16|0);
     $131 = +HEAPF64[$130>>3];
     $132 = -50.0 > $131;
     $133 = ((($11)) + 16|0);
     $134 = +HEAPF64[$133>>3];
     $135 = $132 ? -50.0 : $134;
     $137 = $135;
    }
    $136 = ((($13)) + 16|0);
    HEAPF64[$136>>3] = $137;
    $138 = $10;
    _cmsDoTransform($138,$13,$12,1);
    $139 = +HEAPF64[$13>>3];
    $140 = $25;
    $141 = (($14) + ($140<<3)|0);
    HEAPF64[$141>>3] = $139;
    $142 = +HEAPF64[$12>>3];
    $143 = $25;
    $144 = (($15) + ($143<<3)|0);
    HEAPF64[$144>>3] = $142;
    $145 = $25;
    $146 = (($145) + 1)|0;
    $25 = $146;
   }
   $25 = 254;
   while(1) {
    $147 = $25;
    $148 = ($147|0)>(0);
    if (!($148)) {
     break;
    }
    $149 = $25;
    $150 = (($15) + ($149<<3)|0);
    $151 = +HEAPF64[$150>>3];
    $152 = $25;
    $153 = (($152) + 1)|0;
    $154 = (($15) + ($153<<3)|0);
    $155 = +HEAPF64[$154>>3];
    $156 = $151 < $155;
    $157 = $25;
    $158 = (($157) + 1)|0;
    $$sink14 = $156 ? $157 : $158;
    $159 = (($15) + ($$sink14<<3)|0);
    $160 = +HEAPF64[$159>>3];
    $161 = $25;
    $162 = (($15) + ($161<<3)|0);
    HEAPF64[$162>>3] = $160;
    $163 = $25;
    $164 = (($163) + -1)|0;
    $25 = $164;
   }
   $165 = +HEAPF64[$15>>3];
   $166 = ((($15)) + 2040|0);
   $167 = +HEAPF64[$166>>3];
   $168 = $165 < $167;
   if (!($168)) {
    $169 = $10;
    _cmsDeleteTransform($169);
    $170 = $5;
    $171 = ((($170)) + 16|0);
    HEAPF64[$171>>3] = 0.0;
    $172 = $5;
    $173 = ((($172)) + 8|0);
    HEAPF64[$173>>3] = 0.0;
    $174 = $5;
    HEAPF64[$174>>3] = 0.0;
    $4 = 0;
    $269 = $4;
    STACKTOP = sp;return ($269|0);
   }
   $18 = 1;
   $175 = +HEAPF64[$15>>3];
   $16 = $175;
   $176 = ((($15)) + 2040|0);
   $177 = +HEAPF64[$176>>3];
   $17 = $177;
   $178 = $7;
   $179 = ($178|0)==(1);
   if ($179) {
    $25 = 0;
    while(1) {
     $180 = $25;
     $181 = ($180|0)<(256);
     if (!($181)) {
      break;
     }
     $182 = $25;
     $183 = (($14) + ($182<<3)|0);
     $184 = +HEAPF64[$183>>3];
     $185 = $16;
     $186 = $17;
     $187 = $16;
     $188 = $186 - $187;
     $189 = 0.20000000000000001 * $188;
     $190 = $185 + $189;
     $191 = $184 <= $190;
     if (!($191)) {
      $192 = $25;
      $193 = (($14) + ($192<<3)|0);
      $194 = +HEAPF64[$193>>3];
      $195 = $25;
      $196 = (($15) + ($195<<3)|0);
      $197 = +HEAPF64[$196>>3];
      $198 = $194 - $197;
      $199 = (+Math_abs((+$198)));
      $200 = $199 < 4.0;
      if (!($200)) {
       $18 = 0;
      }
     }
     $201 = $25;
     $202 = (($201) + 1)|0;
     $25 = $202;
    }
    $203 = $18;
    $204 = ($203|0)!=(0);
    if ($204) {
     $205 = $5;
     _cmsLab2XYZ(0,$205,$11);
     $206 = $10;
     _cmsDeleteTransform($206);
     $4 = 1;
     $269 = $4;
     STACKTOP = sp;return ($269|0);
    }
   }
   $25 = 0;
   while(1) {
    $207 = $25;
    $208 = ($207|0)<(256);
    if (!($208)) {
     break;
    }
    $209 = $25;
    $210 = (($15) + ($209<<3)|0);
    $211 = +HEAPF64[$210>>3];
    $212 = $16;
    $213 = $211 - $212;
    $214 = $17;
    $215 = $16;
    $216 = $214 - $215;
    $217 = $213 / $216;
    $218 = $25;
    $219 = (($19) + ($218<<3)|0);
    HEAPF64[$219>>3] = $217;
    $220 = $25;
    $221 = (($220) + 1)|0;
    $25 = $221;
   }
   $222 = $7;
   $223 = ($222|0)==(1);
   if ($223) {
    $22 = 0.10000000000000001;
    $23 = 0.5;
   } else {
    $22 = 0.029999999999999999;
    $23 = 0.25;
   }
   $24 = 0;
   $25 = 0;
   while(1) {
    $224 = $25;
    $225 = ($224|0)<(256);
    if (!($225)) {
     break;
    }
    $226 = $25;
    $227 = (($19) + ($226<<3)|0);
    $228 = +HEAPF64[$227>>3];
    $28 = $228;
    $229 = $28;
    $230 = $22;
    $231 = $229 >= $230;
    if ($231) {
     $232 = $28;
     $233 = $23;
     $234 = $232 < $233;
     if ($234) {
      $235 = $25;
      $236 = (($14) + ($235<<3)|0);
      $237 = +HEAPF64[$236>>3];
      $238 = $24;
      $239 = (($20) + ($238<<3)|0);
      HEAPF64[$239>>3] = $237;
      $240 = $25;
      $241 = (($19) + ($240<<3)|0);
      $242 = +HEAPF64[$241>>3];
      $243 = $24;
      $244 = (($21) + ($243<<3)|0);
      HEAPF64[$244>>3] = $242;
      $245 = $24;
      $246 = (($245) + 1)|0;
      $24 = $246;
     }
    }
    $247 = $25;
    $248 = (($247) + 1)|0;
    $25 = $248;
   }
   $249 = $24;
   $250 = ($249|0)<(3);
   if ($250) {
    $251 = $10;
    _cmsDeleteTransform($251);
    $252 = $5;
    $253 = ((($252)) + 16|0);
    HEAPF64[$253>>3] = 0.0;
    $254 = $5;
    $255 = ((($254)) + 8|0);
    HEAPF64[$255>>3] = 0.0;
    $256 = $5;
    HEAPF64[$256>>3] = 0.0;
    $4 = 0;
    $269 = $4;
    STACKTOP = sp;return ($269|0);
   }
   $257 = $24;
   $258 = (+_RootOfLeastSquaresFitQuadraticCurve($257,$20,$21));
   HEAPF64[$13>>3] = $258;
   $259 = +HEAPF64[$13>>3];
   $260 = $259 < 0.0;
   if ($260) {
    HEAPF64[$13>>3] = 0.0;
   }
   $261 = ((($11)) + 8|0);
   $262 = +HEAPF64[$261>>3];
   $263 = ((($13)) + 8|0);
   HEAPF64[$263>>3] = $262;
   $264 = ((($11)) + 16|0);
   $265 = +HEAPF64[$264>>3];
   $266 = ((($13)) + 16|0);
   HEAPF64[$266>>3] = $265;
   $267 = $5;
   _cmsLab2XYZ(0,$267,$13);
   $268 = $10;
   _cmsDeleteTransform($268);
   $4 = 1;
   $269 = $4;
   STACKTOP = sp;return ($269|0);
  }
 }
 $83 = $5;
 $84 = $6;
 $85 = $7;
 $86 = $8;
 $87 = (_cmsDetectBlackPoint($83,$84,$85,$86)|0);
 $4 = $87;
 $269 = $4;
 STACKTOP = sp;return ($269|0);
}
function _RootOfLeastSquaresFitQuadraticCurve($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0.0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0, $135 = 0.0;
 var $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0;
 var $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0;
 var $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $19 = sp + 72|0;
 $20 = sp + 48|0;
 $21 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0.0;
 $8 = 0.0;
 $9 = 0.0;
 $10 = 0.0;
 $11 = 0.0;
 $12 = 0.0;
 $13 = 0.0;
 $25 = $4;
 $26 = ($25|0)<(4);
 if ($26) {
  $3 = 0.0;
  $153 = $3;
  STACKTOP = sp;return (+$153);
 }
 $18 = 0;
 while(1) {
  $27 = $18;
  $28 = $4;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $5;
  $31 = $18;
  $32 = (($30) + ($31<<3)|0);
  $33 = +HEAPF64[$32>>3];
  $22 = $33;
  $34 = $6;
  $35 = $18;
  $36 = (($34) + ($35<<3)|0);
  $37 = +HEAPF64[$36>>3];
  $23 = $37;
  $38 = $22;
  $39 = $7;
  $40 = $39 + $38;
  $7 = $40;
  $41 = $22;
  $42 = $22;
  $43 = $41 * $42;
  $44 = $8;
  $45 = $44 + $43;
  $8 = $45;
  $46 = $22;
  $47 = $22;
  $48 = $46 * $47;
  $49 = $22;
  $50 = $48 * $49;
  $51 = $9;
  $52 = $51 + $50;
  $9 = $52;
  $53 = $22;
  $54 = $22;
  $55 = $53 * $54;
  $56 = $22;
  $57 = $55 * $56;
  $58 = $22;
  $59 = $57 * $58;
  $60 = $10;
  $61 = $60 + $59;
  $10 = $61;
  $62 = $23;
  $63 = $11;
  $64 = $63 + $62;
  $11 = $64;
  $65 = $23;
  $66 = $22;
  $67 = $65 * $66;
  $68 = $12;
  $69 = $68 + $67;
  $12 = $69;
  $70 = $23;
  $71 = $22;
  $72 = $70 * $71;
  $73 = $22;
  $74 = $72 * $73;
  $75 = $13;
  $76 = $75 + $74;
  $13 = $76;
  $77 = $18;
  $78 = (($77) + 1)|0;
  $18 = $78;
 }
 $79 = $4;
 $80 = (+($79|0));
 $81 = $7;
 $82 = $8;
 __cmsVEC3init($19,$80,$81,$82);
 $83 = ((($19)) + 24|0);
 $84 = $7;
 $85 = $8;
 $86 = $9;
 __cmsVEC3init($83,$84,$85,$86);
 $87 = ((($19)) + 48|0);
 $88 = $8;
 $89 = $9;
 $90 = $10;
 __cmsVEC3init($87,$88,$89,$90);
 $91 = $11;
 $92 = $12;
 $93 = $13;
 __cmsVEC3init($20,$91,$92,$93);
 $94 = (__cmsMAT3solve($21,$19,$20)|0);
 $95 = ($94|0)!=(0);
 if (!($95)) {
  $3 = 0.0;
  $153 = $3;
  STACKTOP = sp;return (+$153);
 }
 $96 = ((($21)) + 16|0);
 $97 = +HEAPF64[$96>>3];
 $15 = $97;
 $98 = ((($21)) + 8|0);
 $99 = +HEAPF64[$98>>3];
 $16 = $99;
 $100 = +HEAPF64[$21>>3];
 $17 = $100;
 $101 = $15;
 $102 = (+Math_abs((+$101)));
 $103 = $102 < 1.0E-10;
 if ($103) {
  $104 = $17;
  $105 = -$104;
  $106 = $16;
  $107 = $105 / $106;
  $108 = 50.0 > $107;
  if ($108) {
   $114 = 50.0;
  } else {
   $109 = $17;
   $110 = -$109;
   $111 = $16;
   $112 = $110 / $111;
   $114 = $112;
  }
  $113 = 0.0 < $114;
  if ($113) {
   $124 = 0.0;
  } else {
   $115 = $17;
   $116 = -$115;
   $117 = $16;
   $118 = $116 / $117;
   $119 = 50.0 > $118;
   if ($119) {
    $124 = 50.0;
   } else {
    $120 = $17;
    $121 = -$120;
    $122 = $16;
    $123 = $121 / $122;
    $124 = $123;
   }
  }
  $3 = $124;
  $153 = $3;
  STACKTOP = sp;return (+$153);
 } else {
  $125 = $16;
  $126 = $16;
  $127 = $125 * $126;
  $128 = $15;
  $129 = 4.0 * $128;
  $130 = $17;
  $131 = $129 * $130;
  $132 = $127 - $131;
  $14 = $132;
  $133 = $14;
  $134 = $133 <= 0.0;
  if ($134) {
   $3 = 0.0;
   $153 = $3;
   STACKTOP = sp;return (+$153);
  }
  $135 = $16;
  $136 = -$135;
  $137 = $14;
  $138 = (+Math_sqrt((+$137)));
  $139 = $136 + $138;
  $140 = $15;
  $141 = 2.0 * $140;
  $142 = $139 / $141;
  $24 = $142;
  $143 = $24;
  $144 = 50.0 < $143;
  $145 = $24;
  $146 = $144 ? 50.0 : $145;
  $147 = 0.0 > $146;
  if ($147) {
   $152 = 0.0;
  } else {
   $148 = $24;
   $149 = 50.0 < $148;
   $150 = $24;
   $151 = $149 ? 50.0 : $150;
   $152 = $151;
  }
  $3 = $152;
  $153 = $3;
  STACKTOP = sp;return (+$153);
 }
 return +(0.0);
}
function __cmsGetTagTypeHandler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = (__cmsContextGetClientChunk($5,8)|0);
 $4 = $6;
 $7 = $3;
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $10 = (_GetHandler($7,$9,14784)|0);
 STACKTOP = sp;return ($10|0);
}
function _GetHandler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $5;
 $7 = $8;
 while(1) {
  $9 = $7;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   break;
  }
  $11 = $4;
  $12 = $7;
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11|0)==($13|0);
  $15 = $7;
  if ($14) {
   label = 4;
   break;
  }
  $16 = ((($15)) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
 }
 if ((label|0) == 4) {
  $3 = $15;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 $18 = $6;
 $7 = $18;
 while(1) {
  $19 = $7;
  $20 = ($19|0)!=(0|0);
  if (!($20)) {
   label = 11;
   break;
  }
  $21 = $4;
  $22 = $7;
  $23 = HEAP32[$22>>2]|0;
  $24 = ($21|0)==($23|0);
  $25 = $7;
  if ($24) {
   label = 9;
   break;
  }
  $26 = ((($25)) + 28|0);
  $27 = HEAP32[$26>>2]|0;
  $7 = $27;
 }
 if ((label|0) == 9) {
  $3 = $25;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 11) {
  $3 = 0;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _Type_Chromaticity_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp + 26|0;
 $11 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 HEAP32[$12>>2] = 0;
 $13 = $5;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__cmsMallocZero($15,72)|0);
 $9 = $16;
 $17 = $9;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $4 = 0;
  $84 = $4;
  STACKTOP = sp;return ($84|0);
 }
 $19 = $6;
 $20 = (__cmsReadUInt16Number($19,$10)|0);
 $21 = ($20|0)!=(0);
 do {
  if ($21) {
   $22 = HEAP16[$10>>1]|0;
   $23 = $22&65535;
   $24 = ($23|0)==(0);
   $25 = $8;
   $26 = ($25|0)==(32);
   $or$cond = $24 & $26;
   if ($or$cond) {
    $27 = $6;
    $28 = (__cmsReadUInt16Number($27,0)|0);
    $29 = ($28|0)!=(0);
    if (!($29)) {
     break;
    }
    $30 = $6;
    $31 = (__cmsReadUInt16Number($30,$10)|0);
    $32 = ($31|0)!=(0);
    if (!($32)) {
     break;
    }
   }
   $33 = HEAP16[$10>>1]|0;
   $34 = $33&65535;
   $35 = ($34|0)!=(3);
   if (!($35)) {
    $36 = $6;
    $37 = (__cmsReadUInt16Number($36,$11)|0);
    $38 = ($37|0)!=(0);
    if ($38) {
     $39 = $6;
     $40 = $9;
     $41 = (__cmsRead15Fixed16Number($39,$40)|0);
     $42 = ($41|0)!=(0);
     if ($42) {
      $43 = $6;
      $44 = $9;
      $45 = ((($44)) + 8|0);
      $46 = (__cmsRead15Fixed16Number($43,$45)|0);
      $47 = ($46|0)!=(0);
      if ($47) {
       $48 = $9;
       $49 = ((($48)) + 16|0);
       HEAPF64[$49>>3] = 1.0;
       $50 = $6;
       $51 = $9;
       $52 = ((($51)) + 24|0);
       $53 = (__cmsRead15Fixed16Number($50,$52)|0);
       $54 = ($53|0)!=(0);
       if ($54) {
        $55 = $6;
        $56 = $9;
        $57 = ((($56)) + 24|0);
        $58 = ((($57)) + 8|0);
        $59 = (__cmsRead15Fixed16Number($55,$58)|0);
        $60 = ($59|0)!=(0);
        if ($60) {
         $61 = $9;
         $62 = ((($61)) + 24|0);
         $63 = ((($62)) + 16|0);
         HEAPF64[$63>>3] = 1.0;
         $64 = $6;
         $65 = $9;
         $66 = ((($65)) + 48|0);
         $67 = (__cmsRead15Fixed16Number($64,$66)|0);
         $68 = ($67|0)!=(0);
         if ($68) {
          $69 = $6;
          $70 = $9;
          $71 = ((($70)) + 48|0);
          $72 = ((($71)) + 8|0);
          $73 = (__cmsRead15Fixed16Number($69,$72)|0);
          $74 = ($73|0)!=(0);
          if ($74) {
           $75 = $9;
           $76 = ((($75)) + 48|0);
           $77 = ((($76)) + 16|0);
           HEAPF64[$77>>3] = 1.0;
           $78 = $7;
           HEAP32[$78>>2] = 1;
           $79 = $9;
           $4 = $79;
           $84 = $4;
           STACKTOP = sp;return ($84|0);
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $80 = $5;
 $81 = ((($80)) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $9;
 __cmsFree($82,$83);
 $4 = 0;
 $84 = $4;
 STACKTOP = sp;return ($84|0);
}
function _Type_Chromaticity_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $6;
 $12 = (__cmsWriteUInt16Number($11,3)|0);
 $13 = ($12|0)!=(0);
 do {
  if ($13) {
   $14 = $6;
   $15 = (__cmsWriteUInt16Number($14,0)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    $4 = 0;
    break;
   }
   $17 = $9;
   $18 = +HEAPF64[$17>>3];
   $19 = $9;
   $20 = ((($19)) + 8|0);
   $21 = +HEAPF64[$20>>3];
   $22 = $6;
   $23 = (_SaveOneChromaticity($18,$21,$22)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    $4 = 0;
    break;
   }
   $25 = $9;
   $26 = ((($25)) + 24|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $9;
   $29 = ((($28)) + 24|0);
   $30 = ((($29)) + 8|0);
   $31 = +HEAPF64[$30>>3];
   $32 = $6;
   $33 = (_SaveOneChromaticity($27,$31,$32)|0);
   $34 = ($33|0)!=(0);
   if (!($34)) {
    $4 = 0;
    break;
   }
   $35 = $9;
   $36 = ((($35)) + 48|0);
   $37 = +HEAPF64[$36>>3];
   $38 = $9;
   $39 = ((($38)) + 48|0);
   $40 = ((($39)) + 8|0);
   $41 = +HEAPF64[$40>>3];
   $42 = $6;
   $43 = (_SaveOneChromaticity($37,$41,$42)|0);
   $44 = ($43|0)!=(0);
   if ($44) {
    $4 = 1;
    break;
   } else {
    $4 = 0;
    break;
   }
  } else {
   $4 = 0;
  }
 } while(0);
 $45 = $4;
 STACKTOP = sp;return ($45|0);
}
function _Type_Chromaticity_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (__cmsDupMem($8,$9,72)|0);
 STACKTOP = sp;return ($10|0);
}
function _Type_Chromaticity_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_ColorantOrderType_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 HEAP32[$11>>2] = 0;
 $12 = $6;
 $13 = (__cmsReadUInt32Number($12,$10)|0);
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $4 = 0;
  $39 = $4;
  STACKTOP = sp;return ($39|0);
 }
 $15 = HEAP32[$10>>2]|0;
 $16 = ($15>>>0)>(16);
 if ($16) {
  $4 = 0;
  $39 = $4;
  STACKTOP = sp;return ($39|0);
 }
 $17 = $5;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__cmsCalloc($19,16,1)|0);
 $9 = $20;
 $21 = $9;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $4 = 0;
  $39 = $4;
  STACKTOP = sp;return ($39|0);
 }
 $23 = $9;
 dest=$23; stop=dest+16|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $24 = $6;
 $25 = ((($24)) + 272|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $6;
 $28 = $9;
 $29 = HEAP32[$10>>2]|0;
 $30 = (FUNCTION_TABLE_iiiii[$26 & 511]($27,$28,1,$29)|0);
 $31 = HEAP32[$10>>2]|0;
 $32 = ($30|0)!=($31|0);
 if ($32) {
  $33 = $5;
  $34 = ((($33)) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $9;
  __cmsFree($35,$36);
  $4 = 0;
  $39 = $4;
  STACKTOP = sp;return ($39|0);
 } else {
  $37 = $7;
  HEAP32[$37>>2] = 1;
  $38 = $9;
  $4 = $38;
  $39 = $4;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _Type_ColorantOrderType_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $7;
 $9 = $13;
 $10 = 0;
 $12 = 0;
 while(1) {
  $14 = $10;
  $15 = ($14>>>0)<(16);
  if (!($15)) {
   break;
  }
  $16 = $9;
  $17 = $10;
  $18 = (($16) + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ($20|0)!=(255);
  if ($21) {
   $22 = $12;
   $23 = (($22) + 1)|0;
   $12 = $23;
  }
  $24 = $10;
  $25 = (($24) + 1)|0;
  $10 = $25;
 }
 $26 = $6;
 $27 = $12;
 $28 = (__cmsWriteUInt32Number($26,$27)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $4 = 0;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 }
 $30 = $12;
 $31 = $30;
 $11 = $31;
 $32 = $6;
 $33 = ((($32)) + 288|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $6;
 $36 = $11;
 $37 = $9;
 $38 = (FUNCTION_TABLE_iiii[$34 & 511]($35,$36,$37)|0);
 $39 = ($38|0)!=(0);
 if ($39) {
  $4 = 1;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 } else {
  $4 = 0;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _Type_ColorantOrderType_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (__cmsDupMem($8,$9,16)|0);
 STACKTOP = sp;return ($10|0);
}
function _Type_ColorantOrderType_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_S15Fixed16_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 HEAP32[$12>>2] = 0;
 $13 = $8;
 $14 = (($13>>>0) / 4)&-1;
 $11 = $14;
 $15 = $5;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $11;
 $19 = (__cmsCalloc($17,$18,8)|0);
 $9 = $19;
 $20 = $9;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $4 = 0;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 }
 $10 = 0;
 while(1) {
  $22 = $10;
  $23 = $11;
  $24 = ($22>>>0)<($23>>>0);
  if (!($24)) {
   label = 8;
   break;
  }
  $25 = $6;
  $26 = $9;
  $27 = $10;
  $28 = (($26) + ($27<<3)|0);
  $29 = (__cmsRead15Fixed16Number($25,$28)|0);
  $30 = ($29|0)!=(0);
  if (!($30)) {
   label = 6;
   break;
  }
  $35 = $10;
  $36 = (($35) + 1)|0;
  $10 = $36;
 }
 if ((label|0) == 6) {
  $31 = $5;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $9;
  __cmsFree($33,$34);
  $4 = 0;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 }
 else if ((label|0) == 8) {
  $37 = $11;
  $38 = $7;
  HEAP32[$38>>2] = $37;
  $39 = $9;
  $4 = $39;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _Type_S15Fixed16_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $9 = $11;
 $10 = 0;
 while(1) {
  $12 = $10;
  $13 = $8;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 6;
   break;
  }
  $15 = $6;
  $16 = $9;
  $17 = $10;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = (__cmsWrite15Fixed16Number($15,$19)|0);
  $21 = ($20|0)!=(0);
  if (!($21)) {
   label = 4;
   break;
  }
  $22 = $10;
  $23 = (($22) + 1)|0;
  $10 = $23;
 }
 if ((label|0) == 4) {
  $4 = 0;
  $24 = $4;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 6) {
  $4 = 1;
  $24 = $4;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _Type_S15Fixed16_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = $5;
 $11 = $10<<3;
 $12 = (__cmsDupMem($8,$9,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _Type_S15Fixed16_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_U16Fixed16_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $7;
 HEAP32[$13>>2] = 0;
 $14 = $8;
 $15 = (($14>>>0) / 4)&-1;
 $12 = $15;
 $16 = $5;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $12;
 $20 = (__cmsCalloc($18,$19,8)|0);
 $9 = $20;
 $21 = $9;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $4 = 0;
  $44 = $4;
  STACKTOP = sp;return ($44|0);
 }
 $11 = 0;
 while(1) {
  $23 = $11;
  $24 = $12;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   label = 8;
   break;
  }
  $26 = $6;
  $27 = (__cmsReadUInt32Number($26,$10)|0);
  $28 = ($27|0)!=(0);
  if (!($28)) {
   label = 6;
   break;
  }
  $33 = HEAP32[$10>>2]|0;
  $34 = (+($33>>>0));
  $35 = $34 / 65536.0;
  $36 = $9;
  $37 = $11;
  $38 = (($36) + ($37<<3)|0);
  HEAPF64[$38>>3] = $35;
  $39 = $11;
  $40 = (($39) + 1)|0;
  $11 = $40;
 }
 if ((label|0) == 6) {
  $29 = $5;
  $30 = ((($29)) + 20|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $9;
  __cmsFree($31,$32);
  $4 = 0;
  $44 = $4;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 8) {
  $41 = $12;
  $42 = $7;
  HEAP32[$42>>2] = $41;
  $43 = $9;
  $4 = $43;
  $44 = $4;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _Type_U16Fixed16_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $9 = $12;
 $10 = 0;
 while(1) {
  $13 = $10;
  $14 = $8;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   label = 6;
   break;
  }
  $16 = $9;
  $17 = $10;
  $18 = (($16) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $19 * 65536.0;
  $21 = $20 + 0.5;
  $22 = (+Math_floor((+$21)));
  $23 = (~~(($22))>>>0);
  $11 = $23;
  $24 = $6;
  $25 = $11;
  $26 = (__cmsWriteUInt32Number($24,$25)|0);
  $27 = ($26|0)!=(0);
  if (!($27)) {
   label = 4;
   break;
  }
  $28 = $10;
  $29 = (($28) + 1)|0;
  $10 = $29;
 }
 if ((label|0) == 4) {
  $4 = 0;
  $30 = $4;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 6) {
  $4 = 1;
  $30 = $4;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function _Type_U16Fixed16_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = $5;
 $11 = $10<<3;
 $12 = (__cmsDupMem($8,$9,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _Type_U16Fixed16_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_Text_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $11 = $5;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_cmsMLUalloc($13,1)|0);
 $10 = $14;
 $15 = $10;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $4 = 0;
  $59 = $4;
  STACKTOP = sp;return ($59|0);
 }
 $17 = $7;
 HEAP32[$17>>2] = 0;
 $18 = $8;
 $19 = ($18|0)==(-1);
 if (!($19)) {
  $20 = $5;
  $21 = ((($20)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $8;
  $24 = (($23) + 1)|0;
  $25 = (__cmsMalloc($22,$24)|0);
  $9 = $25;
  $26 = $9;
  $27 = ($26|0)==(0|0);
  if (!($27)) {
   $28 = $6;
   $29 = ((($28)) + 272|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $6;
   $32 = $9;
   $33 = $8;
   $34 = (FUNCTION_TABLE_iiiii[$30 & 511]($31,$32,1,$33)|0);
   $35 = $8;
   $36 = ($34|0)!=($35|0);
   if (!($36)) {
    $37 = $9;
    $38 = $8;
    $39 = (($37) + ($38)|0);
    HEAP8[$39>>0] = 0;
    $40 = $7;
    HEAP32[$40>>2] = 1;
    $41 = $10;
    $42 = $9;
    $43 = (_cmsMLUsetASCII($41,33104,33104,$42)|0);
    $44 = ($43|0)!=(0);
    if ($44) {
     $45 = $5;
     $46 = ((($45)) + 20|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $9;
     __cmsFree($47,$48);
     $49 = $10;
     $4 = $49;
     $59 = $4;
     STACKTOP = sp;return ($59|0);
    }
   }
  }
 }
 $50 = $10;
 $51 = ($50|0)!=(0|0);
 if ($51) {
  $52 = $10;
  _cmsMLUfree($52);
 }
 $53 = $9;
 $54 = ($53|0)!=(0|0);
 if ($54) {
  $55 = $5;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $9;
  __cmsFree($57,$58);
 }
 $4 = 0;
 $59 = $4;
 STACKTOP = sp;return ($59|0);
}
function _Type_Text_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $7;
 $9 = $13;
 $14 = $9;
 $15 = (_cmsMLUgetASCII($14,33104,33104,0,0)|0);
 $10 = $15;
 $16 = $10;
 $17 = ($16|0)==(0);
 if ($17) {
  $4 = 0;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 }
 $18 = $5;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $10;
 $22 = (__cmsMalloc($20,$21)|0);
 $12 = $22;
 $23 = $12;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $4 = 0;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 } else {
  $25 = $9;
  $26 = $12;
  $27 = $10;
  (_cmsMLUgetASCII($25,33104,33104,$26,$27)|0);
  $28 = $6;
  $29 = ((($28)) + 288|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $6;
  $32 = $10;
  $33 = $12;
  $34 = (FUNCTION_TABLE_iiii[$30 & 511]($31,$32,$33)|0);
  $11 = $34;
  $35 = $5;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $12;
  __cmsFree($37,$38);
  $39 = $11;
  $4 = $39;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _Type_Text_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsMLUdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_Text_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $4;
 _cmsMLUfree($6);
 STACKTOP = sp;return;
}
function _Type_Text_Description_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $11 = sp + 12|0;
 $13 = sp + 4|0;
 $14 = sp;
 $15 = sp + 46|0;
 $16 = sp + 44|0;
 $17 = sp + 48|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = 0;
 $18 = $7;
 HEAP32[$18>>2] = 0;
 $19 = $8;
 $20 = ($19>>>0)<(4);
 if ($20) {
  $4 = 0;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 $21 = $6;
 $22 = (__cmsReadUInt32Number($21,$11)|0);
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $4 = 0;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 $24 = $8;
 $25 = (($24) - 4)|0;
 $8 = $25;
 $26 = $8;
 $27 = HEAP32[$11>>2]|0;
 $28 = ($26>>>0)<($27>>>0);
 if ($28) {
  $4 = 0;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 $29 = $5;
 $30 = ((($29)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_cmsMLUalloc($31,1)|0);
 $10 = $32;
 $33 = $10;
 $34 = ($33|0)==(0|0);
 if ($34) {
  $4 = 0;
  $124 = $4;
  STACKTOP = sp;return ($124|0);
 }
 $35 = $5;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$11>>2]|0;
 $39 = (($38) + 1)|0;
 $40 = (__cmsMalloc($37,$39)|0);
 $9 = $40;
 $41 = $9;
 $42 = ($41|0)==(0|0);
 L17: do {
  if (!($42)) {
   $43 = $6;
   $44 = ((($43)) + 272|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $6;
   $47 = $9;
   $48 = HEAP32[$11>>2]|0;
   $49 = (FUNCTION_TABLE_iiiii[$45 & 511]($46,$47,1,$48)|0);
   $50 = HEAP32[$11>>2]|0;
   $51 = ($49|0)!=($50|0);
   if (!($51)) {
    $52 = HEAP32[$11>>2]|0;
    $53 = $8;
    $54 = (($53) - ($52))|0;
    $8 = $54;
    $55 = $9;
    $56 = HEAP32[$11>>2]|0;
    $57 = (($55) + ($56)|0);
    HEAP8[$57>>0] = 0;
    $58 = $10;
    $59 = $9;
    $60 = (_cmsMLUsetASCII($58,33104,33104,$59)|0);
    $61 = ($60|0)!=(0);
    if ($61) {
     $62 = $5;
     $63 = ((($62)) + 20|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $9;
     __cmsFree($64,$65);
     $9 = 0;
     $66 = $8;
     $67 = ($66>>>0)<(8);
     L21: do {
      if (!($67)) {
       $68 = $6;
       $69 = (__cmsReadUInt32Number($68,$13)|0);
       $70 = ($69|0)!=(0);
       if ($70) {
        $71 = $6;
        $72 = (__cmsReadUInt32Number($71,$14)|0);
        $73 = ($72|0)!=(0);
        if ($73) {
         $74 = $8;
         $75 = (($74) - 8)|0;
         $8 = $75;
         $76 = $8;
         $77 = HEAP32[$14>>2]|0;
         $78 = $77<<1;
         $79 = ($76>>>0)<($78>>>0);
         if (!($79)) {
          $12 = 0;
          while(1) {
           $80 = $12;
           $81 = HEAP32[$14>>2]|0;
           $82 = ($80>>>0)<($81>>>0);
           if (!($82)) {
            break;
           }
           $83 = $6;
           $84 = ((($83)) + 272|0);
           $85 = HEAP32[$84>>2]|0;
           $86 = $6;
           $87 = (FUNCTION_TABLE_iiiii[$85 & 511]($86,$16,2,1)|0);
           $88 = ($87|0)!=(0);
           if (!($88)) {
            break L21;
           }
           $89 = $12;
           $90 = (($89) + 1)|0;
           $12 = $90;
          }
          $91 = HEAP32[$14>>2]|0;
          $92 = $91<<1;
          $93 = $8;
          $94 = (($93) - ($92))|0;
          $8 = $94;
          $95 = $8;
          $96 = ($95>>>0)>=(70);
          if ($96) {
           $97 = $6;
           $98 = (__cmsReadUInt16Number($97,$15)|0);
           $99 = ($98|0)!=(0);
           if ($99) {
            $100 = $6;
            $101 = (__cmsReadUInt8Number($100,$17)|0);
            $102 = ($101|0)!=(0);
            if ($102) {
             $12 = 0;
             while(1) {
              $103 = $12;
              $104 = ($103>>>0)<(67);
              if (!($104)) {
               break L21;
              }
              $105 = $6;
              $106 = ((($105)) + 272|0);
              $107 = HEAP32[$106>>2]|0;
              $108 = $6;
              $109 = (FUNCTION_TABLE_iiiii[$107 & 511]($108,$16,1,1)|0);
              $110 = ($109|0)!=(0);
              if (!($110)) {
               break L17;
              }
              $111 = $12;
              $112 = (($111) + 1)|0;
              $12 = $112;
             }
            }
           }
          }
         }
        }
       }
      }
     } while(0);
     $113 = $7;
     HEAP32[$113>>2] = 1;
     $114 = $10;
     $4 = $114;
     $124 = $4;
     STACKTOP = sp;return ($124|0);
    }
   }
  }
 } while(0);
 $115 = $9;
 $116 = ($115|0)!=(0|0);
 if ($116) {
  $117 = $5;
  $118 = ((($117)) + 20|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $9;
  __cmsFree($119,$120);
 }
 $121 = $10;
 $122 = ($121|0)!=(0|0);
 if ($122) {
  $123 = $10;
  _cmsMLUfree($123);
 }
 $4 = 0;
 $124 = $4;
 STACKTOP = sp;return ($124|0);
}
function _Type_Text_Description_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $16 = sp + 48|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $17 = $6;
 $8 = $17;
 $9 = 0;
 $10 = 0;
 $15 = 0;
 dest=$16; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $18 = $8;
 $19 = (_cmsMLUgetASCII($18,33104,33104,0,0)|0);
 $11 = $19;
 $20 = $11;
 $21 = ($20>>>0)<=(0);
 $22 = $4;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 if ($21) {
  $25 = (__cmsDupMem($24,33107,1)|0);
  $9 = $25;
  $26 = $4;
  $27 = ((($26)) + 20|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (__cmsDupMem($28,32492,4)|0);
  $10 = $29;
  label = 6;
 } else {
  $30 = $11;
  $31 = (__cmsCalloc($24,$30,1)|0);
  $9 = $31;
  $32 = $9;
  $33 = ($32|0)==(0|0);
  if (!($33)) {
   $34 = $4;
   $35 = ((($34)) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $11;
   $38 = (__cmsCalloc($36,$37,4)|0);
   $10 = $38;
   $39 = $10;
   $40 = ($39|0)==(0|0);
   if (!($40)) {
    $41 = $8;
    $42 = $9;
    $43 = $11;
    $44 = $43;
    (_cmsMLUgetASCII($41,33104,33104,$42,$44)|0);
    $45 = $8;
    $46 = $10;
    $47 = $11;
    $48 = $47<<2;
    (_cmsMLUgetWide($45,33104,33104,$46,$48)|0);
    label = 6;
   }
  }
 }
 do {
  if ((label|0) == 6) {
   $49 = $9;
   $50 = (_strlen($49)|0);
   $51 = (($50) + 1)|0;
   $12 = $51;
   $52 = $12;
   $53 = (12 + ($52))|0;
   $54 = (($53) + 4)|0;
   $55 = (($54) + 4)|0;
   $56 = $12;
   $57 = $56<<1;
   $58 = (($55) + ($57))|0;
   $59 = (($58) + 2)|0;
   $60 = (($59) + 1)|0;
   $61 = (($60) + 67)|0;
   $13 = $61;
   $62 = $13;
   $63 = (($62) + 3)|0;
   $64 = $63 & -4;
   $14 = $64;
   $65 = $5;
   $66 = $12;
   $67 = (__cmsWriteUInt32Number($65,$66)|0);
   $68 = ($67|0)!=(0);
   if ($68) {
    $69 = $5;
    $70 = ((($69)) + 288|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $5;
    $73 = $12;
    $74 = $9;
    $75 = (FUNCTION_TABLE_iiii[$71 & 511]($72,$73,$74)|0);
    $76 = ($75|0)!=(0);
    if ($76) {
     $77 = $5;
     $78 = (__cmsWriteUInt32Number($77,0)|0);
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = $5;
      $81 = $12;
      $82 = (__cmsWriteUInt32Number($80,$81)|0);
      $83 = ($82|0)!=(0);
      if ($83) {
       $84 = $5;
       $85 = $12;
       $86 = $10;
       $87 = (__cmsWriteWCharArray($84,$85,$86)|0);
       $88 = ($87|0)!=(0);
       if ($88) {
        $89 = $5;
        $90 = (__cmsWriteUInt16Number($89,0)|0);
        $91 = ($90|0)!=(0);
        if ($91) {
         $92 = $5;
         $93 = (__cmsWriteUInt8Number($92,0)|0);
         $94 = ($93|0)!=(0);
         if ($94) {
          $95 = $5;
          $96 = ((($95)) + 288|0);
          $97 = HEAP32[$96>>2]|0;
          $98 = $5;
          $99 = (FUNCTION_TABLE_iiii[$97 & 511]($98,67,$16)|0);
          $100 = ($99|0)!=(0);
          if ($100) {
           $101 = $14;
           $102 = $13;
           $103 = (($101) - ($102))|0;
           $104 = ($103>>>0)>(0);
           if ($104) {
            $105 = $5;
            $106 = ((($105)) + 288|0);
            $107 = HEAP32[$106>>2]|0;
            $108 = $5;
            $109 = $14;
            $110 = $13;
            $111 = (($109) - ($110))|0;
            $112 = (FUNCTION_TABLE_iiii[$107 & 511]($108,$111,$16)|0);
            $113 = ($112|0)!=(0);
            if (!($113)) {
             break;
            }
           }
           $15 = 1;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $114 = $9;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = $4;
  $117 = ((($116)) + 20|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = $9;
  __cmsFree($118,$119);
 }
 $120 = $10;
 $121 = ($120|0)!=(0|0);
 if (!($121)) {
  $126 = $15;
  STACKTOP = sp;return ($126|0);
 }
 $122 = $4;
 $123 = ((($122)) + 20|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = $10;
 __cmsFree($124,$125);
 $126 = $15;
 STACKTOP = sp;return ($126|0);
}
function _Type_Text_Description_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsMLUdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_Text_Description_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $4;
 _cmsMLUfree($6);
 STACKTOP = sp;return;
}
function _Type_Curve_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 20|0;
 $11 = sp + 8|0;
 $12 = sp + 44|0;
 $13 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $7;
 HEAP32[$14>>2] = 0;
 $15 = $6;
 $16 = (__cmsReadUInt32Number($15,$9)|0);
 $17 = ($16|0)!=(0);
 L1: do {
  if ($17) {
   $18 = HEAP32[$9>>2]|0;
   switch ($18|0) {
   case 0:  {
    HEAPF64[$11>>3] = 1.0;
    $19 = $5;
    $20 = ((($19)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_cmsBuildParametricToneCurve($21,1,$11)|0);
    $10 = $22;
    $23 = $10;
    $24 = ($23|0)!=(0|0);
    if ($24) {
     $25 = $7;
     HEAP32[$25>>2] = 1;
     $26 = $10;
     $4 = $26;
     break L1;
    } else {
     $4 = 0;
     break L1;
    }
    break;
   }
   case 1:  {
    $27 = $6;
    $28 = (__cmsReadUInt16Number($27,$12)|0);
    $29 = ($28|0)!=(0);
    if ($29) {
     $30 = HEAP16[$12>>1]|0;
     $31 = (+__cms8Fixed8toDouble($30));
     HEAPF64[$13>>3] = $31;
     $32 = $7;
     HEAP32[$32>>2] = 1;
     $33 = $5;
     $34 = ((($33)) + 20|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (_cmsBuildParametricToneCurve($35,1,$13)|0);
     $4 = $36;
     break L1;
    } else {
     $4 = 0;
     break L1;
    }
    break;
   }
   default: {
    $37 = HEAP32[$9>>2]|0;
    $38 = ($37>>>0)>(32767);
    if ($38) {
     $4 = 0;
     break L1;
    }
    $39 = $5;
    $40 = ((($39)) + 20|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = HEAP32[$9>>2]|0;
    $43 = (_cmsBuildTabulatedToneCurve16($41,$42,0)|0);
    $10 = $43;
    $44 = $10;
    $45 = ($44|0)!=(0|0);
    if (!($45)) {
     $4 = 0;
     break L1;
    }
    $46 = $6;
    $47 = HEAP32[$9>>2]|0;
    $48 = $10;
    $49 = ((($48)) + 24|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (__cmsReadUInt16Array($46,$47,$50)|0);
    $52 = ($51|0)!=(0);
    if ($52) {
     $54 = $7;
     HEAP32[$54>>2] = 1;
     $55 = $10;
     $4 = $55;
     break L1;
    } else {
     $53 = $10;
     _cmsFreeToneCurve($53);
     $4 = 0;
     break L1;
    }
   }
   }
  } else {
   $4 = 0;
  }
 } while(0);
 $56 = $4;
 STACKTOP = sp;return ($56|0);
}
function _Type_Curve_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $9 = $11;
 $12 = $9;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(1);
 if ($15) {
  $16 = $9;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(1);
  if ($21) {
   $22 = $9;
   $23 = ((($22)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($24)) + 16|0);
   $26 = +HEAPF64[$25>>3];
   $27 = (__cmsDoubleTo8Fixed8($26)|0);
   $10 = $27;
   $28 = $6;
   $29 = (__cmsWriteUInt32Number($28,1)|0);
   $30 = ($29|0)!=(0);
   if (!($30)) {
    $4 = 0;
    $49 = $4;
    STACKTOP = sp;return ($49|0);
   }
   $31 = $6;
   $32 = $10;
   $33 = (__cmsWriteUInt16Number($31,$32)|0);
   $34 = ($33|0)!=(0);
   if ($34) {
    $4 = 1;
    $49 = $4;
    STACKTOP = sp;return ($49|0);
   } else {
    $4 = 0;
    $49 = $4;
    STACKTOP = sp;return ($49|0);
   }
  }
 }
 $35 = $6;
 $36 = $9;
 $37 = ((($36)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (__cmsWriteUInt32Number($35,$38)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $6;
  $42 = $9;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $9;
  $46 = ((($45)) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (__cmsWriteUInt16Array($41,$44,$47)|0);
  $4 = $48;
  $49 = $4;
  STACKTOP = sp;return ($49|0);
 } else {
  $4 = 0;
  $49 = $4;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _Type_Curve_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsDupToneCurve($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_Curve_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $4;
 _cmsFreeToneCurve($6);
 STACKTOP = sp;return;
}
function _Type_ParametricCurve_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer = sp + 80|0;
 $9 = sp;
 $10 = sp + 116|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = (__cmsReadUInt16Number($14,$10)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $4 = 0;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $17 = $6;
 $18 = (__cmsReadUInt16Number($17,0)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $4 = 0;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 $20 = HEAP16[$10>>1]|0;
 $21 = $20&65535;
 $22 = ($21|0)>(4);
 if ($22) {
  $23 = $5;
  $24 = ((($23)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP16[$10>>1]|0;
  $27 = $26&65535;
  HEAP32[$vararg_buffer>>2] = $27;
  _cmsSignalError($25,8,29465,$vararg_buffer);
  $4 = 0;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 dest=$9; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $28 = HEAP16[$10>>1]|0;
 $29 = $28&65535;
 $30 = (15972 + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $12 = $31;
 $11 = 0;
 while(1) {
  $32 = $11;
  $33 = $12;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   label = 12;
   break;
  }
  $35 = $6;
  $36 = $11;
  $37 = (($9) + ($36<<3)|0);
  $38 = (__cmsRead15Fixed16Number($35,$37)|0);
  $39 = ($38|0)!=(0);
  if (!($39)) {
   label = 10;
   break;
  }
  $40 = $11;
  $41 = (($40) + 1)|0;
  $11 = $41;
 }
 if ((label|0) == 10) {
  $4 = 0;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 else if ((label|0) == 12) {
  $42 = $5;
  $43 = ((($42)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP16[$10>>1]|0;
  $46 = $45&65535;
  $47 = (($46) + 1)|0;
  $48 = (_cmsBuildParametricToneCurve($44,$47,$9)|0);
  $13 = $48;
  $49 = $7;
  HEAP32[$49>>2] = 1;
  $50 = $13;
  $4 = $50;
  $51 = $4;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _Type_ParametricCurve_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $7;
 $9 = $13;
 $14 = $9;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $9;
 $20 = ((($19)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21>>>0)>(1);
 $23 = $12;
 $24 = ($23|0)<(1);
 $or$cond = $22 | $24;
 if ($or$cond) {
  $25 = $5;
  $26 = ((($25)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  _cmsSignalError($27,8,29375,$vararg_buffer);
  $4 = 0;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 $28 = $12;
 $29 = ($28|0)>(5);
 if ($29) {
  $30 = $5;
  $31 = ((($30)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  _cmsSignalError($32,8,29436,$vararg_buffer2);
  $4 = 0;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 $33 = $12;
 $34 = (15948 + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $11 = $35;
 $36 = $6;
 $37 = $9;
 $38 = ((($37)) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($39)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) - 1)|0;
 $43 = $42&65535;
 $44 = (__cmsWriteUInt16Number($36,$43)|0);
 $45 = ($44|0)!=(0);
 if (!($45)) {
  $4 = 0;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 $46 = $6;
 $47 = (__cmsWriteUInt16Number($46,0)|0);
 $48 = ($47|0)!=(0);
 if (!($48)) {
  $4 = 0;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 $10 = 0;
 while(1) {
  $49 = $10;
  $50 = $11;
  $51 = ($49|0)<($50|0);
  if (!($51)) {
   label = 14;
   break;
  }
  $52 = $6;
  $53 = $9;
  $54 = ((($53)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($55)) + 16|0);
  $57 = $10;
  $58 = (($56) + ($57<<3)|0);
  $59 = +HEAPF64[$58>>3];
  $60 = (__cmsWrite15Fixed16Number($52,$59)|0);
  $61 = ($60|0)!=(0);
  if (!($61)) {
   label = 12;
   break;
  }
  $62 = $10;
  $63 = (($62) + 1)|0;
  $10 = $63;
 }
 if ((label|0) == 12) {
  $4 = 0;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 14) {
  $4 = 1;
  $64 = $4;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function _Type_ParametricCurve_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsDupToneCurve($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_ParametricCurve_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $4;
 _cmsFreeToneCurve($6);
 STACKTOP = sp;return;
}
function _Type_DateTime_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 HEAP32[$11>>2] = 0;
 $12 = $5;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__cmsMalloc($14,44)|0);
 $10 = $15;
 $16 = $10;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $4 = 0;
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 $18 = $6;
 $19 = ((($18)) + 272|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $6;
 $22 = (FUNCTION_TABLE_iiiii[$20 & 511]($21,$9,12,1)|0);
 $23 = ($22|0)!=(1);
 if ($23) {
  $4 = 0;
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 } else {
  $24 = $10;
  __cmsDecodeDateTimeNumber($9,$24);
  $25 = $7;
  HEAP32[$25>>2] = 1;
  $26 = $10;
  $4 = $26;
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _Type_DateTime_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $9 = $11;
 $12 = $9;
 __cmsEncodeDateTimeNumber($10,$12);
 $13 = $6;
 $14 = ((($13)) + 288|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $6;
 $17 = (FUNCTION_TABLE_iiii[$15 & 511]($16,12,$10)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $4 = 1;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 } else {
  $4 = 0;
  $19 = $4;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _Type_DateTime_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (__cmsDupMem($8,$9,44)|0);
 STACKTOP = sp;return ($10|0);
}
function _Type_DateTime_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_LUT8_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $9 = sp + 118|0;
 $10 = sp + 117|0;
 $11 = sp + 116|0;
 $16 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = 0;
 $13 = 0;
 $19 = $7;
 HEAP32[$19>>2] = 0;
 $20 = $6;
 $21 = (__cmsReadUInt8Number($20,$9)|0);
 $22 = ($21|0)!=(0);
 L1: do {
  if ($22) {
   $23 = $6;
   $24 = (__cmsReadUInt8Number($23,$10)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $6;
    $27 = (__cmsReadUInt8Number($26,$11)|0);
    $28 = ($27|0)!=(0);
    if ($28) {
     $29 = HEAP8[$11>>0]|0;
     $30 = $29&255;
     $31 = ($30|0)==(1);
     if (!($31)) {
      $32 = $6;
      $33 = (__cmsReadUInt8Number($32,0)|0);
      $34 = ($33|0)!=(0);
      if ($34) {
       $35 = HEAP8[$9>>0]|0;
       $36 = $35&255;
       $37 = ($36|0)==(0);
       if (!($37)) {
        $38 = HEAP8[$9>>0]|0;
        $39 = $38&255;
        $40 = ($39|0)>(16);
        if (!($40)) {
         $41 = HEAP8[$10>>0]|0;
         $42 = $41&255;
         $43 = ($42|0)==(0);
         if (!($43)) {
          $44 = HEAP8[$10>>0]|0;
          $45 = $44&255;
          $46 = ($45|0)>(16);
          if (!($46)) {
           $47 = $5;
           $48 = ((($47)) + 20|0);
           $49 = HEAP32[$48>>2]|0;
           $50 = HEAP8[$9>>0]|0;
           $51 = $50&255;
           $52 = HEAP8[$10>>0]|0;
           $53 = $52&255;
           $54 = (_cmsPipelineAlloc($49,$51,$53)|0);
           $13 = $54;
           $55 = $13;
           $56 = ($55|0)==(0|0);
           if (!($56)) {
            $57 = $6;
            $58 = (__cmsRead15Fixed16Number($57,$16)|0);
            $59 = ($58|0)!=(0);
            if ($59) {
             $60 = $6;
             $61 = ((($16)) + 8|0);
             $62 = (__cmsRead15Fixed16Number($60,$61)|0);
             $63 = ($62|0)!=(0);
             if ($63) {
              $64 = $6;
              $65 = ((($16)) + 16|0);
              $66 = (__cmsRead15Fixed16Number($64,$65)|0);
              $67 = ($66|0)!=(0);
              if ($67) {
               $68 = $6;
               $69 = ((($16)) + 24|0);
               $70 = (__cmsRead15Fixed16Number($68,$69)|0);
               $71 = ($70|0)!=(0);
               if ($71) {
                $72 = $6;
                $73 = ((($16)) + 32|0);
                $74 = (__cmsRead15Fixed16Number($72,$73)|0);
                $75 = ($74|0)!=(0);
                if ($75) {
                 $76 = $6;
                 $77 = ((($16)) + 40|0);
                 $78 = (__cmsRead15Fixed16Number($76,$77)|0);
                 $79 = ($78|0)!=(0);
                 if ($79) {
                  $80 = $6;
                  $81 = ((($16)) + 48|0);
                  $82 = (__cmsRead15Fixed16Number($80,$81)|0);
                  $83 = ($82|0)!=(0);
                  if ($83) {
                   $84 = $6;
                   $85 = ((($16)) + 56|0);
                   $86 = (__cmsRead15Fixed16Number($84,$85)|0);
                   $87 = ($86|0)!=(0);
                   if ($87) {
                    $88 = $6;
                    $89 = ((($16)) + 64|0);
                    $90 = (__cmsRead15Fixed16Number($88,$89)|0);
                    $91 = ($90|0)!=(0);
                    if ($91) {
                     $92 = HEAP8[$9>>0]|0;
                     $93 = $92&255;
                     $94 = ($93|0)==(3);
                     do {
                      if ($94) {
                       $95 = (__cmsMAT3isIdentity($16)|0);
                       $96 = ($95|0)!=(0);
                       if ($96) {
                        break;
                       }
                       $97 = $13;
                       $98 = $5;
                       $99 = ((($98)) + 20|0);
                       $100 = HEAP32[$99>>2]|0;
                       $101 = (_cmsStageAllocMatrix($100,3,3,$16,0)|0);
                       $102 = (_cmsPipelineInsertStage($97,0,$101)|0);
                       $103 = ($102|0)!=(0);
                       if (!($103)) {
                        break L1;
                       }
                      }
                     } while(0);
                     $104 = $5;
                     $105 = ((($104)) + 20|0);
                     $106 = HEAP32[$105>>2]|0;
                     $107 = $6;
                     $108 = $13;
                     $109 = HEAP8[$9>>0]|0;
                     $110 = $109&255;
                     $111 = (_Read8bitTables($106,$107,$108,$110)|0);
                     $112 = ($111|0)!=(0);
                     if (!($112)) {
                      break;
                     }
                     $113 = HEAP8[$10>>0]|0;
                     $114 = $113&255;
                     $115 = HEAP8[$11>>0]|0;
                     $116 = $115&255;
                     $117 = HEAP8[$9>>0]|0;
                     $118 = $117&255;
                     $119 = (_uipow($114,$116,$118)|0);
                     $14 = $119;
                     $120 = $14;
                     $121 = ($120|0)==(-1);
                     if ($121) {
                      break;
                     }
                     $122 = $14;
                     $123 = ($122>>>0)>(0);
                     if ($123) {
                      $124 = $5;
                      $125 = ((($124)) + 20|0);
                      $126 = HEAP32[$125>>2]|0;
                      $127 = $14;
                      $128 = (__cmsCalloc($126,$127,2)|0);
                      $18 = $128;
                      $17 = $128;
                      $129 = $18;
                      $130 = ($129|0)==(0|0);
                      if ($130) {
                       break;
                      }
                      $131 = $5;
                      $132 = ((($131)) + 20|0);
                      $133 = HEAP32[$132>>2]|0;
                      $134 = $14;
                      $135 = (__cmsMalloc($133,$134)|0);
                      $12 = $135;
                      $136 = $12;
                      $137 = ($136|0)==(0|0);
                      if ($137) {
                       $138 = $5;
                       $139 = ((($138)) + 20|0);
                       $140 = HEAP32[$139>>2]|0;
                       $141 = $18;
                       __cmsFree($140,$141);
                       break;
                      }
                      $142 = $6;
                      $143 = ((($142)) + 272|0);
                      $144 = HEAP32[$143>>2]|0;
                      $145 = $6;
                      $146 = $12;
                      $147 = $14;
                      $148 = (FUNCTION_TABLE_iiiii[$144 & 511]($145,$146,$147,1)|0);
                      $149 = ($148|0)!=(1);
                      if ($149) {
                       $150 = $5;
                       $151 = ((($150)) + 20|0);
                       $152 = HEAP32[$151>>2]|0;
                       $153 = $18;
                       __cmsFree($152,$153);
                       $154 = $5;
                       $155 = ((($154)) + 20|0);
                       $156 = HEAP32[$155>>2]|0;
                       $157 = $12;
                       __cmsFree($156,$157);
                       break;
                      }
                      $15 = 0;
                      while(1) {
                       $158 = $15;
                       $159 = $14;
                       $160 = ($158>>>0)<($159>>>0);
                       if (!($160)) {
                        break;
                       }
                       $161 = $12;
                       $162 = $15;
                       $163 = (($161) + ($162)|0);
                       $164 = HEAP8[$163>>0]|0;
                       $165 = $164&255;
                       $166 = $165&65535;
                       $167 = $166 << 8;
                       $168 = $12;
                       $169 = $15;
                       $170 = (($168) + ($169)|0);
                       $171 = HEAP8[$170>>0]|0;
                       $172 = $171&255;
                       $173 = $167 | $172;
                       $174 = $173&65535;
                       $175 = $17;
                       $176 = ((($175)) + 2|0);
                       $17 = $176;
                       HEAP16[$175>>1] = $174;
                       $177 = $15;
                       $178 = (($177) + 1)|0;
                       $15 = $178;
                      }
                      $179 = $5;
                      $180 = ((($179)) + 20|0);
                      $181 = HEAP32[$180>>2]|0;
                      $182 = $12;
                      __cmsFree($181,$182);
                      $12 = 0;
                      $183 = $13;
                      $184 = $5;
                      $185 = ((($184)) + 20|0);
                      $186 = HEAP32[$185>>2]|0;
                      $187 = HEAP8[$11>>0]|0;
                      $188 = $187&255;
                      $189 = HEAP8[$9>>0]|0;
                      $190 = $189&255;
                      $191 = HEAP8[$10>>0]|0;
                      $192 = $191&255;
                      $193 = $18;
                      $194 = (_cmsStageAllocCLut16bit($186,$188,$190,$192,$193)|0);
                      $195 = (_cmsPipelineInsertStage($183,1,$194)|0);
                      $196 = ($195|0)!=(0);
                      $197 = $5;
                      $198 = ((($197)) + 20|0);
                      $199 = HEAP32[$198>>2]|0;
                      $200 = $18;
                      __cmsFree($199,$200);
                      if (!($196)) {
                       break;
                      }
                     }
                     $201 = $5;
                     $202 = ((($201)) + 20|0);
                     $203 = HEAP32[$202>>2]|0;
                     $204 = $6;
                     $205 = $13;
                     $206 = HEAP8[$10>>0]|0;
                     $207 = $206&255;
                     $208 = (_Read8bitTables($203,$204,$205,$207)|0);
                     $209 = ($208|0)!=(0);
                     if (!($209)) {
                      break;
                     }
                     $210 = $7;
                     HEAP32[$210>>2] = 1;
                     $211 = $13;
                     $4 = $211;
                     $215 = $4;
                     STACKTOP = sp;return ($215|0);
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $212 = $13;
 $213 = ($212|0)!=(0|0);
 if ($213) {
  $214 = $13;
  _cmsPipelineFree($214);
 }
 $4 = 0;
 $215 = $4;
 STACKTOP = sp;return ($215|0);
}
function _Type_LUT8_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = $7;
 $12 = $19;
 $14 = 0;
 $15 = 0;
 $16 = 0;
 $17 = 0;
 $20 = $12;
 $21 = HEAP32[$20>>2]|0;
 $13 = $21;
 $22 = $13;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(1835103334);
 if ($25) {
  $26 = $13;
  $27 = ((($26)) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $16 = $28;
  $29 = $13;
  $30 = ((($29)) + 36|0);
  $31 = HEAP32[$30>>2]|0;
  $13 = $31;
 }
 $32 = $13;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $13;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(1668707188);
  if ($37) {
   $38 = $13;
   $39 = ((($38)) + 32|0);
   $40 = HEAP32[$39>>2]|0;
   $14 = $40;
   $41 = $13;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $13 = $43;
  }
 }
 $44 = $13;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = $13;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(1668052340);
  if ($49) {
   $50 = $13;
   $51 = ((($50)) + 32|0);
   $52 = HEAP32[$51>>2]|0;
   $17 = $52;
   $53 = $13;
   $54 = ((($53)) + 36|0);
   $55 = HEAP32[$54>>2]|0;
   $13 = $55;
  }
 }
 $56 = $13;
 $57 = ($56|0)!=(0|0);
 if ($57) {
  $58 = $13;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(1668707188);
  if ($61) {
   $62 = $13;
   $63 = ((($62)) + 32|0);
   $64 = HEAP32[$63>>2]|0;
   $15 = $64;
   $65 = $13;
   $66 = ((($65)) + 36|0);
   $67 = HEAP32[$66>>2]|0;
   $13 = $67;
  }
 }
 $68 = $13;
 $69 = ($68|0)!=(0|0);
 L16: do {
  if ($69) {
   $70 = $13;
   $71 = HEAP32[$70>>2]|0;
   _cmsSignalError($71,8,29292,$vararg_buffer);
   $4 = 0;
  } else {
   $72 = $17;
   $73 = ($72|0)==(0|0);
   if ($73) {
    $18 = 0;
   } else {
    $74 = $17;
    $75 = ((($74)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($76)) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $18 = $78;
   }
   $79 = $6;
   $80 = $12;
   $81 = ((($80)) + 4|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $82&255;
   $84 = (__cmsWriteUInt8Number($79,$83)|0);
   $85 = ($84|0)!=(0);
   if (!($85)) {
    $4 = 0;
    break;
   }
   $86 = $6;
   $87 = $12;
   $88 = ((($87)) + 8|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $89&255;
   $91 = (__cmsWriteUInt8Number($86,$90)|0);
   $92 = ($91|0)!=(0);
   if (!($92)) {
    $4 = 0;
    break;
   }
   $93 = $6;
   $94 = $18;
   $95 = $94&255;
   $96 = (__cmsWriteUInt8Number($93,$95)|0);
   $97 = ($96|0)!=(0);
   if (!($97)) {
    $4 = 0;
    break;
   }
   $98 = $6;
   $99 = (__cmsWriteUInt8Number($98,0)|0);
   $100 = ($99|0)!=(0);
   if (!($100)) {
    $4 = 0;
    break;
   }
   $101 = $16;
   $102 = ($101|0)!=(0|0);
   $103 = $6;
   do {
    if ($102) {
     $104 = $16;
     $105 = HEAP32[$104>>2]|0;
     $106 = +HEAPF64[$105>>3];
     $107 = (__cmsWrite15Fixed16Number($103,$106)|0);
     $108 = ($107|0)!=(0);
     if (!($108)) {
      $4 = 0;
      break L16;
     }
     $109 = $6;
     $110 = $16;
     $111 = HEAP32[$110>>2]|0;
     $112 = ((($111)) + 8|0);
     $113 = +HEAPF64[$112>>3];
     $114 = (__cmsWrite15Fixed16Number($109,$113)|0);
     $115 = ($114|0)!=(0);
     if (!($115)) {
      $4 = 0;
      break L16;
     }
     $116 = $6;
     $117 = $16;
     $118 = HEAP32[$117>>2]|0;
     $119 = ((($118)) + 16|0);
     $120 = +HEAPF64[$119>>3];
     $121 = (__cmsWrite15Fixed16Number($116,$120)|0);
     $122 = ($121|0)!=(0);
     if (!($122)) {
      $4 = 0;
      break L16;
     }
     $123 = $6;
     $124 = $16;
     $125 = HEAP32[$124>>2]|0;
     $126 = ((($125)) + 24|0);
     $127 = +HEAPF64[$126>>3];
     $128 = (__cmsWrite15Fixed16Number($123,$127)|0);
     $129 = ($128|0)!=(0);
     if (!($129)) {
      $4 = 0;
      break L16;
     }
     $130 = $6;
     $131 = $16;
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 32|0);
     $134 = +HEAPF64[$133>>3];
     $135 = (__cmsWrite15Fixed16Number($130,$134)|0);
     $136 = ($135|0)!=(0);
     if (!($136)) {
      $4 = 0;
      break L16;
     }
     $137 = $6;
     $138 = $16;
     $139 = HEAP32[$138>>2]|0;
     $140 = ((($139)) + 40|0);
     $141 = +HEAPF64[$140>>3];
     $142 = (__cmsWrite15Fixed16Number($137,$141)|0);
     $143 = ($142|0)!=(0);
     if (!($143)) {
      $4 = 0;
      break L16;
     }
     $144 = $6;
     $145 = $16;
     $146 = HEAP32[$145>>2]|0;
     $147 = ((($146)) + 48|0);
     $148 = +HEAPF64[$147>>3];
     $149 = (__cmsWrite15Fixed16Number($144,$148)|0);
     $150 = ($149|0)!=(0);
     if (!($150)) {
      $4 = 0;
      break L16;
     }
     $151 = $6;
     $152 = $16;
     $153 = HEAP32[$152>>2]|0;
     $154 = ((($153)) + 56|0);
     $155 = +HEAPF64[$154>>3];
     $156 = (__cmsWrite15Fixed16Number($151,$155)|0);
     $157 = ($156|0)!=(0);
     if (!($157)) {
      $4 = 0;
      break L16;
     }
     $158 = $6;
     $159 = $16;
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($160)) + 64|0);
     $162 = +HEAPF64[$161>>3];
     $163 = (__cmsWrite15Fixed16Number($158,$162)|0);
     $164 = ($163|0)!=(0);
     if ($164) {
      break;
     }
     $4 = 0;
     break L16;
    } else {
     $165 = (__cmsWrite15Fixed16Number($103,1.0)|0);
     $166 = ($165|0)!=(0);
     if (!($166)) {
      $4 = 0;
      break L16;
     }
     $167 = $6;
     $168 = (__cmsWrite15Fixed16Number($167,0.0)|0);
     $169 = ($168|0)!=(0);
     if (!($169)) {
      $4 = 0;
      break L16;
     }
     $170 = $6;
     $171 = (__cmsWrite15Fixed16Number($170,0.0)|0);
     $172 = ($171|0)!=(0);
     if (!($172)) {
      $4 = 0;
      break L16;
     }
     $173 = $6;
     $174 = (__cmsWrite15Fixed16Number($173,0.0)|0);
     $175 = ($174|0)!=(0);
     if (!($175)) {
      $4 = 0;
      break L16;
     }
     $176 = $6;
     $177 = (__cmsWrite15Fixed16Number($176,1.0)|0);
     $178 = ($177|0)!=(0);
     if (!($178)) {
      $4 = 0;
      break L16;
     }
     $179 = $6;
     $180 = (__cmsWrite15Fixed16Number($179,0.0)|0);
     $181 = ($180|0)!=(0);
     if (!($181)) {
      $4 = 0;
      break L16;
     }
     $182 = $6;
     $183 = (__cmsWrite15Fixed16Number($182,0.0)|0);
     $184 = ($183|0)!=(0);
     if (!($184)) {
      $4 = 0;
      break L16;
     }
     $185 = $6;
     $186 = (__cmsWrite15Fixed16Number($185,0.0)|0);
     $187 = ($186|0)!=(0);
     if (!($187)) {
      $4 = 0;
      break L16;
     }
     $188 = $6;
     $189 = (__cmsWrite15Fixed16Number($188,1.0)|0);
     $190 = ($189|0)!=(0);
     if ($190) {
      break;
     }
     $4 = 0;
     break L16;
    }
   } while(0);
   $191 = $5;
   $192 = ((($191)) + 20|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = $6;
   $195 = $12;
   $196 = ((($195)) + 4|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $14;
   $199 = (_Write8bitTables($193,$194,$197,$198)|0);
   $200 = ($199|0)!=(0);
   if (!($200)) {
    $4 = 0;
    break;
   }
   $201 = $12;
   $202 = ((($201)) + 8|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = $18;
   $205 = $12;
   $206 = ((($205)) + 4|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (_uipow($203,$204,$207)|0);
   $10 = $208;
   $209 = $10;
   $210 = ($209|0)==(-1);
   if ($210) {
    $4 = 0;
    break;
   }
   $211 = $10;
   $212 = ($211>>>0)>(0);
   $213 = $17;
   $214 = ($213|0)!=(0|0);
   $or$cond = $212 & $214;
   L95: do {
    if ($or$cond) {
     $9 = 0;
     while(1) {
      $215 = $9;
      $216 = $10;
      $217 = ($215>>>0)<($216>>>0);
      if (!($217)) {
       break L95;
      }
      $218 = $17;
      $219 = HEAP32[$218>>2]|0;
      $220 = $9;
      $221 = (($219) + ($220<<1)|0);
      $222 = HEAP16[$221>>1]|0;
      $223 = $222&65535;
      $224 = ($223*65281)|0;
      $225 = (($224) + 8388608)|0;
      $226 = $225 >>> 24;
      $227 = $226 & 255;
      $228 = $227&255;
      $11 = $228;
      $229 = $6;
      $230 = $11;
      $231 = (__cmsWriteUInt8Number($229,$230)|0);
      $232 = ($231|0)!=(0);
      if (!($232)) {
       break;
      }
      $233 = $9;
      $234 = (($233) + 1)|0;
      $9 = $234;
     }
     $4 = 0;
     break L16;
    }
   } while(0);
   $235 = $5;
   $236 = ((($235)) + 20|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = $6;
   $239 = $12;
   $240 = ((($239)) + 8|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = $15;
   $243 = (_Write8bitTables($237,$238,$241,$242)|0);
   $244 = ($243|0)!=(0);
   if ($244) {
    $4 = 1;
    break;
   } else {
    $4 = 0;
    break;
   }
  }
 } while(0);
 $245 = $4;
 STACKTOP = sp;return ($245|0);
}
function _Type_LUT8_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsPipelineDup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_LUT8_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsPipelineFree($4);
 STACKTOP = sp;return;
}
function _Type_LUT16_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $9 = sp + 110|0;
 $10 = sp + 109|0;
 $11 = sp + 108|0;
 $14 = sp;
 $15 = sp + 106|0;
 $16 = sp + 104|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = 0;
 $18 = $7;
 HEAP32[$18>>2] = 0;
 $19 = $6;
 $20 = (__cmsReadUInt8Number($19,$9)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $4 = 0;
  $187 = $4;
  STACKTOP = sp;return ($187|0);
 }
 $22 = $6;
 $23 = (__cmsReadUInt8Number($22,$10)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $4 = 0;
  $187 = $4;
  STACKTOP = sp;return ($187|0);
 }
 $25 = $6;
 $26 = (__cmsReadUInt8Number($25,$11)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $4 = 0;
  $187 = $4;
  STACKTOP = sp;return ($187|0);
 }
 $28 = $6;
 $29 = (__cmsReadUInt8Number($28,0)|0);
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $4 = 0;
  $187 = $4;
  STACKTOP = sp;return ($187|0);
 }
 $31 = HEAP8[$9>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)==(0);
 L17: do {
  if (!($33)) {
   $34 = HEAP8[$9>>0]|0;
   $35 = $34&255;
   $36 = ($35|0)>(16);
   if (!($36)) {
    $37 = HEAP8[$10>>0]|0;
    $38 = $37&255;
    $39 = ($38|0)==(0);
    if (!($39)) {
     $40 = HEAP8[$10>>0]|0;
     $41 = $40&255;
     $42 = ($41|0)>(16);
     if (!($42)) {
      $43 = $5;
      $44 = ((($43)) + 20|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = HEAP8[$9>>0]|0;
      $47 = $46&255;
      $48 = HEAP8[$10>>0]|0;
      $49 = $48&255;
      $50 = (_cmsPipelineAlloc($45,$47,$49)|0);
      $12 = $50;
      $51 = $12;
      $52 = ($51|0)==(0|0);
      if (!($52)) {
       $53 = $6;
       $54 = (__cmsRead15Fixed16Number($53,$14)|0);
       $55 = ($54|0)!=(0);
       if ($55) {
        $56 = $6;
        $57 = ((($14)) + 8|0);
        $58 = (__cmsRead15Fixed16Number($56,$57)|0);
        $59 = ($58|0)!=(0);
        if ($59) {
         $60 = $6;
         $61 = ((($14)) + 16|0);
         $62 = (__cmsRead15Fixed16Number($60,$61)|0);
         $63 = ($62|0)!=(0);
         if ($63) {
          $64 = $6;
          $65 = ((($14)) + 24|0);
          $66 = (__cmsRead15Fixed16Number($64,$65)|0);
          $67 = ($66|0)!=(0);
          if ($67) {
           $68 = $6;
           $69 = ((($14)) + 32|0);
           $70 = (__cmsRead15Fixed16Number($68,$69)|0);
           $71 = ($70|0)!=(0);
           if ($71) {
            $72 = $6;
            $73 = ((($14)) + 40|0);
            $74 = (__cmsRead15Fixed16Number($72,$73)|0);
            $75 = ($74|0)!=(0);
            if ($75) {
             $76 = $6;
             $77 = ((($14)) + 48|0);
             $78 = (__cmsRead15Fixed16Number($76,$77)|0);
             $79 = ($78|0)!=(0);
             if ($79) {
              $80 = $6;
              $81 = ((($14)) + 56|0);
              $82 = (__cmsRead15Fixed16Number($80,$81)|0);
              $83 = ($82|0)!=(0);
              if ($83) {
               $84 = $6;
               $85 = ((($14)) + 64|0);
               $86 = (__cmsRead15Fixed16Number($84,$85)|0);
               $87 = ($86|0)!=(0);
               if ($87) {
                $88 = HEAP8[$9>>0]|0;
                $89 = $88&255;
                $90 = ($89|0)==(3);
                do {
                 if ($90) {
                  $91 = (__cmsMAT3isIdentity($14)|0);
                  $92 = ($91|0)!=(0);
                  if ($92) {
                   break;
                  }
                  $93 = $12;
                  $94 = $5;
                  $95 = ((($94)) + 20|0);
                  $96 = HEAP32[$95>>2]|0;
                  $97 = (_cmsStageAllocMatrix($96,3,3,$14,0)|0);
                  $98 = (_cmsPipelineInsertStage($93,1,$97)|0);
                  $99 = ($98|0)!=(0);
                  if (!($99)) {
                   break L17;
                  }
                 }
                } while(0);
                $100 = $6;
                $101 = (__cmsReadUInt16Number($100,$15)|0);
                $102 = ($101|0)!=(0);
                if (!($102)) {
                 break;
                }
                $103 = $6;
                $104 = (__cmsReadUInt16Number($103,$16)|0);
                $105 = ($104|0)!=(0);
                if (!($105)) {
                 break;
                }
                $106 = HEAP16[$15>>1]|0;
                $107 = $106&65535;
                $108 = ($107|0)>(32767);
                if ($108) {
                 break;
                }
                $109 = HEAP16[$16>>1]|0;
                $110 = $109&65535;
                $111 = ($110|0)>(32767);
                if ($111) {
                 break;
                }
                $112 = HEAP8[$11>>0]|0;
                $113 = $112&255;
                $114 = ($113|0)==(1);
                if ($114) {
                 break;
                }
                $115 = $5;
                $116 = ((($115)) + 20|0);
                $117 = HEAP32[$116>>2]|0;
                $118 = $6;
                $119 = $12;
                $120 = HEAP8[$9>>0]|0;
                $121 = $120&255;
                $122 = HEAP16[$15>>1]|0;
                $123 = $122&65535;
                $124 = (_Read16bitTables($117,$118,$119,$121,$123)|0);
                $125 = ($124|0)!=(0);
                if (!($125)) {
                 break;
                }
                $126 = HEAP8[$10>>0]|0;
                $127 = $126&255;
                $128 = HEAP8[$11>>0]|0;
                $129 = $128&255;
                $130 = HEAP8[$9>>0]|0;
                $131 = $130&255;
                $132 = (_uipow($127,$129,$131)|0);
                $13 = $132;
                $133 = $13;
                $134 = ($133|0)==(-1);
                if ($134) {
                 break;
                }
                $135 = $13;
                $136 = ($135>>>0)>(0);
                do {
                 if ($136) {
                  $137 = $5;
                  $138 = ((($137)) + 20|0);
                  $139 = HEAP32[$138>>2]|0;
                  $140 = $13;
                  $141 = (__cmsCalloc($139,$140,2)|0);
                  $17 = $141;
                  $142 = $17;
                  $143 = ($142|0)==(0|0);
                  if ($143) {
                   break L17;
                  }
                  $144 = $6;
                  $145 = $13;
                  $146 = $17;
                  $147 = (__cmsReadUInt16Array($144,$145,$146)|0);
                  $148 = ($147|0)!=(0);
                  if ($148) {
                   $153 = $12;
                   $154 = $5;
                   $155 = ((($154)) + 20|0);
                   $156 = HEAP32[$155>>2]|0;
                   $157 = HEAP8[$11>>0]|0;
                   $158 = $157&255;
                   $159 = HEAP8[$9>>0]|0;
                   $160 = $159&255;
                   $161 = HEAP8[$10>>0]|0;
                   $162 = $161&255;
                   $163 = $17;
                   $164 = (_cmsStageAllocCLut16bit($156,$158,$160,$162,$163)|0);
                   $165 = (_cmsPipelineInsertStage($153,1,$164)|0);
                   $166 = ($165|0)!=(0);
                   $167 = $5;
                   $168 = ((($167)) + 20|0);
                   $169 = HEAP32[$168>>2]|0;
                   $170 = $17;
                   __cmsFree($169,$170);
                   if ($166) {
                    break;
                   } else {
                    break L17;
                   }
                  } else {
                   $149 = $5;
                   $150 = ((($149)) + 20|0);
                   $151 = HEAP32[$150>>2]|0;
                   $152 = $17;
                   __cmsFree($151,$152);
                   break L17;
                  }
                 }
                } while(0);
                $171 = $5;
                $172 = ((($171)) + 20|0);
                $173 = HEAP32[$172>>2]|0;
                $174 = $6;
                $175 = $12;
                $176 = HEAP8[$10>>0]|0;
                $177 = $176&255;
                $178 = HEAP16[$16>>1]|0;
                $179 = $178&65535;
                $180 = (_Read16bitTables($173,$174,$175,$177,$179)|0);
                $181 = ($180|0)!=(0);
                if (!($181)) {
                 break;
                }
                $182 = $7;
                HEAP32[$182>>2] = 1;
                $183 = $12;
                $4 = $183;
                $187 = $4;
                STACKTOP = sp;return ($187|0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $184 = $12;
 $185 = ($184|0)!=(0|0);
 if ($185) {
  $186 = $12;
  _cmsPipelineFree($186);
 }
 $4 = 0;
 $187 = $4;
 STACKTOP = sp;return ($187|0);
}
function _Type_LUT16_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $20 = $7;
 $10 = $20;
 $12 = 0;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $21 = $10;
 $22 = HEAP32[$21>>2]|0;
 $11 = $22;
 $23 = $11;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $11;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(1835103334);
  if ($28) {
   $29 = $11;
   $30 = ((($29)) + 32|0);
   $31 = HEAP32[$30>>2]|0;
   $14 = $31;
   $32 = $11;
   $33 = ((($32)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $11 = $34;
  }
 }
 $35 = $11;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $11;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(1668707188);
  if ($40) {
   $41 = $11;
   $42 = ((($41)) + 32|0);
   $43 = HEAP32[$42>>2]|0;
   $12 = $43;
   $44 = $11;
   $45 = ((($44)) + 36|0);
   $46 = HEAP32[$45>>2]|0;
   $11 = $46;
  }
 }
 $47 = $11;
 $48 = ($47|0)!=(0|0);
 if ($48) {
  $49 = $11;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(1668052340);
  if ($52) {
   $53 = $11;
   $54 = ((($53)) + 32|0);
   $55 = HEAP32[$54>>2]|0;
   $15 = $55;
   $56 = $11;
   $57 = ((($56)) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   $11 = $58;
  }
 }
 $59 = $11;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = $11;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)==(1668707188);
  if ($64) {
   $65 = $11;
   $66 = ((($65)) + 32|0);
   $67 = HEAP32[$66>>2]|0;
   $13 = $67;
   $68 = $11;
   $69 = ((($68)) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $11 = $70;
  }
 }
 $71 = $11;
 $72 = ($71|0)!=(0|0);
 L17: do {
  if ($72) {
   $73 = $11;
   $74 = HEAP32[$73>>2]|0;
   _cmsSignalError($74,8,29211,$vararg_buffer);
   $4 = 0;
  } else {
   $75 = $10;
   $76 = (_cmsPipelineInputChannels($75)|0);
   $17 = $76;
   $77 = $10;
   $78 = (_cmsPipelineOutputChannels($77)|0);
   $18 = $78;
   $79 = $15;
   $80 = ($79|0)==(0|0);
   if ($80) {
    $19 = 0;
   } else {
    $81 = $15;
    $82 = ((($81)) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ((($83)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $19 = $85;
   }
   $86 = $6;
   $87 = $17;
   $88 = $87&255;
   $89 = (__cmsWriteUInt8Number($86,$88)|0);
   $90 = ($89|0)!=(0);
   if (!($90)) {
    $4 = 0;
    break;
   }
   $91 = $6;
   $92 = $18;
   $93 = $92&255;
   $94 = (__cmsWriteUInt8Number($91,$93)|0);
   $95 = ($94|0)!=(0);
   if (!($95)) {
    $4 = 0;
    break;
   }
   $96 = $6;
   $97 = $19;
   $98 = $97&255;
   $99 = (__cmsWriteUInt8Number($96,$98)|0);
   $100 = ($99|0)!=(0);
   if (!($100)) {
    $4 = 0;
    break;
   }
   $101 = $6;
   $102 = (__cmsWriteUInt8Number($101,0)|0);
   $103 = ($102|0)!=(0);
   if (!($103)) {
    $4 = 0;
    break;
   }
   $104 = $14;
   $105 = ($104|0)!=(0|0);
   $106 = $6;
   do {
    if ($105) {
     $107 = $14;
     $108 = HEAP32[$107>>2]|0;
     $109 = +HEAPF64[$108>>3];
     $110 = (__cmsWrite15Fixed16Number($106,$109)|0);
     $111 = ($110|0)!=(0);
     if (!($111)) {
      $4 = 0;
      break L17;
     }
     $112 = $6;
     $113 = $14;
     $114 = HEAP32[$113>>2]|0;
     $115 = ((($114)) + 8|0);
     $116 = +HEAPF64[$115>>3];
     $117 = (__cmsWrite15Fixed16Number($112,$116)|0);
     $118 = ($117|0)!=(0);
     if (!($118)) {
      $4 = 0;
      break L17;
     }
     $119 = $6;
     $120 = $14;
     $121 = HEAP32[$120>>2]|0;
     $122 = ((($121)) + 16|0);
     $123 = +HEAPF64[$122>>3];
     $124 = (__cmsWrite15Fixed16Number($119,$123)|0);
     $125 = ($124|0)!=(0);
     if (!($125)) {
      $4 = 0;
      break L17;
     }
     $126 = $6;
     $127 = $14;
     $128 = HEAP32[$127>>2]|0;
     $129 = ((($128)) + 24|0);
     $130 = +HEAPF64[$129>>3];
     $131 = (__cmsWrite15Fixed16Number($126,$130)|0);
     $132 = ($131|0)!=(0);
     if (!($132)) {
      $4 = 0;
      break L17;
     }
     $133 = $6;
     $134 = $14;
     $135 = HEAP32[$134>>2]|0;
     $136 = ((($135)) + 32|0);
     $137 = +HEAPF64[$136>>3];
     $138 = (__cmsWrite15Fixed16Number($133,$137)|0);
     $139 = ($138|0)!=(0);
     if (!($139)) {
      $4 = 0;
      break L17;
     }
     $140 = $6;
     $141 = $14;
     $142 = HEAP32[$141>>2]|0;
     $143 = ((($142)) + 40|0);
     $144 = +HEAPF64[$143>>3];
     $145 = (__cmsWrite15Fixed16Number($140,$144)|0);
     $146 = ($145|0)!=(0);
     if (!($146)) {
      $4 = 0;
      break L17;
     }
     $147 = $6;
     $148 = $14;
     $149 = HEAP32[$148>>2]|0;
     $150 = ((($149)) + 48|0);
     $151 = +HEAPF64[$150>>3];
     $152 = (__cmsWrite15Fixed16Number($147,$151)|0);
     $153 = ($152|0)!=(0);
     if (!($153)) {
      $4 = 0;
      break L17;
     }
     $154 = $6;
     $155 = $14;
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($156)) + 56|0);
     $158 = +HEAPF64[$157>>3];
     $159 = (__cmsWrite15Fixed16Number($154,$158)|0);
     $160 = ($159|0)!=(0);
     if (!($160)) {
      $4 = 0;
      break L17;
     }
     $161 = $6;
     $162 = $14;
     $163 = HEAP32[$162>>2]|0;
     $164 = ((($163)) + 64|0);
     $165 = +HEAPF64[$164>>3];
     $166 = (__cmsWrite15Fixed16Number($161,$165)|0);
     $167 = ($166|0)!=(0);
     if ($167) {
      break;
     }
     $4 = 0;
     break L17;
    } else {
     $168 = (__cmsWrite15Fixed16Number($106,1.0)|0);
     $169 = ($168|0)!=(0);
     if (!($169)) {
      $4 = 0;
      break L17;
     }
     $170 = $6;
     $171 = (__cmsWrite15Fixed16Number($170,0.0)|0);
     $172 = ($171|0)!=(0);
     if (!($172)) {
      $4 = 0;
      break L17;
     }
     $173 = $6;
     $174 = (__cmsWrite15Fixed16Number($173,0.0)|0);
     $175 = ($174|0)!=(0);
     if (!($175)) {
      $4 = 0;
      break L17;
     }
     $176 = $6;
     $177 = (__cmsWrite15Fixed16Number($176,0.0)|0);
     $178 = ($177|0)!=(0);
     if (!($178)) {
      $4 = 0;
      break L17;
     }
     $179 = $6;
     $180 = (__cmsWrite15Fixed16Number($179,1.0)|0);
     $181 = ($180|0)!=(0);
     if (!($181)) {
      $4 = 0;
      break L17;
     }
     $182 = $6;
     $183 = (__cmsWrite15Fixed16Number($182,0.0)|0);
     $184 = ($183|0)!=(0);
     if (!($184)) {
      $4 = 0;
      break L17;
     }
     $185 = $6;
     $186 = (__cmsWrite15Fixed16Number($185,0.0)|0);
     $187 = ($186|0)!=(0);
     if (!($187)) {
      $4 = 0;
      break L17;
     }
     $188 = $6;
     $189 = (__cmsWrite15Fixed16Number($188,0.0)|0);
     $190 = ($189|0)!=(0);
     if (!($190)) {
      $4 = 0;
      break L17;
     }
     $191 = $6;
     $192 = (__cmsWrite15Fixed16Number($191,1.0)|0);
     $193 = ($192|0)!=(0);
     if ($193) {
      break;
     }
     $4 = 0;
     break L17;
    }
   } while(0);
   $194 = $12;
   $195 = ($194|0)!=(0|0);
   $196 = $6;
   if ($195) {
    $197 = $12;
    $198 = ((($197)) + 4|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = HEAP32[$199>>2]|0;
    $201 = ((($200)) + 20|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = $202&65535;
    $204 = (__cmsWriteUInt16Number($196,$203)|0);
    $205 = ($204|0)!=(0);
    if (!($205)) {
     $4 = 0;
     break;
    }
   } else {
    $206 = (__cmsWriteUInt16Number($196,2)|0);
    $207 = ($206|0)!=(0);
    if (!($207)) {
     $4 = 0;
     break;
    }
   }
   $208 = $13;
   $209 = ($208|0)!=(0|0);
   $210 = $6;
   if ($209) {
    $211 = $13;
    $212 = ((($211)) + 4|0);
    $213 = HEAP32[$212>>2]|0;
    $214 = HEAP32[$213>>2]|0;
    $215 = ((($214)) + 20|0);
    $216 = HEAP32[$215>>2]|0;
    $217 = $216&65535;
    $218 = (__cmsWriteUInt16Number($210,$217)|0);
    $219 = ($218|0)!=(0);
    if (!($219)) {
     $4 = 0;
     break;
    }
   } else {
    $220 = (__cmsWriteUInt16Number($210,2)|0);
    $221 = ($220|0)!=(0);
    if (!($221)) {
     $4 = 0;
     break;
    }
   }
   $222 = $12;
   $223 = ($222|0)!=(0|0);
   L102: do {
    if ($223) {
     $224 = $5;
     $225 = ((($224)) + 20|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = $6;
     $228 = $12;
     $229 = (_Write16bitTables($226,$227,$228)|0);
     $230 = ($229|0)!=(0);
     if (!($230)) {
      $4 = 0;
      break L17;
     }
    } else {
     $16 = 0;
     while(1) {
      $231 = $16;
      $232 = $17;
      $233 = ($231>>>0)<($232>>>0);
      if (!($233)) {
       break L102;
      }
      $234 = $6;
      $235 = (__cmsWriteUInt16Number($234,0)|0);
      $236 = ($235|0)!=(0);
      if (!($236)) {
       label = 79;
       break;
      }
      $237 = $6;
      $238 = (__cmsWriteUInt16Number($237,-1)|0);
      $239 = ($238|0)!=(0);
      if (!($239)) {
       label = 81;
       break;
      }
      $240 = $16;
      $241 = (($240) + 1)|0;
      $16 = $241;
     }
     if ((label|0) == 79) {
      $4 = 0;
      break L17;
     }
     else if ((label|0) == 81) {
      $4 = 0;
      break L17;
     }
    }
   } while(0);
   $242 = $18;
   $243 = $19;
   $244 = $17;
   $245 = (_uipow($242,$243,$244)|0);
   $9 = $245;
   $246 = $9;
   $247 = ($246|0)==(-1);
   if ($247) {
    $4 = 0;
    break;
   }
   $248 = $9;
   $249 = ($248>>>0)>(0);
   $250 = $15;
   $251 = ($250|0)!=(0|0);
   $or$cond = $249 & $251;
   if ($or$cond) {
    $252 = $6;
    $253 = $9;
    $254 = $15;
    $255 = HEAP32[$254>>2]|0;
    $256 = (__cmsWriteUInt16Array($252,$253,$255)|0);
    $257 = ($256|0)!=(0);
    if (!($257)) {
     $4 = 0;
     break;
    }
   }
   $258 = $13;
   $259 = ($258|0)!=(0|0);
   L122: do {
    if ($259) {
     $260 = $5;
     $261 = ((($260)) + 20|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = $6;
     $264 = $13;
     $265 = (_Write16bitTables($262,$263,$264)|0);
     $266 = ($265|0)!=(0);
     if (!($266)) {
      $4 = 0;
      break L17;
     }
    } else {
     $16 = 0;
     while(1) {
      $267 = $16;
      $268 = $18;
      $269 = ($267>>>0)<($268>>>0);
      if (!($269)) {
       break L122;
      }
      $270 = $6;
      $271 = (__cmsWriteUInt16Number($270,0)|0);
      $272 = ($271|0)!=(0);
      if (!($272)) {
       label = 94;
       break;
      }
      $273 = $6;
      $274 = (__cmsWriteUInt16Number($273,-1)|0);
      $275 = ($274|0)!=(0);
      if (!($275)) {
       label = 96;
       break;
      }
      $276 = $16;
      $277 = (($276) + 1)|0;
      $16 = $277;
     }
     if ((label|0) == 94) {
      $4 = 0;
      break L17;
     }
     else if ((label|0) == 96) {
      $4 = 0;
      break L17;
     }
    }
   } while(0);
   $4 = 1;
  }
 } while(0);
 $278 = $4;
 STACKTOP = sp;return ($278|0);
}
function _Type_LUT16_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsPipelineDup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_LUT16_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsPipelineFree($4);
 STACKTOP = sp;return;
}
function _Type_ColorantTable_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $10 = sp + 8|0;
 $12 = sp + 42|0;
 $13 = sp + 36|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = (__cmsReadUInt32Number($14,$10)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $4 = 0;
  $46 = $4;
  STACKTOP = sp;return ($46|0);
 }
 $17 = HEAP32[$10>>2]|0;
 $18 = ($17>>>0)>(16);
 $19 = $5;
 $20 = ((($19)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$10>>2]|0;
 if ($18) {
  HEAP32[$vararg_buffer>>2] = $22;
  _cmsSignalError($21,2,29187,$vararg_buffer);
  $4 = 0;
  $46 = $4;
  STACKTOP = sp;return ($46|0);
 }
 $23 = (_cmsAllocNamedColorList($21,$22,0,33107,33107)|0);
 $11 = $23;
 $9 = 0;
 while(1) {
  $24 = $9;
  $25 = HEAP32[$10>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if (!($26)) {
   label = 11;
   break;
  }
  $27 = $6;
  $28 = ((($27)) + 272|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $6;
  $31 = (FUNCTION_TABLE_iiiii[$29 & 511]($30,$12,32,1)|0);
  $32 = ($31|0)!=(1);
  if ($32) {
   label = 12;
   break;
  }
  $33 = ((($12)) + 32|0);
  HEAP8[$33>>0] = 0;
  $34 = $6;
  $35 = (__cmsReadUInt16Array($34,3,$13)|0);
  $36 = ($35|0)!=(0);
  if (!($36)) {
   label = 12;
   break;
  }
  $37 = $11;
  $38 = (_cmsAppendNamedColor($37,$12,$13,0)|0);
  $39 = ($38|0)!=(0);
  if (!($39)) {
   label = 12;
   break;
  }
  $40 = $9;
  $41 = (($40) + 1)|0;
  $9 = $41;
 }
 if ((label|0) == 11) {
  $42 = $7;
  HEAP32[$42>>2] = 1;
  $43 = $11;
  $4 = $43;
  $46 = $4;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 12) {
  $44 = $7;
  HEAP32[$44>>2] = 0;
  $45 = $11;
  _cmsFreeNamedColorList($45);
  $4 = 0;
  $46 = $4;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _Type_ColorantTable_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $12 = sp + 40|0;
 $13 = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $7;
 $9 = $14;
 $15 = $9;
 $16 = (_cmsNamedColorCount($15)|0);
 $11 = $16;
 $17 = $6;
 $18 = $11;
 $19 = (__cmsWriteUInt32Number($17,$18)|0);
 $20 = ($19|0)!=(0);
 do {
  if ($20) {
   $10 = 0;
   while(1) {
    $21 = $10;
    $22 = $11;
    $23 = ($21>>>0)<($22>>>0);
    if (!($23)) {
     label = 12;
     break;
    }
    _memset(($12|0),0,256)|0;
    $24 = $9;
    $25 = $10;
    $26 = (_cmsNamedColorInfo($24,$25,$12,0,0,$13,0)|0);
    $27 = ($26|0)!=(0);
    if (!($27)) {
     label = 6;
     break;
    }
    $28 = ((($12)) + 32|0);
    HEAP8[$28>>0] = 0;
    $29 = $6;
    $30 = ((($29)) + 288|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $6;
    $33 = (FUNCTION_TABLE_iiii[$31 & 511]($32,32,$12)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 8;
     break;
    }
    $35 = $6;
    $36 = (__cmsWriteUInt16Array($35,3,$13)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     label = 10;
     break;
    }
    $38 = $10;
    $39 = (($38) + 1)|0;
    $10 = $39;
   }
   if ((label|0) == 6) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 8) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 10) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 12) {
    $4 = 1;
    break;
   }
  } else {
   $4 = 0;
  }
 } while(0);
 $40 = $4;
 STACKTOP = sp;return ($40|0);
}
function _Type_ColorantTable_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $6 = $7;
 $8 = $6;
 $9 = (_cmsDupNamedColorList($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _Type_ColorantTable_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsFreeNamedColorList($4);
 STACKTOP = sp;return;
}
function _Type_NamedColor_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 160|0;
 $13 = sp + 128|0;
 $16 = sp + 88|0;
 $17 = sp + 56|0;
 $18 = sp + 94|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = $7;
 HEAP32[$19>>2] = 0;
 $20 = $6;
 $21 = (__cmsReadUInt32Number($20,$9)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $4 = 0;
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 $23 = $6;
 $24 = (__cmsReadUInt32Number($23,$10)|0);
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $4 = 0;
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 $26 = $6;
 $27 = (__cmsReadUInt32Number($26,$11)|0);
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $4 = 0;
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 $29 = $6;
 $30 = ((($29)) + 272|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $6;
 $33 = (FUNCTION_TABLE_iiiii[$31 & 511]($32,$12,32,1)|0);
 $34 = ($33|0)!=(1);
 if ($34) {
  $4 = 0;
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 $35 = $6;
 $36 = ((($35)) + 272|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $6;
 $39 = (FUNCTION_TABLE_iiiii[$37 & 511]($38,$13,32,1)|0);
 $40 = ($39|0)!=(1);
 if ($40) {
  $4 = 0;
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 $41 = ((($13)) + 31|0);
 HEAP8[$41>>0] = 0;
 $42 = ((($12)) + 31|0);
 HEAP8[$42>>0] = 0;
 $43 = $5;
 $44 = ((($43)) + 20|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$10>>2]|0;
 $47 = HEAP32[$11>>2]|0;
 $48 = (_cmsAllocNamedColorList($45,$46,$47,$12,$13)|0);
 $14 = $48;
 $49 = $14;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $51 = $5;
  $52 = ((($51)) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$10>>2]|0;
  HEAP32[$vararg_buffer>>2] = $54;
  _cmsSignalError($53,2,29127,$vararg_buffer);
  $4 = 0;
  $86 = $4;
  STACKTOP = sp;return ($86|0);
 }
 $55 = HEAP32[$11>>2]|0;
 $56 = ($55>>>0)>(16);
 L25: do {
  if ($56) {
   $57 = $5;
   $58 = ((($57)) + 20|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$11>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $60;
   _cmsSignalError($59,2,29154,$vararg_buffer1);
  } else {
   $15 = 0;
   while(1) {
    $61 = $15;
    $62 = HEAP32[$10>>2]|0;
    $63 = ($61>>>0)<($62>>>0);
    if (!($63)) {
     break;
    }
    dest=$17; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
    $64 = $6;
    $65 = ((($64)) + 272|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $6;
    $68 = (FUNCTION_TABLE_iiiii[$66 & 511]($67,$18,32,1)|0);
    $69 = ($68|0)!=(1);
    if ($69) {
     break L25;
    }
    $70 = ((($18)) + 32|0);
    HEAP8[$70>>0] = 0;
    $71 = $6;
    $72 = (__cmsReadUInt16Array($71,3,$16)|0);
    $73 = ($72|0)!=(0);
    if (!($73)) {
     break L25;
    }
    $74 = $6;
    $75 = HEAP32[$11>>2]|0;
    $76 = (__cmsReadUInt16Array($74,$75,$17)|0);
    $77 = ($76|0)!=(0);
    if (!($77)) {
     break L25;
    }
    $78 = $14;
    $79 = (_cmsAppendNamedColor($78,$18,$16,$17)|0);
    $80 = ($79|0)!=(0);
    if (!($80)) {
     break L25;
    }
    $81 = $15;
    $82 = (($81) + 1)|0;
    $15 = $82;
   }
   $83 = $7;
   HEAP32[$83>>2] = 1;
   $84 = $14;
   $4 = $84;
   $86 = $4;
   STACKTOP = sp;return ($86|0);
  }
 } while(0);
 $85 = $14;
 _cmsFreeNamedColorList($85);
 $4 = 0;
 $86 = $4;
 STACKTOP = sp;return ($86|0);
}
function _Type_NamedColor_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $10 = sp + 361|0;
 $11 = sp + 328|0;
 $14 = sp + 64|0;
 $15 = sp + 32|0;
 $16 = sp + 72|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $17 = $7;
 $9 = $17;
 $18 = $9;
 $19 = (_cmsNamedColorCount($18)|0);
 $13 = $19;
 $20 = $6;
 $21 = (__cmsWriteUInt32Number($20,0)|0);
 $22 = ($21|0)!=(0);
 do {
  if ($22) {
   $23 = $6;
   $24 = $13;
   $25 = (__cmsWriteUInt32Number($23,$24)|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    $4 = 0;
    break;
   }
   $27 = $6;
   $28 = $9;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (__cmsWriteUInt32Number($27,$30)|0);
   $32 = ($31|0)!=(0);
   if (!($32)) {
    $4 = 0;
    break;
   }
   $33 = $9;
   $34 = ((($33)) + 12|0);
   (_strncpy($10,$34,32)|0);
   $35 = $9;
   $36 = ((($35)) + 45|0);
   (_strncpy($11,$36,32)|0);
   $37 = ((($10)) + 32|0);
   HEAP8[$37>>0] = 0;
   $38 = ((($11)) + 32|0);
   HEAP8[$38>>0] = 0;
   $39 = $6;
   $40 = ((($39)) + 288|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $6;
   $43 = (FUNCTION_TABLE_iiii[$41 & 511]($42,32,$10)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    $4 = 0;
    break;
   }
   $45 = $6;
   $46 = ((($45)) + 288|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $6;
   $49 = (FUNCTION_TABLE_iiii[$47 & 511]($48,32,$11)|0);
   $50 = ($49|0)!=(0);
   if (!($50)) {
    $4 = 0;
    break;
   }
   $12 = 0;
   while(1) {
    $51 = $12;
    $52 = $13;
    $53 = ($51>>>0)<($52>>>0);
    if (!($53)) {
     label = 22;
     break;
    }
    $54 = $9;
    $55 = $12;
    $56 = (_cmsNamedColorInfo($54,$55,$16,0,0,$14,$15)|0);
    $57 = ($56|0)!=(0);
    if (!($57)) {
     label = 14;
     break;
    }
    $58 = ((($16)) + 32|0);
    HEAP8[$58>>0] = 0;
    $59 = $6;
    $60 = ((($59)) + 288|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $6;
    $63 = (FUNCTION_TABLE_iiii[$61 & 511]($62,32,$16)|0);
    $64 = ($63|0)!=(0);
    if (!($64)) {
     label = 16;
     break;
    }
    $65 = $6;
    $66 = (__cmsWriteUInt16Array($65,3,$14)|0);
    $67 = ($66|0)!=(0);
    if (!($67)) {
     label = 18;
     break;
    }
    $68 = $6;
    $69 = $9;
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (__cmsWriteUInt16Array($68,$71,$15)|0);
    $73 = ($72|0)!=(0);
    if (!($73)) {
     label = 20;
     break;
    }
    $74 = $12;
    $75 = (($74) + 1)|0;
    $12 = $75;
   }
   if ((label|0) == 14) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 16) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 18) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 20) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 22) {
    $4 = 1;
    break;
   }
  } else {
   $4 = 0;
  }
 } while(0);
 $76 = $4;
 STACKTOP = sp;return ($76|0);
}
function _Type_NamedColor_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $6 = $7;
 $8 = $6;
 $9 = (_cmsDupNamedColorList($8)|0);
 STACKTOP = sp;return ($9|0);
}
function _Type_NamedColor_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsFreeNamedColorList($4);
 STACKTOP = sp;return;
}
function _Type_MLU_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $10 = sp + 44|0;
 $11 = sp + 40|0;
 $14 = sp + 28|0;
 $15 = sp + 24|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $21 = $7;
 HEAP32[$21>>2] = 0;
 $22 = $6;
 $23 = (__cmsReadUInt32Number($22,$10)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $4 = 0;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 $25 = $6;
 $26 = (__cmsReadUInt32Number($25,$11)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $4 = 0;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 $28 = HEAP32[$11>>2]|0;
 $29 = ($28|0)!=(12);
 $30 = $5;
 $31 = ((($30)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 if ($29) {
  _cmsSignalError($32,8,29070,$vararg_buffer);
  $4 = 0;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 $33 = HEAP32[$10>>2]|0;
 $34 = (_cmsMLUalloc($32,$33)|0);
 $9 = $34;
 $35 = $9;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $4 = 0;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 $37 = HEAP32[$10>>2]|0;
 $38 = $9;
 $39 = ((($38)) + 8|0);
 HEAP32[$39>>2] = $37;
 $40 = HEAP32[$10>>2]|0;
 $41 = ($40*12)|0;
 $42 = (($41) + 8)|0;
 $13 = $42;
 $20 = 0;
 $16 = 0;
 while(1) {
  $43 = $16;
  $44 = HEAP32[$10>>2]|0;
  $45 = ($43>>>0)<($44>>>0);
  if (!($45)) {
   label = 21;
   break;
  }
  $46 = $6;
  $47 = $9;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $16;
  $51 = (($49) + (($50*12)|0)|0);
  $52 = (__cmsReadUInt16Number($46,$51)|0);
  $53 = ($52|0)!=(0);
  if (!($53)) {
   break;
  }
  $54 = $6;
  $55 = $9;
  $56 = ((($55)) + 12|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $16;
  $59 = (($57) + (($58*12)|0)|0);
  $60 = ((($59)) + 2|0);
  $61 = (__cmsReadUInt16Number($54,$60)|0);
  $62 = ($61|0)!=(0);
  if (!($62)) {
   break;
  }
  $63 = $6;
  $64 = (__cmsReadUInt32Number($63,$14)|0);
  $65 = ($64|0)!=(0);
  if (!($65)) {
   break;
  }
  $66 = $6;
  $67 = (__cmsReadUInt32Number($66,$15)|0);
  $68 = ($67|0)!=(0);
  if (!($68)) {
   break;
  }
  $69 = HEAP32[$15>>2]|0;
  $70 = $13;
  $71 = (($70) + 8)|0;
  $72 = ($69>>>0)<($71>>>0);
  if ($72) {
   break;
  }
  $73 = HEAP32[$15>>2]|0;
  $74 = HEAP32[$14>>2]|0;
  $75 = (($73) + ($74))|0;
  $76 = HEAP32[$14>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   break;
  }
  $78 = HEAP32[$15>>2]|0;
  $79 = HEAP32[$14>>2]|0;
  $80 = (($78) + ($79))|0;
  $81 = $8;
  $82 = (($81) + 8)|0;
  $83 = ($80>>>0)>($82>>>0);
  if ($83) {
   break;
  }
  $84 = HEAP32[$15>>2]|0;
  $85 = $13;
  $86 = (($84) - ($85))|0;
  $87 = (($86) - 8)|0;
  $18 = $87;
  $88 = HEAP32[$14>>2]|0;
  $89 = $88<<2;
  $90 = (($89>>>0) / 2)&-1;
  $91 = $9;
  $92 = ((($91)) + 12|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $16;
  $95 = (($93) + (($94*12)|0)|0);
  $96 = ((($95)) + 8|0);
  HEAP32[$96>>2] = $90;
  $97 = $18;
  $98 = $97<<2;
  $99 = (($98>>>0) / 2)&-1;
  $100 = $9;
  $101 = ((($100)) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $16;
  $104 = (($102) + (($103*12)|0)|0);
  $105 = ((($104)) + 4|0);
  HEAP32[$105>>2] = $99;
  $106 = $18;
  $107 = HEAP32[$14>>2]|0;
  $108 = (($106) + ($107))|0;
  $19 = $108;
  $109 = $19;
  $110 = $20;
  $111 = ($109>>>0)>($110>>>0);
  if ($111) {
   $112 = $19;
   $20 = $112;
  }
  $113 = $16;
  $114 = (($113) + 1)|0;
  $16 = $114;
 }
 do {
  if ((label|0) == 21) {
   $115 = $20;
   $116 = $115<<2;
   $117 = (($116>>>0) / 2)&-1;
   $8 = $117;
   $118 = $8;
   $119 = ($118|0)==(0);
   if ($119) {
    $17 = 0;
    $12 = 0;
   } else {
    $120 = $5;
    $121 = ((($120)) + 20|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $8;
    $124 = (__cmsMalloc($122,$123)|0);
    $17 = $124;
    $125 = $17;
    $126 = ($125|0)==(0|0);
    if ($126) {
     break;
    }
    $127 = $8;
    $128 = (($127>>>0) / 4)&-1;
    $12 = $128;
    $129 = $6;
    $130 = $12;
    $131 = $17;
    $132 = (__cmsReadWCharArray($129,$130,$131)|0);
    $133 = ($132|0)!=(0);
    if (!($133)) {
     break;
    }
   }
   $134 = $17;
   $135 = $9;
   $136 = ((($135)) + 24|0);
   HEAP32[$136>>2] = $134;
   $137 = $8;
   $138 = $9;
   $139 = ((($138)) + 16|0);
   HEAP32[$139>>2] = $137;
   $140 = $8;
   $141 = $9;
   $142 = ((($141)) + 20|0);
   HEAP32[$142>>2] = $140;
   $143 = $7;
   HEAP32[$143>>2] = 1;
   $144 = $9;
   $4 = $144;
   $148 = $4;
   STACKTOP = sp;return ($148|0);
  }
 } while(0);
 $145 = $9;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = $9;
  _cmsMLUfree($147);
 }
 $4 = 0;
 $148 = $4;
 STACKTOP = sp;return ($148|0);
}
function _Type_MLU_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $7;
 $9 = $14;
 $15 = $7;
 $16 = ($15|0)==(0|0);
 $17 = $6;
 if ($16) {
  $18 = (__cmsWriteUInt32Number($17,0)|0);
  $19 = ($18|0)!=(0);
  if (!($19)) {
   $4 = 0;
   $103 = $4;
   STACKTOP = sp;return ($103|0);
  }
  $20 = $6;
  $21 = (__cmsWriteUInt32Number($20,12)|0);
  $22 = ($21|0)!=(0);
  if ($22) {
   $4 = 1;
   $103 = $4;
   STACKTOP = sp;return ($103|0);
  } else {
   $4 = 0;
   $103 = $4;
   STACKTOP = sp;return ($103|0);
  }
 }
 $23 = $9;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (__cmsWriteUInt32Number($17,$25)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $28 = $6;
 $29 = (__cmsWriteUInt32Number($28,12)|0);
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $31 = $9;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33*12)|0;
 $35 = (($34) + 8)|0;
 $10 = $35;
 $13 = 0;
 while(1) {
  $36 = $13;
  $37 = $9;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($36>>>0)<($39>>>0);
  if (!($40)) {
   label = 22;
   break;
  }
  $41 = $9;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $13;
  $45 = (($43) + (($44*12)|0)|0);
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $11 = $47;
  $48 = $9;
  $49 = ((($48)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $13;
  $52 = (($50) + (($51*12)|0)|0);
  $53 = ((($52)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $12 = $54;
  $55 = $11;
  $56 = $55<<1;
  $57 = (($56>>>0) / 4)&-1;
  $11 = $57;
  $58 = $12;
  $59 = $58<<1;
  $60 = (($59>>>0) / 4)&-1;
  $61 = $10;
  $62 = (($60) + ($61))|0;
  $63 = (($62) + 8)|0;
  $12 = $63;
  $64 = $6;
  $65 = $9;
  $66 = ((($65)) + 12|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $13;
  $69 = (($67) + (($68*12)|0)|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = (__cmsWriteUInt16Number($64,$70)|0);
  $72 = ($71|0)!=(0);
  if (!($72)) {
   label = 14;
   break;
  }
  $73 = $6;
  $74 = $9;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $13;
  $78 = (($76) + (($77*12)|0)|0);
  $79 = ((($78)) + 2|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = (__cmsWriteUInt16Number($73,$80)|0);
  $82 = ($81|0)!=(0);
  if (!($82)) {
   label = 16;
   break;
  }
  $83 = $6;
  $84 = $11;
  $85 = (__cmsWriteUInt32Number($83,$84)|0);
  $86 = ($85|0)!=(0);
  if (!($86)) {
   label = 18;
   break;
  }
  $87 = $6;
  $88 = $12;
  $89 = (__cmsWriteUInt32Number($87,$88)|0);
  $90 = ($89|0)!=(0);
  if (!($90)) {
   label = 20;
   break;
  }
  $91 = $13;
  $92 = (($91) + 1)|0;
  $13 = $92;
 }
 if ((label|0) == 14) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 else if ((label|0) == 16) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 else if ((label|0) == 18) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 else if ((label|0) == 20) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 else if ((label|0) == 22) {
  $93 = $6;
  $94 = $9;
  $95 = ((($94)) + 20|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96>>>0) / 4)&-1;
  $98 = $9;
  $99 = ((($98)) + 24|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (__cmsWriteWCharArray($93,$97,$100)|0);
  $102 = ($101|0)!=(0);
  if ($102) {
   $4 = 1;
   $103 = $4;
   STACKTOP = sp;return ($103|0);
  } else {
   $4 = 0;
   $103 = $4;
   STACKTOP = sp;return ($103|0);
  }
 }
 return (0)|0;
}
function _Type_MLU_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsMLUdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_MLU_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsMLUfree($4);
 STACKTOP = sp;return;
}
function _Type_ProfileSequenceDesc_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $7;
 HEAP32[$13>>2] = 0;
 $14 = $6;
 $15 = (__cmsReadUInt32Number($14,$11)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $4 = 0;
  $92 = $4;
  STACKTOP = sp;return ($92|0);
 }
 $17 = $8;
 $18 = ($17>>>0)<(4);
 if ($18) {
  $4 = 0;
  $92 = $4;
  STACKTOP = sp;return ($92|0);
 }
 $19 = $8;
 $20 = (($19) - 4)|0;
 $8 = $20;
 $21 = $5;
 $22 = ((($21)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$11>>2]|0;
 $25 = (_cmsAllocProfileSequenceDescription($23,$24)|0);
 $9 = $25;
 $26 = $9;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $4 = 0;
  $92 = $4;
  STACKTOP = sp;return ($92|0);
 }
 $28 = HEAP32[$11>>2]|0;
 $29 = $9;
 HEAP32[$29>>2] = $28;
 $10 = 0;
 while(1) {
  $30 = $10;
  $31 = HEAP32[$11>>2]|0;
  $32 = ($30>>>0)<($31>>>0);
  if (!($32)) {
   label = 16;
   break;
  }
  $33 = $9;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $10;
  $37 = (($35) + (($36*48)|0)|0);
  $12 = $37;
  $38 = $6;
  $39 = $12;
  $40 = (__cmsReadUInt32Number($38,$39)|0);
  $41 = ($40|0)==(0);
  $42 = $8;
  $43 = ($42>>>0)<(4);
  $or$cond = $41 | $43;
  if ($or$cond) {
   label = 17;
   break;
  }
  $44 = $8;
  $45 = (($44) - 4)|0;
  $8 = $45;
  $46 = $6;
  $47 = $12;
  $48 = ((($47)) + 4|0);
  $49 = (__cmsReadUInt32Number($46,$48)|0);
  $50 = ($49|0)==(0);
  $51 = $8;
  $52 = ($51>>>0)<(4);
  $or$cond3 = $50 | $52;
  if ($or$cond3) {
   label = 17;
   break;
  }
  $53 = $8;
  $54 = (($53) - 4)|0;
  $8 = $54;
  $55 = $6;
  $56 = $12;
  $57 = ((($56)) + 8|0);
  $58 = (__cmsReadUInt64Number($55,$57)|0);
  $59 = ($58|0)==(0);
  $60 = $8;
  $61 = ($60>>>0)<(8);
  $or$cond5 = $59 | $61;
  if ($or$cond5) {
   label = 17;
   break;
  }
  $62 = $8;
  $63 = (($62) - 8)|0;
  $8 = $63;
  $64 = $6;
  $65 = $12;
  $66 = ((($65)) + 16|0);
  $67 = (__cmsReadUInt32Number($64,$66)|0);
  $68 = ($67|0)==(0);
  $69 = $8;
  $70 = ($69>>>0)<(4);
  $or$cond7 = $68 | $70;
  if ($or$cond7) {
   label = 17;
   break;
  }
  $71 = $8;
  $72 = (($71) - 4)|0;
  $8 = $72;
  $73 = $5;
  $74 = $6;
  $75 = $12;
  $76 = ((($75)) + 36|0);
  $77 = $8;
  $78 = (_ReadEmbeddedText($73,$74,$76,$77)|0);
  $79 = ($78|0)!=(0);
  if (!($79)) {
   label = 17;
   break;
  }
  $80 = $5;
  $81 = $6;
  $82 = $12;
  $83 = ((($82)) + 40|0);
  $84 = $8;
  $85 = (_ReadEmbeddedText($80,$81,$83,$84)|0);
  $86 = ($85|0)!=(0);
  if (!($86)) {
   label = 17;
   break;
  }
  $87 = $10;
  $88 = (($87) + 1)|0;
  $10 = $88;
 }
 if ((label|0) == 16) {
  $89 = $7;
  HEAP32[$89>>2] = 1;
  $90 = $9;
  $4 = $90;
  $92 = $4;
  STACKTOP = sp;return ($92|0);
 }
 else if ((label|0) == 17) {
  $91 = $9;
  _cmsFreeProfileSequenceDescription($91);
  $4 = 0;
  $92 = $4;
  STACKTOP = sp;return ($92|0);
 }
 return (0)|0;
}
function _Type_ProfileSequenceDesc_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $9 = $12;
 $13 = $6;
 $14 = $9;
 $15 = HEAP32[$14>>2]|0;
 $16 = (__cmsWriteUInt32Number($13,$15)|0);
 $17 = ($16|0)!=(0);
 do {
  if ($17) {
   $10 = 0;
   while(1) {
    $18 = $10;
    $19 = $9;
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18>>>0)<($20>>>0);
    if (!($21)) {
     label = 18;
     break;
    }
    $22 = $9;
    $23 = ((($22)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $10;
    $26 = (($24) + (($25*48)|0)|0);
    $11 = $26;
    $27 = $6;
    $28 = $11;
    $29 = HEAP32[$28>>2]|0;
    $30 = (__cmsWriteUInt32Number($27,$29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     label = 6;
     break;
    }
    $32 = $6;
    $33 = $11;
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (__cmsWriteUInt32Number($32,$35)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     label = 8;
     break;
    }
    $38 = $6;
    $39 = $11;
    $40 = ((($39)) + 8|0);
    $41 = (__cmsWriteUInt64Number($38,$40)|0);
    $42 = ($41|0)!=(0);
    if (!($42)) {
     label = 10;
     break;
    }
    $43 = $6;
    $44 = $11;
    $45 = ((($44)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (__cmsWriteUInt32Number($43,$46)|0);
    $48 = ($47|0)!=(0);
    if (!($48)) {
     label = 12;
     break;
    }
    $49 = $5;
    $50 = $6;
    $51 = $11;
    $52 = ((($51)) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_SaveDescription($49,$50,$53)|0);
    $55 = ($54|0)!=(0);
    if (!($55)) {
     label = 14;
     break;
    }
    $56 = $5;
    $57 = $6;
    $58 = $11;
    $59 = ((($58)) + 40|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (_SaveDescription($56,$57,$60)|0);
    $62 = ($61|0)!=(0);
    if (!($62)) {
     label = 16;
     break;
    }
    $63 = $10;
    $64 = (($63) + 1)|0;
    $10 = $64;
   }
   if ((label|0) == 6) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 8) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 10) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 12) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 14) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 16) {
    $4 = 0;
    break;
   }
   else if ((label|0) == 18) {
    $4 = 1;
    break;
   }
  } else {
   $4 = 0;
  }
 } while(0);
 $65 = $4;
 STACKTOP = sp;return ($65|0);
}
function _Type_ProfileSequenceDesc_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsDupProfileSequenceDescription($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_ProfileSequenceDesc_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsFreeProfileSequenceDescription($4);
 STACKTOP = sp;return;
}
function _Type_Signature_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $5;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__cmsMalloc($12,4)|0);
 $9 = $13;
 $14 = $9;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   $4 = 0;
  } else {
   $16 = $6;
   $17 = $9;
   $18 = (__cmsReadUInt32Number($16,$17)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $7;
    HEAP32[$20>>2] = 1;
    $21 = $9;
    $4 = $21;
    break;
   } else {
    $4 = 0;
    break;
   }
  }
 } while(0);
 $22 = $4;
 STACKTOP = sp;return ($22|0);
}
function _Type_Signature_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $6;
 $8 = $9;
 $10 = $5;
 $11 = $8;
 $12 = HEAP32[$11>>2]|0;
 $13 = (__cmsWriteUInt32Number($10,$12)|0);
 STACKTOP = sp;return ($13|0);
}
function _Type_Signature_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = $5;
 $11 = $10<<2;
 $12 = (__cmsDupMem($8,$9,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function _Type_Signature_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_Measurement_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $9 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 dest=$9; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $10 = $6;
 $11 = (__cmsReadUInt32Number($10,$9)|0);
 $12 = ($11|0)!=(0);
 do {
  if ($12) {
   $13 = $6;
   $14 = ((($9)) + 8|0);
   $15 = (__cmsReadXYZNumber($13,$14)|0);
   $16 = ($15|0)!=(0);
   if (!($16)) {
    $4 = 0;
    break;
   }
   $17 = $6;
   $18 = ((($9)) + 32|0);
   $19 = (__cmsReadUInt32Number($17,$18)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    $4 = 0;
    break;
   }
   $21 = $6;
   $22 = ((($9)) + 40|0);
   $23 = (__cmsRead15Fixed16Number($21,$22)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    $4 = 0;
    break;
   }
   $25 = $6;
   $26 = ((($9)) + 48|0);
   $27 = (__cmsReadUInt32Number($25,$26)|0);
   $28 = ($27|0)!=(0);
   if ($28) {
    $29 = $7;
    HEAP32[$29>>2] = 1;
    $30 = $5;
    $31 = ((($30)) + 20|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (__cmsDupMem($32,$9,56)|0);
    $4 = $33;
    break;
   } else {
    $4 = 0;
    break;
   }
  } else {
   $4 = 0;
  }
 } while(0);
 $34 = $4;
 STACKTOP = sp;return ($34|0);
}
function _Type_Measurement_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $6;
 $12 = $9;
 $13 = HEAP32[$12>>2]|0;
 $14 = (__cmsWriteUInt32Number($11,$13)|0);
 $15 = ($14|0)!=(0);
 do {
  if ($15) {
   $16 = $6;
   $17 = $9;
   $18 = ((($17)) + 8|0);
   $19 = (__cmsWriteXYZNumber($16,$18)|0);
   $20 = ($19|0)!=(0);
   if (!($20)) {
    $4 = 0;
    break;
   }
   $21 = $6;
   $22 = $9;
   $23 = ((($22)) + 32|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (__cmsWriteUInt32Number($21,$24)|0);
   $26 = ($25|0)!=(0);
   if (!($26)) {
    $4 = 0;
    break;
   }
   $27 = $6;
   $28 = $9;
   $29 = ((($28)) + 40|0);
   $30 = +HEAPF64[$29>>3];
   $31 = (__cmsWrite15Fixed16Number($27,$30)|0);
   $32 = ($31|0)!=(0);
   if (!($32)) {
    $4 = 0;
    break;
   }
   $33 = $6;
   $34 = $9;
   $35 = ((($34)) + 48|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (__cmsWriteUInt32Number($33,$36)|0);
   $38 = ($37|0)!=(0);
   if ($38) {
    $4 = 1;
    break;
   } else {
    $4 = 0;
    break;
   }
  } else {
   $4 = 0;
  }
 } while(0);
 $39 = $4;
 STACKTOP = sp;return ($39|0);
}
function _Type_Measurement_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (__cmsDupMem($8,$9,56)|0);
 STACKTOP = sp;return ($10|0);
}
function _Type_Measurement_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_Data_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 HEAP32[$11>>2] = 0;
 $12 = $8;
 $13 = ($12>>>0)<(4);
 if ($13) {
  $4 = 0;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 $14 = $8;
 $15 = (($14) - 4)|0;
 $10 = $15;
 $16 = $10;
 $17 = ($16>>>0)>(2147483647);
 if ($17) {
  $4 = 0;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 $18 = $5;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $10;
 $22 = (12 + ($21))|0;
 $23 = (($22) - 1)|0;
 $24 = (__cmsMalloc($20,$23)|0);
 $9 = $24;
 $25 = $9;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $4 = 0;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 $27 = $10;
 $28 = $9;
 HEAP32[$28>>2] = $27;
 $29 = $6;
 $30 = $9;
 $31 = ((($30)) + 4|0);
 $32 = (__cmsReadUInt32Number($29,$31)|0);
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $34 = $5;
  $35 = ((($34)) + 20|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $9;
  __cmsFree($36,$37);
  $4 = 0;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 $38 = $6;
 $39 = ((($38)) + 272|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $6;
 $42 = $9;
 $43 = ((($42)) + 8|0);
 $44 = $10;
 $45 = (FUNCTION_TABLE_iiiii[$40 & 511]($41,$43,1,$44)|0);
 $46 = $10;
 $47 = ($45|0)!=($46|0);
 if ($47) {
  $48 = $5;
  $49 = ((($48)) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $9;
  __cmsFree($50,$51);
  $4 = 0;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 } else {
  $52 = $7;
  HEAP32[$52>>2] = 1;
  $53 = $9;
  $4 = $53;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function _Type_Data_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $6;
 $12 = $9;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__cmsWriteUInt32Number($11,$14)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $6;
  $18 = ((($17)) + 288|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $6;
  $21 = $9;
  $22 = HEAP32[$21>>2]|0;
  $23 = $9;
  $24 = ((($23)) + 8|0);
  $25 = (FUNCTION_TABLE_iiii[$19 & 511]($20,$22,$24)|0);
  $4 = $25;
  $26 = $4;
  STACKTOP = sp;return ($26|0);
 } else {
  $4 = 0;
  $26 = $4;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _Type_Data_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $6 = $7;
 $8 = $3;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $6;
 $13 = HEAP32[$12>>2]|0;
 $14 = (12 + ($13))|0;
 $15 = (($14) - 1)|0;
 $16 = (__cmsDupMem($10,$11,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function _Type_Data_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_LUTA2B_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 49|0;
 $11 = sp + 48|0;
 $12 = sp + 20|0;
 $13 = sp + 16|0;
 $14 = sp + 12|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $17 = 0;
 $18 = $6;
 $19 = ((($18)) + 284|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $6;
 $22 = (FUNCTION_TABLE_ii[$20 & 511]($21)|0);
 $23 = (($22) - 8)|0;
 $9 = $23;
 $24 = $6;
 $25 = (__cmsReadUInt8Number($24,$10)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $27 = $6;
 $28 = (__cmsReadUInt8Number($27,$11)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $30 = $6;
 $31 = (__cmsReadUInt16Number($30,0)|0);
 $32 = ($31|0)!=(0);
 if (!($32)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $33 = $6;
 $34 = (__cmsReadUInt32Number($33,$12)|0);
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $36 = $6;
 $37 = (__cmsReadUInt32Number($36,$13)|0);
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $39 = $6;
 $40 = (__cmsReadUInt32Number($39,$14)|0);
 $41 = ($40|0)!=(0);
 if (!($41)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $42 = $6;
 $43 = (__cmsReadUInt32Number($42,$15)|0);
 $44 = ($43|0)!=(0);
 if (!($44)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $45 = $6;
 $46 = (__cmsReadUInt32Number($45,$16)|0);
 $47 = ($46|0)!=(0);
 if (!($47)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $48 = HEAP8[$10>>0]|0;
 $49 = $48&255;
 $50 = ($49|0)==(0);
 if (!($50)) {
  $51 = HEAP8[$10>>0]|0;
  $52 = $51&255;
  $53 = ($52|0)>=(16);
  if (!($53)) {
   $54 = HEAP8[$11>>0]|0;
   $55 = $54&255;
   $56 = ($55|0)==(0);
   if (!($56)) {
    $57 = HEAP8[$11>>0]|0;
    $58 = $57&255;
    $59 = ($58|0)>=(16);
    if (!($59)) {
     $60 = $5;
     $61 = ((($60)) + 20|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = HEAP8[$10>>0]|0;
     $64 = $63&255;
     $65 = HEAP8[$11>>0]|0;
     $66 = $65&255;
     $67 = (_cmsPipelineAlloc($62,$64,$66)|0);
     $17 = $67;
     $68 = $17;
     $69 = ($68|0)==(0|0);
     if ($69) {
      $4 = 0;
      $138 = $4;
      STACKTOP = sp;return ($138|0);
     }
     $70 = HEAP32[$16>>2]|0;
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = $17;
      $73 = $5;
      $74 = $6;
      $75 = $9;
      $76 = HEAP32[$16>>2]|0;
      $77 = (($75) + ($76))|0;
      $78 = HEAP8[$10>>0]|0;
      $79 = $78&255;
      $80 = (_ReadSetOfCurves($73,$74,$77,$79)|0);
      $81 = (_cmsPipelineInsertStage($72,1,$80)|0);
      $82 = ($81|0)!=(0);
      if ($82) {
       label = 27;
      }
     } else {
      label = 27;
     }
     do {
      if ((label|0) == 27) {
       $83 = HEAP32[$15>>2]|0;
       $84 = ($83|0)!=(0);
       if ($84) {
        $85 = $17;
        $86 = $5;
        $87 = $6;
        $88 = $9;
        $89 = HEAP32[$15>>2]|0;
        $90 = (($88) + ($89))|0;
        $91 = HEAP8[$10>>0]|0;
        $92 = $91&255;
        $93 = HEAP8[$11>>0]|0;
        $94 = $93&255;
        $95 = (_ReadCLUT($86,$87,$90,$92,$94)|0);
        $96 = (_cmsPipelineInsertStage($85,1,$95)|0);
        $97 = ($96|0)!=(0);
        if (!($97)) {
         break;
        }
       }
       $98 = HEAP32[$14>>2]|0;
       $99 = ($98|0)!=(0);
       if ($99) {
        $100 = $17;
        $101 = $5;
        $102 = $6;
        $103 = $9;
        $104 = HEAP32[$14>>2]|0;
        $105 = (($103) + ($104))|0;
        $106 = HEAP8[$11>>0]|0;
        $107 = $106&255;
        $108 = (_ReadSetOfCurves($101,$102,$105,$107)|0);
        $109 = (_cmsPipelineInsertStage($100,1,$108)|0);
        $110 = ($109|0)!=(0);
        if (!($110)) {
         break;
        }
       }
       $111 = HEAP32[$13>>2]|0;
       $112 = ($111|0)!=(0);
       if ($112) {
        $113 = $17;
        $114 = $5;
        $115 = $6;
        $116 = $9;
        $117 = HEAP32[$13>>2]|0;
        $118 = (($116) + ($117))|0;
        $119 = (_ReadMatrix($114,$115,$118)|0);
        $120 = (_cmsPipelineInsertStage($113,1,$119)|0);
        $121 = ($120|0)!=(0);
        if (!($121)) {
         break;
        }
       }
       $122 = HEAP32[$12>>2]|0;
       $123 = ($122|0)!=(0);
       if ($123) {
        $124 = $17;
        $125 = $5;
        $126 = $6;
        $127 = $9;
        $128 = HEAP32[$12>>2]|0;
        $129 = (($127) + ($128))|0;
        $130 = HEAP8[$11>>0]|0;
        $131 = $130&255;
        $132 = (_ReadSetOfCurves($125,$126,$129,$131)|0);
        $133 = (_cmsPipelineInsertStage($124,1,$132)|0);
        $134 = ($133|0)!=(0);
        if (!($134)) {
         break;
        }
       }
       $135 = $7;
       HEAP32[$135>>2] = 1;
       $136 = $17;
       $4 = $136;
       $138 = $4;
       STACKTOP = sp;return ($138|0);
      }
     } while(0);
     $137 = $17;
     _cmsPipelineFree($137);
     $4 = 0;
     $138 = $4;
     STACKTOP = sp;return ($138|0);
    }
   }
   $4 = 0;
   $138 = $4;
   STACKTOP = sp;return ($138|0);
  }
 }
 $4 = 0;
 $138 = $4;
 STACKTOP = sp;return ($138|0);
}
function _Type_LUTA2B_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0;
 var $vararg_buffer10 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer30 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr5 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 148|0;
 $13 = sp + 144|0;
 $14 = sp + 140|0;
 $15 = sp + 136|0;
 $16 = sp + 132|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $25 = $7;
 $9 = $25;
 HEAP32[$12>>2] = 0;
 HEAP32[$13>>2] = 0;
 HEAP32[$14>>2] = 0;
 HEAP32[$15>>2] = 0;
 HEAP32[$16>>2] = 0;
 $17 = 0;
 $18 = 0;
 $19 = 0;
 $20 = 0;
 $21 = 0;
 $26 = $6;
 $27 = ((($26)) + 284|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (FUNCTION_TABLE_ii[$28 & 511]($29)|0);
 $31 = (($30) - 8)|0;
 $22 = $31;
 $32 = $9;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $9;
  HEAP32[$vararg_buffer>>2] = 1668707188;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  $36 = (_cmsPipelineCheckAndRetreiveStages($35,1,$vararg_buffer)|0);
  $37 = ($36|0)!=(0);
  if (!($37)) {
   $38 = $9;
   HEAP32[$vararg_buffer2>>2] = 1668707188;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = 1835103334;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = 1668707188;
   $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
   HEAP32[$vararg_ptr7>>2] = $14;
   $vararg_ptr8 = ((($vararg_buffer2)) + 16|0);
   HEAP32[$vararg_ptr8>>2] = $15;
   $vararg_ptr9 = ((($vararg_buffer2)) + 20|0);
   HEAP32[$vararg_ptr9>>2] = $13;
   $39 = (_cmsPipelineCheckAndRetreiveStages($38,3,$vararg_buffer2)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $41 = $9;
    HEAP32[$vararg_buffer10>>2] = 1668707188;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = 1668052340;
    $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
    HEAP32[$vararg_ptr14>>2] = 1668707188;
    $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
    HEAP32[$vararg_ptr15>>2] = $12;
    $vararg_ptr16 = ((($vararg_buffer10)) + 16|0);
    HEAP32[$vararg_ptr16>>2] = $16;
    $vararg_ptr17 = ((($vararg_buffer10)) + 20|0);
    HEAP32[$vararg_ptr17>>2] = $13;
    $42 = (_cmsPipelineCheckAndRetreiveStages($41,3,$vararg_buffer10)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     $44 = $9;
     HEAP32[$vararg_buffer18>>2] = 1668707188;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 1668052340;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1668707188;
     $vararg_ptr23 = ((($vararg_buffer18)) + 12|0);
     HEAP32[$vararg_ptr23>>2] = 1835103334;
     $vararg_ptr24 = ((($vararg_buffer18)) + 16|0);
     HEAP32[$vararg_ptr24>>2] = 1668707188;
     $vararg_ptr25 = ((($vararg_buffer18)) + 20|0);
     HEAP32[$vararg_ptr25>>2] = $12;
     $vararg_ptr26 = ((($vararg_buffer18)) + 24|0);
     HEAP32[$vararg_ptr26>>2] = $16;
     $vararg_ptr27 = ((($vararg_buffer18)) + 28|0);
     HEAP32[$vararg_ptr27>>2] = $14;
     $vararg_ptr28 = ((($vararg_buffer18)) + 32|0);
     HEAP32[$vararg_ptr28>>2] = $15;
     $vararg_ptr29 = ((($vararg_buffer18)) + 36|0);
     HEAP32[$vararg_ptr29>>2] = $13;
     $45 = (_cmsPipelineCheckAndRetreiveStages($44,5,$vararg_buffer18)|0);
     $46 = ($45|0)!=(0);
     if (!($46)) {
      $47 = $5;
      $48 = ((($47)) + 20|0);
      $49 = HEAP32[$48>>2]|0;
      _cmsSignalError($49,13,29027,$vararg_buffer30);
      $4 = 0;
      $202 = $4;
      STACKTOP = sp;return ($202|0);
     }
    }
   }
  }
 }
 $50 = $9;
 $51 = (_cmsPipelineInputChannels($50)|0);
 $10 = $51;
 $52 = $9;
 $53 = (_cmsPipelineOutputChannels($52)|0);
 $11 = $53;
 $54 = $6;
 $55 = $10;
 $56 = $55&255;
 $57 = (__cmsWriteUInt8Number($54,$56)|0);
 $58 = ($57|0)!=(0);
 if (!($58)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $59 = $6;
 $60 = $11;
 $61 = $60&255;
 $62 = (__cmsWriteUInt8Number($59,$61)|0);
 $63 = ($62|0)!=(0);
 if (!($63)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $64 = $6;
 $65 = (__cmsWriteUInt16Number($64,0)|0);
 $66 = ($65|0)!=(0);
 if (!($66)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $67 = $6;
 $68 = ((($67)) + 284|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $6;
 $71 = (FUNCTION_TABLE_ii[$69 & 511]($70)|0);
 $23 = $71;
 $72 = $6;
 $73 = (__cmsWriteUInt32Number($72,0)|0);
 $74 = ($73|0)!=(0);
 if (!($74)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $75 = $6;
 $76 = (__cmsWriteUInt32Number($75,0)|0);
 $77 = ($76|0)!=(0);
 if (!($77)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $78 = $6;
 $79 = (__cmsWriteUInt32Number($78,0)|0);
 $80 = ($79|0)!=(0);
 if (!($80)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $81 = $6;
 $82 = (__cmsWriteUInt32Number($81,0)|0);
 $83 = ($82|0)!=(0);
 if (!($83)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $84 = $6;
 $85 = (__cmsWriteUInt32Number($84,0)|0);
 $86 = ($85|0)!=(0);
 if (!($86)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $87 = HEAP32[$12>>2]|0;
 $88 = ($87|0)!=(0|0);
 if ($88) {
  $89 = $6;
  $90 = ((($89)) + 284|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $6;
  $93 = (FUNCTION_TABLE_ii[$91 & 511]($92)|0);
  $94 = $22;
  $95 = (($93) - ($94))|0;
  $21 = $95;
  $96 = $5;
  $97 = $6;
  $98 = HEAP32[$12>>2]|0;
  $99 = (_WriteSetOfCurves($96,$97,1885434465,$98)|0);
  $100 = ($99|0)!=(0);
  if (!($100)) {
   $4 = 0;
   $202 = $4;
   STACKTOP = sp;return ($202|0);
  }
 }
 $101 = HEAP32[$16>>2]|0;
 $102 = ($101|0)!=(0|0);
 if ($102) {
  $103 = $6;
  $104 = ((($103)) + 284|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $6;
  $107 = (FUNCTION_TABLE_ii[$105 & 511]($106)|0);
  $108 = $22;
  $109 = (($107) - ($108))|0;
  $20 = $109;
  $110 = $5;
  $111 = $6;
  $112 = $9;
  $113 = ((($112)) + 36|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114|0)!=(0);
  $116 = $115 ? 1 : 2;
  $117 = $116&255;
  $118 = HEAP32[$16>>2]|0;
  $119 = (_WriteCLUT_642($110,$111,$117,$118)|0);
  $120 = ($119|0)!=(0);
  if (!($120)) {
   $4 = 0;
   $202 = $4;
   STACKTOP = sp;return ($202|0);
  }
 }
 $121 = HEAP32[$14>>2]|0;
 $122 = ($121|0)!=(0|0);
 if ($122) {
  $123 = $6;
  $124 = ((($123)) + 284|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $6;
  $127 = (FUNCTION_TABLE_ii[$125 & 511]($126)|0);
  $128 = $22;
  $129 = (($127) - ($128))|0;
  $19 = $129;
  $130 = $5;
  $131 = $6;
  $132 = HEAP32[$14>>2]|0;
  $133 = (_WriteSetOfCurves($130,$131,1885434465,$132)|0);
  $134 = ($133|0)!=(0);
  if (!($134)) {
   $4 = 0;
   $202 = $4;
   STACKTOP = sp;return ($202|0);
  }
 }
 $135 = HEAP32[$15>>2]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = $6;
  $138 = ((($137)) + 284|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $6;
  $141 = (FUNCTION_TABLE_ii[$139 & 511]($140)|0);
  $142 = $22;
  $143 = (($141) - ($142))|0;
  $18 = $143;
  $144 = $5;
  $145 = $6;
  $146 = HEAP32[$15>>2]|0;
  $147 = (_WriteMatrix($144,$145,$146)|0);
  $148 = ($147|0)!=(0);
  if (!($148)) {
   $4 = 0;
   $202 = $4;
   STACKTOP = sp;return ($202|0);
  }
 }
 $149 = HEAP32[$13>>2]|0;
 $150 = ($149|0)!=(0|0);
 if ($150) {
  $151 = $6;
  $152 = ((($151)) + 284|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = $6;
  $155 = (FUNCTION_TABLE_ii[$153 & 511]($154)|0);
  $156 = $22;
  $157 = (($155) - ($156))|0;
  $17 = $157;
  $158 = $5;
  $159 = $6;
  $160 = HEAP32[$13>>2]|0;
  $161 = (_WriteSetOfCurves($158,$159,1885434465,$160)|0);
  $162 = ($161|0)!=(0);
  if (!($162)) {
   $4 = 0;
   $202 = $4;
   STACKTOP = sp;return ($202|0);
  }
 }
 $163 = $6;
 $164 = ((($163)) + 284|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = $6;
 $167 = (FUNCTION_TABLE_ii[$165 & 511]($166)|0);
 $24 = $167;
 $168 = $6;
 $169 = ((($168)) + 276|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = $6;
 $172 = $23;
 $173 = (FUNCTION_TABLE_iii[$170 & 511]($171,$172)|0);
 $174 = ($173|0)!=(0);
 if (!($174)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $175 = $6;
 $176 = $17;
 $177 = (__cmsWriteUInt32Number($175,$176)|0);
 $178 = ($177|0)!=(0);
 if (!($178)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $179 = $6;
 $180 = $18;
 $181 = (__cmsWriteUInt32Number($179,$180)|0);
 $182 = ($181|0)!=(0);
 if (!($182)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $183 = $6;
 $184 = $19;
 $185 = (__cmsWriteUInt32Number($183,$184)|0);
 $186 = ($185|0)!=(0);
 if (!($186)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $187 = $6;
 $188 = $20;
 $189 = (__cmsWriteUInt32Number($187,$188)|0);
 $190 = ($189|0)!=(0);
 if (!($190)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $191 = $6;
 $192 = $21;
 $193 = (__cmsWriteUInt32Number($191,$192)|0);
 $194 = ($193|0)!=(0);
 if (!($194)) {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 $195 = $6;
 $196 = ((($195)) + 276|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = $6;
 $199 = $24;
 $200 = (FUNCTION_TABLE_iii[$197 & 511]($198,$199)|0);
 $201 = ($200|0)!=(0);
 if ($201) {
  $4 = 1;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 } else {
  $4 = 0;
  $202 = $4;
  STACKTOP = sp;return ($202|0);
 }
 return (0)|0;
}
function _Type_LUTA2B_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsPipelineDup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_LUTA2B_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsPipelineFree($4);
 STACKTOP = sp;return;
}
function _Type_LUTB2A_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = sp + 49|0;
 $10 = sp + 48|0;
 $12 = sp + 20|0;
 $13 = sp + 16|0;
 $14 = sp + 12|0;
 $15 = sp + 8|0;
 $16 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $17 = 0;
 $18 = $6;
 $19 = ((($18)) + 284|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $6;
 $22 = (FUNCTION_TABLE_ii[$20 & 511]($21)|0);
 $23 = (($22) - 8)|0;
 $11 = $23;
 $24 = $6;
 $25 = (__cmsReadUInt8Number($24,$9)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $27 = $6;
 $28 = (__cmsReadUInt8Number($27,$10)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $4 = 0;
  $138 = $4;
  STACKTOP = sp;return ($138|0);
 }
 $30 = HEAP8[$9>>0]|0;
 $31 = $30&255;
 $32 = ($31|0)==(0);
 if (!($32)) {
  $33 = HEAP8[$9>>0]|0;
  $34 = $33&255;
  $35 = ($34|0)>=(16);
  if (!($35)) {
   $36 = HEAP8[$10>>0]|0;
   $37 = $36&255;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $39 = HEAP8[$10>>0]|0;
    $40 = $39&255;
    $41 = ($40|0)>=(16);
    if (!($41)) {
     $42 = $6;
     $43 = (__cmsReadUInt16Number($42,0)|0);
     $44 = ($43|0)!=(0);
     if (!($44)) {
      $4 = 0;
      $138 = $4;
      STACKTOP = sp;return ($138|0);
     }
     $45 = $6;
     $46 = (__cmsReadUInt32Number($45,$12)|0);
     $47 = ($46|0)!=(0);
     if (!($47)) {
      $4 = 0;
      $138 = $4;
      STACKTOP = sp;return ($138|0);
     }
     $48 = $6;
     $49 = (__cmsReadUInt32Number($48,$13)|0);
     $50 = ($49|0)!=(0);
     if (!($50)) {
      $4 = 0;
      $138 = $4;
      STACKTOP = sp;return ($138|0);
     }
     $51 = $6;
     $52 = (__cmsReadUInt32Number($51,$14)|0);
     $53 = ($52|0)!=(0);
     if (!($53)) {
      $4 = 0;
      $138 = $4;
      STACKTOP = sp;return ($138|0);
     }
     $54 = $6;
     $55 = (__cmsReadUInt32Number($54,$15)|0);
     $56 = ($55|0)!=(0);
     if (!($56)) {
      $4 = 0;
      $138 = $4;
      STACKTOP = sp;return ($138|0);
     }
     $57 = $6;
     $58 = (__cmsReadUInt32Number($57,$16)|0);
     $59 = ($58|0)!=(0);
     if (!($59)) {
      $4 = 0;
      $138 = $4;
      STACKTOP = sp;return ($138|0);
     }
     $60 = $5;
     $61 = ((($60)) + 20|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = HEAP8[$9>>0]|0;
     $64 = $63&255;
     $65 = HEAP8[$10>>0]|0;
     $66 = $65&255;
     $67 = (_cmsPipelineAlloc($62,$64,$66)|0);
     $17 = $67;
     $68 = $17;
     $69 = ($68|0)==(0|0);
     if ($69) {
      $4 = 0;
      $138 = $4;
      STACKTOP = sp;return ($138|0);
     }
     $70 = HEAP32[$12>>2]|0;
     $71 = ($70|0)!=(0);
     if ($71) {
      $72 = $17;
      $73 = $5;
      $74 = $6;
      $75 = $11;
      $76 = HEAP32[$12>>2]|0;
      $77 = (($75) + ($76))|0;
      $78 = HEAP8[$9>>0]|0;
      $79 = $78&255;
      $80 = (_ReadSetOfCurves($73,$74,$77,$79)|0);
      $81 = (_cmsPipelineInsertStage($72,1,$80)|0);
      $82 = ($81|0)!=(0);
      if ($82) {
       label = 27;
      }
     } else {
      label = 27;
     }
     do {
      if ((label|0) == 27) {
       $83 = HEAP32[$13>>2]|0;
       $84 = ($83|0)!=(0);
       if ($84) {
        $85 = $17;
        $86 = $5;
        $87 = $6;
        $88 = $11;
        $89 = HEAP32[$13>>2]|0;
        $90 = (($88) + ($89))|0;
        $91 = (_ReadMatrix($86,$87,$90)|0);
        $92 = (_cmsPipelineInsertStage($85,1,$91)|0);
        $93 = ($92|0)!=(0);
        if (!($93)) {
         break;
        }
       }
       $94 = HEAP32[$14>>2]|0;
       $95 = ($94|0)!=(0);
       if ($95) {
        $96 = $17;
        $97 = $5;
        $98 = $6;
        $99 = $11;
        $100 = HEAP32[$14>>2]|0;
        $101 = (($99) + ($100))|0;
        $102 = HEAP8[$9>>0]|0;
        $103 = $102&255;
        $104 = (_ReadSetOfCurves($97,$98,$101,$103)|0);
        $105 = (_cmsPipelineInsertStage($96,1,$104)|0);
        $106 = ($105|0)!=(0);
        if (!($106)) {
         break;
        }
       }
       $107 = HEAP32[$15>>2]|0;
       $108 = ($107|0)!=(0);
       if ($108) {
        $109 = $17;
        $110 = $5;
        $111 = $6;
        $112 = $11;
        $113 = HEAP32[$15>>2]|0;
        $114 = (($112) + ($113))|0;
        $115 = HEAP8[$9>>0]|0;
        $116 = $115&255;
        $117 = HEAP8[$10>>0]|0;
        $118 = $117&255;
        $119 = (_ReadCLUT($110,$111,$114,$116,$118)|0);
        $120 = (_cmsPipelineInsertStage($109,1,$119)|0);
        $121 = ($120|0)!=(0);
        if (!($121)) {
         break;
        }
       }
       $122 = HEAP32[$16>>2]|0;
       $123 = ($122|0)!=(0);
       if ($123) {
        $124 = $17;
        $125 = $5;
        $126 = $6;
        $127 = $11;
        $128 = HEAP32[$16>>2]|0;
        $129 = (($127) + ($128))|0;
        $130 = HEAP8[$10>>0]|0;
        $131 = $130&255;
        $132 = (_ReadSetOfCurves($125,$126,$129,$131)|0);
        $133 = (_cmsPipelineInsertStage($124,1,$132)|0);
        $134 = ($133|0)!=(0);
        if (!($134)) {
         break;
        }
       }
       $135 = $7;
       HEAP32[$135>>2] = 1;
       $136 = $17;
       $4 = $136;
       $138 = $4;
       STACKTOP = sp;return ($138|0);
      }
     } while(0);
     $137 = $17;
     _cmsPipelineFree($137);
     $4 = 0;
     $138 = $4;
     STACKTOP = sp;return ($138|0);
    }
   }
   $4 = 0;
   $138 = $4;
   STACKTOP = sp;return ($138|0);
  }
 }
 $4 = 0;
 $138 = $4;
 STACKTOP = sp;return ($138|0);
}
function _Type_LUTB2A_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer30 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0;
 var $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 148|0;
 $13 = sp + 144|0;
 $14 = sp + 140|0;
 $15 = sp + 136|0;
 $16 = sp + 132|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $25 = $7;
 $9 = $25;
 HEAP32[$12>>2] = 0;
 HEAP32[$13>>2] = 0;
 HEAP32[$14>>2] = 0;
 HEAP32[$15>>2] = 0;
 HEAP32[$16>>2] = 0;
 $17 = 0;
 $18 = 0;
 $19 = 0;
 $20 = 0;
 $21 = 0;
 $26 = $6;
 $27 = ((($26)) + 284|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $6;
 $30 = (FUNCTION_TABLE_ii[$28 & 511]($29)|0);
 $31 = (($30) - 8)|0;
 $22 = $31;
 $32 = $9;
 HEAP32[$vararg_buffer>>2] = 1668707188;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $33 = (_cmsPipelineCheckAndRetreiveStages($32,1,$vararg_buffer)|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $35 = $9;
  HEAP32[$vararg_buffer2>>2] = 1668707188;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1835103334;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = 1668707188;
  $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
  HEAP32[$vararg_ptr7>>2] = $13;
  $vararg_ptr8 = ((($vararg_buffer2)) + 16|0);
  HEAP32[$vararg_ptr8>>2] = $15;
  $vararg_ptr9 = ((($vararg_buffer2)) + 20|0);
  HEAP32[$vararg_ptr9>>2] = $14;
  $36 = (_cmsPipelineCheckAndRetreiveStages($35,3,$vararg_buffer2)|0);
  $37 = ($36|0)!=(0);
  if (!($37)) {
   $38 = $9;
   HEAP32[$vararg_buffer10>>2] = 1668707188;
   $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
   HEAP32[$vararg_ptr13>>2] = 1668052340;
   $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
   HEAP32[$vararg_ptr14>>2] = 1668707188;
   $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
   HEAP32[$vararg_ptr15>>2] = $13;
   $vararg_ptr16 = ((($vararg_buffer10)) + 16|0);
   HEAP32[$vararg_ptr16>>2] = $16;
   $vararg_ptr17 = ((($vararg_buffer10)) + 20|0);
   HEAP32[$vararg_ptr17>>2] = $12;
   $39 = (_cmsPipelineCheckAndRetreiveStages($38,3,$vararg_buffer10)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    $41 = $9;
    HEAP32[$vararg_buffer18>>2] = 1668707188;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = 1835103334;
    $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
    HEAP32[$vararg_ptr22>>2] = 1668707188;
    $vararg_ptr23 = ((($vararg_buffer18)) + 12|0);
    HEAP32[$vararg_ptr23>>2] = 1668052340;
    $vararg_ptr24 = ((($vararg_buffer18)) + 16|0);
    HEAP32[$vararg_ptr24>>2] = 1668707188;
    $vararg_ptr25 = ((($vararg_buffer18)) + 20|0);
    HEAP32[$vararg_ptr25>>2] = $13;
    $vararg_ptr26 = ((($vararg_buffer18)) + 24|0);
    HEAP32[$vararg_ptr26>>2] = $15;
    $vararg_ptr27 = ((($vararg_buffer18)) + 28|0);
    HEAP32[$vararg_ptr27>>2] = $14;
    $vararg_ptr28 = ((($vararg_buffer18)) + 32|0);
    HEAP32[$vararg_ptr28>>2] = $16;
    $vararg_ptr29 = ((($vararg_buffer18)) + 36|0);
    HEAP32[$vararg_ptr29>>2] = $12;
    $42 = (_cmsPipelineCheckAndRetreiveStages($41,5,$vararg_buffer18)|0);
    $43 = ($42|0)!=(0);
    if (!($43)) {
     $44 = $5;
     $45 = ((($44)) + 20|0);
     $46 = HEAP32[$45>>2]|0;
     _cmsSignalError($46,13,28875,$vararg_buffer30);
     $4 = 0;
     $199 = $4;
     STACKTOP = sp;return ($199|0);
    }
   }
  }
 }
 $47 = $9;
 $48 = (_cmsPipelineInputChannels($47)|0);
 $10 = $48;
 $49 = $9;
 $50 = (_cmsPipelineOutputChannels($49)|0);
 $11 = $50;
 $51 = $6;
 $52 = $10;
 $53 = $52&255;
 $54 = (__cmsWriteUInt8Number($51,$53)|0);
 $55 = ($54|0)!=(0);
 if (!($55)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $56 = $6;
 $57 = $11;
 $58 = $57&255;
 $59 = (__cmsWriteUInt8Number($56,$58)|0);
 $60 = ($59|0)!=(0);
 if (!($60)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $61 = $6;
 $62 = (__cmsWriteUInt16Number($61,0)|0);
 $63 = ($62|0)!=(0);
 if (!($63)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $64 = $6;
 $65 = ((($64)) + 284|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $6;
 $68 = (FUNCTION_TABLE_ii[$66 & 511]($67)|0);
 $23 = $68;
 $69 = $6;
 $70 = (__cmsWriteUInt32Number($69,0)|0);
 $71 = ($70|0)!=(0);
 if (!($71)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $72 = $6;
 $73 = (__cmsWriteUInt32Number($72,0)|0);
 $74 = ($73|0)!=(0);
 if (!($74)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $75 = $6;
 $76 = (__cmsWriteUInt32Number($75,0)|0);
 $77 = ($76|0)!=(0);
 if (!($77)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $78 = $6;
 $79 = (__cmsWriteUInt32Number($78,0)|0);
 $80 = ($79|0)!=(0);
 if (!($80)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $81 = $6;
 $82 = (__cmsWriteUInt32Number($81,0)|0);
 $83 = ($82|0)!=(0);
 if (!($83)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $84 = HEAP32[$12>>2]|0;
 $85 = ($84|0)!=(0|0);
 if ($85) {
  $86 = $6;
  $87 = ((($86)) + 284|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $6;
  $90 = (FUNCTION_TABLE_ii[$88 & 511]($89)|0);
  $91 = $22;
  $92 = (($90) - ($91))|0;
  $21 = $92;
  $93 = $5;
  $94 = $6;
  $95 = HEAP32[$12>>2]|0;
  $96 = (_WriteSetOfCurves($93,$94,1885434465,$95)|0);
  $97 = ($96|0)!=(0);
  if (!($97)) {
   $4 = 0;
   $199 = $4;
   STACKTOP = sp;return ($199|0);
  }
 }
 $98 = HEAP32[$16>>2]|0;
 $99 = ($98|0)!=(0|0);
 if ($99) {
  $100 = $6;
  $101 = ((($100)) + 284|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $6;
  $104 = (FUNCTION_TABLE_ii[$102 & 511]($103)|0);
  $105 = $22;
  $106 = (($104) - ($105))|0;
  $20 = $106;
  $107 = $5;
  $108 = $6;
  $109 = $9;
  $110 = ((($109)) + 36|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)!=(0);
  $113 = $112 ? 1 : 2;
  $114 = $113&255;
  $115 = HEAP32[$16>>2]|0;
  $116 = (_WriteCLUT_642($107,$108,$114,$115)|0);
  $117 = ($116|0)!=(0);
  if (!($117)) {
   $4 = 0;
   $199 = $4;
   STACKTOP = sp;return ($199|0);
  }
 }
 $118 = HEAP32[$14>>2]|0;
 $119 = ($118|0)!=(0|0);
 if ($119) {
  $120 = $6;
  $121 = ((($120)) + 284|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $6;
  $124 = (FUNCTION_TABLE_ii[$122 & 511]($123)|0);
  $125 = $22;
  $126 = (($124) - ($125))|0;
  $19 = $126;
  $127 = $5;
  $128 = $6;
  $129 = HEAP32[$14>>2]|0;
  $130 = (_WriteSetOfCurves($127,$128,1885434465,$129)|0);
  $131 = ($130|0)!=(0);
  if (!($131)) {
   $4 = 0;
   $199 = $4;
   STACKTOP = sp;return ($199|0);
  }
 }
 $132 = HEAP32[$15>>2]|0;
 $133 = ($132|0)!=(0|0);
 if ($133) {
  $134 = $6;
  $135 = ((($134)) + 284|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = $6;
  $138 = (FUNCTION_TABLE_ii[$136 & 511]($137)|0);
  $139 = $22;
  $140 = (($138) - ($139))|0;
  $18 = $140;
  $141 = $5;
  $142 = $6;
  $143 = HEAP32[$15>>2]|0;
  $144 = (_WriteMatrix($141,$142,$143)|0);
  $145 = ($144|0)!=(0);
  if (!($145)) {
   $4 = 0;
   $199 = $4;
   STACKTOP = sp;return ($199|0);
  }
 }
 $146 = HEAP32[$13>>2]|0;
 $147 = ($146|0)!=(0|0);
 if ($147) {
  $148 = $6;
  $149 = ((($148)) + 284|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = $6;
  $152 = (FUNCTION_TABLE_ii[$150 & 511]($151)|0);
  $153 = $22;
  $154 = (($152) - ($153))|0;
  $17 = $154;
  $155 = $5;
  $156 = $6;
  $157 = HEAP32[$13>>2]|0;
  $158 = (_WriteSetOfCurves($155,$156,1885434465,$157)|0);
  $159 = ($158|0)!=(0);
  if (!($159)) {
   $4 = 0;
   $199 = $4;
   STACKTOP = sp;return ($199|0);
  }
 }
 $160 = $6;
 $161 = ((($160)) + 284|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = $6;
 $164 = (FUNCTION_TABLE_ii[$162 & 511]($163)|0);
 $24 = $164;
 $165 = $6;
 $166 = ((($165)) + 276|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = $6;
 $169 = $23;
 $170 = (FUNCTION_TABLE_iii[$167 & 511]($168,$169)|0);
 $171 = ($170|0)!=(0);
 if (!($171)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $172 = $6;
 $173 = $17;
 $174 = (__cmsWriteUInt32Number($172,$173)|0);
 $175 = ($174|0)!=(0);
 if (!($175)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $176 = $6;
 $177 = $18;
 $178 = (__cmsWriteUInt32Number($176,$177)|0);
 $179 = ($178|0)!=(0);
 if (!($179)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $180 = $6;
 $181 = $19;
 $182 = (__cmsWriteUInt32Number($180,$181)|0);
 $183 = ($182|0)!=(0);
 if (!($183)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $184 = $6;
 $185 = $20;
 $186 = (__cmsWriteUInt32Number($184,$185)|0);
 $187 = ($186|0)!=(0);
 if (!($187)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $188 = $6;
 $189 = $21;
 $190 = (__cmsWriteUInt32Number($188,$189)|0);
 $191 = ($190|0)!=(0);
 if (!($191)) {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 $192 = $6;
 $193 = ((($192)) + 276|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $6;
 $196 = $24;
 $197 = (FUNCTION_TABLE_iii[$194 & 511]($195,$196)|0);
 $198 = ($197|0)!=(0);
 if ($198) {
  $4 = 1;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 } else {
  $4 = 0;
  $199 = $4;
  STACKTOP = sp;return ($199|0);
 }
 return (0)|0;
}
function _Type_LUTB2A_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsPipelineDup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_LUTB2A_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsPipelineFree($4);
 STACKTOP = sp;return;
}
function _Type_UcrBg_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $5;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__cmsMallocZero($15,12)|0);
 $9 = $16;
 $17 = $7;
 HEAP32[$17>>2] = 0;
 $18 = $9;
 $19 = ($18|0)==(0|0);
 do {
  if ($19) {
   $4 = 0;
  } else {
   $20 = $6;
   $21 = (__cmsReadUInt32Number($20,$10)|0);
   $22 = ($21|0)!=(0);
   if (!($22)) {
    $4 = 0;
    break;
   }
   $23 = $8;
   $24 = ($23>>>0)<(4);
   if ($24) {
    $4 = 0;
    break;
   }
   $25 = $8;
   $26 = (($25) - 4)|0;
   $8 = $26;
   $27 = $5;
   $28 = ((($27)) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$10>>2]|0;
   $31 = (_cmsBuildTabulatedToneCurve16($29,$30,0)|0);
   $32 = $9;
   HEAP32[$32>>2] = $31;
   $33 = $9;
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(0|0);
   if ($35) {
    $4 = 0;
    break;
   }
   $36 = $6;
   $37 = HEAP32[$10>>2]|0;
   $38 = $9;
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($39)) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (__cmsReadUInt16Array($36,$37,$41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    $4 = 0;
    break;
   }
   $44 = $8;
   $45 = ($44>>>0)<(4);
   if ($45) {
    $4 = 0;
    break;
   }
   $46 = HEAP32[$10>>2]|0;
   $47 = $46<<1;
   $48 = $8;
   $49 = (($48) - ($47))|0;
   $8 = $49;
   $50 = $6;
   $51 = (__cmsReadUInt32Number($50,$11)|0);
   $52 = ($51|0)!=(0);
   if (!($52)) {
    $4 = 0;
    break;
   }
   $53 = $8;
   $54 = ($53>>>0)<(4);
   if ($54) {
    $4 = 0;
    break;
   }
   $55 = $8;
   $56 = (($55) - 4)|0;
   $8 = $56;
   $57 = $5;
   $58 = ((($57)) + 20|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$11>>2]|0;
   $61 = (_cmsBuildTabulatedToneCurve16($59,$60,0)|0);
   $62 = $9;
   $63 = ((($62)) + 4|0);
   HEAP32[$63>>2] = $61;
   $64 = $9;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0|0);
   if ($67) {
    $4 = 0;
    break;
   }
   $68 = $6;
   $69 = HEAP32[$11>>2]|0;
   $70 = $9;
   $71 = ((($70)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($72)) + 24|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (__cmsReadUInt16Array($68,$69,$74)|0);
   $76 = ($75|0)!=(0);
   if (!($76)) {
    $4 = 0;
    break;
   }
   $77 = $8;
   $78 = HEAP32[$11>>2]|0;
   $79 = $78<<1;
   $80 = ($77>>>0)<($79>>>0);
   if ($80) {
    $4 = 0;
    break;
   }
   $81 = HEAP32[$11>>2]|0;
   $82 = $81<<1;
   $83 = $8;
   $84 = (($83) - ($82))|0;
   $8 = $84;
   $85 = $8;
   $86 = ($85|0)==(-1);
   if ($86) {
    $4 = 0;
    break;
   }
   $87 = $5;
   $88 = ((($87)) + 20|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (_cmsMLUalloc($89,1)|0);
   $91 = $9;
   $92 = ((($91)) + 8|0);
   HEAP32[$92>>2] = $90;
   $93 = $9;
   $94 = ((($93)) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)==(0|0);
   if ($96) {
    $4 = 0;
    break;
   }
   $97 = $5;
   $98 = ((($97)) + 20|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $8;
   $101 = (($100) + 1)|0;
   $102 = (__cmsMalloc($99,$101)|0);
   $12 = $102;
   $103 = $6;
   $104 = ((($103)) + 272|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $6;
   $107 = $12;
   $108 = $8;
   $109 = (FUNCTION_TABLE_iiiii[$105 & 511]($106,$107,1,$108)|0);
   $110 = $8;
   $111 = ($109|0)!=($110|0);
   if ($111) {
    $4 = 0;
    break;
   } else {
    $112 = $12;
    $113 = $8;
    $114 = (($112) + ($113)|0);
    HEAP8[$114>>0] = 0;
    $115 = $9;
    $116 = ((($115)) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $12;
    (_cmsMLUsetASCII($117,33104,33104,$118)|0);
    $119 = $5;
    $120 = ((($119)) + 20|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $12;
    __cmsFree($121,$122);
    $123 = $7;
    HEAP32[$123>>2] = 1;
    $124 = $9;
    $4 = $124;
    break;
   }
  }
 } while(0);
 $125 = $4;
 STACKTOP = sp;return ($125|0);
}
function _Type_UcrBg_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $9 = $12;
 $13 = $6;
 $14 = $9;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__cmsWriteUInt32Number($13,$17)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $4 = 0;
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 }
 $20 = $6;
 $21 = $9;
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $9;
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($26)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (__cmsWriteUInt16Array($20,$24,$28)|0);
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $4 = 0;
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 }
 $31 = $6;
 $32 = $9;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (__cmsWriteUInt32Number($31,$36)|0);
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $4 = 0;
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 }
 $39 = $6;
 $40 = $9;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($42)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $9;
 $46 = ((($45)) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (__cmsWriteUInt16Array($39,$44,$49)|0);
 $51 = ($50|0)!=(0);
 if (!($51)) {
  $4 = 0;
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 }
 $52 = $9;
 $53 = ((($52)) + 8|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (_cmsMLUgetASCII($54,33104,33104,0,0)|0);
 $10 = $55;
 $56 = $5;
 $57 = ((($56)) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $10;
 $60 = (__cmsMalloc($58,$59)|0);
 $11 = $60;
 $61 = $9;
 $62 = ((($61)) + 8|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $11;
 $65 = $10;
 $66 = (_cmsMLUgetASCII($63,33104,33104,$64,$65)|0);
 $67 = $10;
 $68 = ($66|0)!=($67|0);
 if ($68) {
  $4 = 0;
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 }
 $69 = $6;
 $70 = ((($69)) + 288|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $6;
 $73 = $10;
 $74 = $11;
 $75 = (FUNCTION_TABLE_iiii[$71 & 511]($72,$73,$74)|0);
 $76 = ($75|0)!=(0);
 if ($76) {
  $77 = $5;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $11;
  __cmsFree($79,$80);
  $4 = 1;
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 } else {
  $4 = 0;
  $81 = $4;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _Type_UcrBg_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $7 = $9;
 $10 = $4;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__cmsMallocZero($12,12)|0);
 $8 = $13;
 $14 = $8;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $3 = 0;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 } else {
  $16 = $7;
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_cmsDupToneCurve($18)|0);
  $20 = $8;
  $21 = ((($20)) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $7;
  $23 = HEAP32[$22>>2]|0;
  $24 = (_cmsDupToneCurve($23)|0);
  $25 = $8;
  HEAP32[$25>>2] = $24;
  $26 = $7;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_cmsMLUdup($28)|0);
  $30 = $8;
  $31 = ((($30)) + 8|0);
  HEAP32[$31>>2] = $29;
  $32 = $8;
  $3 = $32;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _Type_UcrBg_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $4 = $5;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $4;
  $10 = HEAP32[$9>>2]|0;
  _cmsFreeToneCurve($10);
 }
 $11 = $4;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $4;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  _cmsFreeToneCurve($17);
 }
 $18 = $4;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  $25 = $2;
  $26 = ((($25)) + 20|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $3;
  __cmsFree($27,$28);
  STACKTOP = sp;return;
 }
 $22 = $4;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 _cmsMLUfree($24);
 $25 = $2;
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $3;
 __cmsFree($27,$28);
 STACKTOP = sp;return;
}
function _Type_CrdInfo_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 HEAP32[$8>>2] = $3;
 $10 = $5;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_cmsMLUalloc($12,5)|0);
 $9 = $13;
 $14 = $7;
 HEAP32[$14>>2] = 0;
 $15 = $5;
 $16 = $6;
 $17 = $9;
 $18 = (_ReadCountAndSting($15,$16,$17,$8,28857)|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $5;
  $21 = $6;
  $22 = $9;
  $23 = (_ReadCountAndSting($20,$21,$22,$8,28860)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $5;
   $26 = $6;
   $27 = $9;
   $28 = (_ReadCountAndSting($25,$26,$27,$8,28863)|0);
   $29 = ($28|0)!=(0);
   if ($29) {
    $30 = $5;
    $31 = $6;
    $32 = $9;
    $33 = (_ReadCountAndSting($30,$31,$32,$8,28866)|0);
    $34 = ($33|0)!=(0);
    if ($34) {
     $35 = $5;
     $36 = $6;
     $37 = $9;
     $38 = (_ReadCountAndSting($35,$36,$37,$8,28869)|0);
     $39 = ($38|0)!=(0);
     if ($39) {
      $40 = $7;
      HEAP32[$40>>2] = 1;
      $41 = $9;
      $4 = $41;
      $43 = $4;
      STACKTOP = sp;return ($43|0);
     }
    }
   }
  }
 }
 $42 = $9;
 _cmsMLUfree($42);
 $4 = 0;
 $43 = $4;
 STACKTOP = sp;return ($43|0);
}
function _Type_CrdInfo_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $5;
 $12 = $6;
 $13 = $9;
 $14 = (_WriteCountAndSting($11,$12,$13,28857)|0);
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $5;
  $17 = $6;
  $18 = $9;
  $19 = (_WriteCountAndSting($16,$17,$18,28860)|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $5;
   $22 = $6;
   $23 = $9;
   $24 = (_WriteCountAndSting($21,$22,$23,28863)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $5;
    $27 = $6;
    $28 = $9;
    $29 = (_WriteCountAndSting($26,$27,$28,28866)|0);
    $30 = ($29|0)!=(0);
    if ($30) {
     $31 = $5;
     $32 = $6;
     $33 = $9;
     $34 = (_WriteCountAndSting($31,$32,$33,28869)|0);
     $35 = ($34|0)!=(0);
     if ($35) {
      $4 = 1;
      $36 = $4;
      STACKTOP = sp;return ($36|0);
     }
    }
   }
  }
 }
 $4 = 0;
 $36 = $4;
 STACKTOP = sp;return ($36|0);
}
function _Type_CrdInfo_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsMLUdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_CrdInfo_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsMLUfree($4);
 STACKTOP = sp;return;
}
function _Type_MPE_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 34|0;
 $10 = sp + 32|0;
 $11 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = 0;
 $14 = $6;
 $15 = ((($14)) + 284|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $6;
 $18 = (FUNCTION_TABLE_ii[$16 & 511]($17)|0);
 $19 = (($18) - 8)|0;
 $13 = $19;
 $20 = $6;
 $21 = (__cmsReadUInt16Number($20,$9)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $4 = 0;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $23 = $6;
 $24 = (__cmsReadUInt16Number($23,$10)|0);
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $4 = 0;
  $76 = $4;
  STACKTOP = sp;return ($76|0);
 }
 $26 = HEAP16[$9>>1]|0;
 $27 = $26&65535;
 $28 = ($27|0)==(0);
 if (!($28)) {
  $29 = HEAP16[$9>>1]|0;
  $30 = $29&65535;
  $31 = ($30|0)>=(16);
  if (!($31)) {
   $32 = HEAP16[$10>>1]|0;
   $33 = $32&65535;
   $34 = ($33|0)==(0);
   if (!($34)) {
    $35 = HEAP16[$10>>1]|0;
    $36 = $35&65535;
    $37 = ($36|0)>=(16);
    if (!($37)) {
     $38 = $5;
     $39 = ((($38)) + 20|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = HEAP16[$9>>1]|0;
     $42 = $41&65535;
     $43 = HEAP16[$10>>1]|0;
     $44 = $43&65535;
     $45 = (_cmsPipelineAlloc($40,$42,$44)|0);
     $12 = $45;
     $46 = $12;
     $47 = ($46|0)==(0|0);
     if ($47) {
      $4 = 0;
      $76 = $4;
      STACKTOP = sp;return ($76|0);
     }
     $48 = $6;
     $49 = (__cmsReadUInt32Number($48,$11)|0);
     $50 = ($49|0)!=(0);
     if ($50) {
      $51 = $5;
      $52 = $6;
      $53 = HEAP32[$11>>2]|0;
      $54 = $13;
      $55 = $12;
      $56 = (_ReadPositionTable($51,$52,$53,$54,$55,366)|0);
      $57 = ($56|0)!=(0);
      if ($57) {
       $58 = HEAP16[$9>>1]|0;
       $59 = $58&65535;
       $60 = $12;
       $61 = ((($60)) + 4|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($59|0)!=($62|0);
       if (!($63)) {
        $64 = HEAP16[$10>>1]|0;
        $65 = $64&65535;
        $66 = $12;
        $67 = ((($66)) + 8|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($65|0)!=($68|0);
        if (!($69)) {
         $70 = $7;
         HEAP32[$70>>2] = 1;
         $71 = $12;
         $4 = $71;
         $76 = $4;
         STACKTOP = sp;return ($76|0);
        }
       }
      }
     }
     $72 = $12;
     $73 = ($72|0)!=(0|0);
     if ($73) {
      $74 = $12;
      _cmsPipelineFree($74);
     }
     $75 = $7;
     HEAP32[$75>>2] = 0;
     $4 = 0;
     $76 = $4;
     STACKTOP = sp;return ($76|0);
    }
   }
   $4 = 0;
   $76 = $4;
   STACKTOP = sp;return ($76|0);
  }
 }
 $4 = 0;
 $76 = $4;
 STACKTOP = sp;return ($76|0);
}
function _Type_MPE_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer = sp;
 $24 = sp + 84|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = 0;
 $17 = 0;
 $25 = $7;
 $20 = $25;
 $26 = $20;
 $27 = HEAP32[$26>>2]|0;
 $21 = $27;
 $28 = $5;
 $29 = ((($28)) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (__cmsContextGetClientChunk($30,11)|0);
 $23 = $31;
 $32 = $6;
 $33 = ((($32)) + 284|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $6;
 $36 = (FUNCTION_TABLE_ii[$34 & 511]($35)|0);
 $37 = (($36) - 8)|0;
 $10 = $37;
 $38 = $20;
 $39 = (_cmsPipelineInputChannels($38)|0);
 $13 = $39;
 $40 = $20;
 $41 = (_cmsPipelineOutputChannels($40)|0);
 $14 = $41;
 $42 = $20;
 $43 = (_cmsPipelineStageCount($42)|0);
 $15 = $43;
 $44 = $5;
 $45 = ((($44)) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $15;
 $48 = (__cmsCalloc($46,$47,4)|0);
 $16 = $48;
 $49 = $16;
 $50 = ($49|0)==(0|0);
 L1: do {
  if (!($50)) {
   $51 = $5;
   $52 = ((($51)) + 20|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $15;
   $55 = (__cmsCalloc($53,$54,4)|0);
   $17 = $55;
   $56 = $17;
   $57 = ($56|0)==(0|0);
   if (!($57)) {
    $58 = $6;
    $59 = $13;
    $60 = $59&65535;
    $61 = (__cmsWriteUInt16Number($58,$60)|0);
    $62 = ($61|0)!=(0);
    if ($62) {
     $63 = $6;
     $64 = $14;
     $65 = $64&65535;
     $66 = (__cmsWriteUInt16Number($63,$65)|0);
     $67 = ($66|0)!=(0);
     if ($67) {
      $68 = $6;
      $69 = $15;
      $70 = $69&65535;
      $71 = $70&65535;
      $72 = (__cmsWriteUInt32Number($68,$71)|0);
      $73 = ($72|0)!=(0);
      if ($73) {
       $74 = $6;
       $75 = ((($74)) + 284|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $6;
       $78 = (FUNCTION_TABLE_ii[$76 & 511]($77)|0);
       $11 = $78;
       $9 = 0;
       while(1) {
        $79 = $9;
        $80 = $15;
        $81 = ($79>>>0)<($80>>>0);
        if (!($81)) {
         break;
        }
        $82 = $6;
        $83 = (__cmsWriteUInt32Number($82,0)|0);
        $84 = ($83|0)!=(0);
        if (!($84)) {
         break L1;
        }
        $85 = $6;
        $86 = (__cmsWriteUInt32Number($85,0)|0);
        $87 = ($86|0)!=(0);
        if (!($87)) {
         break L1;
        }
        $88 = $9;
        $89 = (($88) + 1)|0;
        $9 = $89;
       }
       $9 = 0;
       while(1) {
        $90 = $9;
        $91 = $15;
        $92 = ($90>>>0)<($91>>>0);
        $93 = $6;
        $94 = ((($93)) + 284|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = $6;
        $97 = (FUNCTION_TABLE_ii[$95 & 511]($96)|0);
        if (!($92)) {
         break;
        }
        $98 = $10;
        $99 = (($97) - ($98))|0;
        $100 = $16;
        $101 = $9;
        $102 = (($100) + ($101<<2)|0);
        HEAP32[$102>>2] = $99;
        $103 = $21;
        $104 = ((($103)) + 4|0);
        $105 = HEAP32[$104>>2]|0;
        $19 = $105;
        $106 = $19;
        $107 = $23;
        $108 = HEAP32[$107>>2]|0;
        $109 = (_GetHandler($106,$108,15776)|0);
        $22 = $109;
        $110 = $22;
        $111 = ($110|0)==(0|0);
        if ($111) {
         label = 14;
         break;
        }
        $116 = $6;
        $117 = $19;
        $118 = (__cmsWriteUInt32Number($116,$117)|0);
        $119 = ($118|0)!=(0);
        if (!($119)) {
         break L1;
        }
        $120 = $6;
        $121 = (__cmsWriteUInt32Number($120,0)|0);
        $122 = ($121|0)!=(0);
        if (!($122)) {
         break L1;
        }
        $123 = $6;
        $124 = ((($123)) + 284|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = $6;
        $127 = (FUNCTION_TABLE_ii[$125 & 511]($126)|0);
        $18 = $127;
        $128 = $22;
        $129 = ((($128)) + 8|0);
        $130 = HEAP32[$129>>2]|0;
        $131 = $5;
        $132 = $6;
        $133 = $21;
        $134 = (FUNCTION_TABLE_iiiii[$130 & 511]($131,$132,$133,1)|0);
        $135 = ($134|0)!=(0);
        if (!($135)) {
         break L1;
        }
        $136 = $6;
        $137 = (__cmsWriteAlignment($136)|0);
        $138 = ($137|0)!=(0);
        if (!($138)) {
         break L1;
        }
        $139 = $6;
        $140 = ((($139)) + 284|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = $6;
        $143 = (FUNCTION_TABLE_ii[$141 & 511]($142)|0);
        $144 = $18;
        $145 = (($143) - ($144))|0;
        $146 = $17;
        $147 = $9;
        $148 = (($146) + ($147<<2)|0);
        HEAP32[$148>>2] = $145;
        $149 = $21;
        $150 = ((($149)) + 36|0);
        $151 = HEAP32[$150>>2]|0;
        $21 = $151;
        $152 = $9;
        $153 = (($152) + 1)|0;
        $9 = $153;
       }
       if ((label|0) == 14) {
        $112 = $19;
        __cmsTagSignature2String($24,$112);
        $113 = $5;
        $114 = ((($113)) + 20|0);
        $115 = HEAP32[$114>>2]|0;
        HEAP32[$vararg_buffer>>2] = $24;
        _cmsSignalError($115,8,28761,$vararg_buffer);
        break;
       }
       $12 = $97;
       $154 = $6;
       $155 = ((($154)) + 276|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = $6;
       $158 = $11;
       $159 = (FUNCTION_TABLE_iii[$156 & 511]($157,$158)|0);
       $160 = ($159|0)!=(0);
       if ($160) {
        $9 = 0;
        while(1) {
         $161 = $9;
         $162 = $15;
         $163 = ($161>>>0)<($162>>>0);
         $164 = $6;
         if (!($163)) {
          break;
         }
         $165 = $16;
         $166 = $9;
         $167 = (($165) + ($166<<2)|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = (__cmsWriteUInt32Number($164,$168)|0);
         $170 = ($169|0)!=(0);
         if (!($170)) {
          break L1;
         }
         $171 = $6;
         $172 = $17;
         $173 = $9;
         $174 = (($172) + ($173<<2)|0);
         $175 = HEAP32[$174>>2]|0;
         $176 = (__cmsWriteUInt32Number($171,$175)|0);
         $177 = ($176|0)!=(0);
         if (!($177)) {
          break L1;
         }
         $178 = $9;
         $179 = (($178) + 1)|0;
         $9 = $179;
        }
        $180 = ((($164)) + 276|0);
        $181 = HEAP32[$180>>2]|0;
        $182 = $6;
        $183 = $12;
        $184 = (FUNCTION_TABLE_iii[$181 & 511]($182,$183)|0);
        $185 = ($184|0)!=(0);
        if ($185) {
         $186 = $16;
         $187 = ($186|0)!=(0|0);
         if ($187) {
          $188 = $5;
          $189 = ((($188)) + 20|0);
          $190 = HEAP32[$189>>2]|0;
          $191 = $16;
          __cmsFree($190,$191);
         }
         $192 = $17;
         $193 = ($192|0)!=(0|0);
         if ($193) {
          $194 = $5;
          $195 = ((($194)) + 20|0);
          $196 = HEAP32[$195>>2]|0;
          $197 = $17;
          __cmsFree($196,$197);
         }
         $4 = 1;
         $210 = $4;
         STACKTOP = sp;return ($210|0);
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $198 = $16;
 $199 = ($198|0)!=(0|0);
 if ($199) {
  $200 = $5;
  $201 = ((($200)) + 20|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $16;
  __cmsFree($202,$203);
 }
 $204 = $17;
 $205 = ($204|0)!=(0|0);
 if ($205) {
  $206 = $5;
  $207 = ((($206)) + 20|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = $17;
  __cmsFree($208,$209);
 }
 $4 = 0;
 $210 = $4;
 STACKTOP = sp;return ($210|0);
}
function _Type_MPE_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsPipelineDup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_MPE_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsPipelineFree($4);
 STACKTOP = sp;return;
}
function _Type_Screening_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $11 = $5;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__cmsMallocZero($13,392)|0);
 $9 = $14;
 $15 = $9;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $4 = 0;
  $71 = $4;
  STACKTOP = sp;return ($71|0);
 }
 $17 = $7;
 HEAP32[$17>>2] = 0;
 $18 = $6;
 $19 = $9;
 $20 = (__cmsReadUInt32Number($18,$19)|0);
 $21 = ($20|0)!=(0);
 L5: do {
  if ($21) {
   $22 = $6;
   $23 = $9;
   $24 = ((($23)) + 4|0);
   $25 = (__cmsReadUInt32Number($22,$24)|0);
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $9;
    $28 = ((($27)) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29>>>0)>(15);
    if ($30) {
     $31 = $9;
     $32 = ((($31)) + 4|0);
     HEAP32[$32>>2] = 15;
    }
    $10 = 0;
    while(1) {
     $33 = $10;
     $34 = $9;
     $35 = ((($34)) + 4|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($33>>>0)<($36>>>0);
     if (!($37)) {
      break;
     }
     $38 = $6;
     $39 = $9;
     $40 = ((($39)) + 8|0);
     $41 = $10;
     $42 = (($40) + (($41*24)|0)|0);
     $43 = (__cmsRead15Fixed16Number($38,$42)|0);
     $44 = ($43|0)!=(0);
     if (!($44)) {
      break L5;
     }
     $45 = $6;
     $46 = $9;
     $47 = ((($46)) + 8|0);
     $48 = $10;
     $49 = (($47) + (($48*24)|0)|0);
     $50 = ((($49)) + 8|0);
     $51 = (__cmsRead15Fixed16Number($45,$50)|0);
     $52 = ($51|0)!=(0);
     if (!($52)) {
      break L5;
     }
     $53 = $6;
     $54 = $9;
     $55 = ((($54)) + 8|0);
     $56 = $10;
     $57 = (($55) + (($56*24)|0)|0);
     $58 = ((($57)) + 16|0);
     $59 = (__cmsReadUInt32Number($53,$58)|0);
     $60 = ($59|0)!=(0);
     if (!($60)) {
      break L5;
     }
     $61 = $10;
     $62 = (($61) + 1)|0;
     $10 = $62;
    }
    $63 = $7;
    HEAP32[$63>>2] = 1;
    $64 = $9;
    $4 = $64;
    $71 = $4;
    STACKTOP = sp;return ($71|0);
   }
  }
 } while(0);
 $65 = $9;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  $67 = $5;
  $68 = ((($67)) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $9;
  __cmsFree($69,$70);
 }
 $4 = 0;
 $71 = $4;
 STACKTOP = sp;return ($71|0);
}
function _Type_Screening_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $9 = $11;
 $12 = $6;
 $13 = $9;
 $14 = HEAP32[$13>>2]|0;
 $15 = (__cmsWriteUInt32Number($12,$14)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $4 = 0;
  $56 = $4;
  STACKTOP = sp;return ($56|0);
 }
 $17 = $6;
 $18 = $9;
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsWriteUInt32Number($17,$20)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $4 = 0;
  $56 = $4;
  STACKTOP = sp;return ($56|0);
 }
 $10 = 0;
 while(1) {
  $23 = $10;
  $24 = $9;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23>>>0)<($26>>>0);
  if (!($27)) {
   label = 14;
   break;
  }
  $28 = $6;
  $29 = $9;
  $30 = ((($29)) + 8|0);
  $31 = $10;
  $32 = (($30) + (($31*24)|0)|0);
  $33 = +HEAPF64[$32>>3];
  $34 = (__cmsWrite15Fixed16Number($28,$33)|0);
  $35 = ($34|0)!=(0);
  if (!($35)) {
   label = 8;
   break;
  }
  $36 = $6;
  $37 = $9;
  $38 = ((($37)) + 8|0);
  $39 = $10;
  $40 = (($38) + (($39*24)|0)|0);
  $41 = ((($40)) + 8|0);
  $42 = +HEAPF64[$41>>3];
  $43 = (__cmsWrite15Fixed16Number($36,$42)|0);
  $44 = ($43|0)!=(0);
  if (!($44)) {
   label = 10;
   break;
  }
  $45 = $6;
  $46 = $9;
  $47 = ((($46)) + 8|0);
  $48 = $10;
  $49 = (($47) + (($48*24)|0)|0);
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (__cmsWriteUInt32Number($45,$51)|0);
  $53 = ($52|0)!=(0);
  if (!($53)) {
   label = 12;
   break;
  }
  $54 = $10;
  $55 = (($54) + 1)|0;
  $10 = $55;
 }
 if ((label|0) == 8) {
  $4 = 0;
  $56 = $4;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 10) {
  $4 = 0;
  $56 = $4;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 12) {
  $4 = 0;
  $56 = $4;
  STACKTOP = sp;return ($56|0);
 }
 else if ((label|0) == 14) {
  $4 = 1;
  $56 = $4;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _Type_Screening_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (__cmsDupMem($8,$9,392)|0);
 STACKTOP = sp;return ($10|0);
}
function _Type_Screening_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_ViewingConditions_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $10 = $5;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__cmsMallocZero($12,56)|0);
 $9 = $13;
 $14 = $9;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $4 = 0;
  $39 = $4;
  STACKTOP = sp;return ($39|0);
 }
 $16 = $7;
 HEAP32[$16>>2] = 0;
 $17 = $6;
 $18 = $9;
 $19 = (__cmsReadXYZNumber($17,$18)|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $6;
  $22 = $9;
  $23 = ((($22)) + 24|0);
  $24 = (__cmsReadXYZNumber($21,$23)|0);
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = $6;
   $27 = $9;
   $28 = ((($27)) + 48|0);
   $29 = (__cmsReadUInt32Number($26,$28)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $7;
    HEAP32[$31>>2] = 1;
    $32 = $9;
    $4 = $32;
    $39 = $4;
    STACKTOP = sp;return ($39|0);
   }
  }
 }
 $33 = $9;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $5;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $9;
  __cmsFree($37,$38);
 }
 $4 = 0;
 $39 = $4;
 STACKTOP = sp;return ($39|0);
}
function _Type_ViewingConditions_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $9 = $10;
 $11 = $6;
 $12 = $9;
 $13 = (__cmsWriteXYZNumber($11,$12)|0);
 $14 = ($13|0)!=(0);
 do {
  if ($14) {
   $15 = $6;
   $16 = $9;
   $17 = ((($16)) + 24|0);
   $18 = (__cmsWriteXYZNumber($15,$17)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    $4 = 0;
    break;
   }
   $20 = $6;
   $21 = $9;
   $22 = ((($21)) + 48|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (__cmsWriteUInt32Number($20,$23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $4 = 1;
    break;
   } else {
    $4 = 0;
    break;
   }
  } else {
   $4 = 0;
  }
 } while(0);
 $26 = $4;
 STACKTOP = sp;return ($26|0);
}
function _Type_ViewingConditions_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (__cmsDupMem($8,$9,56)|0);
 STACKTOP = sp;return ($10|0);
}
function _Type_ViewingConditions_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_XYZ_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 HEAP32[$10>>2] = 0;
 $11 = $5;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__cmsMallocZero($13,24)|0);
 $9 = $14;
 $15 = $9;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $4 = 0;
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 $17 = $6;
 $18 = $9;
 $19 = (__cmsReadXYZNumber($17,$18)|0);
 $20 = ($19|0)!=(0);
 if ($20) {
  $25 = $7;
  HEAP32[$25>>2] = 1;
  $26 = $9;
  $4 = $26;
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 } else {
  $21 = $5;
  $22 = ((($21)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $9;
  __cmsFree($23,$24);
  $4 = 0;
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _Type_XYZ_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $6;
 $10 = (__cmsWriteXYZNumber($8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function _Type_XYZ_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (__cmsDupMem($8,$9,24)|0);
 STACKTOP = sp;return ($10|0);
}
function _Type_XYZ_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 __cmsFree($6,$7);
 STACKTOP = sp;return;
}
function _Type_ProfileSequenceId_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 HEAP32[$12>>2] = 0;
 $13 = $6;
 $14 = ((($13)) + 284|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $6;
 $17 = (FUNCTION_TABLE_ii[$15 & 511]($16)|0);
 $18 = (($17) - 8)|0;
 $11 = $18;
 $19 = $6;
 $20 = (__cmsReadUInt32Number($19,$10)|0);
 $21 = ($20|0)!=(0);
 if (!($21)) {
  $4 = 0;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 $22 = $8;
 $23 = (($22) - 4)|0;
 $8 = $23;
 $24 = $5;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$10>>2]|0;
 $28 = (_cmsAllocProfileSequenceDescription($26,$27)|0);
 $9 = $28;
 $29 = $9;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $4 = 0;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 $31 = $5;
 $32 = $6;
 $33 = HEAP32[$10>>2]|0;
 $34 = $11;
 $35 = $9;
 $36 = (_ReadPositionTable($31,$32,$33,$34,$35,367)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $39 = $7;
  HEAP32[$39>>2] = 1;
  $40 = $9;
  $4 = $40;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 } else {
  $38 = $9;
  _cmsFreeProfileSequenceDescription($38);
  $4 = 0;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _Type_ProfileSequenceId_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $9 = $11;
 $12 = $6;
 $13 = ((($12)) + 284|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $6;
 $16 = (FUNCTION_TABLE_ii[$14 & 511]($15)|0);
 $17 = (($16) - 8)|0;
 $10 = $17;
 $18 = $6;
 $19 = $9;
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsWriteUInt32Number($18,$20)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $4 = 0;
  $31 = $4;
  STACKTOP = sp;return ($31|0);
 }
 $23 = $5;
 $24 = $6;
 $25 = $9;
 $26 = HEAP32[$25>>2]|0;
 $27 = $10;
 $28 = $9;
 $29 = (_WritePositionTable($23,$24,0,$26,$27,$28,368)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $4 = 1;
  $31 = $4;
  STACKTOP = sp;return ($31|0);
 } else {
  $4 = 0;
  $31 = $4;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _Type_ProfileSequenceId_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsDupProfileSequenceDescription($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_ProfileSequenceId_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsFreeProfileSequenceDescription($4);
 STACKTOP = sp;return;
}
function _Type_Dictionary_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer6 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 88|0;
 $12 = sp + 84|0;
 $14 = sp + 32|0;
 $15 = sp + 28|0;
 $16 = sp + 24|0;
 $17 = sp + 20|0;
 $18 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 HEAP32[$15>>2] = 0;
 HEAP32[$16>>2] = 0;
 HEAP32[$17>>2] = 0;
 HEAP32[$18>>2] = 0;
 $20 = $7;
 HEAP32[$20>>2] = 0;
 $21 = $6;
 $22 = ((($21)) + 284|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 $25 = (FUNCTION_TABLE_ii[$23 & 511]($24)|0);
 $26 = (($25) - 8)|0;
 $13 = $26;
 $27 = $6;
 $28 = (__cmsReadUInt32Number($27,$11)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $4 = 0;
  $129 = $4;
  STACKTOP = sp;return ($129|0);
 }
 $30 = $8;
 $31 = (($30) - 4)|0;
 $8 = $31;
 $32 = $6;
 $33 = (__cmsReadUInt32Number($32,$12)|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  $4 = 0;
  $129 = $4;
  STACKTOP = sp;return ($129|0);
 }
 $35 = $8;
 $36 = (($35) - 4)|0;
 $8 = $36;
 $37 = HEAP32[$12>>2]|0;
 $38 = ($37|0)!=(16);
 $39 = HEAP32[$12>>2]|0;
 $40 = ($39|0)!=(24);
 $or$cond = $38 & $40;
 $41 = HEAP32[$12>>2]|0;
 $42 = ($41|0)!=(32);
 $or$cond3 = $or$cond & $42;
 $43 = $5;
 $44 = ((($43)) + 20|0);
 $45 = HEAP32[$44>>2]|0;
 if ($or$cond3) {
  $46 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $46;
  _cmsSignalError($45,8,28675,$vararg_buffer);
  $4 = 0;
  $129 = $4;
  STACKTOP = sp;return ($129|0);
 }
 $47 = (_cmsDictAlloc($45)|0);
 $9 = $47;
 $48 = $9;
 $49 = ($48|0)==(0|0);
 if ($49) {
  $4 = 0;
  $129 = $4;
  STACKTOP = sp;return ($129|0);
 }
 $50 = $5;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$11>>2]|0;
 $54 = HEAP32[$12>>2]|0;
 $55 = (_AllocArray($52,$14,$53,$54)|0);
 $56 = ($55|0)!=(0);
 L17: do {
  if ($56) {
   $57 = $6;
   $58 = HEAP32[$11>>2]|0;
   $59 = HEAP32[$12>>2]|0;
   $60 = $13;
   $61 = (_ReadOffsetArray($57,$14,$58,$59,$60)|0);
   $62 = ($61|0)!=(0);
   if ($62) {
    $10 = 0;
    while(1) {
     $63 = $10;
     $64 = HEAP32[$11>>2]|0;
     $65 = ($63>>>0)<($64>>>0);
     if (!($65)) {
      break;
     }
     $66 = $6;
     $67 = $10;
     $68 = (_ReadOneWChar($66,$14,$67,$15)|0);
     $69 = ($68|0)!=(0);
     if (!($69)) {
      break L17;
     }
     $70 = $6;
     $71 = ((($14)) + 12|0);
     $72 = $10;
     $73 = (_ReadOneWChar($70,$71,$72,$16)|0);
     $74 = ($73|0)!=(0);
     if (!($74)) {
      break L17;
     }
     $75 = HEAP32[$12>>2]|0;
     $76 = ($75>>>0)>(16);
     if ($76) {
      $77 = $5;
      $78 = $6;
      $79 = ((($14)) + 24|0);
      $80 = $10;
      $81 = (_ReadOneMLUC($77,$78,$79,$80,$17)|0);
      $82 = ($81|0)!=(0);
      if (!($82)) {
       break L17;
      }
     }
     $83 = HEAP32[$12>>2]|0;
     $84 = ($83>>>0)>(24);
     if ($84) {
      $85 = $5;
      $86 = $6;
      $87 = ((($14)) + 36|0);
      $88 = $10;
      $89 = (_ReadOneMLUC($85,$86,$87,$88,$18)|0);
      $90 = ($89|0)!=(0);
      if (!($90)) {
       break L17;
      }
     }
     $91 = HEAP32[$15>>2]|0;
     $92 = ($91|0)==(0|0);
     $93 = HEAP32[$16>>2]|0;
     $94 = ($93|0)==(0|0);
     $or$cond5 = $92 | $94;
     if ($or$cond5) {
      $95 = $5;
      $96 = ((($95)) + 20|0);
      $97 = HEAP32[$96>>2]|0;
      _cmsSignalError($97,12,28716,$vararg_buffer6);
      $19 = 0;
     } else {
      $98 = $9;
      $99 = HEAP32[$15>>2]|0;
      $100 = HEAP32[$16>>2]|0;
      $101 = HEAP32[$17>>2]|0;
      $102 = HEAP32[$18>>2]|0;
      $103 = (_cmsDictAddEntry($98,$99,$100,$101,$102)|0);
      $19 = $103;
     }
     $104 = HEAP32[$15>>2]|0;
     $105 = ($104|0)!=(0|0);
     if ($105) {
      $106 = $5;
      $107 = ((($106)) + 20|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = HEAP32[$15>>2]|0;
      __cmsFree($108,$109);
     }
     $110 = HEAP32[$16>>2]|0;
     $111 = ($110|0)!=(0|0);
     if ($111) {
      $112 = $5;
      $113 = ((($112)) + 20|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = HEAP32[$16>>2]|0;
      __cmsFree($114,$115);
     }
     $116 = HEAP32[$17>>2]|0;
     $117 = ($116|0)!=(0|0);
     if ($117) {
      $118 = HEAP32[$17>>2]|0;
      _cmsMLUfree($118);
     }
     $119 = HEAP32[$18>>2]|0;
     $120 = ($119|0)!=(0|0);
     if ($120) {
      $121 = HEAP32[$18>>2]|0;
      _cmsMLUfree($121);
     }
     $122 = $19;
     $123 = ($122|0)!=(0);
     if (!($123)) {
      break L17;
     }
     $124 = $10;
     $125 = (($124) + 1)|0;
     $10 = $125;
    }
    _FreeArray($14);
    $126 = $7;
    HEAP32[$126>>2] = 1;
    $127 = $9;
    $4 = $127;
    $129 = $4;
    STACKTOP = sp;return ($129|0);
   }
  }
 } while(0);
 _FreeArray($14);
 $128 = $9;
 _cmsDictFree($128);
 $4 = 0;
 $129 = $4;
 STACKTOP = sp;return ($129|0);
}
function _Type_Dictionary_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $19 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $20 = $7;
 $9 = $20;
 $21 = $9;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $4 = 0;
  $155 = $4;
  STACKTOP = sp;return ($155|0);
 }
 $23 = $6;
 $24 = ((($23)) + 284|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $6;
 $27 = (FUNCTION_TABLE_ii[$25 & 511]($26)|0);
 $28 = (($27) - 8)|0;
 $18 = $28;
 $14 = 0;
 $11 = 0;
 $12 = 0;
 $29 = $9;
 $30 = (_cmsDictGetEntryList($29)|0);
 $10 = $30;
 while(1) {
  $31 = $10;
  $32 = ($31|0)!=(0|0);
  if (!($32)) {
   break;
  }
  $33 = $10;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $11 = 1;
  }
  $37 = $10;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $12 = 1;
  }
  $41 = $14;
  $42 = (($41) + 1)|0;
  $14 = $42;
  $43 = $10;
  $44 = (_cmsDictNextEntry($43)|0);
  $10 = $44;
 }
 $15 = 16;
 $45 = $11;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $15;
  $48 = (($47) + 8)|0;
  $15 = $48;
 }
 $49 = $12;
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $15;
  $52 = (($51) + 8)|0;
  $15 = $52;
 }
 $53 = $6;
 $54 = $14;
 $55 = (__cmsWriteUInt32Number($53,$54)|0);
 $56 = ($55|0)!=(0);
 if (!($56)) {
  $4 = 0;
  $155 = $4;
  STACKTOP = sp;return ($155|0);
 }
 $57 = $6;
 $58 = $15;
 $59 = (__cmsWriteUInt32Number($57,$58)|0);
 $60 = ($59|0)!=(0);
 if (!($60)) {
  $4 = 0;
  $155 = $4;
  STACKTOP = sp;return ($155|0);
 }
 $61 = $6;
 $62 = ((($61)) + 284|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $6;
 $65 = (FUNCTION_TABLE_ii[$63 & 511]($64)|0);
 $16 = $65;
 $66 = $5;
 $67 = ((($66)) + 20|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $14;
 $70 = $15;
 $71 = (_AllocArray($68,$19,$69,$70)|0);
 $72 = ($71|0)!=(0);
 L29: do {
  if ($72) {
   $73 = $6;
   $74 = $14;
   $75 = $15;
   $76 = (_WriteOffsetArray($73,$19,$74,$75)|0);
   $77 = ($76|0)!=(0);
   if ($77) {
    $78 = $9;
    $79 = (_cmsDictGetEntryList($78)|0);
    $10 = $79;
    $13 = 0;
    while(1) {
     $80 = $13;
     $81 = $14;
     $82 = ($80>>>0)<($81>>>0);
     $83 = $6;
     if (!($82)) {
      break;
     }
     $84 = $13;
     $85 = $10;
     $86 = ((($85)) + 12|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $18;
     $89 = (_WriteOneWChar($83,$19,$84,$87,$88)|0);
     $90 = ($89|0)!=(0);
     if (!($90)) {
      break L29;
     }
     $91 = $6;
     $92 = ((($19)) + 12|0);
     $93 = $13;
     $94 = $10;
     $95 = ((($94)) + 16|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $18;
     $98 = (_WriteOneWChar($91,$92,$93,$96,$97)|0);
     $99 = ($98|0)!=(0);
     if (!($99)) {
      break L29;
     }
     $100 = $10;
     $101 = ((($100)) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)!=(0|0);
     if ($103) {
      $104 = $5;
      $105 = $6;
      $106 = ((($19)) + 24|0);
      $107 = $13;
      $108 = $10;
      $109 = ((($108)) + 4|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = $18;
      $112 = (_WriteOneMLUC($104,$105,$106,$107,$110,$111)|0);
      $113 = ($112|0)!=(0);
      if (!($113)) {
       break L29;
      }
     }
     $114 = $10;
     $115 = ((($114)) + 8|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)!=(0|0);
     if ($117) {
      $118 = $5;
      $119 = $6;
      $120 = ((($19)) + 36|0);
      $121 = $13;
      $122 = $10;
      $123 = ((($122)) + 8|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = $18;
      $126 = (_WriteOneMLUC($118,$119,$120,$121,$124,$125)|0);
      $127 = ($126|0)!=(0);
      if (!($127)) {
       break L29;
      }
     }
     $128 = $10;
     $129 = (_cmsDictNextEntry($128)|0);
     $10 = $129;
     $130 = $13;
     $131 = (($130) + 1)|0;
     $13 = $131;
    }
    $132 = ((($83)) + 284|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $6;
    $135 = (FUNCTION_TABLE_ii[$133 & 511]($134)|0);
    $17 = $135;
    $136 = $6;
    $137 = ((($136)) + 276|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = $6;
    $140 = $16;
    $141 = (FUNCTION_TABLE_iii[$138 & 511]($139,$140)|0);
    $142 = ($141|0)!=(0);
    if ($142) {
     $143 = $6;
     $144 = $14;
     $145 = $15;
     $146 = (_WriteOffsetArray($143,$19,$144,$145)|0);
     $147 = ($146|0)!=(0);
     if ($147) {
      $148 = $6;
      $149 = ((($148)) + 276|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = $6;
      $152 = $17;
      $153 = (FUNCTION_TABLE_iii[$150 & 511]($151,$152)|0);
      $154 = ($153|0)!=(0);
      if ($154) {
       _FreeArray($19);
       $4 = 1;
       $155 = $4;
       STACKTOP = sp;return ($155|0);
      }
     }
    }
   }
  }
 } while(0);
 _FreeArray($19);
 $4 = 0;
 $155 = $4;
 STACKTOP = sp;return ($155|0);
}
function _Type_Dictionary_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsDictDup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _Type_Dictionary_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsDictFree($4);
 STACKTOP = sp;return;
}
function _Type_vcgt_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer5 = sp + 168|0;
 $vararg_buffer2 = sp + 160|0;
 $vararg_buffer = sp + 152|0;
 $9 = sp + 184|0;
 $13 = sp + 212|0;
 $14 = sp + 210|0;
 $15 = sp + 208|0;
 $16 = sp + 214|0;
 $17 = sp + 80|0;
 $18 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = $7;
 HEAP32[$19>>2] = 0;
 $20 = $6;
 $21 = (__cmsReadUInt32Number($20,$9)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $4 = 0;
  $188 = $4;
  STACKTOP = sp;return ($188|0);
 }
 $23 = $5;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (__cmsCalloc($25,3,4)|0);
 $12 = $26;
 $27 = $12;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $4 = 0;
  $188 = $4;
  STACKTOP = sp;return ($188|0);
 }
 $29 = HEAP32[$9>>2]|0;
 L9: do {
  switch ($29|0) {
  case 0:  {
   $30 = $6;
   $31 = (__cmsReadUInt16Number($30,$13)|0);
   $32 = ($31|0)!=(0);
   if ($32) {
    $33 = HEAP16[$13>>1]|0;
    $34 = $33&65535;
    $35 = ($34|0)!=(3);
    if ($35) {
     $36 = $5;
     $37 = ((($36)) + 20|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = HEAP16[$13>>1]|0;
     $40 = $39&65535;
     HEAP32[$vararg_buffer>>2] = $40;
     _cmsSignalError($38,8,28456,$vararg_buffer);
     label = 34;
     break L9;
    }
    $41 = $6;
    $42 = (__cmsReadUInt16Number($41,$14)|0);
    $43 = ($42|0)!=(0);
    if ($43) {
     $44 = $6;
     $45 = (__cmsReadUInt16Number($44,$15)|0);
     $46 = ($45|0)!=(0);
     if ($46) {
      $47 = HEAP16[$14>>1]|0;
      $48 = $47&65535;
      $49 = ($48|0)==(256);
      if ($49) {
       $50 = HEAP16[$15>>1]|0;
       $51 = $50&65535;
       $52 = ($51|0)==(1);
       $53 = $8;
       $54 = ($53|0)==(1576);
       $or$cond = $52 & $54;
       if ($or$cond) {
        HEAP16[$15>>1] = 2;
       }
      }
      $10 = 0;
      L22: while(1) {
       $55 = $10;
       $56 = ($55>>>0)<(3);
       if (!($56)) {
        label = 33;
        break L9;
       }
       $57 = $5;
       $58 = ((($57)) + 20|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = HEAP16[$14>>1]|0;
       $61 = $60&65535;
       $62 = (_cmsBuildTabulatedToneCurve16($59,$61,0)|0);
       $63 = $12;
       $64 = $10;
       $65 = (($63) + ($64<<2)|0);
       HEAP32[$65>>2] = $62;
       $66 = $12;
       $67 = $10;
       $68 = (($66) + ($67<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($69|0)==(0|0);
       if ($70) {
        label = 34;
        break L9;
       }
       $71 = HEAP16[$15>>1]|0;
       $72 = $71&65535;
       L26: do {
        switch ($72|0) {
        case 1:  {
         $11 = 0;
         while(1) {
          $73 = $11;
          $74 = HEAP16[$14>>1]|0;
          $75 = $74&65535;
          $76 = ($73>>>0)<($75>>>0);
          if (!($76)) {
           break L26;
          }
          $77 = $6;
          $78 = (__cmsReadUInt8Number($77,$16)|0);
          $79 = ($78|0)!=(0);
          if (!($79)) {
           label = 34;
           break L9;
          }
          $80 = HEAP8[$16>>0]|0;
          $81 = $80&255;
          $82 = $81&65535;
          $83 = $82 << 8;
          $84 = HEAP8[$16>>0]|0;
          $85 = $84&255;
          $86 = $83 | $85;
          $87 = $86&65535;
          $88 = $12;
          $89 = $10;
          $90 = (($88) + ($89<<2)|0);
          $91 = HEAP32[$90>>2]|0;
          $92 = ((($91)) + 24|0);
          $93 = HEAP32[$92>>2]|0;
          $94 = $11;
          $95 = (($93) + ($94<<1)|0);
          HEAP16[$95>>1] = $87;
          $96 = $11;
          $97 = (($96) + 1)|0;
          $11 = $97;
         }
         break;
        }
        case 2:  {
         $98 = $6;
         $99 = HEAP16[$14>>1]|0;
         $100 = $99&65535;
         $101 = $12;
         $102 = $10;
         $103 = (($101) + ($102<<2)|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = ((($104)) + 24|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = (__cmsReadUInt16Array($98,$100,$106)|0);
         $108 = ($107|0)!=(0);
         if (!($108)) {
          label = 34;
          break L9;
         }
         break;
        }
        default: {
         break L22;
        }
        }
       } while(0);
       $115 = $10;
       $116 = (($115) + 1)|0;
       $10 = $116;
      }
      $109 = $5;
      $110 = ((($109)) + 20|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = HEAP16[$15>>1]|0;
      $113 = $112&65535;
      $114 = $113<<3;
      HEAP32[$vararg_buffer2>>2] = $114;
      _cmsSignalError($111,8,28501,$vararg_buffer2);
      label = 34;
     } else {
      label = 34;
     }
    } else {
     label = 34;
    }
   } else {
    label = 34;
   }
   break;
  }
  case 1:  {
   $10 = 0;
   while(1) {
    $117 = $10;
    $118 = ($117>>>0)<(3);
    if (!($118)) {
     label = 33;
     break L9;
    }
    $119 = $6;
    $120 = $10;
    $121 = (($17) + (($120*24)|0)|0);
    $122 = (__cmsRead15Fixed16Number($119,$121)|0);
    $123 = ($122|0)!=(0);
    if (!($123)) {
     label = 34;
     break L9;
    }
    $124 = $6;
    $125 = $10;
    $126 = (($17) + (($125*24)|0)|0);
    $127 = ((($126)) + 8|0);
    $128 = (__cmsRead15Fixed16Number($124,$127)|0);
    $129 = ($128|0)!=(0);
    if (!($129)) {
     label = 34;
     break L9;
    }
    $130 = $6;
    $131 = $10;
    $132 = (($17) + (($131*24)|0)|0);
    $133 = ((($132)) + 16|0);
    $134 = (__cmsRead15Fixed16Number($130,$133)|0);
    $135 = ($134|0)!=(0);
    if (!($135)) {
     label = 34;
     break L9;
    }
    $136 = $10;
    $137 = (($17) + (($136*24)|0)|0);
    $138 = +HEAPF64[$137>>3];
    HEAPF64[$18>>3] = $138;
    $139 = $10;
    $140 = (($17) + (($139*24)|0)|0);
    $141 = ((($140)) + 16|0);
    $142 = +HEAPF64[$141>>3];
    $143 = $10;
    $144 = (($17) + (($143*24)|0)|0);
    $145 = ((($144)) + 8|0);
    $146 = +HEAPF64[$145>>3];
    $147 = $142 - $146;
    $148 = $10;
    $149 = (($17) + (($148*24)|0)|0);
    $150 = +HEAPF64[$149>>3];
    $151 = 1.0 / $150;
    $152 = (+Math_pow((+$147),(+$151)));
    $153 = ((($18)) + 8|0);
    HEAPF64[$153>>3] = $152;
    $154 = ((($18)) + 16|0);
    HEAPF64[$154>>3] = 0.0;
    $155 = ((($18)) + 24|0);
    HEAPF64[$155>>3] = 0.0;
    $156 = ((($18)) + 32|0);
    HEAPF64[$156>>3] = 0.0;
    $157 = $10;
    $158 = (($17) + (($157*24)|0)|0);
    $159 = ((($158)) + 8|0);
    $160 = +HEAPF64[$159>>3];
    $161 = ((($18)) + 40|0);
    HEAPF64[$161>>3] = $160;
    $162 = ((($18)) + 48|0);
    HEAPF64[$162>>3] = 0.0;
    $163 = $5;
    $164 = ((($163)) + 20|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (_cmsBuildParametricToneCurve($165,5,$18)|0);
    $167 = $12;
    $168 = $10;
    $169 = (($167) + ($168<<2)|0);
    HEAP32[$169>>2] = $166;
    $170 = $12;
    $171 = $10;
    $172 = (($170) + ($171<<2)|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ($173|0)==(0|0);
    if ($174) {
     label = 34;
     break L9;
    }
    $175 = $10;
    $176 = (($175) + 1)|0;
    $10 = $176;
   }
   break;
  }
  default: {
   $177 = $5;
   $178 = ((($177)) + 20|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $180;
   _cmsSignalError($179,8,28537,$vararg_buffer5);
   label = 34;
  }
  }
 } while(0);
 if ((label|0) == 33) {
  $181 = $7;
  HEAP32[$181>>2] = 1;
  $182 = $12;
  $4 = $182;
  $188 = $4;
  STACKTOP = sp;return ($188|0);
 }
 else if ((label|0) == 34) {
  $183 = $12;
  _cmsFreeToneCurveTriple($183);
  $184 = $5;
  $185 = ((($184)) + 20|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = $12;
  __cmsFree($186,$187);
  $4 = 0;
  $188 = $4;
  STACKTOP = sp;return ($188|0);
 }
 return (0)|0;
}
function _Type_vcgt_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0;
 var $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $15 = $7;
 $9 = $15;
 $16 = $9;
 $17 = HEAP32[$16>>2]|0;
 $18 = (_cmsGetToneCurveParametricType($17)|0);
 $19 = ($18|0)==(5);
 L1: do {
  if ($19) {
   $20 = $9;
   $21 = ((($20)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_cmsGetToneCurveParametricType($22)|0);
   $24 = ($23|0)==(5);
   if ($24) {
    $25 = $9;
    $26 = ((($25)) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_cmsGetToneCurveParametricType($27)|0);
    $29 = ($28|0)==(5);
    if ($29) {
     $30 = $6;
     $31 = (__cmsWriteUInt32Number($30,1)|0);
     $32 = ($31|0)!=(0);
     if (!($32)) {
      $4 = 0;
      $121 = $4;
      STACKTOP = sp;return ($121|0);
     }
     $10 = 0;
     while(1) {
      $33 = $10;
      $34 = ($33>>>0)<(3);
      if (!($34)) {
       break L1;
      }
      $35 = $9;
      $36 = $10;
      $37 = (($35) + ($36<<2)|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($38)) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ((($40)) + 16|0);
      $42 = +HEAPF64[$41>>3];
      HEAPF64[$12>>3] = $42;
      $43 = $9;
      $44 = $10;
      $45 = (($43) + ($44<<2)|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ((($46)) + 8|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ((($48)) + 16|0);
      $50 = ((($49)) + 40|0);
      $51 = +HEAPF64[$50>>3];
      $52 = ((($12)) + 8|0);
      HEAPF64[$52>>3] = $51;
      $53 = $9;
      $54 = $10;
      $55 = (($53) + ($54<<2)|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($56)) + 8|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ((($58)) + 16|0);
      $60 = ((($59)) + 8|0);
      $61 = +HEAPF64[$60>>3];
      $62 = +HEAPF64[$12>>3];
      $63 = (+Math_pow((+$61),(+$62)));
      $64 = ((($12)) + 8|0);
      $65 = +HEAPF64[$64>>3];
      $66 = $63 + $65;
      $67 = ((($12)) + 16|0);
      HEAPF64[$67>>3] = $66;
      $68 = $6;
      $69 = +HEAPF64[$12>>3];
      $70 = (__cmsWrite15Fixed16Number($68,$69)|0);
      $71 = ($70|0)!=(0);
      if (!($71)) {
       label = 9;
       break;
      }
      $72 = $6;
      $73 = ((($12)) + 8|0);
      $74 = +HEAPF64[$73>>3];
      $75 = (__cmsWrite15Fixed16Number($72,$74)|0);
      $76 = ($75|0)!=(0);
      if (!($76)) {
       label = 11;
       break;
      }
      $77 = $6;
      $78 = ((($12)) + 16|0);
      $79 = +HEAPF64[$78>>3];
      $80 = (__cmsWrite15Fixed16Number($77,$79)|0);
      $81 = ($80|0)!=(0);
      if (!($81)) {
       label = 13;
       break;
      }
      $82 = $10;
      $83 = (($82) + 1)|0;
      $10 = $83;
     }
     if ((label|0) == 9) {
      $4 = 0;
      $121 = $4;
      STACKTOP = sp;return ($121|0);
     }
     else if ((label|0) == 11) {
      $4 = 0;
      $121 = $4;
      STACKTOP = sp;return ($121|0);
     }
     else if ((label|0) == 13) {
      $4 = 0;
      $121 = $4;
      STACKTOP = sp;return ($121|0);
     }
    } else {
     label = 15;
    }
   } else {
    label = 15;
   }
  } else {
   label = 15;
  }
 } while(0);
 L22: do {
  if ((label|0) == 15) {
   $84 = $6;
   $85 = (__cmsWriteUInt32Number($84,0)|0);
   $86 = ($85|0)!=(0);
   if (!($86)) {
    $4 = 0;
    $121 = $4;
    STACKTOP = sp;return ($121|0);
   }
   $87 = $6;
   $88 = (__cmsWriteUInt16Number($87,3)|0);
   $89 = ($88|0)!=(0);
   if (!($89)) {
    $4 = 0;
    $121 = $4;
    STACKTOP = sp;return ($121|0);
   }
   $90 = $6;
   $91 = (__cmsWriteUInt16Number($90,256)|0);
   $92 = ($91|0)!=(0);
   if (!($92)) {
    $4 = 0;
    $121 = $4;
    STACKTOP = sp;return ($121|0);
   }
   $93 = $6;
   $94 = (__cmsWriteUInt16Number($93,2)|0);
   $95 = ($94|0)!=(0);
   if (!($95)) {
    $4 = 0;
    $121 = $4;
    STACKTOP = sp;return ($121|0);
   }
   $10 = 0;
   L40: while(1) {
    $96 = $10;
    $97 = ($96>>>0)<(3);
    if (!($97)) {
     break L22;
    }
    $11 = 0;
    while(1) {
     $98 = $11;
     $99 = ($98>>>0)<(256);
     if (!($99)) {
      break;
     }
     $100 = $9;
     $101 = $10;
     $102 = (($100) + ($101<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $11;
     $105 = (+($104>>>0));
     $106 = $105 / 255.0;
     $107 = $106;
     $108 = (+_cmsEvalToneCurveFloat($103,$107));
     $13 = $108;
     $109 = $13;
     $110 = $109;
     $111 = $110 * 65535.0;
     $112 = (__cmsQuickSaturateWord_619($111)|0);
     $14 = $112;
     $113 = $6;
     $114 = $14;
     $115 = (__cmsWriteUInt16Number($113,$114)|0);
     $116 = ($115|0)!=(0);
     if (!($116)) {
      break L40;
     }
     $117 = $11;
     $118 = (($117) + 1)|0;
     $11 = $118;
    }
    $119 = $10;
    $120 = (($119) + 1)|0;
    $10 = $120;
   }
   $4 = 0;
   $121 = $4;
   STACKTOP = sp;return ($121|0);
  }
 } while(0);
 $4 = 1;
 $121 = $4;
 STACKTOP = sp;return ($121|0);
}
function _Type_vcgt_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $7 = $9;
 $10 = $4;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__cmsCalloc($12,3,4)|0);
 $8 = $13;
 $14 = $8;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $3 = 0;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 } else {
  $16 = $7;
  $17 = HEAP32[$16>>2]|0;
  $18 = (_cmsDupToneCurve($17)|0);
  $19 = $8;
  HEAP32[$19>>2] = $18;
  $20 = $7;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_cmsDupToneCurve($22)|0);
  $24 = $8;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $7;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (_cmsDupToneCurve($28)|0);
  $30 = $8;
  $31 = ((($30)) + 8|0);
  HEAP32[$31>>2] = $29;
  $32 = $8;
  $3 = $32;
  $33 = $3;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _Type_vcgt_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsFreeToneCurveTriple($4);
 $5 = $2;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3;
 __cmsFree($7,$8);
 STACKTOP = sp;return;
}
function __cmsQuickSaturateWord_619($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = $3 + 0.5;
 $2 = $4;
 $5 = $2;
 $6 = $5 <= 0.0;
 do {
  if ($6) {
   $1 = 0;
  } else {
   $7 = $2;
   $8 = $7 >= 65535.0;
   if ($8) {
    $1 = -1;
    break;
   } else {
    $9 = $2;
    $10 = (__cmsQuickFloorWord_620($9)|0);
    $1 = $10;
    break;
   }
  }
 } while(0);
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function __cmsQuickFloorWord_620($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 - 32767.0;
 $4 = (__cmsQuickFloor_621($3)|0);
 $5 = $4&65535;
 $6 = $5&65535;
 $7 = (($6) + 32767)|0;
 $8 = $7&65535;
 STACKTOP = sp;return ($8|0);
}
function __cmsQuickFloor_621($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $1 = $0;
 $2 = 103079215104.0;
 $4 = $1;
 $5 = $4 + 103079215104.0;
 HEAPF64[$3>>3] = $5;
 $6 = HEAP32[$3>>2]|0;
 $7 = $6 >> 16;
 STACKTOP = sp;return ($7|0);
}
function _AllocArray($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $6;
 dest=$9; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = (_AllocElem($10,$11,$12)|0);
 $14 = ($13|0)!=(0);
 do {
  if ($14) {
   $15 = $5;
   $16 = $6;
   $17 = ((($16)) + 12|0);
   $18 = $7;
   $19 = (_AllocElem($15,$17,$18)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    $21 = $8;
    $22 = ($21>>>0)>(16);
    if ($22) {
     $23 = $5;
     $24 = $6;
     $25 = ((($24)) + 24|0);
     $26 = $7;
     $27 = (_AllocElem($23,$25,$26)|0);
     $28 = ($27|0)!=(0);
     if (!($28)) {
      break;
     }
    }
    $29 = $8;
    $30 = ($29>>>0)>(24);
    if ($30) {
     $31 = $5;
     $32 = $6;
     $33 = ((($32)) + 36|0);
     $34 = $7;
     $35 = (_AllocElem($31,$33,$34)|0);
     $36 = ($35|0)!=(0);
     if (!($36)) {
      break;
     }
    }
    $4 = 1;
    $38 = $4;
    STACKTOP = sp;return ($38|0);
   }
  }
 } while(0);
 $37 = $6;
 _FreeArray($37);
 $4 = 0;
 $38 = $4;
 STACKTOP = sp;return ($38|0);
}
function _WriteOffsetArray($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 while(1) {
  $10 = $9;
  $11 = $7;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   label = 14;
   break;
  }
  $13 = $5;
  $14 = $6;
  $15 = $9;
  $16 = (_WriteOneElem($13,$14,$15)|0);
  $17 = ($16|0)!=(0);
  if (!($17)) {
   label = 4;
   break;
  }
  $18 = $5;
  $19 = $6;
  $20 = ((($19)) + 12|0);
  $21 = $9;
  $22 = (_WriteOneElem($18,$20,$21)|0);
  $23 = ($22|0)!=(0);
  if (!($23)) {
   label = 6;
   break;
  }
  $24 = $8;
  $25 = ($24>>>0)>(16);
  if ($25) {
   $26 = $5;
   $27 = $6;
   $28 = ((($27)) + 24|0);
   $29 = $9;
   $30 = (_WriteOneElem($26,$28,$29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    label = 9;
    break;
   }
  }
  $32 = $8;
  $33 = ($32>>>0)>(24);
  if ($33) {
   $34 = $5;
   $35 = $6;
   $36 = ((($35)) + 36|0);
   $37 = $9;
   $38 = (_WriteOneElem($34,$36,$37)|0);
   $39 = ($38|0)!=(0);
   if (!($39)) {
    label = 12;
    break;
   }
  }
  $40 = $9;
  $41 = (($40) + 1)|0;
  $9 = $41;
 }
 if ((label|0) == 4) {
  $4 = 0;
 }
 else if ((label|0) == 6) {
  $4 = 0;
 }
 else if ((label|0) == 9) {
  $4 = 0;
 }
 else if ((label|0) == 12) {
  $4 = 0;
 }
 else if ((label|0) == 14) {
  $4 = 1;
 }
 $42 = $4;
 STACKTOP = sp;return ($42|0);
}
function _WriteOneWChar($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = ((($13)) + 284|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $6;
 $17 = (FUNCTION_TABLE_ii[$15 & 511]($16)|0);
 $11 = $17;
 $18 = $11;
 $19 = $10;
 $20 = (($18) - ($19))|0;
 $21 = $7;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $8;
 $25 = (($23) + ($24<<2)|0);
 HEAP32[$25>>2] = $20;
 $26 = $9;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = $7;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $8;
  $32 = (($30) + ($31<<2)|0);
  HEAP32[$32>>2] = 0;
  $33 = $7;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $8;
  $37 = (($35) + ($36<<2)|0);
  HEAP32[$37>>2] = 0;
  $5 = 1;
  $57 = $5;
  STACKTOP = sp;return ($57|0);
 }
 $38 = $9;
 $39 = (_mywcslen_625($38)|0);
 $12 = $39;
 $40 = $6;
 $41 = $12;
 $42 = $9;
 $43 = (__cmsWriteWCharArray($40,$41,$42)|0);
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $6;
  $46 = ((($45)) + 284|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $6;
  $49 = (FUNCTION_TABLE_ii[$47 & 511]($48)|0);
  $50 = $11;
  $51 = (($49) - ($50))|0;
  $52 = $7;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $8;
  $56 = (($54) + ($55<<2)|0);
  HEAP32[$56>>2] = $51;
  $5 = 1;
  $57 = $5;
  STACKTOP = sp;return ($57|0);
 } else {
  $5 = 0;
  $57 = $5;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _WriteOneMLUC($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = $11;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = $9;
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $10;
  $20 = (($18) + ($19<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = $9;
  $22 = ((($21)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $10;
  $25 = (($23) + ($24<<2)|0);
  HEAP32[$25>>2] = 0;
  $6 = 1;
  $56 = $6;
  STACKTOP = sp;return ($56|0);
 }
 $26 = $8;
 $27 = ((($26)) + 284|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $8;
 $30 = (FUNCTION_TABLE_ii[$28 & 511]($29)|0);
 $13 = $30;
 $31 = $13;
 $32 = $12;
 $33 = (($31) - ($32))|0;
 $34 = $9;
 $35 = ((($34)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $10;
 $38 = (($36) + ($37<<2)|0);
 HEAP32[$38>>2] = $33;
 $39 = $7;
 $40 = $8;
 $41 = $11;
 $42 = (_Type_MLU_Write($39,$40,$41,1)|0);
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $8;
  $45 = ((($44)) + 284|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $8;
  $48 = (FUNCTION_TABLE_ii[$46 & 511]($47)|0);
  $49 = $13;
  $50 = (($48) - ($49))|0;
  $51 = $9;
  $52 = ((($51)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $10;
  $55 = (($53) + ($54<<2)|0);
  HEAP32[$55>>2] = $50;
  $6 = 1;
  $56 = $6;
  STACKTOP = sp;return ($56|0);
 } else {
  $6 = 0;
  $56 = $6;
  STACKTOP = sp;return ($56|0);
 }
 return (0)|0;
}
function _FreeArray($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  _FreeElem($6);
 }
 $7 = $1;
 $8 = ((($7)) + 12|0);
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $1;
  $13 = ((($12)) + 12|0);
  _FreeElem($13);
 }
 $14 = $1;
 $15 = ((($14)) + 24|0);
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $1;
  $20 = ((($19)) + 24|0);
  _FreeElem($20);
 }
 $21 = $1;
 $22 = ((($21)) + 36|0);
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = $1;
 $27 = ((($26)) + 36|0);
 _FreeElem($27);
 STACKTOP = sp;return;
}
function _FreeElem($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = $1;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  __cmsFree($7,$10);
 }
 $11 = $1;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = ((($17)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  __cmsFree($16,$19);
 }
 $20 = $1;
 $21 = ((($20)) + 8|0);
 HEAP32[$21>>2] = 0;
 $22 = $1;
 $23 = ((($22)) + 4|0);
 HEAP32[$23>>2] = 0;
 STACKTOP = sp;return;
}
function _mywcslen_625($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 while(1) {
  $4 = $2;
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0);
  $7 = $2;
  if (!($6)) {
   break;
  }
  $8 = ((($7)) + 4|0);
  $2 = $8;
 }
 $9 = $1;
 $10 = $7;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $13 = (($12|0) / 4)&-1;
 STACKTOP = sp;return ($13|0);
}
function __cmsWriteWCharArray($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((28572|0),(28591|0),127,(28621|0));
  // unreachable;
 }
 $10 = $6;
 $11 = ($10|0)==(0|0);
 $12 = $5;
 $13 = ($12>>>0)>(0);
 $or$cond = $11 & $13;
 if ($or$cond) {
  ___assert_fail((28641|0),(28591|0),128,(28621|0));
  // unreachable;
 }
 $7 = 0;
 while(1) {
  $14 = $7;
  $15 = $5;
  $16 = ($14>>>0)<($15>>>0);
  if (!($16)) {
   label = 10;
   break;
  }
  $17 = $4;
  $18 = $6;
  $19 = $7;
  $20 = (($18) + ($19<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21&65535;
  $23 = (__cmsWriteUInt16Number($17,$22)|0);
  $24 = ($23|0)!=(0);
  if (!($24)) {
   label = 8;
   break;
  }
  $25 = $7;
  $26 = (($25) + 1)|0;
  $7 = $26;
 }
 if ((label|0) == 8) {
  $3 = 0;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 10) {
  $3 = 1;
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _WriteOneElem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $5;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $6;
 $12 = (($10) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__cmsWriteUInt32Number($7,$13)|0);
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $3 = 0;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 $16 = $4;
 $17 = $5;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $6;
 $21 = (($19) + ($20<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (__cmsWriteUInt32Number($16,$22)|0);
 $24 = ($23|0)!=(0);
 if ($24) {
  $3 = 1;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 } else {
  $3 = 0;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _AllocElem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = $6;
 $9 = (__cmsCalloc($7,$8,4)|0);
 $10 = $5;
 $11 = ((($10)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = $5;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $3 = 0;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 $16 = $4;
 $17 = $6;
 $18 = (__cmsCalloc($16,$17,4)|0);
 $19 = $5;
 $20 = ((($19)) + 8|0);
 HEAP32[$20>>2] = $18;
 $21 = $5;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 $25 = $4;
 $26 = $5;
 if ($24) {
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  __cmsFree($25,$28);
  $3 = 0;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 } else {
  HEAP32[$26>>2] = $25;
  $3 = 1;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _ReadOffsetArray($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = 0;
 while(1) {
  $12 = $11;
  $13 = $8;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 14;
   break;
  }
  $15 = $6;
  $16 = $7;
  $17 = $11;
  $18 = $10;
  $19 = (_ReadOneElem($15,$16,$17,$18)|0);
  $20 = ($19|0)!=(0);
  if (!($20)) {
   label = 4;
   break;
  }
  $21 = $6;
  $22 = $7;
  $23 = ((($22)) + 12|0);
  $24 = $11;
  $25 = $10;
  $26 = (_ReadOneElem($21,$23,$24,$25)|0);
  $27 = ($26|0)!=(0);
  if (!($27)) {
   label = 6;
   break;
  }
  $28 = $9;
  $29 = ($28>>>0)>(16);
  if ($29) {
   $30 = $6;
   $31 = $7;
   $32 = ((($31)) + 24|0);
   $33 = $11;
   $34 = $10;
   $35 = (_ReadOneElem($30,$32,$33,$34)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    label = 9;
    break;
   }
  }
  $37 = $9;
  $38 = ($37>>>0)>(24);
  if ($38) {
   $39 = $6;
   $40 = $7;
   $41 = ((($40)) + 36|0);
   $42 = $11;
   $43 = $10;
   $44 = (_ReadOneElem($39,$41,$42,$43)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    label = 12;
    break;
   }
  }
  $46 = $11;
  $47 = (($46) + 1)|0;
  $11 = $47;
 }
 if ((label|0) == 4) {
  $5 = 0;
 }
 else if ((label|0) == 6) {
  $5 = 0;
 }
 else if ((label|0) == 9) {
  $5 = 0;
 }
 else if ((label|0) == 12) {
  $5 = 0;
 }
 else if ((label|0) == 14) {
  $5 = 1;
 }
 $48 = $5;
 STACKTOP = sp;return ($48|0);
}
function _ReadOneWChar($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $7;
 $14 = (($12) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $8;
  HEAP32[$17>>2] = 0;
  $4 = 1;
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 }
 $18 = $5;
 $19 = ((($18)) + 276|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = $6;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $7;
 $26 = (($24) + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iii[$20 & 511]($21,$27)|0);
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $4 = 0;
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 }
 $30 = $6;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $7;
 $34 = (($32) + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35>>>0) / 2)&-1;
 $9 = $36;
 $37 = $6;
 $38 = HEAP32[$37>>2]|0;
 $39 = $9;
 $40 = (($39) + 1)|0;
 $41 = $40<<2;
 $42 = (__cmsMallocZero($38,$41)|0);
 $43 = $8;
 HEAP32[$43>>2] = $42;
 $44 = $8;
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $4 = 0;
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 }
 $47 = $5;
 $48 = $9;
 $49 = $8;
 $50 = HEAP32[$49>>2]|0;
 $51 = (__cmsReadWCharArray($47,$48,$50)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  $57 = $8;
  $58 = HEAP32[$57>>2]|0;
  $59 = $9;
  $60 = (($58) + ($59<<2)|0);
  HEAP32[$60>>2] = 0;
  $4 = 1;
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 } else {
  $53 = $6;
  $54 = HEAP32[$53>>2]|0;
  $55 = $8;
  $56 = HEAP32[$55>>2]|0;
  __cmsFree($54,$56);
  $4 = 0;
  $61 = $4;
  STACKTOP = sp;return ($61|0);
 }
 return (0)|0;
}
function _ReadOneMLUC($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 HEAP32[$11>>2] = 0;
 $12 = $8;
 $13 = ((($12)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $9;
 $16 = (($14) + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $19 = $8;
  $20 = ((($19)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $9;
  $23 = (($21) + ($22<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if (!($25)) {
   $27 = $7;
   $28 = ((($27)) + 276|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $7;
   $31 = $8;
   $32 = ((($31)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $9;
   $35 = (($33) + ($34<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (FUNCTION_TABLE_iii[$29 & 511]($30,$36)|0);
   $38 = ($37|0)!=(0);
   if ($38) {
    $39 = $6;
    $40 = $7;
    $41 = $8;
    $42 = ((($41)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $9;
    $45 = (($43) + ($44<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (_Type_MLU_Read($39,$40,$11,$46)|0);
    $48 = $10;
    HEAP32[$48>>2] = $47;
    $49 = $10;
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)!=(0|0);
    $52 = $51&1;
    $5 = $52;
    $53 = $5;
    STACKTOP = sp;return ($53|0);
   } else {
    $5 = 0;
    $53 = $5;
    STACKTOP = sp;return ($53|0);
   }
  }
 }
 $26 = $10;
 HEAP32[$26>>2] = 0;
 $5 = 1;
 $53 = $5;
 STACKTOP = sp;return ($53|0);
}
function __cmsReadWCharArray($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((28572|0),(28591|0),144,(28742|0));
  // unreachable;
 }
 $7 = 0;
 while(1) {
  $11 = $7;
  $12 = $5;
  $13 = ($11>>>0)<($12>>>0);
  if (!($13)) {
   label = 12;
   break;
  }
  $14 = $6;
  $15 = ($14|0)!=(0|0);
  $16 = $4;
  if ($15) {
   $17 = (__cmsReadUInt16Number($16,$8)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    label = 7;
    break;
   }
   $19 = HEAP16[$8>>1]|0;
   $20 = $19&65535;
   $21 = $6;
   $22 = $7;
   $23 = (($21) + ($22<<2)|0);
   HEAP32[$23>>2] = $20;
  } else {
   $24 = (__cmsReadUInt16Number($16,0)|0);
   $25 = ($24|0)!=(0);
   if (!($25)) {
    label = 10;
    break;
   }
  }
  $26 = $7;
  $27 = (($26) + 1)|0;
  $7 = $27;
 }
 if ((label|0) == 7) {
  $3 = 0;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 10) {
  $3 = 0;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 12) {
  $3 = 1;
  $28 = $3;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _ReadOneElem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $5;
 $10 = $6;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $7;
 $14 = (($12) + ($13<<2)|0);
 $15 = (__cmsReadUInt32Number($9,$14)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $4 = 0;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 }
 $17 = $5;
 $18 = $6;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $7;
 $22 = (($20) + ($21<<2)|0);
 $23 = (__cmsReadUInt32Number($17,$22)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $4 = 0;
  $40 = $4;
  STACKTOP = sp;return ($40|0);
 }
 $25 = $6;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $7;
 $29 = (($27) + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30>>>0)>(0);
 if ($31) {
  $32 = $8;
  $33 = $6;
  $34 = ((($33)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $7;
  $37 = (($35) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($32))|0;
  HEAP32[$37>>2] = $39;
 }
 $4 = 1;
 $40 = $4;
 STACKTOP = sp;return ($40|0);
}
function _WriteSeqID($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $8;
 $11 = $12;
 $13 = $7;
 $14 = ((($13)) + 288|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $7;
 $17 = $11;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $9;
 $21 = (($19) + (($20*48)|0)|0);
 $22 = ((($21)) + 20|0);
 $23 = (FUNCTION_TABLE_iiii[$15 & 511]($16,16,$22)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $5 = 0;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 $25 = $6;
 $26 = $7;
 $27 = $11;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $9;
 $31 = (($29) + (($30*48)|0)|0);
 $32 = ((($31)) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (_SaveDescription($25,$26,$33)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  $5 = 1;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 } else {
  $5 = 0;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _WritePositionTable($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $19 = 0;
 $20 = 0;
 $21 = $9;
 $22 = ((($21)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $11;
 $25 = (__cmsCalloc($23,$24,4)|0);
 $19 = $25;
 $26 = $19;
 $27 = ($26|0)==(0|0);
 L1: do {
  if (!($27)) {
   $28 = $9;
   $29 = ((($28)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $11;
   $32 = (__cmsCalloc($30,$31,4)|0);
   $20 = $32;
   $33 = $20;
   $34 = ($33|0)==(0|0);
   if (!($34)) {
    $35 = $9;
    $36 = ((($35)) + 284|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $9;
    $39 = (FUNCTION_TABLE_ii[$37 & 511]($38)|0);
    $16 = $39;
    $15 = 0;
    while(1) {
     $40 = $15;
     $41 = $11;
     $42 = ($40>>>0)<($41>>>0);
     if (!($42)) {
      break;
     }
     $43 = $9;
     $44 = (__cmsWriteUInt32Number($43,0)|0);
     $45 = ($44|0)!=(0);
     if (!($45)) {
      break L1;
     }
     $46 = $9;
     $47 = (__cmsWriteUInt32Number($46,0)|0);
     $48 = ($47|0)!=(0);
     if (!($48)) {
      break L1;
     }
     $49 = $15;
     $50 = (($49) + 1)|0;
     $15 = $50;
    }
    $15 = 0;
    while(1) {
     $51 = $15;
     $52 = $11;
     $53 = ($51>>>0)<($52>>>0);
     $54 = $9;
     $55 = ((($54)) + 284|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $9;
     $58 = (FUNCTION_TABLE_ii[$56 & 511]($57)|0);
     if (!($53)) {
      break;
     }
     $18 = $58;
     $59 = $18;
     $60 = $12;
     $61 = (($59) - ($60))|0;
     $62 = $19;
     $63 = $15;
     $64 = (($62) + ($63<<2)|0);
     HEAP32[$64>>2] = $61;
     $65 = $14;
     $66 = $8;
     $67 = $9;
     $68 = $13;
     $69 = $15;
     $70 = $10;
     $71 = (FUNCTION_TABLE_iiiiii[$65 & 511]($66,$67,$68,$69,$70)|0);
     $72 = ($71|0)!=(0);
     if (!($72)) {
      break L1;
     }
     $73 = $9;
     $74 = ((($73)) + 284|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $9;
     $77 = (FUNCTION_TABLE_ii[$75 & 511]($76)|0);
     $78 = $18;
     $79 = (($77) - ($78))|0;
     $80 = $20;
     $81 = $15;
     $82 = (($80) + ($81<<2)|0);
     HEAP32[$82>>2] = $79;
     $83 = $15;
     $84 = (($83) + 1)|0;
     $15 = $84;
    }
    $17 = $58;
    $85 = $9;
    $86 = ((($85)) + 276|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $9;
    $89 = $16;
    $90 = (FUNCTION_TABLE_iii[$87 & 511]($88,$89)|0);
    $91 = ($90|0)!=(0);
    if ($91) {
     $15 = 0;
     while(1) {
      $92 = $15;
      $93 = $11;
      $94 = ($92>>>0)<($93>>>0);
      $95 = $9;
      if (!($94)) {
       break;
      }
      $96 = $19;
      $97 = $15;
      $98 = (($96) + ($97<<2)|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (__cmsWriteUInt32Number($95,$99)|0);
      $101 = ($100|0)!=(0);
      if (!($101)) {
       break L1;
      }
      $102 = $9;
      $103 = $20;
      $104 = $15;
      $105 = (($103) + ($104<<2)|0);
      $106 = HEAP32[$105>>2]|0;
      $107 = (__cmsWriteUInt32Number($102,$106)|0);
      $108 = ($107|0)!=(0);
      if (!($108)) {
       break L1;
      }
      $109 = $15;
      $110 = (($109) + 1)|0;
      $15 = $110;
     }
     $111 = ((($95)) + 276|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $9;
     $114 = $17;
     $115 = (FUNCTION_TABLE_iii[$112 & 511]($113,$114)|0);
     $116 = ($115|0)!=(0);
     if ($116) {
      $117 = $19;
      $118 = ($117|0)!=(0|0);
      if ($118) {
       $119 = $9;
       $120 = ((($119)) + 4|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = $19;
       __cmsFree($121,$122);
      }
      $123 = $20;
      $124 = ($123|0)!=(0|0);
      if ($124) {
       $125 = $9;
       $126 = ((($125)) + 4|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $20;
       __cmsFree($127,$128);
      }
      $7 = 1;
      $141 = $7;
      STACKTOP = sp;return ($141|0);
     }
    }
   }
  }
 } while(0);
 $129 = $19;
 $130 = ($129|0)!=(0|0);
 if ($130) {
  $131 = $9;
  $132 = ((($131)) + 4|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = $19;
  __cmsFree($133,$134);
 }
 $135 = $20;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = $9;
  $138 = ((($137)) + 4|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $20;
  __cmsFree($139,$140);
 }
 $7 = 0;
 $141 = $7;
 STACKTOP = sp;return ($141|0);
}
function _SaveDescription($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $8 = ((($7)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<(67108864);
 $11 = $5;
 do {
  if ($10) {
   $12 = (__cmsWriteTypeBase($11,1684370275)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    $14 = $4;
    $15 = $5;
    $16 = $6;
    $17 = (_Type_Text_Description_Write($14,$15,$16,1)|0);
    $3 = $17;
    break;
   } else {
    $3 = 0;
    break;
   }
  } else {
   $18 = (__cmsWriteTypeBase($11,1835824483)|0);
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = $4;
    $21 = $5;
    $22 = $6;
    $23 = (_Type_MLU_Write($20,$21,$22,1)|0);
    $3 = $23;
    break;
   } else {
    $3 = 0;
    break;
   }
  }
 } while(0);
 $24 = $3;
 STACKTOP = sp;return ($24|0);
}
function _ReadSeqID($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $8;
 $11 = $13;
 $14 = $11;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $9;
 $18 = (($16) + (($17*48)|0)|0);
 $12 = $18;
 $19 = $7;
 $20 = ((($19)) + 272|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $7;
 $23 = $12;
 $24 = ((($23)) + 20|0);
 $25 = (FUNCTION_TABLE_iiiii[$21 & 511]($22,$24,16,1)|0);
 $26 = ($25|0)!=(1);
 if ($26) {
  $5 = 0;
  $34 = $5;
  STACKTOP = sp;return ($34|0);
 }
 $27 = $6;
 $28 = $7;
 $29 = $12;
 $30 = ((($29)) + 44|0);
 $31 = $10;
 $32 = (_ReadEmbeddedText($27,$28,$30,$31)|0);
 $33 = ($32|0)!=(0);
 if ($33) {
  $5 = 1;
  $34 = $5;
  STACKTOP = sp;return ($34|0);
 } else {
  $5 = 0;
  $34 = $5;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _ReadPositionTable($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $14 = 0;
 $15 = 0;
 $17 = $8;
 $18 = ((($17)) + 284|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $8;
 $21 = (FUNCTION_TABLE_ii[$19 & 511]($20)|0);
 $16 = $21;
 $22 = $8;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $16;
 $26 = (($24) - ($25))|0;
 $27 = (($26>>>0) / 8)&-1;
 $28 = $9;
 $29 = ($27>>>0)<($28>>>0);
 if ($29) {
  $6 = 0;
  $117 = $6;
  STACKTOP = sp;return ($117|0);
 }
 $30 = $8;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $9;
 $34 = (__cmsCalloc($32,$33,4)|0);
 $14 = $34;
 $35 = $14;
 $36 = ($35|0)==(0|0);
 L5: do {
  if (!($36)) {
   $37 = $8;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $9;
   $41 = (__cmsCalloc($39,$40,4)|0);
   $15 = $41;
   $42 = $15;
   $43 = ($42|0)==(0|0);
   if (!($43)) {
    $13 = 0;
    while(1) {
     $44 = $13;
     $45 = $9;
     $46 = ($44>>>0)<($45>>>0);
     if (!($46)) {
      break;
     }
     $47 = $8;
     $48 = $14;
     $49 = $13;
     $50 = (($48) + ($49<<2)|0);
     $51 = (__cmsReadUInt32Number($47,$50)|0);
     $52 = ($51|0)!=(0);
     if (!($52)) {
      break L5;
     }
     $53 = $8;
     $54 = $15;
     $55 = $13;
     $56 = (($54) + ($55<<2)|0);
     $57 = (__cmsReadUInt32Number($53,$56)|0);
     $58 = ($57|0)!=(0);
     if (!($58)) {
      break L5;
     }
     $59 = $10;
     $60 = $14;
     $61 = $13;
     $62 = (($60) + ($61<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + ($59))|0;
     HEAP32[$62>>2] = $64;
     $65 = $13;
     $66 = (($65) + 1)|0;
     $13 = $66;
    }
    $13 = 0;
    while(1) {
     $67 = $13;
     $68 = $9;
     $69 = ($67>>>0)<($68>>>0);
     if (!($69)) {
      break;
     }
     $70 = $8;
     $71 = ((($70)) + 276|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $8;
     $74 = $14;
     $75 = $13;
     $76 = (($74) + ($75<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (FUNCTION_TABLE_iii[$72 & 511]($73,$77)|0);
     $79 = ($78|0)!=(0);
     if (!($79)) {
      break L5;
     }
     $80 = $12;
     $81 = $7;
     $82 = $8;
     $83 = $11;
     $84 = $13;
     $85 = $15;
     $86 = $13;
     $87 = (($85) + ($86<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (FUNCTION_TABLE_iiiiii[$80 & 511]($81,$82,$83,$84,$88)|0);
     $90 = ($89|0)!=(0);
     if (!($90)) {
      break L5;
     }
     $91 = $13;
     $92 = (($91) + 1)|0;
     $13 = $92;
    }
    $93 = $14;
    $94 = ($93|0)!=(0|0);
    if ($94) {
     $95 = $8;
     $96 = ((($95)) + 4|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $14;
     __cmsFree($97,$98);
    }
    $99 = $15;
    $100 = ($99|0)!=(0|0);
    if ($100) {
     $101 = $8;
     $102 = ((($101)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $15;
     __cmsFree($103,$104);
    }
    $6 = 1;
    $117 = $6;
    STACKTOP = sp;return ($117|0);
   }
  }
 } while(0);
 $105 = $14;
 $106 = ($105|0)!=(0|0);
 if ($106) {
  $107 = $8;
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $14;
  __cmsFree($109,$110);
 }
 $111 = $15;
 $112 = ($111|0)!=(0|0);
 if ($112) {
  $113 = $8;
  $114 = ((($113)) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $15;
  __cmsFree($115,$116);
 }
 $6 = 0;
 $117 = $6;
 STACKTOP = sp;return ($117|0);
}
function _ReadEmbeddedText($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, $switch$split72D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $6;
 $12 = (__cmsReadTypeBase($11)|0);
 $9 = $12;
 $13 = $9;
 $switch$split2D = ($13|0)<(1835824483);
 L1: do {
  if ($switch$split2D) {
   switch ($13|0) {
   case 1684370275:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $28 = $7;
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = $7;
    $32 = HEAP32[$31>>2]|0;
    _cmsMLUfree($32);
   }
   $33 = $5;
   $34 = $6;
   $35 = $8;
   $36 = (_Type_Text_Description_Read($33,$34,$10,$35)|0);
   $37 = $7;
   HEAP32[$37>>2] = $36;
   $38 = $7;
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)!=(0|0);
   $41 = $40&1;
   $4 = $41;
   $56 = $4;
   STACKTOP = sp;return ($56|0);
  } else {
   $switch$split72D = ($13|0)<(1952807028);
   if ($switch$split72D) {
    switch ($13|0) {
    case 1835824483:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $42 = $7;
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)!=(0|0);
    if ($44) {
     $45 = $7;
     $46 = HEAP32[$45>>2]|0;
     _cmsMLUfree($46);
    }
    $47 = $5;
    $48 = $6;
    $49 = $8;
    $50 = (_Type_MLU_Read($47,$48,$10,$49)|0);
    $51 = $7;
    HEAP32[$51>>2] = $50;
    $52 = $7;
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)!=(0|0);
    $55 = $54&1;
    $4 = $55;
    $56 = $4;
    STACKTOP = sp;return ($56|0);
   } else {
    switch ($13|0) {
    case 1952807028:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $14 = $7;
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)!=(0|0);
    if ($16) {
     $17 = $7;
     $18 = HEAP32[$17>>2]|0;
     _cmsMLUfree($18);
    }
    $19 = $5;
    $20 = $6;
    $21 = $8;
    $22 = (_Type_Text_Read($19,$20,$10,$21)|0);
    $23 = $7;
    HEAP32[$23>>2] = $22;
    $24 = $7;
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)!=(0|0);
    $27 = $26&1;
    $4 = $27;
    $56 = $4;
    STACKTOP = sp;return ($56|0);
   }
  }
 } while(0);
 $4 = 0;
 $56 = $4;
 STACKTOP = sp;return ($56|0);
}
function _Type_MPEcurve_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 38|0;
 $11 = sp + 36|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $15 = $7;
 HEAP32[$15>>2] = 0;
 $16 = $6;
 $17 = ((($16)) + 284|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $6;
 $20 = (FUNCTION_TABLE_ii[$18 & 511]($19)|0);
 $21 = (($20) - 8)|0;
 $13 = $21;
 $22 = $6;
 $23 = (__cmsReadUInt16Number($22,$10)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $4 = 0;
  $80 = $4;
  STACKTOP = sp;return ($80|0);
 }
 $25 = $6;
 $26 = (__cmsReadUInt16Number($25,$11)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $4 = 0;
  $80 = $4;
  STACKTOP = sp;return ($80|0);
 }
 $28 = HEAP16[$10>>1]|0;
 $29 = $28&65535;
 $30 = HEAP16[$11>>1]|0;
 $31 = $30&65535;
 $32 = ($29|0)!=($31|0);
 if ($32) {
  $4 = 0;
  $80 = $4;
  STACKTOP = sp;return ($80|0);
 }
 $33 = $5;
 $34 = ((($33)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP16[$10>>1]|0;
 $37 = $36&65535;
 $38 = (__cmsCalloc($35,$37,4)|0);
 $14 = $38;
 $39 = $14;
 $40 = ($39|0)==(0|0);
 if ($40) {
  $4 = 0;
  $80 = $4;
  STACKTOP = sp;return ($80|0);
 }
 $41 = $5;
 $42 = $6;
 $43 = HEAP16[$10>>1]|0;
 $44 = $43&65535;
 $45 = $13;
 $46 = $14;
 $47 = (_ReadPositionTable($41,$42,$44,$45,$46,369)|0);
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $5;
  $50 = ((($49)) + 20|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP16[$10>>1]|0;
  $53 = $52&65535;
  $54 = $14;
  $55 = (_cmsStageAllocToneCurves($51,$53,$54)|0);
  $9 = $55;
 } else {
  $9 = 0;
 }
 $12 = 0;
 while(1) {
  $56 = $12;
  $57 = HEAP16[$10>>1]|0;
  $58 = $57&65535;
  $59 = ($56>>>0)<($58>>>0);
  if (!($59)) {
   break;
  }
  $60 = $14;
  $61 = $12;
  $62 = (($60) + ($61<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)!=(0|0);
  if ($64) {
   $65 = $14;
   $66 = $12;
   $67 = (($65) + ($66<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   _cmsFreeToneCurve($68);
  }
  $69 = $12;
  $70 = (($69) + 1)|0;
  $12 = $70;
 }
 $71 = $5;
 $72 = ((($71)) + 20|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $14;
 __cmsFree($73,$74);
 $75 = $9;
 $76 = ($75|0)!=(0|0);
 $77 = $76 ? 1 : 0;
 $78 = $7;
 HEAP32[$78>>2] = $77;
 $79 = $9;
 $4 = $79;
 $80 = $4;
 STACKTOP = sp;return ($80|0);
}
function _Type_MPEcurve_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $10 = $12;
 $13 = $10;
 $14 = ((($13)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $11 = $15;
 $16 = $6;
 $17 = ((($16)) + 284|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $6;
 $20 = (FUNCTION_TABLE_ii[$18 & 511]($19)|0);
 $21 = (($20) - 8)|0;
 $9 = $21;
 $22 = $6;
 $23 = $10;
 $24 = ((($23)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25&65535;
 $27 = (__cmsWriteUInt16Number($22,$26)|0);
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $4 = 0;
  $45 = $4;
  STACKTOP = sp;return ($45|0);
 }
 $29 = $6;
 $30 = $10;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32&65535;
 $34 = (__cmsWriteUInt16Number($29,$33)|0);
 $35 = ($34|0)!=(0);
 if (!($35)) {
  $4 = 0;
  $45 = $4;
  STACKTOP = sp;return ($45|0);
 }
 $36 = $5;
 $37 = $6;
 $38 = $10;
 $39 = ((($38)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $9;
 $42 = $11;
 $43 = (_WritePositionTable($36,$37,0,$40,$41,$42,370)|0);
 $44 = ($43|0)!=(0);
 if ($44) {
  $4 = 1;
  $45 = $4;
  STACKTOP = sp;return ($45|0);
 } else {
  $4 = 0;
  $45 = $4;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _GenericMPEdup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = (_cmsStageDup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function _GenericMPEfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _cmsStageFree($4);
 STACKTOP = sp;return;
}
function _Type_MPEmatrix_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $10 = sp + 50|0;
 $11 = sp + 48|0;
 $16 = sp + 4|0;
 $17 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $18 = $6;
 $19 = (__cmsReadUInt16Number($18,$10)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $4 = 0;
  $117 = $4;
  STACKTOP = sp;return ($117|0);
 }
 $21 = $6;
 $22 = (__cmsReadUInt16Number($21,$11)|0);
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $4 = 0;
  $117 = $4;
  STACKTOP = sp;return ($117|0);
 }
 $24 = HEAP16[$10>>1]|0;
 $25 = $24&65535;
 $26 = ($25|0)>=(16);
 if ($26) {
  $4 = 0;
  $117 = $4;
  STACKTOP = sp;return ($117|0);
 }
 $27 = HEAP16[$11>>1]|0;
 $28 = $27&65535;
 $29 = ($28|0)>=(16);
 if ($29) {
  $4 = 0;
  $117 = $4;
  STACKTOP = sp;return ($117|0);
 }
 $30 = HEAP16[$10>>1]|0;
 $31 = $30&65535;
 $32 = HEAP16[$11>>1]|0;
 $33 = $32&65535;
 $34 = Math_imul($31, $33)|0;
 $12 = $34;
 $35 = $5;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $12;
 $39 = (__cmsCalloc($37,$38,8)|0);
 $14 = $39;
 $40 = $14;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $4 = 0;
  $117 = $4;
  STACKTOP = sp;return ($117|0);
 }
 $42 = $5;
 $43 = ((($42)) + 20|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP16[$11>>1]|0;
 $46 = $45&65535;
 $47 = (__cmsCalloc($44,$46,8)|0);
 $15 = $47;
 $48 = $15;
 $49 = ($48|0)==(0|0);
 if ($49) {
  $50 = $5;
  $51 = ((($50)) + 20|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $14;
  __cmsFree($52,$53);
  $4 = 0;
  $117 = $4;
  STACKTOP = sp;return ($117|0);
 }
 $13 = 0;
 while(1) {
  $54 = $13;
  $55 = $12;
  $56 = ($54>>>0)<($55>>>0);
  if (!($56)) {
   break;
  }
  $57 = $6;
  $58 = (__cmsReadFloat32Number($57,$16)|0);
  $59 = ($58|0)!=(0);
  if (!($59)) {
   label = 16;
   break;
  }
  $68 = +HEAPF32[$16>>2];
  $69 = $68;
  $70 = $14;
  $71 = $13;
  $72 = (($70) + ($71<<3)|0);
  HEAPF64[$72>>3] = $69;
  $73 = $13;
  $74 = (($73) + 1)|0;
  $13 = $74;
 }
 if ((label|0) == 16) {
  $60 = $5;
  $61 = ((($60)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $14;
  __cmsFree($62,$63);
  $64 = $5;
  $65 = ((($64)) + 20|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $15;
  __cmsFree($66,$67);
  $4 = 0;
  $117 = $4;
  STACKTOP = sp;return ($117|0);
 }
 $13 = 0;
 while(1) {
  $75 = $13;
  $76 = HEAP16[$11>>1]|0;
  $77 = $76&65535;
  $78 = ($75>>>0)<($77>>>0);
  if (!($78)) {
   label = 23;
   break;
  }
  $79 = $6;
  $80 = (__cmsReadFloat32Number($79,$17)|0);
  $81 = ($80|0)!=(0);
  if (!($81)) {
   label = 21;
   break;
  }
  $90 = +HEAPF32[$17>>2];
  $91 = $90;
  $92 = $15;
  $93 = $13;
  $94 = (($92) + ($93<<3)|0);
  HEAPF64[$94>>3] = $91;
  $95 = $13;
  $96 = (($95) + 1)|0;
  $13 = $96;
 }
 if ((label|0) == 21) {
  $82 = $5;
  $83 = ((($82)) + 20|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $14;
  __cmsFree($84,$85);
  $86 = $5;
  $87 = ((($86)) + 20|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $15;
  __cmsFree($88,$89);
  $4 = 0;
  $117 = $4;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 23) {
  $97 = $5;
  $98 = ((($97)) + 20|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = HEAP16[$11>>1]|0;
  $101 = $100&65535;
  $102 = HEAP16[$10>>1]|0;
  $103 = $102&65535;
  $104 = $14;
  $105 = $15;
  $106 = (_cmsStageAllocMatrix($99,$101,$103,$104,$105)|0);
  $9 = $106;
  $107 = $5;
  $108 = ((($107)) + 20|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = $14;
  __cmsFree($109,$110);
  $111 = $5;
  $112 = ((($111)) + 20|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $15;
  __cmsFree($113,$114);
  $115 = $7;
  HEAP32[$115>>2] = 1;
  $116 = $9;
  $4 = $116;
  $117 = $4;
  STACKTOP = sp;return ($117|0);
 }
 return (0)|0;
}
function _Type_MPEmatrix_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $7;
 $11 = $13;
 $14 = $11;
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $12 = $16;
 $17 = $6;
 $18 = $11;
 $19 = ((($18)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20&65535;
 $22 = (__cmsWriteUInt16Number($17,$21)|0);
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $4 = 0;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 $24 = $6;
 $25 = $11;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27&65535;
 $29 = (__cmsWriteUInt16Number($24,$28)|0);
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $4 = 0;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 $31 = $11;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $11;
 $35 = ((($34)) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = Math_imul($33, $36)|0;
 $10 = $37;
 $9 = 0;
 while(1) {
  $38 = $9;
  $39 = $10;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = $6;
  $42 = $12;
  $43 = HEAP32[$42>>2]|0;
  $44 = $9;
  $45 = (($43) + ($44<<3)|0);
  $46 = +HEAPF64[$45>>3];
  $47 = $46;
  $48 = (__cmsWriteFloat32Number($41,$47)|0);
  $49 = ($48|0)!=(0);
  if (!($49)) {
   label = 8;
   break;
  }
  $50 = $9;
  $51 = (($50) + 1)|0;
  $9 = $51;
 }
 if ((label|0) == 8) {
  $4 = 0;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 $9 = 0;
 while(1) {
  $52 = $9;
  $53 = $11;
  $54 = ((($53)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52>>>0)<($55>>>0);
  if (!($56)) {
   label = 18;
   break;
  }
  $57 = $12;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  $61 = $6;
  if ($60) {
   $62 = (__cmsWriteFloat32Number($61,0.0)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    label = 14;
    break;
   }
  } else {
   $64 = $12;
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $9;
   $68 = (($66) + ($67<<3)|0);
   $69 = +HEAPF64[$68>>3];
   $70 = $69;
   $71 = (__cmsWriteFloat32Number($61,$70)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    label = 16;
    break;
   }
  }
  $73 = $9;
  $74 = (($73) + 1)|0;
  $9 = $74;
 }
 if ((label|0) == 14) {
  $4 = 0;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 else if ((label|0) == 16) {
  $4 = 0;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 else if ((label|0) == 18) {
  $4 = 1;
  $75 = $4;
  STACKTOP = sp;return ($75|0);
 }
 return (0)|0;
}
function _Type_MPEclut_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $10 = sp + 74|0;
 $11 = sp + 72|0;
 $12 = sp + 80|0;
 $15 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $17 = $6;
 $18 = (__cmsReadUInt16Number($17,$10)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $4 = 0;
  $90 = $4;
  STACKTOP = sp;return ($90|0);
 }
 $20 = $6;
 $21 = (__cmsReadUInt16Number($20,$11)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $4 = 0;
  $90 = $4;
  STACKTOP = sp;return ($90|0);
 }
 $23 = HEAP16[$10>>1]|0;
 $24 = $23&65535;
 $25 = ($24|0)==(0);
 L9: do {
  if (!($25)) {
   $26 = HEAP16[$11>>1]|0;
   $27 = $26&65535;
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = $6;
    $30 = ((($29)) + 272|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $6;
    $33 = (FUNCTION_TABLE_iiiii[$31 & 511]($32,$12,1,16)|0);
    $34 = ($33|0)!=(16);
    if (!($34)) {
     $35 = HEAP16[$10>>1]|0;
     $36 = $35&65535;
     $37 = ($36|0)>(8);
     $38 = HEAP16[$10>>1]|0;
     $39 = $38&65535;
     $40 = $37 ? 8 : $39;
     $14 = $40;
     $13 = 0;
     while(1) {
      $41 = $13;
      $42 = $14;
      $43 = ($41>>>0)<($42>>>0);
      if (!($43)) {
       break;
      }
      $44 = $13;
      $45 = (($12) + ($44)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = $46&255;
      $48 = ($47|0)==(1);
      if ($48) {
       break L9;
      }
      $49 = $13;
      $50 = (($12) + ($49)|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = $51&255;
      $53 = $13;
      $54 = (($15) + ($53<<2)|0);
      HEAP32[$54>>2] = $52;
      $55 = $13;
      $56 = (($55) + 1)|0;
      $13 = $56;
     }
     $57 = $5;
     $58 = ((($57)) + 20|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = HEAP16[$10>>1]|0;
     $61 = $60&65535;
     $62 = HEAP16[$11>>1]|0;
     $63 = $62&65535;
     $64 = (_cmsStageAllocCLutFloatGranular($59,$15,$61,$63,0)|0);
     $9 = $64;
     $65 = $9;
     $66 = ($65|0)==(0|0);
     if (!($66)) {
      $67 = $9;
      $68 = ((($67)) + 32|0);
      $69 = HEAP32[$68>>2]|0;
      $16 = $69;
      $13 = 0;
      while(1) {
       $70 = $13;
       $71 = $16;
       $72 = ((($71)) + 8|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($70>>>0)<($73>>>0);
       if (!($74)) {
        break;
       }
       $75 = $6;
       $76 = $16;
       $77 = HEAP32[$76>>2]|0;
       $78 = $13;
       $79 = (($77) + ($78<<2)|0);
       $80 = (__cmsReadFloat32Number($75,$79)|0);
       $81 = ($80|0)!=(0);
       if (!($81)) {
        break L9;
       }
       $82 = $13;
       $83 = (($82) + 1)|0;
       $13 = $83;
      }
      $84 = $7;
      HEAP32[$84>>2] = 1;
      $85 = $9;
      $4 = $85;
      $90 = $4;
      STACKTOP = sp;return ($90|0);
     }
    }
   }
  }
 } while(0);
 $86 = $7;
 HEAP32[$86>>2] = 0;
 $87 = $9;
 $88 = ($87|0)!=(0|0);
 if ($88) {
  $89 = $9;
  _cmsStageFree($89);
 }
 $4 = 0;
 $90 = $4;
 STACKTOP = sp;return ($90|0);
}
function _Type_MPEclut_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 32|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $13 = $7;
 $11 = $13;
 $14 = $11;
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $12 = $16;
 $17 = $11;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)>(8);
 if ($20) {
  $4 = 0;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 $21 = $12;
 $22 = ((($21)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0);
 if ($24) {
  $4 = 0;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 $25 = $6;
 $26 = $11;
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28&65535;
 $30 = (__cmsWriteUInt16Number($25,$29)|0);
 $31 = ($30|0)!=(0);
 if (!($31)) {
  $4 = 0;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 $32 = $6;
 $33 = $11;
 $34 = ((($33)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35&65535;
 $37 = (__cmsWriteUInt16Number($32,$36)|0);
 $38 = ($37|0)!=(0);
 if (!($38)) {
  $4 = 0;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 dest=$9; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $10 = 0;
 while(1) {
  $39 = $10;
  $40 = $11;
  $41 = ((($40)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($39>>>0)<($42>>>0);
  if (!($43)) {
   break;
  }
  $44 = $12;
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 16|0);
  $48 = $10;
  $49 = (($47) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50&255;
  $52 = $10;
  $53 = (($9) + ($52)|0);
  HEAP8[$53>>0] = $51;
  $54 = $10;
  $55 = (($54) + 1)|0;
  $10 = $55;
 }
 $56 = $6;
 $57 = ((($56)) + 288|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $6;
 $60 = (FUNCTION_TABLE_iiii[$58 & 511]($59,16,$9)|0);
 $61 = ($60|0)!=(0);
 if (!($61)) {
  $4 = 0;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 $10 = 0;
 while(1) {
  $62 = $10;
  $63 = $12;
  $64 = ((($63)) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($62>>>0)<($65>>>0);
  if (!($66)) {
   label = 19;
   break;
  }
  $67 = $6;
  $68 = $12;
  $69 = HEAP32[$68>>2]|0;
  $70 = $10;
  $71 = (($69) + ($70<<2)|0);
  $72 = +HEAPF32[$71>>2];
  $73 = (__cmsWriteFloat32Number($67,$72)|0);
  $74 = ($73|0)!=(0);
  if (!($74)) {
   label = 17;
   break;
  }
  $75 = $10;
  $76 = (($75) + 1)|0;
  $10 = $76;
 }
 if ((label|0) == 17) {
  $4 = 0;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 else if ((label|0) == 19) {
  $4 = 1;
  $77 = $4;
  STACKTOP = sp;return ($77|0);
 }
 return (0)|0;
}
function _WriteMPECurve($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $10 = $11;
 $12 = $6;
 $13 = $10;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $8;
 $17 = (($15) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_WriteSegmentedCurve($12,$18)|0);
 STACKTOP = sp;return ($19|0);
}
function _WriteSegmentedCurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $12 = $4;
 $13 = ((($12)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $7 = $14;
 $15 = $4;
 $16 = ((($15)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $8 = $17;
 $18 = $3;
 $19 = (__cmsWriteUInt32Number($18,1668641382)|0);
 $20 = ($19|0)!=(0);
 L1: do {
  if ($20) {
   $21 = $3;
   $22 = (__cmsWriteUInt32Number($21,0)|0);
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = $3;
    $25 = $8;
    $26 = $25&65535;
    $27 = (__cmsWriteUInt16Number($24,$26)|0);
    $28 = ($27|0)!=(0);
    if ($28) {
     $29 = $3;
     $30 = (__cmsWriteUInt16Number($29,0)|0);
     $31 = ($30|0)!=(0);
     if ($31) {
      $5 = 0;
      while(1) {
       $32 = $5;
       $33 = $8;
       $34 = (($33) - 1)|0;
       $35 = ($32>>>0)<($34>>>0);
       if (!($35)) {
        break;
       }
       $36 = $3;
       $37 = $7;
       $38 = $5;
       $39 = (($37) + (($38*104)|0)|0);
       $40 = ((($39)) + 4|0);
       $41 = +HEAPF32[$40>>2];
       $42 = (__cmsWriteFloat32Number($36,$41)|0);
       $43 = ($42|0)!=(0);
       if (!($43)) {
        break L1;
       }
       $44 = $5;
       $45 = (($44) + 1)|0;
       $5 = $45;
      }
      $5 = 0;
      while(1) {
       $46 = $5;
       $47 = $4;
       $48 = ((($47)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ($46>>>0)<($49>>>0);
       if (!($50)) {
        break;
       }
       $51 = $7;
       $52 = $5;
       $53 = (($51) + (($52*104)|0)|0);
       $9 = $53;
       $54 = $9;
       $55 = ((($54)) + 8|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(0);
       L14: do {
        if ($57) {
         $58 = $3;
         $59 = (__cmsWriteUInt32Number($58,1935764838)|0);
         $60 = ($59|0)!=(0);
         if (!($60)) {
          break L1;
         }
         $61 = $3;
         $62 = (__cmsWriteUInt32Number($61,0)|0);
         $63 = ($62|0)!=(0);
         if (!($63)) {
          break L1;
         }
         $64 = $3;
         $65 = $9;
         $66 = ((($65)) + 96|0);
         $67 = HEAP32[$66>>2]|0;
         $68 = (__cmsWriteUInt32Number($64,$67)|0);
         $69 = ($68|0)!=(0);
         if (!($69)) {
          break L1;
         }
         $6 = 0;
         while(1) {
          $70 = $6;
          $71 = $4;
          $72 = ((($71)) + 8|0);
          $73 = HEAP32[$72>>2]|0;
          $74 = $5;
          $75 = (($73) + (($74*104)|0)|0);
          $76 = ((($75)) + 96|0);
          $77 = HEAP32[$76>>2]|0;
          $78 = ($70>>>0)<($77>>>0);
          if (!($78)) {
           break L14;
          }
          $79 = $3;
          $80 = $9;
          $81 = ((($80)) + 100|0);
          $82 = HEAP32[$81>>2]|0;
          $83 = $6;
          $84 = (($82) + ($83<<2)|0);
          $85 = +HEAPF32[$84>>2];
          $86 = (__cmsWriteFloat32Number($79,$85)|0);
          $87 = ($86|0)!=(0);
          if (!($87)) {
           break L1;
          }
          $88 = $6;
          $89 = (($88) + 1)|0;
          $6 = $89;
         }
        } else {
         ;HEAP32[$11>>2]=HEAP32[15936>>2]|0;HEAP32[$11+4>>2]=HEAP32[15936+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[15936+8>>2]|0;
         $90 = $3;
         $91 = (__cmsWriteUInt32Number($90,1885434470)|0);
         $92 = ($91|0)!=(0);
         if (!($92)) {
          break L1;
         }
         $93 = $3;
         $94 = (__cmsWriteUInt32Number($93,0)|0);
         $95 = ($94|0)!=(0);
         if (!($95)) {
          break L1;
         }
         $96 = $9;
         $97 = ((($96)) + 8|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (($98) - 6)|0;
         $10 = $99;
         $100 = $10;
         $101 = ($100|0)>(2);
         $102 = $10;
         $103 = ($102|0)<(0);
         $or$cond = $101 | $103;
         if ($or$cond) {
          break L1;
         }
         $104 = $3;
         $105 = $10;
         $106 = $105&65535;
         $107 = (__cmsWriteUInt16Number($104,$106)|0);
         $108 = ($107|0)!=(0);
         if (!($108)) {
          break L1;
         }
         $109 = $3;
         $110 = (__cmsWriteUInt16Number($109,0)|0);
         $111 = ($110|0)!=(0);
         if (!($111)) {
          break L1;
         }
         $6 = 0;
         while(1) {
          $112 = $6;
          $113 = $10;
          $114 = (($11) + ($113<<2)|0);
          $115 = HEAP32[$114>>2]|0;
          $116 = ($112>>>0)<($115>>>0);
          if (!($116)) {
           break L14;
          }
          $117 = $3;
          $118 = $9;
          $119 = ((($118)) + 16|0);
          $120 = $6;
          $121 = (($119) + ($120<<3)|0);
          $122 = +HEAPF64[$121>>3];
          $123 = $122;
          $124 = (__cmsWriteFloat32Number($117,$123)|0);
          $125 = ($124|0)!=(0);
          if (!($125)) {
           break L1;
          }
          $126 = $6;
          $127 = (($126) + 1)|0;
          $6 = $127;
         }
        }
       } while(0);
       $128 = $5;
       $129 = (($128) + 1)|0;
       $5 = $129;
      }
      $2 = 1;
      $130 = $2;
      STACKTOP = sp;return ($130|0);
     }
    }
   }
  }
 } while(0);
 $2 = 0;
 $130 = $2;
 STACKTOP = sp;return ($130|0);
}
function _ReadMPECurve($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $7;
 $10 = $11;
 $12 = $5;
 $13 = $6;
 $14 = (_ReadSegmentedCurve($12,$13)|0);
 $15 = $10;
 $16 = $8;
 $17 = (($15) + ($16<<2)|0);
 HEAP32[$17>>2] = $14;
 $18 = $10;
 $19 = $8;
 $20 = (($18) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0|0);
 $23 = $22&1;
 STACKTOP = sp;return ($23|0);
}
function _ReadSegmentedCurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $switch$split2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $5 = sp + 44|0;
 $8 = sp + 62|0;
 $12 = sp + 60|0;
 $13 = sp + 12|0;
 $14 = sp + 8|0;
 $15 = sp + 4|0;
 $16 = sp + 64|0;
 $3 = $0;
 $4 = $1;
 $11 = -9.9999997781963083E+21;
 $17 = $4;
 $18 = (__cmsReadUInt32Number($17,$5)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $2 = 0;
  $223 = $2;
  STACKTOP = sp;return ($223|0);
 }
 $20 = HEAP32[$5>>2]|0;
 $21 = ($20|0)!=(1668641382);
 if ($21) {
  $2 = 0;
  $223 = $2;
  STACKTOP = sp;return ($223|0);
 }
 $22 = $4;
 $23 = (__cmsReadUInt32Number($22,0)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $2 = 0;
  $223 = $2;
  STACKTOP = sp;return ($223|0);
 }
 $25 = $4;
 $26 = (__cmsReadUInt16Number($25,$8)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $2 = 0;
  $223 = $2;
  STACKTOP = sp;return ($223|0);
 }
 $28 = $4;
 $29 = (__cmsReadUInt16Number($28,0)|0);
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $2 = 0;
  $223 = $2;
  STACKTOP = sp;return ($223|0);
 }
 $31 = HEAP16[$8>>1]|0;
 $32 = $31&65535;
 $33 = ($32|0)<(1);
 if ($33) {
  $2 = 0;
  $223 = $2;
  STACKTOP = sp;return ($223|0);
 }
 $34 = $3;
 $35 = ((($34)) + 20|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP16[$8>>1]|0;
 $38 = $37&65535;
 $39 = (__cmsCalloc($36,$38,104)|0);
 $9 = $39;
 $40 = $9;
 $41 = ($40|0)==(0|0);
 if ($41) {
  $2 = 0;
  $223 = $2;
  STACKTOP = sp;return ($223|0);
 }
 $6 = 0;
 while(1) {
  $42 = $6;
  $43 = HEAP16[$8>>1]|0;
  $44 = $43&65535;
  $45 = (($44) - 1)|0;
  $46 = ($42>>>0)<($45>>>0);
  $47 = $11;
  $48 = $9;
  if (!($46)) {
   label = 19;
   break;
  }
  $49 = $6;
  $50 = (($48) + (($49*104)|0)|0);
  HEAPF32[$50>>2] = $47;
  $51 = $4;
  $52 = $9;
  $53 = $6;
  $54 = (($52) + (($53*104)|0)|0);
  $55 = ((($54)) + 4|0);
  $56 = (__cmsReadFloat32Number($51,$55)|0);
  $57 = ($56|0)!=(0);
  if (!($57)) {
   break;
  }
  $58 = $9;
  $59 = $6;
  $60 = (($58) + (($59*104)|0)|0);
  $61 = ((($60)) + 4|0);
  $62 = +HEAPF32[$61>>2];
  $11 = $62;
  $63 = $6;
  $64 = (($63) + 1)|0;
  $6 = $64;
 }
 L33: do {
  if ((label|0) == 19) {
   $65 = HEAP16[$8>>1]|0;
   $66 = $65&65535;
   $67 = (($66) - 1)|0;
   $68 = (($48) + (($67*104)|0)|0);
   HEAPF32[$68>>2] = $47;
   $69 = $9;
   $70 = HEAP16[$8>>1]|0;
   $71 = $70&65535;
   $72 = (($71) - 1)|0;
   $73 = (($69) + (($72*104)|0)|0);
   $74 = ((($73)) + 4|0);
   HEAPF32[$74>>2] = 9.9999997781963083E+21;
   $6 = 0;
   L35: while(1) {
    $75 = $6;
    $76 = HEAP16[$8>>1]|0;
    $77 = $76&65535;
    $78 = ($75>>>0)<($77>>>0);
    if (!($78)) {
     break;
    }
    $79 = $4;
    $80 = (__cmsReadUInt32Number($79,$5)|0);
    $81 = ($80|0)!=(0);
    if (!($81)) {
     break L33;
    }
    $82 = $4;
    $83 = (__cmsReadUInt32Number($82,0)|0);
    $84 = ($83|0)!=(0);
    if (!($84)) {
     break L33;
    }
    $85 = HEAP32[$5>>2]|0;
    $switch$split2D = ($85|0)<(1935764838);
    L40: do {
     if ($switch$split2D) {
      switch ($85|0) {
      case 1885434470:  {
       break;
      }
      default: {
       label = 37;
       break L35;
      }
      }
      ;HEAP32[$13>>2]=HEAP32[15936>>2]|0;HEAP32[$13+4>>2]=HEAP32[15936+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[15936+8>>2]|0;
      $86 = $4;
      $87 = (__cmsReadUInt16Number($86,$12)|0);
      $88 = ($87|0)!=(0);
      if (!($88)) {
       break L33;
      }
      $89 = $4;
      $90 = (__cmsReadUInt16Number($89,0)|0);
      $91 = ($90|0)!=(0);
      if (!($91)) {
       break L33;
      }
      $92 = HEAP16[$12>>1]|0;
      $93 = $92&65535;
      $94 = (($93) + 6)|0;
      $95 = $9;
      $96 = $6;
      $97 = (($95) + (($96*104)|0)|0);
      $98 = ((($97)) + 8|0);
      HEAP32[$98>>2] = $94;
      $99 = HEAP16[$12>>1]|0;
      $100 = $99&65535;
      $101 = ($100|0)>(2);
      if ($101) {
       break L33;
      }
      $7 = 0;
      while(1) {
       $102 = $7;
       $103 = HEAP16[$12>>1]|0;
       $104 = $103&65535;
       $105 = (($13) + ($104<<2)|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = ($102>>>0)<($106>>>0);
       if (!($107)) {
        break L40;
       }
       $108 = $4;
       $109 = (__cmsReadFloat32Number($108,$14)|0);
       $110 = ($109|0)!=(0);
       if (!($110)) {
        break L33;
       }
       $111 = +HEAPF32[$14>>2];
       $112 = $111;
       $113 = $9;
       $114 = $6;
       $115 = (($113) + (($114*104)|0)|0);
       $116 = ((($115)) + 16|0);
       $117 = $7;
       $118 = (($116) + ($117<<3)|0);
       HEAPF64[$118>>3] = $112;
       $119 = $7;
       $120 = (($119) + 1)|0;
       $7 = $120;
      }
     } else {
      switch ($85|0) {
      case 1935764838:  {
       break;
      }
      default: {
       label = 37;
       break L35;
      }
      }
      $121 = $4;
      $122 = (__cmsReadUInt32Number($121,$15)|0);
      $123 = ($122|0)!=(0);
      if (!($123)) {
       break L33;
      }
      $124 = HEAP32[$15>>2]|0;
      $125 = $9;
      $126 = $6;
      $127 = (($125) + (($126*104)|0)|0);
      $128 = ((($127)) + 96|0);
      HEAP32[$128>>2] = $124;
      $129 = $3;
      $130 = ((($129)) + 20|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = HEAP32[$15>>2]|0;
      $133 = (__cmsCalloc($131,$132,4)|0);
      $134 = $9;
      $135 = $6;
      $136 = (($134) + (($135*104)|0)|0);
      $137 = ((($136)) + 100|0);
      HEAP32[$137>>2] = $133;
      $138 = $9;
      $139 = $6;
      $140 = (($138) + (($139*104)|0)|0);
      $141 = ((($140)) + 100|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($142|0)==(0|0);
      if ($143) {
       break L33;
      }
      $7 = 0;
      while(1) {
       $144 = $7;
       $145 = HEAP32[$15>>2]|0;
       $146 = ($144>>>0)<($145>>>0);
       if (!($146)) {
        break L40;
       }
       $147 = $4;
       $148 = $9;
       $149 = $6;
       $150 = (($148) + (($149*104)|0)|0);
       $151 = ((($150)) + 100|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = $7;
       $154 = (($152) + ($153<<2)|0);
       $155 = (__cmsReadFloat32Number($147,$154)|0);
       $156 = ($155|0)!=(0);
       if (!($156)) {
        break L33;
       }
       $157 = $7;
       $158 = (($157) + 1)|0;
       $7 = $158;
      }
     }
    } while(0);
    $163 = $6;
    $164 = (($163) + 1)|0;
    $6 = $164;
   }
   if ((label|0) == 37) {
    $159 = HEAP32[$5>>2]|0;
    __cmsTagSignature2String($16,$159);
    $160 = $3;
    $161 = ((($160)) + 20|0);
    $162 = HEAP32[$161>>2]|0;
    HEAP32[$vararg_buffer>>2] = $16;
    _cmsSignalError($162,8,28789,$vararg_buffer);
    break;
   }
   $165 = $3;
   $166 = ((($165)) + 20|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = HEAP16[$8>>1]|0;
   $169 = $168&65535;
   $170 = $9;
   $171 = (_cmsBuildSegmentedToneCurve($167,$169,$170)|0);
   $10 = $171;
   $6 = 0;
   while(1) {
    $172 = $6;
    $173 = HEAP16[$8>>1]|0;
    $174 = $173&65535;
    $175 = ($172>>>0)<($174>>>0);
    if (!($175)) {
     break;
    }
    $176 = $9;
    $177 = $6;
    $178 = (($176) + (($177*104)|0)|0);
    $179 = ((($178)) + 100|0);
    $180 = HEAP32[$179>>2]|0;
    $181 = ($180|0)!=(0|0);
    if ($181) {
     $182 = $3;
     $183 = ((($182)) + 20|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = $9;
     $186 = $6;
     $187 = (($185) + (($186*104)|0)|0);
     $188 = ((($187)) + 100|0);
     $189 = HEAP32[$188>>2]|0;
     __cmsFree($184,$189);
    }
    $190 = $6;
    $191 = (($190) + 1)|0;
    $6 = $191;
   }
   $192 = $3;
   $193 = ((($192)) + 20|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = $9;
   __cmsFree($194,$195);
   $196 = $10;
   $2 = $196;
   $223 = $2;
   STACKTOP = sp;return ($223|0);
  }
 } while(0);
 $197 = $9;
 $198 = ($197|0)!=(0|0);
 if ($198) {
  $6 = 0;
  while(1) {
   $199 = $6;
   $200 = HEAP16[$8>>1]|0;
   $201 = $200&65535;
   $202 = ($199>>>0)<($201>>>0);
   if (!($202)) {
    break;
   }
   $203 = $9;
   $204 = $6;
   $205 = (($203) + (($204*104)|0)|0);
   $206 = ((($205)) + 100|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = ($207|0)!=(0|0);
   if ($208) {
    $209 = $3;
    $210 = ((($209)) + 20|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = $9;
    $213 = $6;
    $214 = (($212) + (($213*104)|0)|0);
    $215 = ((($214)) + 100|0);
    $216 = HEAP32[$215>>2]|0;
    __cmsFree($211,$216);
   }
   $217 = $6;
   $218 = (($217) + 1)|0;
   $6 = $218;
  }
  $219 = $3;
  $220 = ((($219)) + 20|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $9;
  __cmsFree($221,$222);
 }
 $2 = 0;
 $223 = $2;
 STACKTOP = sp;return ($223|0);
}
function _ReadMPEElem($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $11 = sp + 20|0;
 $13 = sp + 12|0;
 $16 = sp + 48|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $17 = $8;
 $14 = $17;
 $18 = $6;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsContextGetClientChunk($20,11)|0);
 $15 = $21;
 $22 = $7;
 $23 = (__cmsReadUInt32Number($22,$11)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $5 = 0;
  $52 = $5;
  STACKTOP = sp;return ($52|0);
 }
 $25 = $7;
 $26 = (__cmsReadUInt32Number($25,0)|0);
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $5 = 0;
  $52 = $5;
  STACKTOP = sp;return ($52|0);
 }
 $28 = HEAP32[$11>>2]|0;
 $29 = $15;
 $30 = HEAP32[$29>>2]|0;
 $31 = (_GetHandler($28,$30,15776)|0);
 $12 = $31;
 $32 = $12;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $34 = HEAP32[$11>>2]|0;
  __cmsTagSignature2String($16,$34);
  $35 = $6;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$vararg_buffer>>2] = $16;
  _cmsSignalError($37,8,28828,$vararg_buffer);
  $5 = 0;
  $52 = $5;
  STACKTOP = sp;return ($52|0);
 }
 $38 = $12;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if ($41) {
  $42 = $14;
  $43 = $12;
  $44 = ((($43)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $6;
  $47 = $7;
  $48 = $10;
  $49 = (FUNCTION_TABLE_iiiii[$45 & 511]($46,$47,$13,$48)|0);
  $50 = (_cmsPipelineInsertStage($42,1,$49)|0);
  $51 = ($50|0)!=(0);
  if (!($51)) {
   $5 = 0;
   $52 = $5;
   STACKTOP = sp;return ($52|0);
  }
 }
 $5 = 1;
 $52 = $5;
 STACKTOP = sp;return ($52|0);
}
function _WriteCountAndSting($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $7;
 $12 = $8;
 $13 = (_cmsMLUgetASCII($11,28872,$12,0,0)|0);
 $9 = $13;
 $14 = $5;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $9;
 $18 = (__cmsMalloc($16,$17)|0);
 $10 = $18;
 $19 = $6;
 $20 = $9;
 $21 = (__cmsWriteUInt32Number($19,$20)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $4 = 0;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 $23 = $7;
 $24 = $8;
 $25 = $10;
 $26 = $9;
 $27 = (_cmsMLUgetASCII($23,28872,$24,$25,$26)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $4 = 0;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 $29 = $6;
 $30 = ((($29)) + 288|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $6;
 $33 = $9;
 $34 = $10;
 $35 = (FUNCTION_TABLE_iiii[$31 & 511]($32,$33,$34)|0);
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $5;
  $38 = ((($37)) + 20|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $10;
  __cmsFree($39,$40);
  $4 = 1;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 } else {
  $4 = 0;
  $41 = $4;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _ReadCountAndSting($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp + 4|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)<(4);
 if ($15) {
  $5 = 0;
  $62 = $5;
  STACKTOP = sp;return ($62|0);
 }
 $16 = $7;
 $17 = (__cmsReadUInt32Number($16,$11)|0);
 $18 = ($17|0)!=(0);
 if (!($18)) {
  $5 = 0;
  $62 = $5;
  STACKTOP = sp;return ($62|0);
 }
 $19 = HEAP32[$11>>2]|0;
 $20 = ($19>>>0)>(4294967291);
 if ($20) {
  $5 = 0;
  $62 = $5;
  STACKTOP = sp;return ($62|0);
 }
 $21 = $9;
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$11>>2]|0;
 $24 = (($23) + 4)|0;
 $25 = ($22>>>0)<($24>>>0);
 if ($25) {
  $5 = 0;
  $62 = $5;
  STACKTOP = sp;return ($62|0);
 }
 $26 = $6;
 $27 = ((($26)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$11>>2]|0;
 $30 = (($29) + 1)|0;
 $31 = (__cmsMalloc($28,$30)|0);
 $12 = $31;
 $32 = $12;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $5 = 0;
  $62 = $5;
  STACKTOP = sp;return ($62|0);
 }
 $34 = $7;
 $35 = ((($34)) + 272|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $7;
 $38 = $12;
 $39 = HEAP32[$11>>2]|0;
 $40 = (FUNCTION_TABLE_iiiii[$36 & 511]($37,$38,1,$39)|0);
 $41 = HEAP32[$11>>2]|0;
 $42 = ($40|0)!=($41|0);
 if ($42) {
  $43 = $6;
  $44 = ((($43)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $12;
  __cmsFree($45,$46);
  $5 = 0;
  $62 = $5;
  STACKTOP = sp;return ($62|0);
 } else {
  $47 = $12;
  $48 = HEAP32[$11>>2]|0;
  $49 = (($47) + ($48)|0);
  HEAP8[$49>>0] = 0;
  $50 = $8;
  $51 = $10;
  $52 = $12;
  (_cmsMLUsetASCII($50,28872,$51,$52)|0);
  $53 = $6;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $12;
  __cmsFree($55,$56);
  $57 = HEAP32[$11>>2]|0;
  $58 = (($57) + 4)|0;
  $59 = $9;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) - ($58))|0;
  HEAP32[$59>>2] = $61;
  $5 = 1;
  $62 = $5;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _WriteSetOfCurves($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $9 = 0, $switch$split2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $13 = sp + 40|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $8;
 $15 = (_cmsStageOutputChannels($14)|0);
 $10 = $15;
 $16 = $8;
 $17 = (__cmsStageGetPtrToCurveSet($16)|0);
 $12 = $17;
 $9 = 0;
 L1: while(1) {
  $18 = $9;
  $19 = $10;
  $20 = ($18>>>0)<($19>>>0);
  if (!($20)) {
   label = 20;
   break;
  }
  $21 = $7;
  $11 = $21;
  $22 = $12;
  $23 = $9;
  $24 = (($22) + ($23<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  do {
   if ($28) {
    label = 6;
   } else {
    $29 = $12;
    $30 = $9;
    $31 = (($29) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($32)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)==(2);
    if ($35) {
     $36 = $12;
     $37 = $9;
     $38 = (($36) + ($37<<2)|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ((($39)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($41)) + 104|0);
     $43 = ((($42)) + 8|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      label = 6;
      break;
     }
    }
    $46 = $12;
    $47 = $9;
    $48 = (($46) + ($47<<2)|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ((($49)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)<(0);
    if ($54) {
     $11 = 1668641398;
    }
   }
  } while(0);
  if ((label|0) == 6) {
   label = 0;
   $11 = 1668641398;
  }
  $55 = $6;
  $56 = $11;
  $57 = (__cmsWriteTypeBase($55,$56)|0);
  $58 = ($57|0)!=(0);
  if (!($58)) {
   label = 10;
   break;
  }
  $59 = $11;
  $switch$split2D = ($59|0)<(1885434465);
  if ($switch$split2D) {
   switch ($59|0) {
   case 1668641398:  {
    break;
   }
   default: {
    label = 16;
    break L1;
   }
   }
   $60 = $5;
   $61 = $6;
   $62 = $12;
   $63 = $9;
   $64 = (($62) + ($63<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (_Type_Curve_Write($60,$61,$65,1)|0);
   $67 = ($66|0)!=(0);
   if (!($67)) {
    label = 13;
    break;
   }
  } else {
   switch ($59|0) {
   case 1885434465:  {
    break;
   }
   default: {
    label = 16;
    break L1;
   }
   }
   $68 = $5;
   $69 = $6;
   $70 = $12;
   $71 = $9;
   $72 = (($70) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (_Type_ParametricCurve_Write($68,$69,$73,1)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    label = 15;
    break;
   }
  }
  $80 = $6;
  $81 = (__cmsWriteAlignment($80)|0);
  $82 = ($81|0)!=(0);
  if (!($82)) {
   label = 18;
   break;
  }
  $83 = $9;
  $84 = (($83) + 1)|0;
  $9 = $84;
 }
 if ((label|0) == 10) {
  $4 = 0;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 else if ((label|0) == 13) {
  $4 = 0;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 else if ((label|0) == 15) {
  $4 = 0;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 else if ((label|0) == 16) {
  $76 = $7;
  __cmsTagSignature2String($13,$76);
  $77 = $5;
  $78 = ((($77)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  _cmsSignalError($79,8,29003,$vararg_buffer);
  $4 = 0;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 else if ((label|0) == 18) {
  $4 = 0;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 else if ((label|0) == 20) {
  $4 = 1;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 return (0)|0;
}
function _WriteCLUT_642($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 40|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $8;
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $11 = $14;
 $15 = $11;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $5;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  _cmsSignalError($21,13,28918,$vararg_buffer);
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 dest=$9; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $10 = 0;
 while(1) {
  $22 = $10;
  $23 = $11;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($22>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $11;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 16|0);
  $33 = $10;
  $34 = (($32) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35&255;
  $37 = $10;
  $38 = (($9) + ($37)|0);
  HEAP8[$38>>0] = $36;
  $39 = $10;
  $40 = (($39) + 1)|0;
  $10 = $40;
 }
 $41 = $6;
 $42 = ((($41)) + 288|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $6;
 $45 = (FUNCTION_TABLE_iiii[$43 & 511]($44,16,$9)|0);
 $46 = ($45|0)!=(0);
 if (!($46)) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $47 = $6;
 $48 = $7;
 $49 = (__cmsWriteUInt8Number($47,$48)|0);
 $50 = ($49|0)!=(0);
 if (!($50)) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $51 = $6;
 $52 = (__cmsWriteUInt8Number($51,0)|0);
 $53 = ($52|0)!=(0);
 if (!($53)) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $54 = $6;
 $55 = (__cmsWriteUInt8Number($54,0)|0);
 $56 = ($55|0)!=(0);
 if (!($56)) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $57 = $6;
 $58 = (__cmsWriteUInt8Number($57,0)|0);
 $59 = ($58|0)!=(0);
 if (!($59)) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $60 = $7;
 $61 = $60&255;
 $62 = ($61|0)==(1);
 L29: do {
  if ($62) {
   $10 = 0;
   while(1) {
    $63 = $10;
    $64 = $11;
    $65 = ((($64)) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($63>>>0)<($66>>>0);
    if (!($67)) {
     break L29;
    }
    $68 = $6;
    $69 = $11;
    $70 = HEAP32[$69>>2]|0;
    $71 = $10;
    $72 = (($70) + ($71<<1)|0);
    $73 = HEAP16[$72>>1]|0;
    $74 = $73&65535;
    $75 = ($74*65281)|0;
    $76 = (($75) + 8388608)|0;
    $77 = $76 >>> 24;
    $78 = $77 & 255;
    $79 = $78&255;
    $80 = (__cmsWriteUInt8Number($68,$79)|0);
    $81 = ($80|0)!=(0);
    if (!($81)) {
     break;
    }
    $82 = $10;
    $83 = (($82) + 1)|0;
    $10 = $83;
   }
   $4 = 0;
   $103 = $4;
   STACKTOP = sp;return ($103|0);
  } else {
   $84 = $7;
   $85 = $84&255;
   $86 = ($85|0)==(2);
   if (!($86)) {
    $95 = $5;
    $96 = ((($95)) + 20|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = $7;
    $99 = $98&255;
    HEAP32[$vararg_buffer1>>2] = $99;
    _cmsSignalError($97,8,28977,$vararg_buffer1);
    $4 = 0;
    $103 = $4;
    STACKTOP = sp;return ($103|0);
   }
   $87 = $6;
   $88 = $11;
   $89 = ((($88)) + 8|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $11;
   $92 = HEAP32[$91>>2]|0;
   $93 = (__cmsWriteUInt16Array($87,$90,$92)|0);
   $94 = ($93|0)!=(0);
   if (!($94)) {
    $4 = 0;
    $103 = $4;
    STACKTOP = sp;return ($103|0);
   }
  }
 } while(0);
 $100 = $6;
 $101 = (__cmsWriteAlignment($100)|0);
 $102 = ($101|0)!=(0);
 if ($102) {
  $4 = 1;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 } else {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 return (0)|0;
}
function _WriteMatrix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $7 = $10;
 $11 = $5;
 $12 = $7;
 $13 = HEAP32[$12>>2]|0;
 $14 = +HEAPF64[$13>>3];
 $15 = (__cmsWrite15Fixed16Number($11,$14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   $17 = $5;
   $18 = $7;
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 8|0);
   $21 = +HEAPF64[$20>>3];
   $22 = (__cmsWrite15Fixed16Number($17,$21)|0);
   $23 = ($22|0)!=(0);
   if (!($23)) {
    $3 = 0;
    break;
   }
   $24 = $5;
   $25 = $7;
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 16|0);
   $28 = +HEAPF64[$27>>3];
   $29 = (__cmsWrite15Fixed16Number($24,$28)|0);
   $30 = ($29|0)!=(0);
   if (!($30)) {
    $3 = 0;
    break;
   }
   $31 = $5;
   $32 = $7;
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($33)) + 24|0);
   $35 = +HEAPF64[$34>>3];
   $36 = (__cmsWrite15Fixed16Number($31,$35)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $3 = 0;
    break;
   }
   $38 = $5;
   $39 = $7;
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 32|0);
   $42 = +HEAPF64[$41>>3];
   $43 = (__cmsWrite15Fixed16Number($38,$42)|0);
   $44 = ($43|0)!=(0);
   if (!($44)) {
    $3 = 0;
    break;
   }
   $45 = $5;
   $46 = $7;
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($47)) + 40|0);
   $49 = +HEAPF64[$48>>3];
   $50 = (__cmsWrite15Fixed16Number($45,$49)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    $3 = 0;
    break;
   }
   $52 = $5;
   $53 = $7;
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 48|0);
   $56 = +HEAPF64[$55>>3];
   $57 = (__cmsWrite15Fixed16Number($52,$56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    $3 = 0;
    break;
   }
   $59 = $5;
   $60 = $7;
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($61)) + 56|0);
   $63 = +HEAPF64[$62>>3];
   $64 = (__cmsWrite15Fixed16Number($59,$63)|0);
   $65 = ($64|0)!=(0);
   if (!($65)) {
    $3 = 0;
    break;
   }
   $66 = $5;
   $67 = $7;
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($68)) + 64|0);
   $70 = +HEAPF64[$69>>3];
   $71 = (__cmsWrite15Fixed16Number($66,$70)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    $3 = 0;
    break;
   }
   $73 = $7;
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)!=(0|0);
   $77 = $5;
   if ($76) {
    $78 = $7;
    $79 = ((($78)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = +HEAPF64[$80>>3];
    $82 = (__cmsWrite15Fixed16Number($77,$81)|0);
    $83 = ($82|0)!=(0);
    if (!($83)) {
     $3 = 0;
     break;
    }
    $84 = $5;
    $85 = $7;
    $86 = ((($85)) + 4|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ((($87)) + 8|0);
    $89 = +HEAPF64[$88>>3];
    $90 = (__cmsWrite15Fixed16Number($84,$89)|0);
    $91 = ($90|0)!=(0);
    if (!($91)) {
     $3 = 0;
     break;
    }
    $92 = $5;
    $93 = $7;
    $94 = ((($93)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 16|0);
    $97 = +HEAPF64[$96>>3];
    $98 = (__cmsWrite15Fixed16Number($92,$97)|0);
    $99 = ($98|0)!=(0);
    if (!($99)) {
     $3 = 0;
     break;
    }
   } else {
    $100 = (__cmsWrite15Fixed16Number($77,0.0)|0);
    $101 = ($100|0)!=(0);
    if (!($101)) {
     $3 = 0;
     break;
    }
    $102 = $5;
    $103 = (__cmsWrite15Fixed16Number($102,0.0)|0);
    $104 = ($103|0)!=(0);
    if (!($104)) {
     $3 = 0;
     break;
    }
    $105 = $5;
    $106 = (__cmsWrite15Fixed16Number($105,0.0)|0);
    $107 = ($106|0)!=(0);
    if (!($107)) {
     $3 = 0;
     break;
    }
   }
   $3 = 1;
  } else {
   $3 = 0;
  }
 } while(0);
 $108 = $3;
 STACKTOP = sp;return ($108|0);
}
function _ReadSetOfCurves($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $9 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = 0;
 $12 = $8;
 $13 = ($12>>>0)>(16);
 if ($13) {
  $4 = 0;
  $58 = $4;
  STACKTOP = sp;return ($58|0);
 }
 $14 = $6;
 $15 = ((($14)) + 276|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $6;
 $18 = $7;
 $19 = (FUNCTION_TABLE_iii[$16 & 511]($17,$18)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $4 = 0;
  $58 = $4;
  STACKTOP = sp;return ($58|0);
 }
 $10 = 0;
 while(1) {
  $21 = $10;
  $22 = $8;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = $10;
  $25 = (($9) + ($24<<2)|0);
  HEAP32[$25>>2] = 0;
  $26 = $10;
  $27 = (($26) + 1)|0;
  $10 = $27;
 }
 $10 = 0;
 while(1) {
  $28 = $10;
  $29 = $8;
  $30 = ($28>>>0)<($29>>>0);
  $31 = $5;
  if (!($30)) {
   label = 13;
   break;
  }
  $32 = $6;
  $33 = (_ReadEmbeddedCurve($31,$32)|0);
  $34 = $10;
  $35 = (($9) + ($34<<2)|0);
  HEAP32[$35>>2] = $33;
  $36 = $10;
  $37 = (($9) + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if ($39) {
   break;
  }
  $40 = $6;
  $41 = (__cmsReadAlignment($40)|0);
  $42 = ($41|0)!=(0);
  if (!($42)) {
   break;
  }
  $43 = $10;
  $44 = (($43) + 1)|0;
  $10 = $44;
 }
 if ((label|0) == 13) {
  $45 = ((($31)) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $8;
  $48 = (_cmsStageAllocToneCurves($46,$47,$9)|0);
  $11 = $48;
 }
 $10 = 0;
 while(1) {
  $49 = $10;
  $50 = $8;
  $51 = ($49>>>0)<($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $10;
  $53 = (($9) + ($52<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  _cmsFreeToneCurve($54);
  $55 = $10;
  $56 = (($55) + 1)|0;
  $10 = $56;
 }
 $57 = $11;
 $4 = $57;
 $58 = $4;
 STACKTOP = sp;return ($58|0);
}
function _ReadMatrix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $7 = sp + 24|0;
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $11 = ((($10)) + 276|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $5;
 $14 = $6;
 $15 = (FUNCTION_TABLE_iii[$12 & 511]($13,$14)|0);
 $16 = ($15|0)!=(0);
 do {
  if ($16) {
   $17 = $5;
   $18 = (__cmsRead15Fixed16Number($17,$7)|0);
   $19 = ($18|0)!=(0);
   if (!($19)) {
    $3 = 0;
    break;
   }
   $20 = $5;
   $21 = ((($7)) + 8|0);
   $22 = (__cmsRead15Fixed16Number($20,$21)|0);
   $23 = ($22|0)!=(0);
   if (!($23)) {
    $3 = 0;
    break;
   }
   $24 = $5;
   $25 = ((($7)) + 16|0);
   $26 = (__cmsRead15Fixed16Number($24,$25)|0);
   $27 = ($26|0)!=(0);
   if (!($27)) {
    $3 = 0;
    break;
   }
   $28 = $5;
   $29 = ((($7)) + 24|0);
   $30 = (__cmsRead15Fixed16Number($28,$29)|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    $3 = 0;
    break;
   }
   $32 = $5;
   $33 = ((($7)) + 32|0);
   $34 = (__cmsRead15Fixed16Number($32,$33)|0);
   $35 = ($34|0)!=(0);
   if (!($35)) {
    $3 = 0;
    break;
   }
   $36 = $5;
   $37 = ((($7)) + 40|0);
   $38 = (__cmsRead15Fixed16Number($36,$37)|0);
   $39 = ($38|0)!=(0);
   if (!($39)) {
    $3 = 0;
    break;
   }
   $40 = $5;
   $41 = ((($7)) + 48|0);
   $42 = (__cmsRead15Fixed16Number($40,$41)|0);
   $43 = ($42|0)!=(0);
   if (!($43)) {
    $3 = 0;
    break;
   }
   $44 = $5;
   $45 = ((($7)) + 56|0);
   $46 = (__cmsRead15Fixed16Number($44,$45)|0);
   $47 = ($46|0)!=(0);
   if (!($47)) {
    $3 = 0;
    break;
   }
   $48 = $5;
   $49 = ((($7)) + 64|0);
   $50 = (__cmsRead15Fixed16Number($48,$49)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    $3 = 0;
    break;
   }
   $52 = $5;
   $53 = (__cmsRead15Fixed16Number($52,$8)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    $3 = 0;
    break;
   }
   $55 = $5;
   $56 = ((($8)) + 8|0);
   $57 = (__cmsRead15Fixed16Number($55,$56)|0);
   $58 = ($57|0)!=(0);
   if (!($58)) {
    $3 = 0;
    break;
   }
   $59 = $5;
   $60 = ((($8)) + 16|0);
   $61 = (__cmsRead15Fixed16Number($59,$60)|0);
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = $4;
    $64 = ((($63)) + 20|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (_cmsStageAllocMatrix($65,3,3,$7,$8)|0);
    $9 = $66;
    $67 = $9;
    $3 = $67;
    break;
   } else {
    $3 = 0;
    break;
   }
  } else {
   $3 = 0;
  }
 } while(0);
 $68 = $3;
 STACKTOP = sp;return ($68|0);
}
function _ReadCLUT($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer = sp;
 $11 = sp + 112|0;
 $12 = sp + 16|0;
 $14 = sp + 105|0;
 $17 = sp + 104|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $18 = $7;
 $19 = ((($18)) + 276|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $7;
 $22 = $8;
 $23 = (FUNCTION_TABLE_iii[$20 & 511]($21,$22)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $5 = 0;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $25 = $7;
 $26 = ((($25)) + 272|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $7;
 $29 = (FUNCTION_TABLE_iiiii[$27 & 511]($28,$11,16,1)|0);
 $30 = ($29|0)!=(1);
 if ($30) {
  $5 = 0;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $13 = 0;
 while(1) {
  $31 = $13;
  $32 = ($31>>>0)<(16);
  if (!($32)) {
   break;
  }
  $33 = $13;
  $34 = (($11) + ($33)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36|0)==(1);
  if ($37) {
   label = 8;
   break;
  }
  $38 = $13;
  $39 = (($11) + ($38)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $13;
  $43 = (($12) + ($42<<2)|0);
  HEAP32[$43>>2] = $41;
  $44 = $13;
  $45 = (($44) + 1)|0;
  $13 = $45;
 }
 if ((label|0) == 8) {
  $5 = 0;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $46 = $7;
 $47 = (__cmsReadUInt8Number($46,$14)|0);
 $48 = ($47|0)!=(0);
 if (!($48)) {
  $5 = 0;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $49 = $7;
 $50 = (__cmsReadUInt8Number($49,0)|0);
 $51 = ($50|0)!=(0);
 if (!($51)) {
  $5 = 0;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $52 = $7;
 $53 = (__cmsReadUInt8Number($52,0)|0);
 $54 = ($53|0)!=(0);
 if (!($54)) {
  $5 = 0;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $55 = $7;
 $56 = (__cmsReadUInt8Number($55,0)|0);
 $57 = ($56|0)!=(0);
 if (!($57)) {
  $5 = 0;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $58 = $6;
 $59 = ((($58)) + 20|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $9;
 $62 = $10;
 $63 = (_cmsStageAllocCLut16bitGranular($60,$12,$61,$62,0)|0);
 $15 = $63;
 $64 = $15;
 $65 = ($64|0)==(0|0);
 if ($65) {
  $5 = 0;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $66 = $15;
 $67 = ((($66)) + 32|0);
 $68 = HEAP32[$67>>2]|0;
 $16 = $68;
 $69 = HEAP8[$14>>0]|0;
 $70 = $69&255;
 $71 = ($70|0)==(1);
 L37: do {
  if ($71) {
   $13 = 0;
   while(1) {
    $72 = $13;
    $73 = $16;
    $74 = ((($73)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($72>>>0)<($75>>>0);
    if (!($76)) {
     break L37;
    }
    $77 = $7;
    $78 = ((($77)) + 272|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $7;
    $81 = (FUNCTION_TABLE_iiiii[$79 & 511]($80,$17,1,1)|0);
    $82 = ($81|0)!=(1);
    if ($82) {
     break;
    }
    $84 = HEAP8[$17>>0]|0;
    $85 = $84&255;
    $86 = $85&65535;
    $87 = $86 << 8;
    $88 = HEAP8[$17>>0]|0;
    $89 = $88&255;
    $90 = $87 | $89;
    $91 = $90&65535;
    $92 = $16;
    $93 = HEAP32[$92>>2]|0;
    $94 = $13;
    $95 = (($93) + ($94<<1)|0);
    HEAP16[$95>>1] = $91;
    $96 = $13;
    $97 = (($96) + 1)|0;
    $13 = $97;
   }
   $83 = $15;
   _cmsStageFree($83);
   $5 = 0;
   $117 = $5;
   STACKTOP = sp;return ($117|0);
  } else {
   $98 = HEAP8[$14>>0]|0;
   $99 = $98&255;
   $100 = ($99|0)==(2);
   if (!($100)) {
    $110 = $15;
    _cmsStageFree($110);
    $111 = $6;
    $112 = ((($111)) + 20|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = HEAP8[$14>>0]|0;
    $115 = $114&255;
    HEAP32[$vararg_buffer>>2] = $115;
    _cmsSignalError($113,8,28977,$vararg_buffer);
    $5 = 0;
    $117 = $5;
    STACKTOP = sp;return ($117|0);
   }
   $101 = $7;
   $102 = $16;
   $103 = ((($102)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $16;
   $106 = HEAP32[$105>>2]|0;
   $107 = (__cmsReadUInt16Array($101,$104,$106)|0);
   $108 = ($107|0)!=(0);
   if (!($108)) {
    $109 = $15;
    _cmsStageFree($109);
    $5 = 0;
    $117 = $5;
    STACKTOP = sp;return ($117|0);
   }
  }
 } while(0);
 $116 = $15;
 $5 = $116;
 $117 = $5;
 STACKTOP = sp;return ($117|0);
}
function _ReadEmbeddedCurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $switch$split2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 4|0;
 $7 = sp + 24|0;
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = (__cmsReadTypeBase($8)|0);
 $5 = $9;
 $10 = $5;
 $switch$split2D = ($10|0)<(1885434465);
 L1: do {
  if ($switch$split2D) {
   switch ($10|0) {
   case 1668641398:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $11 = $3;
   $12 = $4;
   $13 = (_Type_Curve_Read($11,$12,$6,0)|0);
   $2 = $13;
   $21 = $2;
   STACKTOP = sp;return ($21|0);
  } else {
   switch ($10|0) {
   case 1885434465:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $14 = $3;
   $15 = $4;
   $16 = (_Type_ParametricCurve_Read($14,$15,$6,0)|0);
   $2 = $16;
   $21 = $2;
   STACKTOP = sp;return ($21|0);
  }
 } while(0);
 $17 = $5;
 __cmsTagSignature2String($7,$17);
 $18 = $3;
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$vararg_buffer>>2] = $7;
 _cmsSignalError($20,8,29003,$vararg_buffer);
 $2 = 0;
 $21 = $2;
 STACKTOP = sp;return ($21|0);
}
function _Write16bitTables($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $11 = $6;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  ___assert_fail((29252|0),(28591|0),2033,(29275|0));
  // unreachable;
 }
 $13 = $6;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $10 = $18;
 $8 = 0;
 L4: while(1) {
  $19 = $8;
  $20 = $6;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($19>>>0)<($21>>>0);
  if (!($22)) {
   label = 11;
   break;
  }
  $7 = 0;
  while(1) {
   $23 = $7;
   $24 = $10;
   $25 = ($23>>>0)<($24>>>0);
   if (!($25)) {
    break;
   }
   $26 = $6;
   $27 = ((($26)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $8;
   $30 = (($28) + ($29<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $7;
   $35 = (($33) + ($34<<1)|0);
   $36 = HEAP16[$35>>1]|0;
   $9 = $36;
   $37 = $5;
   $38 = $9;
   $39 = (__cmsWriteUInt16Number($37,$38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    label = 8;
    break L4;
   }
   $41 = $7;
   $42 = (($41) + 1)|0;
   $7 = $42;
  }
  $43 = $8;
  $44 = (($43) + 1)|0;
  $8 = $44;
 }
 if ((label|0) == 8) {
  $3 = 0;
  $45 = $3;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 11) {
  $3 = 1;
  $45 = $3;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _uipow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 1;
 $9 = $5;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $3 = 0;
  } else {
   $11 = $4;
   $12 = ($11|0)==(0);
   if ($12) {
    $3 = 0;
    break;
   }
   while(1) {
    $13 = $6;
    $14 = ($13>>>0)>(0);
    if (!($14)) {
     break;
    }
    $15 = $5;
    $16 = $7;
    $17 = Math_imul($16, $15)|0;
    $7 = $17;
    $18 = $7;
    $19 = $5;
    $20 = (4294967295 / ($19>>>0))&-1;
    $21 = ($18>>>0)>($20>>>0);
    if ($21) {
     label = 7;
     break;
    }
    $22 = $6;
    $23 = (($22) + -1)|0;
    $6 = $23;
   }
   if ((label|0) == 7) {
    $3 = -1;
    break;
   }
   $24 = $7;
   $25 = $4;
   $26 = Math_imul($24, $25)|0;
   $8 = $26;
   $27 = $7;
   $28 = $8;
   $29 = $4;
   $30 = (($28>>>0) / ($29>>>0))&-1;
   $31 = ($27|0)!=($30|0);
   if ($31) {
    $3 = -1;
    break;
   } else {
    $32 = $8;
    $3 = $32;
    break;
   }
  }
 } while(0);
 $33 = $3;
 STACKTOP = sp;return ($33|0);
}
function _Read16bitTables($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $10;
 $14 = ($13>>>0)<=(0);
 if ($14) {
  $5 = 1;
  $68 = $5;
  STACKTOP = sp;return ($68|0);
 }
 $15 = $10;
 $16 = ($15>>>0)<(2);
 if ($16) {
  $5 = 0;
  $68 = $5;
  STACKTOP = sp;return ($68|0);
 }
 $17 = $9;
 $18 = ($17>>>0)>(16);
 if ($18) {
  $5 = 0;
  $68 = $5;
  STACKTOP = sp;return ($68|0);
 }
 dest=$12; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $11 = 0;
 while(1) {
  $19 = $11;
  $20 = $9;
  $21 = ($19>>>0)<($20>>>0);
  if (!($21)) {
   label = 12;
   break;
  }
  $22 = $6;
  $23 = $10;
  $24 = (_cmsBuildTabulatedToneCurve16($22,$23,0)|0);
  $25 = $11;
  $26 = (($12) + ($25<<2)|0);
  HEAP32[$26>>2] = $24;
  $27 = $11;
  $28 = (($12) + ($27<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   break;
  }
  $31 = $7;
  $32 = $10;
  $33 = $11;
  $34 = (($12) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (__cmsReadUInt16Array($31,$32,$37)|0);
  $39 = ($38|0)!=(0);
  if (!($39)) {
   break;
  }
  $40 = $11;
  $41 = (($40) + 1)|0;
  $11 = $41;
 }
 if ((label|0) == 12) {
  $42 = $8;
  $43 = $6;
  $44 = $9;
  $45 = (_cmsStageAllocToneCurves($43,$44,$12)|0);
  $46 = (_cmsPipelineInsertStage($42,1,$45)|0);
  $47 = ($46|0)!=(0);
  if ($47) {
   $11 = 0;
   while(1) {
    $48 = $11;
    $49 = $9;
    $50 = ($48>>>0)<($49>>>0);
    if (!($50)) {
     break;
    }
    $51 = $11;
    $52 = (($12) + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    _cmsFreeToneCurve($53);
    $54 = $11;
    $55 = (($54) + 1)|0;
    $11 = $55;
   }
   $5 = 1;
   $68 = $5;
   STACKTOP = sp;return ($68|0);
  }
 }
 $11 = 0;
 while(1) {
  $56 = $11;
  $57 = $9;
  $58 = ($56>>>0)<($57>>>0);
  if (!($58)) {
   break;
  }
  $59 = $11;
  $60 = (($12) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $11;
   $64 = (($12) + ($63<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   _cmsFreeToneCurve($65);
  }
  $66 = $11;
  $67 = (($66) + 1)|0;
  $11 = $67;
 }
 $5 = 0;
 $68 = $5;
 STACKTOP = sp;return ($68|0);
}
function _Write8bitTables($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = 0;
 L1: while(1) {
  $12 = $10;
  $13 = $7;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   label = 20;
   break;
  }
  $15 = $8;
  $16 = ($15|0)!=(0|0);
  L4: do {
   if ($16) {
    $17 = $8;
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $10;
    $21 = (($19) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 20|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(2);
    if ($25) {
     $26 = $8;
     $27 = ((($26)) + 4|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $10;
     $30 = (($28) + ($29<<2)|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($31)) + 24|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = HEAP16[$33>>1]|0;
     $35 = $34&65535;
     $36 = ($35|0)==(0);
     if ($36) {
      $37 = $8;
      $38 = ((($37)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $10;
      $41 = (($39) + ($40<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ((($42)) + 24|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ((($44)) + 2|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = $46&65535;
      $48 = ($47|0)==(65535);
      if ($48) {
       $9 = 0;
       while(1) {
        $49 = $9;
        $50 = ($49|0)<(256);
        if (!($50)) {
         break L4;
        }
        $51 = $6;
        $52 = $9;
        $53 = $52&255;
        $54 = (__cmsWriteUInt8Number($51,$53)|0);
        $55 = ($54|0)!=(0);
        if (!($55)) {
         label = 10;
         break L1;
        }
        $56 = $9;
        $57 = (($56) + 1)|0;
        $9 = $57;
       }
      }
     }
    }
    $58 = $8;
    $59 = ((($58)) + 4|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $10;
    $62 = (($60) + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($63)) + 20|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)!=(256);
    if ($66) {
     label = 13;
     break L1;
    }
    $9 = 0;
    while(1) {
     $68 = $9;
     $69 = ($68|0)<(256);
     if (!($69)) {
      break L4;
     }
     $70 = $8;
     $71 = ((($70)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $10;
     $74 = (($72) + ($73<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($75)) + 24|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $9;
     $79 = (($77) + ($78<<1)|0);
     $80 = HEAP16[$79>>1]|0;
     $81 = $80&65535;
     $82 = ($81*65281)|0;
     $83 = (($82) + 8388608)|0;
     $84 = $83 >>> 24;
     $85 = $84 & 255;
     $86 = $85&255;
     $11 = $86;
     $87 = $6;
     $88 = $11;
     $89 = (__cmsWriteUInt8Number($87,$88)|0);
     $90 = ($89|0)!=(0);
     if (!($90)) {
      label = 17;
      break L1;
     }
     $91 = $9;
     $92 = (($91) + 1)|0;
     $9 = $92;
    }
   }
  } while(0);
  $93 = $10;
  $94 = (($93) + 1)|0;
  $10 = $94;
 }
 if ((label|0) == 10) {
  $4 = 0;
  $95 = $4;
  STACKTOP = sp;return ($95|0);
 }
 else if ((label|0) == 13) {
  $67 = $5;
  _cmsSignalError($67,2,29332,$vararg_buffer);
  $4 = 0;
  $95 = $4;
  STACKTOP = sp;return ($95|0);
 }
 else if ((label|0) == 17) {
  $4 = 0;
  $95 = $4;
  STACKTOP = sp;return ($95|0);
 }
 else if ((label|0) == 20) {
  $4 = 1;
  $95 = $4;
  STACKTOP = sp;return ($95|0);
 }
 return (0)|0;
}
function _Read8bitTables($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = 0;
 $13 = $8;
 $14 = ($13>>>0)>(16);
 if ($14) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $15 = $8;
 $16 = ($15>>>0)<=(0);
 if ($16) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 dest=$12; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $17 = $5;
 $18 = (__cmsMalloc($17,256)|0);
 $9 = $18;
 $19 = $9;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $4 = 0;
  $103 = $4;
  STACKTOP = sp;return ($103|0);
 }
 $10 = 0;
 while(1) {
  $21 = $10;
  $22 = $8;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   label = 11;
   break;
  }
  $24 = $5;
  $25 = (_cmsBuildTabulatedToneCurve16($24,256,0)|0);
  $26 = $10;
  $27 = (($12) + ($26<<2)|0);
  HEAP32[$27>>2] = $25;
  $28 = $10;
  $29 = (($12) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0|0);
  if ($31) {
   break;
  }
  $32 = $10;
  $33 = (($32) + 1)|0;
  $10 = $33;
 }
 L17: do {
  if ((label|0) == 11) {
   $10 = 0;
   while(1) {
    $34 = $10;
    $35 = $8;
    $36 = ($34>>>0)<($35>>>0);
    if (!($36)) {
     break;
    }
    $37 = $6;
    $38 = ((($37)) + 272|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $6;
    $41 = $9;
    $42 = (FUNCTION_TABLE_iiiii[$39 & 511]($40,$41,256,1)|0);
    $43 = ($42|0)!=(1);
    if ($43) {
     break L17;
    }
    $11 = 0;
    while(1) {
     $44 = $11;
     $45 = ($44>>>0)<(256);
     if (!($45)) {
      break;
     }
     $46 = $9;
     $47 = $11;
     $48 = (($46) + ($47)|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = $50&65535;
     $52 = $51 << 8;
     $53 = $9;
     $54 = $11;
     $55 = (($53) + ($54)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = $52 | $57;
     $59 = $58&65535;
     $60 = $10;
     $61 = (($12) + ($60<<2)|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ((($62)) + 24|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $11;
     $66 = (($64) + ($65<<1)|0);
     HEAP16[$66>>1] = $59;
     $67 = $11;
     $68 = (($67) + 1)|0;
     $11 = $68;
    }
    $69 = $10;
    $70 = (($69) + 1)|0;
    $10 = $70;
   }
   $71 = $5;
   $72 = $9;
   __cmsFree($71,$72);
   $9 = 0;
   $73 = $7;
   $74 = $5;
   $75 = $8;
   $76 = (_cmsStageAllocToneCurves($74,$75,$12)|0);
   $77 = (_cmsPipelineInsertStage($73,1,$76)|0);
   $78 = ($77|0)!=(0);
   if ($78) {
    $10 = 0;
    while(1) {
     $79 = $10;
     $80 = $8;
     $81 = ($79>>>0)<($80>>>0);
     if (!($81)) {
      break;
     }
     $82 = $10;
     $83 = (($12) + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     _cmsFreeToneCurve($84);
     $85 = $10;
     $86 = (($85) + 1)|0;
     $10 = $86;
    }
    $4 = 1;
    $103 = $4;
    STACKTOP = sp;return ($103|0);
   }
  }
 } while(0);
 $10 = 0;
 while(1) {
  $87 = $10;
  $88 = $8;
  $89 = ($87>>>0)<($88>>>0);
  if (!($89)) {
   break;
  }
  $90 = $10;
  $91 = (($12) + ($90<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)!=(0|0);
  if ($93) {
   $94 = $10;
   $95 = (($12) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   _cmsFreeToneCurve($96);
  }
  $97 = $10;
  $98 = (($97) + 1)|0;
  $10 = $98;
 }
 $99 = $9;
 $100 = ($99|0)!=(0|0);
 if ($100) {
  $101 = $5;
  $102 = $9;
  __cmsFree($101,$102);
 }
 $4 = 0;
 $103 = $4;
 STACKTOP = sp;return ($103|0);
}
function _SaveOneChromaticity($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $6;
 $8 = $4;
 $9 = (__cmsDoubleTo15Fixed16($8)|0);
 $10 = (__cmsWriteUInt32Number($7,$9)|0);
 $11 = ($10|0)!=(0);
 do {
  if ($11) {
   $12 = $6;
   $13 = $5;
   $14 = (__cmsDoubleTo15Fixed16($13)|0);
   $15 = (__cmsWriteUInt32Number($12,$14)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    $3 = 1;
    break;
   } else {
    $3 = 0;
    break;
   }
  } else {
   $3 = 0;
  }
 } while(0);
 $17 = $3;
 STACKTOP = sp;return ($17|0);
}
function __cmsGetTagDescriptor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = (__cmsContextGetClientChunk($7,9)|0);
 $6 = $8;
 $9 = $6;
 $10 = HEAP32[$9>>2]|0;
 $5 = $10;
 while(1) {
  $11 = $5;
  $12 = ($11|0)!=(0|0);
  if (!($12)) {
   break;
  }
  $13 = $4;
  $14 = $5;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($13|0)==($15|0);
  $17 = $5;
  if ($16) {
   label = 4;
   break;
  }
  $19 = ((($17)) + 96|0);
  $20 = HEAP32[$19>>2]|0;
  $5 = $20;
 }
 if ((label|0) == 4) {
  $18 = ((($17)) + 4|0);
  $2 = $18;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 $5 = 15992;
 while(1) {
  $21 = $5;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   label = 11;
   break;
  }
  $23 = $4;
  $24 = $5;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)==($25|0);
  $27 = $5;
  if ($26) {
   label = 9;
   break;
  }
  $29 = ((($27)) + 96|0);
  $30 = HEAP32[$29>>2]|0;
  $5 = $30;
 }
 if ((label|0) == 9) {
  $28 = ((($27)) + 4|0);
  $2 = $28;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 else if ((label|0) == 11) {
  $2 = 0;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _DecideLUTtypeA2B($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $5 = $6;
 $7 = $3;
 $8 = $7 < 4.0;
 do {
  if ($8) {
   $9 = $5;
   $10 = ((($9)) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0);
   if ($12) {
    $2 = 1835430961;
    break;
   } else {
    $2 = 1835430962;
    break;
   }
  } else {
   $2 = 1832993312;
  }
 } while(0);
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _DecideLUTtypeB2A($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $5 = $6;
 $7 = $3;
 $8 = $7 < 4.0;
 do {
  if ($8) {
   $9 = $5;
   $10 = ((($9)) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0);
   if ($12) {
    $2 = 1835430961;
    break;
   } else {
    $2 = 1835430962;
    break;
   }
  } else {
   $2 = 1833058592;
  }
 } while(0);
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _DecideXYZtype($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 STACKTOP = sp;return 1482250784;
}
function _DecideCurveType($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0.0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $5 = $6;
 $7 = $3;
 $8 = $7 < 4.0;
 do {
  if ($8) {
   $2 = 1668641398;
  } else {
   $9 = $5;
   $10 = ((($9)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(1);
   if ($12) {
    $2 = 1668641398;
    break;
   }
   $13 = $5;
   $14 = ((($13)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)<(0);
   if ($18) {
    $2 = 1668641398;
    break;
   }
   $19 = $5;
   $20 = ((($19)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)>(5);
   if ($24) {
    $2 = 1668641398;
    break;
   } else {
    $2 = 1885434465;
    break;
   }
  }
 } while(0);
 $25 = $2;
 STACKTOP = sp;return ($25|0);
}
function _DecideTextType($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5 >= 4.0;
 if ($6) {
  $2 = 1835824483;
 } else {
  $2 = 1952807028;
 }
 $7 = $2;
 STACKTOP = sp;return ($7|0);
}
function _DecideTextDescType($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5 >= 4.0;
 if ($6) {
  $2 = 1835824483;
 } else {
  $2 = 1684370275;
 }
 $7 = $2;
 STACKTOP = sp;return ($7|0);
}
function _cmsCreateRGBProfileTHR($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $10 = sp + 192|0;
 $11 = sp + 120|0;
 $12 = sp + 96|0;
 $13 = sp + 24|0;
 $14 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $15 = $5;
 $16 = (_cmsCreateProfilePlaceholder($15)|0);
 $9 = $16;
 $17 = $9;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $4 = 0;
  $141 = $4;
  STACKTOP = sp;return ($141|0);
 }
 $19 = $9;
 _cmsSetProfileVersion($19,4.2999999999999998);
 $20 = $9;
 _cmsSetDeviceClass($20,1835955314);
 $21 = $9;
 _cmsSetColorSpace($21,1380401696);
 $22 = $9;
 _cmsSetPCS($22,1482250784);
 $23 = $9;
 _cmsSetHeaderRenderingIntent($23,0);
 $24 = $9;
 $25 = (_SetTextTags($24,22392)|0);
 $26 = ($25|0)!=(0);
 L5: do {
  if ($26) {
   $27 = $6;
   $28 = ($27|0)!=(0|0);
   if ($28) {
    $29 = $9;
    $30 = (_cmsD50_XYZ()|0);
    $31 = (_cmsWriteTag($29,2004119668,$30)|0);
    $32 = ($31|0)!=(0);
    if (!($32)) {
     break;
    }
    $33 = $6;
    _cmsxyY2XYZ($14,$33);
    $34 = (_cmsD50_XYZ()|0);
    (__cmsAdaptationMatrix($13,0,$14,$34)|0);
    $35 = $9;
    $36 = (_cmsWriteTag($35,1667785060,$13)|0);
    $37 = ($36|0)!=(0);
    if (!($37)) {
     break;
    }
   }
   $38 = $6;
   $39 = ($38|0)!=(0|0);
   $40 = $7;
   $41 = ($40|0)!=(0|0);
   $or$cond = $39 & $41;
   if ($or$cond) {
    $42 = $6;
    $43 = +HEAPF64[$42>>3];
    HEAPF64[$12>>3] = $43;
    $44 = $6;
    $45 = ((($44)) + 8|0);
    $46 = +HEAPF64[$45>>3];
    $47 = ((($12)) + 8|0);
    HEAPF64[$47>>3] = $46;
    $48 = ((($12)) + 16|0);
    HEAPF64[$48>>3] = 1.0;
    $49 = $7;
    $50 = (__cmsBuildRGB2XYZtransferMatrix($10,$12,$49)|0);
    $51 = ($50|0)!=(0);
    if (!($51)) {
     break;
    }
    $52 = +HEAPF64[$10>>3];
    HEAPF64[$11>>3] = $52;
    $53 = ((($10)) + 24|0);
    $54 = +HEAPF64[$53>>3];
    $55 = ((($11)) + 8|0);
    HEAPF64[$55>>3] = $54;
    $56 = ((($10)) + 48|0);
    $57 = +HEAPF64[$56>>3];
    $58 = ((($11)) + 16|0);
    HEAPF64[$58>>3] = $57;
    $59 = ((($10)) + 8|0);
    $60 = +HEAPF64[$59>>3];
    $61 = ((($11)) + 24|0);
    HEAPF64[$61>>3] = $60;
    $62 = ((($10)) + 24|0);
    $63 = ((($62)) + 8|0);
    $64 = +HEAPF64[$63>>3];
    $65 = ((($11)) + 24|0);
    $66 = ((($65)) + 8|0);
    HEAPF64[$66>>3] = $64;
    $67 = ((($10)) + 48|0);
    $68 = ((($67)) + 8|0);
    $69 = +HEAPF64[$68>>3];
    $70 = ((($11)) + 24|0);
    $71 = ((($70)) + 16|0);
    HEAPF64[$71>>3] = $69;
    $72 = ((($10)) + 16|0);
    $73 = +HEAPF64[$72>>3];
    $74 = ((($11)) + 48|0);
    HEAPF64[$74>>3] = $73;
    $75 = ((($10)) + 24|0);
    $76 = ((($75)) + 16|0);
    $77 = +HEAPF64[$76>>3];
    $78 = ((($11)) + 48|0);
    $79 = ((($78)) + 8|0);
    HEAPF64[$79>>3] = $77;
    $80 = ((($10)) + 48|0);
    $81 = ((($80)) + 16|0);
    $82 = +HEAPF64[$81>>3];
    $83 = ((($11)) + 48|0);
    $84 = ((($83)) + 16|0);
    HEAPF64[$84>>3] = $82;
    $85 = $9;
    $86 = (_cmsWriteTag($85,1918392666,$11)|0);
    $87 = ($86|0)!=(0);
    if (!($87)) {
     break;
    }
    $88 = $9;
    $89 = ((($11)) + 48|0);
    $90 = (_cmsWriteTag($88,1649957210,$89)|0);
    $91 = ($90|0)!=(0);
    if (!($91)) {
     break;
    }
    $92 = $9;
    $93 = ((($11)) + 24|0);
    $94 = (_cmsWriteTag($92,1733843290,$93)|0);
    $95 = ($94|0)!=(0);
    if (!($95)) {
     break;
    }
   }
   $96 = $8;
   $97 = ($96|0)!=(0|0);
   do {
    if ($97) {
     $98 = $9;
     $99 = $8;
     $100 = HEAP32[$99>>2]|0;
     $101 = (_cmsWriteTag($98,1918128707,$100)|0);
     $102 = ($101|0)!=(0);
     if (!($102)) {
      break L5;
     }
     $103 = $8;
     $104 = ((($103)) + 4|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $8;
     $107 = HEAP32[$106>>2]|0;
     $108 = ($105|0)==($107|0);
     $109 = $9;
     if ($108) {
      $110 = (_cmsLinkTag($109,1733579331,1918128707)|0);
      $111 = ($110|0)!=(0);
      if (!($111)) {
       break L5;
      }
     } else {
      $112 = $8;
      $113 = ((($112)) + 4|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = (_cmsWriteTag($109,1733579331,$114)|0);
      $116 = ($115|0)!=(0);
      if (!($116)) {
       break L5;
      }
     }
     $117 = $8;
     $118 = ((($117)) + 8|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = $8;
     $121 = HEAP32[$120>>2]|0;
     $122 = ($119|0)==($121|0);
     $123 = $9;
     if ($122) {
      $124 = (_cmsLinkTag($123,1649693251,1918128707)|0);
      $125 = ($124|0)!=(0);
      if ($125) {
       break;
      } else {
       break L5;
      }
     } else {
      $126 = $8;
      $127 = ((($126)) + 8|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (_cmsWriteTag($123,1649693251,$128)|0);
      $130 = ($129|0)!=(0);
      if ($130) {
       break;
      } else {
       break L5;
      }
     }
    }
   } while(0);
   $131 = $7;
   $132 = ($131|0)!=(0|0);
   if ($132) {
    $133 = $9;
    $134 = $7;
    $135 = (_cmsWriteTag($133,1667789421,$134)|0);
    $136 = ($135|0)!=(0);
    if (!($136)) {
     break;
    }
   }
   $137 = $9;
   $4 = $137;
   $141 = $4;
   STACKTOP = sp;return ($141|0);
  }
 } while(0);
 $138 = $9;
 $139 = ($138|0)!=(0|0);
 if ($139) {
  $140 = $9;
  (_cmsCloseProfile($140)|0);
 }
 $4 = 0;
 $141 = $4;
 STACKTOP = sp;return ($141|0);
}
function _SetTextTags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = 0;
 $8 = $2;
 $9 = (_cmsGetProfileContextID($8)|0);
 $7 = $9;
 $10 = $7;
 $11 = (_cmsMLUalloc($10,1)|0);
 $4 = $11;
 $12 = $7;
 $13 = (_cmsMLUalloc($12,1)|0);
 $5 = $13;
 $14 = $4;
 $15 = ($14|0)==(0|0);
 $16 = $5;
 $17 = ($16|0)==(0|0);
 $or$cond = $15 | $17;
 if (!($or$cond)) {
  $18 = $4;
  $19 = $3;
  $20 = (_cmsMLUsetWide($18,29500,29503,$19)|0);
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $5;
   $23 = (_cmsMLUsetWide($22,29500,29503,22444)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $2;
    $26 = $4;
    $27 = (_cmsWriteTag($25,1684370275,$26)|0);
    $28 = ($27|0)!=(0);
    if ($28) {
     $29 = $2;
     $30 = $5;
     $31 = (_cmsWriteTag($29,1668313716,$30)|0);
     $32 = ($31|0)!=(0);
     if ($32) {
      $6 = 1;
     }
    }
   }
  }
 }
 $33 = $4;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = $4;
  _cmsMLUfree($35);
 }
 $36 = $5;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $39 = $6;
  STACKTOP = sp;return ($39|0);
 }
 $38 = $5;
 _cmsMLUfree($38);
 $39 = $6;
 STACKTOP = sp;return ($39|0);
}
function _cmsCreateLab2ProfileTHR($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = 0;
 $7 = $3;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (_cmsD50_xyY()|0);
  $12 = $10;
 } else {
  $11 = $4;
  $12 = $11;
 }
 $13 = (_cmsCreateRGBProfileTHR($7,$12,0,0)|0);
 $5 = $13;
 $14 = $5;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $2 = 0;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 }
 $16 = $5;
 _cmsSetProfileVersion($16,2.1000000000000001);
 $17 = $5;
 _cmsSetDeviceClass($17,1633842036);
 $18 = $5;
 _cmsSetColorSpace($18,1281450528);
 $19 = $5;
 _cmsSetPCS($19,1281450528);
 $20 = $5;
 $21 = (_SetTextTags($20,22544)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  $2 = 0;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 }
 $23 = $3;
 $24 = (_cmsPipelineAlloc($23,3,3)|0);
 $6 = $24;
 $25 = $6;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  $27 = $6;
  $28 = $3;
  $29 = (__cmsStageAllocIdentityCLut($28,3)|0);
  $30 = (_cmsPipelineInsertStage($27,0,$29)|0);
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = $5;
   $33 = $6;
   $34 = (_cmsWriteTag($32,1093812784,$33)|0);
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $6;
    _cmsPipelineFree($36);
    $37 = $5;
    $2 = $37;
    $44 = $2;
    STACKTOP = sp;return ($44|0);
   }
  }
 }
 $38 = $6;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $6;
  _cmsPipelineFree($40);
 }
 $41 = $5;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $5;
  (_cmsCloseProfile($43)|0);
 }
 $2 = 0;
 $44 = $2;
 STACKTOP = sp;return ($44|0);
}
function _cmsCreateLab4ProfileTHR($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $6 = 0;
 $7 = $3;
 $8 = $4;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = (_cmsD50_xyY()|0);
  $12 = $10;
 } else {
  $11 = $4;
  $12 = $11;
 }
 $13 = (_cmsCreateRGBProfileTHR($7,$12,0,0)|0);
 $5 = $13;
 $14 = $5;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $2 = 0;
  $44 = $2;
  STACKTOP = sp;return ($44|0);
 }
 $16 = $5;
 _cmsSetProfileVersion($16,4.2999999999999998);
 $17 = $5;
 _cmsSetDeviceClass($17,1633842036);
 $18 = $5;
 _cmsSetColorSpace($18,1281450528);
 $19 = $5;
 _cmsSetPCS($19,1281450528);
 $20 = $5;
 $21 = (_SetTextTags($20,22544)|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $3;
  $24 = (_cmsPipelineAlloc($23,3,3)|0);
  $6 = $24;
  $25 = $6;
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   $27 = $6;
   $28 = $3;
   $29 = (__cmsStageAllocIdentityCurves($28,3)|0);
   $30 = (_cmsPipelineInsertStage($27,0,$29)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $5;
    $33 = $6;
    $34 = (_cmsWriteTag($32,1093812784,$33)|0);
    $35 = ($34|0)!=(0);
    if ($35) {
     $36 = $6;
     _cmsPipelineFree($36);
     $37 = $5;
     $2 = $37;
     $44 = $2;
     STACKTOP = sp;return ($44|0);
    }
   }
  }
 }
 $38 = $6;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $6;
  _cmsPipelineFree($40);
 }
 $41 = $5;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = $5;
  (_cmsCloseProfile($43)|0);
 }
 $2 = 0;
 $44 = $2;
 STACKTOP = sp;return ($44|0);
}
function _cmsCreateLab4Profile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_cmsCreateLab4ProfileTHR(0,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _cmsCreateXYZProfileTHR($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = 0;
 $5 = $2;
 $6 = (_cmsD50_xyY()|0);
 $7 = (_cmsCreateRGBProfileTHR($5,$6,0,0)|0);
 $3 = $7;
 $8 = $3;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $1 = 0;
  $38 = $1;
  STACKTOP = sp;return ($38|0);
 }
 $10 = $3;
 _cmsSetProfileVersion($10,4.2999999999999998);
 $11 = $3;
 _cmsSetDeviceClass($11,1633842036);
 $12 = $3;
 _cmsSetColorSpace($12,1482250784);
 $13 = $3;
 _cmsSetPCS($13,1482250784);
 $14 = $3;
 $15 = (_SetTextTags($14,22632)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $2;
  $18 = (_cmsPipelineAlloc($17,3,3)|0);
  $4 = $18;
  $19 = $4;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   $21 = $4;
   $22 = $2;
   $23 = (__cmsStageAllocIdentityCurves($22,3)|0);
   $24 = (_cmsPipelineInsertStage($21,0,$23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $3;
    $27 = $4;
    $28 = (_cmsWriteTag($26,1093812784,$27)|0);
    $29 = ($28|0)!=(0);
    if ($29) {
     $30 = $4;
     _cmsPipelineFree($30);
     $31 = $3;
     $1 = $31;
     $38 = $1;
     STACKTOP = sp;return ($38|0);
    }
   }
  }
 }
 $32 = $4;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $4;
  _cmsPipelineFree($34);
 }
 $35 = $3;
 $36 = ($35|0)!=(0|0);
 if ($36) {
  $37 = $3;
  (_cmsCloseProfile($37)|0);
 }
 $1 = 0;
 $38 = $1;
 STACKTOP = sp;return ($38|0);
}
function _cmsCreateXYZProfile() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_cmsCreateXYZProfileTHR(0)|0);
 return ($0|0);
}
function _cmsCreate_sRGBProfileTHR($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp + 72|0;
 $4 = sp;
 $5 = sp + 100|0;
 $2 = $0;
 ;HEAP32[$3>>2]=HEAP32[616>>2]|0;HEAP32[$3+4>>2]=HEAP32[616+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[616+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[616+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[616+16>>2]|0;HEAP32[$3+20>>2]=HEAP32[616+20>>2]|0;
 dest=$4; src=640; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $7 = $2;
 $8 = (_Build_sRGBGamma($7)|0);
 $9 = ((($5)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($5)) + 4|0);
 HEAP32[$10>>2] = $8;
 HEAP32[$5>>2] = $8;
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $13 = $2;
 $14 = (_cmsCreateRGBProfileTHR($13,$3,$4,$5)|0);
 $6 = $14;
 $15 = HEAP32[$5>>2]|0;
 _cmsFreeToneCurve($15);
 $16 = $6;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $18 = $6;
 $19 = (_SetTextTags($18,22720)|0);
 $20 = ($19|0)!=(0);
 $21 = $6;
 if ($20) {
  $1 = $21;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 } else {
  (_cmsCloseProfile($21)|0);
  $1 = 0;
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _Build_sRGBGamma($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $1 = $0;
 HEAPF64[$2>>3] = 2.3999999999999999;
 $3 = ((($2)) + 8|0);
 HEAPF64[$3>>3] = 0.94786729857819906;
 $4 = ((($2)) + 16|0);
 HEAPF64[$4>>3] = 0.052132701421800952;
 $5 = ((($2)) + 24|0);
 HEAPF64[$5>>3] = 0.077399380804953565;
 $6 = ((($2)) + 32|0);
 HEAPF64[$6>>3] = 0.04045;
 $7 = $1;
 $8 = (_cmsBuildParametricToneCurve($7,4,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _cmsCreate_sRGBProfile() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_cmsCreate_sRGBProfileTHR(0)|0);
 return ($0|0);
}
function _cmsD50_XYZ() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (712|0);
}
function _cmsD50_xyY() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_cmsD50_XYZ()|0);
 _cmsXYZ2xyY(32432,$0);
 return (32432|0);
}
function _cmsWhitePointFromTemp($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp + 48|0;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  ___assert_fail((29506|0),(29533|0),54,(29563|0));
  // unreachable;
 }
 $12 = $4;
 $7 = $12;
 $13 = $7;
 $14 = $7;
 $15 = $13 * $14;
 $8 = $15;
 $16 = $8;
 $17 = $7;
 $18 = $16 * $17;
 $9 = $18;
 $19 = $7;
 $20 = $19 >= 4000.0;
 $21 = $7;
 $22 = $21 <= 7000.0;
 $or$cond = $20 & $22;
 do {
  if ($or$cond) {
   $23 = $9;
   $24 = 1.0E+9 / $23;
   $25 = -4.6070000000000002 * $24;
   $26 = $8;
   $27 = 1.0E+6 / $26;
   $28 = 2.9678 * $27;
   $29 = $25 + $28;
   $30 = $7;
   $31 = 1000.0 / $30;
   $32 = 0.099110000000000003 * $31;
   $33 = $29 + $32;
   $34 = $33 + 0.244063;
   $5 = $34;
  } else {
   $35 = $7;
   $36 = $35 > 7000.0;
   $37 = $7;
   $38 = $37 <= 25000.0;
   $or$cond3 = $36 & $38;
   if ($or$cond3) {
    $39 = $9;
    $40 = 1.0E+9 / $39;
    $41 = -2.0064000000000002 * $40;
    $42 = $8;
    $43 = 1.0E+6 / $42;
    $44 = 1.9017999999999999 * $43;
    $45 = $41 + $44;
    $46 = $7;
    $47 = 1000.0 / $46;
    $48 = 0.24748000000000001 * $47;
    $49 = $45 + $48;
    $50 = $49 + 0.23704;
    $5 = $50;
    break;
   }
   _cmsSignalError(0,2,29585,$vararg_buffer);
   $2 = 0;
   $66 = $2;
   STACKTOP = sp;return ($66|0);
  }
 } while(0);
 $51 = $5;
 $52 = $5;
 $53 = $51 * $52;
 $54 = -3.0 * $53;
 $55 = $5;
 $56 = 2.8700000000000001 * $55;
 $57 = $54 + $56;
 $58 = $57 - 0.27500000000000002;
 $6 = $58;
 $59 = $5;
 $60 = $3;
 HEAPF64[$60>>3] = $59;
 $61 = $6;
 $62 = $3;
 $63 = ((($62)) + 8|0);
 HEAPF64[$63>>3] = $61;
 $64 = $3;
 $65 = ((($64)) + 16|0);
 HEAPF64[$65>>3] = 1.0;
 $2 = 1;
 $66 = $2;
 STACKTOP = sp;return ($66|0);
}
function _cmsTempFromWhitePoint($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0, $82 = 0.0;
 var $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = $0;
 $4 = $1;
 $17 = $4;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  ___assert_fail((29506|0),(29533|0),150,(29621|0));
  // unreachable;
 }
 $19 = $3;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  ___assert_fail((29643|0),(29533|0),151,(29621|0));
  // unreachable;
 }
 $13 = 0.0;
 $11 = 0.0;
 $21 = $4;
 $22 = +HEAPF64[$21>>3];
 $15 = $22;
 $23 = $4;
 $24 = ((($23)) + 8|0);
 $25 = +HEAPF64[$24>>3];
 $16 = $25;
 $26 = $15;
 $27 = 2.0 * $26;
 $28 = $15;
 $29 = -$28;
 $30 = $16;
 $31 = 6.0 * $30;
 $32 = $29 + $31;
 $33 = $32 + 1.5;
 $34 = $27 / $33;
 $6 = $34;
 $35 = $16;
 $36 = 3.0 * $35;
 $37 = $15;
 $38 = -$37;
 $39 = $16;
 $40 = 6.0 * $39;
 $41 = $38 + $40;
 $42 = $41 + 1.5;
 $43 = $36 / $42;
 $7 = $43;
 $5 = 0;
 while(1) {
  $44 = $5;
  $45 = ($44>>>0)<(31);
  if (!($45)) {
   label = 11;
   break;
  }
  $46 = $5;
  $47 = (736 + ($46<<5)|0);
  $48 = ((($47)) + 8|0);
  $49 = +HEAPF64[$48>>3];
  $8 = $49;
  $50 = $5;
  $51 = (736 + ($50<<5)|0);
  $52 = ((($51)) + 16|0);
  $53 = +HEAPF64[$52>>3];
  $9 = $53;
  $54 = $5;
  $55 = (736 + ($54<<5)|0);
  $56 = ((($55)) + 24|0);
  $57 = +HEAPF64[$56>>3];
  $10 = $57;
  $58 = $5;
  $59 = (736 + ($58<<5)|0);
  $60 = +HEAPF64[$59>>3];
  $14 = $60;
  $61 = $7;
  $62 = $9;
  $63 = $61 - $62;
  $64 = $10;
  $65 = $6;
  $66 = $8;
  $67 = $65 - $66;
  $68 = $64 * $67;
  $69 = $63 - $68;
  $70 = $10;
  $71 = $10;
  $72 = $70 * $71;
  $73 = 1.0 + $72;
  $74 = (+Math_sqrt((+$73)));
  $75 = $69 / $74;
  $12 = $75;
  $76 = $5;
  $77 = ($76|0)!=(0);
  if ($77) {
   $78 = $11;
   $79 = $12;
   $80 = $78 / $79;
   $81 = $80 < 0.0;
   if ($81) {
    label = 9;
    break;
   }
  }
  $95 = $12;
  $11 = $95;
  $96 = $14;
  $13 = $96;
  $97 = $5;
  $98 = (($97) + 1)|0;
  $5 = $98;
 }
 if ((label|0) == 9) {
  $82 = $13;
  $83 = $11;
  $84 = $11;
  $85 = $12;
  $86 = $84 - $85;
  $87 = $83 / $86;
  $88 = $14;
  $89 = $13;
  $90 = $88 - $89;
  $91 = $87 * $90;
  $92 = $82 + $91;
  $93 = 1.0E+6 / $92;
  $94 = $3;
  HEAPF64[$94>>3] = $93;
  $2 = 1;
  $99 = $2;
  STACKTOP = sp;return ($99|0);
 }
 else if ((label|0) == 11) {
  $2 = 0;
  $99 = $2;
  STACKTOP = sp;return ($99|0);
 }
 return (0)|0;
}
function __cmsAdaptationMatrix($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 dest=$8; src=1728; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $9 = $5;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $5 = $8;
 }
 $11 = $4;
 $12 = $6;
 $13 = $7;
 $14 = $5;
 $15 = (_ComputeChromaticAdaptation($11,$12,$13,$14)|0);
 STACKTOP = sp;return ($15|0);
}
function _ComputeChromaticAdaptation($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $9 = sp + 240|0;
 $10 = sp + 216|0;
 $11 = sp + 192|0;
 $12 = sp + 168|0;
 $13 = sp + 144|0;
 $14 = sp + 72|0;
 $15 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $8;
 dest=$15; src=$16; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $17 = (__cmsMAT3inverse($15,$9)|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $6;
  $20 = +HEAPF64[$19>>3];
  $21 = $6;
  $22 = ((($21)) + 8|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $6;
  $25 = ((($24)) + 16|0);
  $26 = +HEAPF64[$25>>3];
  __cmsVEC3init($10,$20,$23,$26);
  $27 = $7;
  $28 = +HEAPF64[$27>>3];
  $29 = $7;
  $30 = ((($29)) + 8|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $7;
  $33 = ((($32)) + 16|0);
  $34 = +HEAPF64[$33>>3];
  __cmsVEC3init($12,$28,$31,$34);
  $35 = $8;
  __cmsMAT3eval($11,$35,$10);
  $36 = $8;
  __cmsMAT3eval($13,$36,$12);
  $37 = +HEAPF64[$13>>3];
  $38 = +HEAPF64[$11>>3];
  $39 = $37 / $38;
  __cmsVEC3init($14,$39,0.0,0.0);
  $40 = ((($14)) + 24|0);
  $41 = ((($13)) + 8|0);
  $42 = +HEAPF64[$41>>3];
  $43 = ((($11)) + 8|0);
  $44 = +HEAPF64[$43>>3];
  $45 = $42 / $44;
  __cmsVEC3init($40,0.0,$45,0.0);
  $46 = ((($14)) + 48|0);
  $47 = ((($13)) + 16|0);
  $48 = +HEAPF64[$47>>3];
  $49 = ((($11)) + 16|0);
  $50 = +HEAPF64[$49>>3];
  $51 = $48 / $50;
  __cmsVEC3init($46,0.0,0.0,$51);
  $52 = $8;
  __cmsMAT3per($15,$14,$52);
  $53 = $5;
  __cmsMAT3per($53,$9,$15);
  $4 = 1;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 } else {
  $4 = 0;
  $54 = $4;
  STACKTOP = sp;return ($54|0);
 }
 return (0)|0;
}
function __cmsBuildRGB2XYZtransferMatrix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0;
 var $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0;
 var $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0, $97 = 0.0;
 var $98 = 0.0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $7 = sp + 232|0;
 $8 = sp + 208|0;
 $9 = sp + 136|0;
 $10 = sp + 64|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $19 = $5;
 $20 = +HEAPF64[$19>>3];
 $11 = $20;
 $21 = $5;
 $22 = ((($21)) + 8|0);
 $23 = +HEAPF64[$22>>3];
 $12 = $23;
 $24 = $6;
 $25 = +HEAPF64[$24>>3];
 $13 = $25;
 $26 = $6;
 $27 = ((($26)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $14 = $28;
 $29 = $6;
 $30 = ((($29)) + 24|0);
 $31 = +HEAPF64[$30>>3];
 $15 = $31;
 $32 = $6;
 $33 = ((($32)) + 24|0);
 $34 = ((($33)) + 8|0);
 $35 = +HEAPF64[$34>>3];
 $16 = $35;
 $36 = $6;
 $37 = ((($36)) + 48|0);
 $38 = +HEAPF64[$37>>3];
 $17 = $38;
 $39 = $6;
 $40 = ((($39)) + 48|0);
 $41 = ((($40)) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $18 = $42;
 $43 = $13;
 $44 = $15;
 $45 = $17;
 __cmsVEC3init($10,$43,$44,$45);
 $46 = ((($10)) + 24|0);
 $47 = $14;
 $48 = $16;
 $49 = $18;
 __cmsVEC3init($46,$47,$48,$49);
 $50 = ((($10)) + 48|0);
 $51 = $13;
 $52 = 1.0 - $51;
 $53 = $14;
 $54 = $52 - $53;
 $55 = $15;
 $56 = 1.0 - $55;
 $57 = $16;
 $58 = $56 - $57;
 $59 = $17;
 $60 = 1.0 - $59;
 $61 = $18;
 $62 = $60 - $61;
 __cmsVEC3init($50,$54,$58,$62);
 $63 = (__cmsMAT3inverse($10,$9)|0);
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $11;
  $66 = $12;
  $67 = $65 / $66;
  $68 = $11;
  $69 = 1.0 - $68;
  $70 = $12;
  $71 = $69 - $70;
  $72 = $12;
  $73 = $71 / $72;
  __cmsVEC3init($7,$67,1.0,$73);
  __cmsMAT3eval($8,$9,$7);
  $74 = $4;
  $75 = +HEAPF64[$8>>3];
  $76 = $13;
  $77 = $75 * $76;
  $78 = ((($8)) + 8|0);
  $79 = +HEAPF64[$78>>3];
  $80 = $15;
  $81 = $79 * $80;
  $82 = ((($8)) + 16|0);
  $83 = +HEAPF64[$82>>3];
  $84 = $17;
  $85 = $83 * $84;
  __cmsVEC3init($74,$77,$81,$85);
  $86 = $4;
  $87 = ((($86)) + 24|0);
  $88 = +HEAPF64[$8>>3];
  $89 = $14;
  $90 = $88 * $89;
  $91 = ((($8)) + 8|0);
  $92 = +HEAPF64[$91>>3];
  $93 = $16;
  $94 = $92 * $93;
  $95 = ((($8)) + 16|0);
  $96 = +HEAPF64[$95>>3];
  $97 = $18;
  $98 = $96 * $97;
  __cmsVEC3init($87,$90,$94,$98);
  $99 = $4;
  $100 = ((($99)) + 48|0);
  $101 = +HEAPF64[$8>>3];
  $102 = $13;
  $103 = 1.0 - $102;
  $104 = $14;
  $105 = $103 - $104;
  $106 = $101 * $105;
  $107 = ((($8)) + 8|0);
  $108 = +HEAPF64[$107>>3];
  $109 = $15;
  $110 = 1.0 - $109;
  $111 = $16;
  $112 = $110 - $111;
  $113 = $108 * $112;
  $114 = ((($8)) + 16|0);
  $115 = +HEAPF64[$114>>3];
  $116 = $17;
  $117 = 1.0 - $116;
  $118 = $18;
  $119 = $117 - $118;
  $120 = $115 * $119;
  __cmsVEC3init($100,$106,$113,$120);
  $121 = $4;
  $122 = $5;
  $123 = (__cmsAdaptMatrixToD50($121,$122)|0);
  $3 = $123;
  $124 = $3;
  STACKTOP = sp;return ($124|0);
 } else {
  $3 = 0;
  $124 = $3;
  STACKTOP = sp;return ($124|0);
 }
 return (0)|0;
}
function __cmsAdaptMatrixToD50($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $5 = sp + 144|0;
 $6 = sp + 72|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $8 = $4;
 _cmsxyY2XYZ($5,$8);
 $9 = (_cmsD50_XYZ()|0);
 $10 = (__cmsAdaptationMatrix($6,0,$5,$9)|0);
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $3;
  dest=$7; src=$12; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $13 = $3;
  __cmsMAT3per($13,$6,$7);
  $2 = 1;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 } else {
  $2 = 0;
  $14 = $2;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _cmsSetAdaptationStateTHR($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = (__cmsContextGetClientChunk($6,3)|0);
 $5 = $7;
 $8 = $5;
 $9 = +HEAPF64[$8>>3];
 $4 = $9;
 $10 = $3;
 $11 = $10 >= 0.0;
 if (!($11)) {
  $14 = $4;
  STACKTOP = sp;return (+$14);
 }
 $12 = $3;
 $13 = $5;
 HEAPF64[$13>>3] = $12;
 $14 = $4;
 STACKTOP = sp;return (+$14);
}
function _cmsDeleteTransform($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((29695|0),(29665|0),151,(29713|0));
  // unreachable;
 }
 $6 = $2;
 $7 = ((($6)) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 96|0);
  $12 = HEAP32[$11>>2]|0;
  _cmsPipelineFree($12);
 }
 $13 = $2;
 $14 = ((($13)) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 92|0);
  $19 = HEAP32[$18>>2]|0;
  _cmsPipelineFree($19);
 }
 $20 = $2;
 $21 = ((($20)) + 100|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $2;
  $25 = ((($24)) + 100|0);
  $26 = HEAP32[$25>>2]|0;
  _cmsFreeNamedColorList($26);
 }
 $27 = $2;
 $28 = ((($27)) + 104|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $2;
  $32 = ((($31)) + 104|0);
  $33 = HEAP32[$32>>2]|0;
  _cmsFreeNamedColorList($33);
 }
 $34 = $2;
 $35 = ((($34)) + 168|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $2;
  $39 = ((($38)) + 168|0);
  $40 = HEAP32[$39>>2]|0;
  _cmsFreeProfileSequenceDescription($40);
 }
 $41 = $2;
 $42 = ((($41)) + 192|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0|0);
 if (!($44)) {
  $54 = $2;
  $55 = ((($54)) + 188|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $2;
  __cmsFree($56,$57);
  STACKTOP = sp;return;
 }
 $45 = $2;
 $46 = ((($45)) + 196|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $2;
 $49 = ((($48)) + 188|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $2;
 $52 = ((($51)) + 192|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vii[$47 & 511]($50,$53);
 $54 = $2;
 $55 = ((($54)) + 188|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $2;
 __cmsFree($56,$57);
 STACKTOP = sp;return;
}
function _cmsDoTransform($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $10 = $4;
 $8 = $10;
 HEAP32[$9>>2] = 0;
 $11 = ((($9)) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = $7;
 $13 = ((($9)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = $7;
 $15 = ((($9)) + 12|0);
 HEAP32[$15>>2] = $14;
 $16 = $8;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $8;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 FUNCTION_TABLE_viiiiii[$18 & 511]($19,$20,$21,$22,1,$9);
 STACKTOP = sp;return;
}
function _cmsCreateExtendedTransform($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$sink = 0, $$sink2 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $20 = sp + 64|0;
 $21 = sp + 60|0;
 $22 = sp + 56|0;
 $24 = sp + 48|0;
 $25 = sp + 44|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 HEAP32[$20>>2] = $8;
 HEAP32[$21>>2] = $9;
 HEAP32[$22>>2] = $10;
 $28 = $16;
 $29 = $13;
 $30 = (($29) - 1)|0;
 $31 = (($28) + ($30<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $27 = $32;
 $33 = HEAP32[$22>>2]|0;
 $34 = $33 & 512;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $12;
  $37 = (_AllocEmptyTransform($36,0,0,$20,$21,$22)|0);
  $11 = $37;
  $221 = $11;
  STACKTOP = sp;return ($221|0);
 }
 $38 = HEAP32[$22>>2]|0;
 $39 = $38 & 4096;
 $40 = ($39|0)!=(0);
 $41 = $18;
 $42 = ($41|0)==(0|0);
 $or$cond = $40 & $42;
 if ($or$cond) {
  $43 = HEAP32[$22>>2]|0;
  $44 = $43 & -4097;
  HEAP32[$22>>2] = $44;
 }
 $45 = HEAP32[$20>>2]|0;
 $46 = (__cmsFormatterIsFloat($45)|0);
 $47 = ($46|0)!=(0);
 if ($47) {
  label = 7;
 } else {
  $48 = HEAP32[$21>>2]|0;
  $49 = (__cmsFormatterIsFloat($48)|0);
  $50 = ($49|0)!=(0);
  if ($50) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $51 = HEAP32[$22>>2]|0;
  $52 = $51 | 64;
  HEAP32[$22>>2] = $52;
 }
 $53 = $13;
 $54 = $14;
 $55 = (_GetXFormColorSpaces($53,$54,$24,$25)|0);
 $56 = ($55|0)!=(0);
 if (!($56)) {
  $57 = $12;
  _cmsSignalError($57,4,29732,$vararg_buffer);
  $11 = 0;
  $221 = $11;
  STACKTOP = sp;return ($221|0);
 }
 $58 = HEAP32[$24>>2]|0;
 $59 = HEAP32[$20>>2]|0;
 $60 = (_IsProperColorSpace($58,$59)|0);
 $61 = ($60|0)!=(0);
 if (!($61)) {
  $62 = $12;
  _cmsSignalError($62,9,29765,$vararg_buffer4);
  $11 = 0;
  $221 = $11;
  STACKTOP = sp;return ($221|0);
 }
 $63 = HEAP32[$25>>2]|0;
 $64 = HEAP32[$21>>2]|0;
 $65 = (_IsProperColorSpace($63,$64)|0);
 $66 = ($65|0)!=(0);
 $67 = $12;
 if (!($66)) {
  _cmsSignalError($67,9,29802,$vararg_buffer6);
  $11 = 0;
  $221 = $11;
  STACKTOP = sp;return ($221|0);
 }
 $68 = $13;
 $69 = $16;
 $70 = $14;
 $71 = $15;
 $72 = $17;
 $73 = HEAP32[$22>>2]|0;
 $74 = (__cmsLinkProfiles($67,$68,$69,$70,$71,$72,$73)|0);
 $26 = $74;
 $75 = $26;
 $76 = ($75|0)==(0|0);
 if ($76) {
  $77 = $12;
  _cmsSignalError($77,13,29840,$vararg_buffer8);
  $11 = 0;
  $221 = $11;
  STACKTOP = sp;return ($221|0);
 }
 $78 = HEAP32[$24>>2]|0;
 $79 = (_cmsChannelsOf($78)|0);
 $80 = $26;
 $81 = (_cmsPipelineInputChannels($80)|0);
 $82 = ($79|0)!=($81|0);
 if (!($82)) {
  $83 = HEAP32[$25>>2]|0;
  $84 = (_cmsChannelsOf($83)|0);
  $85 = $26;
  $86 = (_cmsPipelineOutputChannels($85)|0);
  $87 = ($84|0)!=($86|0);
  if (!($87)) {
   $90 = $12;
   $91 = $26;
   $92 = $27;
   $93 = (_AllocEmptyTransform($90,$91,$92,$20,$21,$22)|0);
   $23 = $93;
   $94 = $23;
   $95 = ($94|0)==(0|0);
   if ($95) {
    $11 = 0;
    $221 = $11;
    STACKTOP = sp;return ($221|0);
   }
   $96 = HEAP32[$24>>2]|0;
   $97 = $23;
   $98 = ((($97)) + 108|0);
   HEAP32[$98>>2] = $96;
   $99 = HEAP32[$25>>2]|0;
   $100 = $23;
   $101 = ((($100)) + 112|0);
   HEAP32[$101>>2] = $99;
   $102 = $16;
   $103 = $13;
   $104 = (($103) - 1)|0;
   $105 = (($102) + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $23;
   $108 = ((($107)) + 184|0);
   HEAP32[$108>>2] = $106;
   $109 = $23;
   $110 = ((($109)) + 120|0);
   $111 = $14;
   $112 = HEAP32[$111>>2]|0;
   $113 = (_cmsReadTag($112,2004119668)|0);
   _SetWhitePoint($110,$113);
   $114 = $23;
   $115 = ((($114)) + 144|0);
   $116 = $14;
   $117 = $13;
   $118 = (($117) - 1)|0;
   $119 = (($116) + ($118<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (_cmsReadTag($120,2004119668)|0);
   _SetWhitePoint($115,$121);
   $122 = $18;
   $123 = ($122|0)!=(0|0);
   if ($123) {
    $124 = HEAP32[$22>>2]|0;
    $125 = $124 & 4096;
    $126 = ($125|0)!=(0);
    if ($126) {
     $127 = $12;
     $128 = $14;
     $129 = $15;
     $130 = $16;
     $131 = $17;
     $132 = $19;
     $133 = $18;
     $134 = (__cmsCreateGamutCheckPipeline($127,$128,$129,$130,$131,$132,$133)|0);
     $135 = $23;
     $136 = ((($135)) + 96|0);
     HEAP32[$136>>2] = $134;
    }
   }
   $137 = $14;
   $138 = HEAP32[$137>>2]|0;
   $139 = (_cmsIsTag($138,1668051572)|0);
   $140 = ($139|0)!=(0);
   if ($140) {
    $141 = $14;
    $142 = HEAP32[$141>>2]|0;
    $143 = (_cmsReadTag($142,1668051572)|0);
    $144 = (_cmsDupNamedColorList($143)|0);
    $145 = $23;
    $146 = ((($145)) + 100|0);
    HEAP32[$146>>2] = $144;
   }
   $147 = $14;
   $148 = $13;
   $149 = (($148) - 1)|0;
   $150 = (($147) + ($149<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (_cmsGetDeviceClass($151)|0);
   $153 = ($152|0)==(1818848875);
   $154 = $14;
   $155 = $13;
   $156 = (($155) - 1)|0;
   $157 = (($154) + ($156<<2)|0);
   $158 = HEAP32[$157>>2]|0;
   if ($153) {
    $159 = (_cmsIsTag($158,1668050804)|0);
    $160 = ($159|0)!=(0);
    if ($160) {
     $161 = $14;
     $162 = $13;
     $163 = (($162) - 1)|0;
     $164 = (($161) + ($163<<2)|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = (_cmsReadTag($165,1668050804)|0);
     $167 = (_cmsDupNamedColorList($166)|0);
     $168 = $23;
     $169 = ((($168)) + 104|0);
     HEAP32[$169>>2] = $167;
    }
   } else {
    $170 = (_cmsIsTag($158,1668051572)|0);
    $171 = ($170|0)!=(0);
    if ($171) {
     $172 = $14;
     $173 = $13;
     $174 = (($173) - 1)|0;
     $175 = (($172) + ($174<<2)|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (_cmsReadTag($176,1668051572)|0);
     $178 = (_cmsDupNamedColorList($177)|0);
     $179 = $23;
     $180 = ((($179)) + 104|0);
     HEAP32[$180>>2] = $178;
    }
   }
   $181 = HEAP32[$22>>2]|0;
   $182 = $181 & 128;
   $183 = ($182|0)!=(0);
   if ($183) {
    $184 = $12;
    $185 = $13;
    $186 = $14;
    $187 = (__cmsCompileProfileSequence($184,$185,$186)|0);
    $188 = $23;
    $$sink = $187;$$sink2 = $188;
   } else {
    $189 = $23;
    $$sink = 0;$$sink2 = $189;
   }
   $190 = ((($$sink2)) + 168|0);
   HEAP32[$190>>2] = $$sink;
   $191 = HEAP32[$22>>2]|0;
   $192 = $191 & 64;
   $193 = ($192|0)!=(0);
   do {
    if (!($193)) {
     $194 = $23;
     $195 = ((($194)) + 28|0);
     ;HEAP32[$195>>2]=0|0;HEAP32[$195+4>>2]=0|0;HEAP32[$195+8>>2]=0|0;HEAP32[$195+12>>2]=0|0;HEAP32[$195+16>>2]=0|0;HEAP32[$195+20>>2]=0|0;HEAP32[$195+24>>2]=0|0;HEAP32[$195+28>>2]=0|0;
     $196 = $23;
     $197 = ((($196)) + 96|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = ($198|0)!=(0|0);
     $200 = $23;
     if ($199) {
      $201 = $23;
      $202 = ((($201)) + 28|0);
      $203 = $23;
      $204 = ((($203)) + 28|0);
      $205 = ((($204)) + 32|0);
      _TransformOnePixelWithGamutCheck($200,$202,$205);
      break;
     } else {
      $206 = ((($200)) + 92|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = ((($207)) + 16|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = $23;
      $211 = ((($210)) + 28|0);
      $212 = $23;
      $213 = ((($212)) + 28|0);
      $214 = ((($213)) + 32|0);
      $215 = $23;
      $216 = ((($215)) + 92|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = ((($217)) + 12|0);
      $219 = HEAP32[$218>>2]|0;
      FUNCTION_TABLE_viii[$209 & 511]($211,$214,$219);
      break;
     }
    }
   } while(0);
   $220 = $23;
   $11 = $220;
   $221 = $11;
   STACKTOP = sp;return ($221|0);
  }
 }
 $88 = $26;
 _cmsPipelineFree($88);
 $89 = $12;
 _cmsSignalError($89,13,29867,$vararg_buffer10);
 $11 = 0;
 $221 = $11;
 STACKTOP = sp;return ($221|0);
}
function _AllocEmptyTransform($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CachedXFORM$sink = 0, $FloatXFORM$sink = 0, $PrecalculatedXFORM$sink = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $16 = sp + 44|0;
 $17 = sp + 40|0;
 $18 = sp + 36|0;
 $19 = sp + 32|0;
 $20 = sp + 28|0;
 $21 = sp + 24|0;
 $23 = sp + 16|0;
 $24 = sp + 12|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $25 = $7;
 $26 = (__cmsContextGetClientChunk($25,13)|0);
 $13 = $26;
 $27 = $7;
 $28 = (__cmsMallocZero($27,208)|0);
 $15 = $28;
 $29 = $15;
 $30 = ($29|0)!=(0|0);
 $31 = $8;
 if (!($30)) {
  _cmsPipelineFree($31);
  $6 = 0;
  $232 = $6;
  STACKTOP = sp;return ($232|0);
 }
 $32 = $15;
 $33 = ((($32)) + 92|0);
 HEAP32[$33>>2] = $31;
 $34 = $15;
 $35 = ((($34)) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 do {
  if ($37) {
   $38 = $13;
   $39 = HEAP32[$38>>2]|0;
   $14 = $39;
   while(1) {
    $40 = $14;
    $41 = ($40|0)!=(0|0);
    if (!($41)) {
     label = 11;
     break;
    }
    $42 = $14;
    $43 = HEAP32[$42>>2]|0;
    $44 = $15;
    $45 = ((($44)) + 8|0);
    $46 = $15;
    $47 = ((($46)) + 192|0);
    $48 = $15;
    $49 = ((($48)) + 196|0);
    $50 = $15;
    $51 = ((($50)) + 92|0);
    $52 = $10;
    $53 = $11;
    $54 = $12;
    $55 = (FUNCTION_TABLE_iiiiiiii[$43 & 31]($45,$47,$49,$51,$52,$53,$54)|0);
    $56 = ($55|0)!=(0);
    if ($56) {
     break;
    }
    $107 = $14;
    $108 = ((($107)) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    $14 = $109;
   }
   if ((label|0) == 11) {
    $110 = $7;
    $111 = $15;
    $112 = ((($111)) + 92|0);
    $113 = $9;
    $114 = $10;
    $115 = $11;
    $116 = $12;
    (__cmsOptimizePipeline($110,$112,$113,$114,$115,$116)|0);
    break;
   }
   $57 = $7;
   $58 = $15;
   $59 = ((($58)) + 188|0);
   HEAP32[$59>>2] = $57;
   $60 = $10;
   $61 = HEAP32[$60>>2]|0;
   $62 = $15;
   HEAP32[$62>>2] = $61;
   $63 = $11;
   $64 = HEAP32[$63>>2]|0;
   $65 = $15;
   $66 = ((($65)) + 4|0);
   HEAP32[$66>>2] = $64;
   $67 = $12;
   $68 = HEAP32[$67>>2]|0;
   $69 = $15;
   $70 = ((($69)) + 172|0);
   HEAP32[$70>>2] = $68;
   $71 = $7;
   $72 = $10;
   $73 = HEAP32[$72>>2]|0;
   __cmsGetFormatter($16,$71,$73,0,0);
   $74 = HEAP32[$16>>2]|0;
   $75 = $15;
   $76 = ((($75)) + 12|0);
   HEAP32[$76>>2] = $74;
   $77 = $7;
   $78 = $11;
   $79 = HEAP32[$78>>2]|0;
   __cmsGetFormatter($17,$77,$79,1,0);
   $80 = HEAP32[$17>>2]|0;
   $81 = $15;
   $82 = ((($81)) + 16|0);
   HEAP32[$82>>2] = $80;
   $83 = $7;
   $84 = $10;
   $85 = HEAP32[$84>>2]|0;
   __cmsGetFormatter($18,$83,$85,0,1);
   $86 = HEAP32[$18>>2]|0;
   $87 = $15;
   $88 = ((($87)) + 20|0);
   HEAP32[$88>>2] = $86;
   $89 = $7;
   $90 = $11;
   $91 = HEAP32[$90>>2]|0;
   __cmsGetFormatter($19,$89,$91,1,1);
   $92 = HEAP32[$19>>2]|0;
   $93 = $15;
   $94 = ((($93)) + 24|0);
   HEAP32[$94>>2] = $92;
   $95 = $14;
   $96 = ((($95)) + 4|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = ($97|0)!=(0);
   if ($98) {
    $99 = $15;
    $100 = ((($99)) + 8|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $15;
    $103 = ((($102)) + 200|0);
    HEAP32[$103>>2] = $101;
    $104 = $15;
    $105 = ((($104)) + 8|0);
    HEAP32[$105>>2] = 371;
   }
   $106 = $15;
   $6 = $106;
   $232 = $6;
   STACKTOP = sp;return ($232|0);
  }
 } while(0);
 $117 = $10;
 $118 = HEAP32[$117>>2]|0;
 $119 = (__cmsFormatterIsFloat($118)|0);
 $120 = ($119|0)!=(0);
 do {
  if ($120) {
   $121 = $11;
   $122 = HEAP32[$121>>2]|0;
   $123 = (__cmsFormatterIsFloat($122)|0);
   $124 = ($123|0)!=(0);
   if ($124) {
    $125 = $7;
    $126 = $10;
    $127 = HEAP32[$126>>2]|0;
    __cmsGetFormatter($20,$125,$127,0,1);
    $128 = HEAP32[$20>>2]|0;
    $129 = $15;
    $130 = ((($129)) + 20|0);
    HEAP32[$130>>2] = $128;
    $131 = $7;
    $132 = $11;
    $133 = HEAP32[$132>>2]|0;
    __cmsGetFormatter($21,$131,$133,1,1);
    $134 = HEAP32[$21>>2]|0;
    $135 = $15;
    $136 = ((($135)) + 24|0);
    HEAP32[$136>>2] = $134;
    $137 = $12;
    $138 = HEAP32[$137>>2]|0;
    $139 = $138 | 33554432;
    HEAP32[$137>>2] = $139;
    $140 = $15;
    $141 = ((($140)) + 20|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)==(0|0);
    if (!($143)) {
     $144 = $15;
     $145 = ((($144)) + 24|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==(0|0);
     if (!($147)) {
      $150 = $12;
      $151 = HEAP32[$150>>2]|0;
      $152 = $151 & 512;
      $153 = ($152|0)!=(0);
      $154 = $15;
      $155 = ((($154)) + 8|0);
      $FloatXFORM$sink = $153 ? 372 : 373;
      HEAP32[$155>>2] = $FloatXFORM$sink;
      break;
     }
    }
    $148 = $7;
    _cmsSignalError($148,8,29917,$vararg_buffer);
    $149 = $15;
    _cmsDeleteTransform($149);
    $6 = 0;
    $232 = $6;
    STACKTOP = sp;return ($232|0);
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $156 = $10;
   $157 = HEAP32[$156>>2]|0;
   $158 = ($157|0)==(0);
   if ($158) {
    $159 = $11;
    $160 = HEAP32[$159>>2]|0;
    $161 = ($160|0)==(0);
    if ($161) {
     $162 = $15;
     $163 = ((($162)) + 16|0);
     HEAP32[$163>>2] = 0;
     $164 = $15;
     $165 = ((($164)) + 12|0);
     HEAP32[$165>>2] = 0;
     $166 = $12;
     $$sink = $166;
     label = 26;
    } else {
     label = 21;
    }
   } else {
    label = 21;
   }
   do {
    if ((label|0) == 21) {
     $167 = $7;
     $168 = $10;
     $169 = HEAP32[$168>>2]|0;
     __cmsGetFormatter($23,$167,$169,0,0);
     $170 = HEAP32[$23>>2]|0;
     $171 = $15;
     $172 = ((($171)) + 12|0);
     HEAP32[$172>>2] = $170;
     $173 = $7;
     $174 = $11;
     $175 = HEAP32[$174>>2]|0;
     __cmsGetFormatter($24,$173,$175,1,0);
     $176 = HEAP32[$24>>2]|0;
     $177 = $15;
     $178 = ((($177)) + 16|0);
     HEAP32[$178>>2] = $176;
     $179 = $15;
     $180 = ((($179)) + 12|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($181|0)==(0|0);
     if (!($182)) {
      $183 = $15;
      $184 = ((($183)) + 16|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = ($185|0)==(0|0);
      if (!($186)) {
       $189 = $15;
       $190 = HEAP32[$189>>2]|0;
       $191 = $190 & 7;
       $22 = $191;
       $192 = $22;
       $193 = ($192|0)==(0);
       $194 = $22;
       $195 = ($194>>>0)>=(2);
       $or$cond = $193 | $195;
       if (!($or$cond)) {
        break;
       }
       $196 = $12;
       $$sink = $196;
       label = 26;
       break;
      }
     }
     $187 = $7;
     _cmsSignalError($187,8,29917,$vararg_buffer4);
     $188 = $15;
     _cmsDeleteTransform($188);
     $6 = 0;
     $232 = $6;
     STACKTOP = sp;return ($232|0);
    }
   } while(0);
   if ((label|0) == 26) {
    $197 = HEAP32[$$sink>>2]|0;
    $198 = $197 | 33554432;
    HEAP32[$$sink>>2] = $198;
   }
   $199 = $12;
   $200 = HEAP32[$199>>2]|0;
   $201 = $200 & 512;
   $202 = ($201|0)!=(0);
   if ($202) {
    $203 = $15;
    $204 = ((($203)) + 8|0);
    HEAP32[$204>>2] = 374;
    break;
   }
   $205 = $12;
   $206 = HEAP32[$205>>2]|0;
   $207 = $206 & 64;
   $208 = ($207|0)!=(0);
   $209 = $12;
   $210 = HEAP32[$209>>2]|0;
   $211 = $210 & 4096;
   $212 = ($211|0)!=(0);
   $213 = $15;
   $214 = ((($213)) + 8|0);
   if ($208) {
    $PrecalculatedXFORM$sink = $212 ? 375 : 376;
    HEAP32[$214>>2] = $PrecalculatedXFORM$sink;
    break;
   } else {
    $CachedXFORM$sink = $212 ? 377 : 378;
    HEAP32[$214>>2] = $CachedXFORM$sink;
    break;
   }
  }
 } while(0);
 $215 = $10;
 $216 = HEAP32[$215>>2]|0;
 $217 = $15;
 HEAP32[$217>>2] = $216;
 $218 = $11;
 $219 = HEAP32[$218>>2]|0;
 $220 = $15;
 $221 = ((($220)) + 4|0);
 HEAP32[$221>>2] = $219;
 $222 = $12;
 $223 = HEAP32[$222>>2]|0;
 $224 = $15;
 $225 = ((($224)) + 172|0);
 HEAP32[$225>>2] = $223;
 $226 = $7;
 $227 = $15;
 $228 = ((($227)) + 188|0);
 HEAP32[$228>>2] = $226;
 $229 = $15;
 $230 = ((($229)) + 192|0);
 HEAP32[$230>>2] = 0;
 $231 = $15;
 $6 = $231;
 $232 = $6;
 STACKTOP = sp;return ($232|0);
}
function _GetXFormColorSpaces($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $5;
 $17 = ($16|0)==(0);
 if ($17) {
  $4 = 0;
  $70 = $4;
  STACKTOP = sp;return ($70|0);
 }
 $18 = $6;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $4 = 0;
  $70 = $4;
  STACKTOP = sp;return ($70|0);
 }
 $21 = $6;
 $22 = HEAP32[$21>>2]|0;
 $23 = (_cmsGetColorSpace($22)|0);
 $11 = $23;
 $24 = $7;
 HEAP32[$24>>2] = $23;
 $12 = 0;
 while(1) {
  $25 = $12;
  $26 = $5;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   label = 20;
   break;
  }
  $28 = $6;
  $29 = $12;
  $30 = (($28) + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $11;
  $33 = ($32|0)!=(1482250784);
  $34 = $11;
  $35 = ($34|0)!=(1281450528);
  $36 = $33 ? $35 : 0;
  $37 = $36&1;
  $15 = $37;
  $38 = $14;
  $39 = ($38|0)==(0|0);
  if ($39) {
   label = 8;
   break;
  }
  $40 = $14;
  $41 = (_cmsGetDeviceClass($40)|0);
  $13 = $41;
  $42 = $13;
  $43 = ($42|0)==(1852662636);
  do {
   if ($43) {
    $9 = 826494034;
    $44 = $5;
    $45 = ($44>>>0)>(1);
    $46 = $14;
    if ($45) {
     $47 = (_cmsGetPCS($46)|0);
     $49 = $47;
    } else {
     $48 = (_cmsGetColorSpace($46)|0);
     $49 = $48;
    }
    $10 = $49;
   } else {
    $50 = $15;
    $51 = ($50|0)!=(0);
    $52 = $13;
    $53 = ($52|0)==(1818848875);
    $or$cond = $51 | $53;
    $54 = $14;
    if ($or$cond) {
     $55 = (_cmsGetColorSpace($54)|0);
     $9 = $55;
     $56 = $14;
     $57 = (_cmsGetPCS($56)|0);
     $10 = $57;
     break;
    } else {
     $58 = (_cmsGetPCS($54)|0);
     $9 = $58;
     $59 = $14;
     $60 = (_cmsGetColorSpace($59)|0);
     $10 = $60;
     break;
    }
   }
  } while(0);
  $61 = $12;
  $62 = ($61|0)==(0);
  if ($62) {
   $63 = $9;
   $64 = $7;
   HEAP32[$64>>2] = $63;
  }
  $65 = $10;
  $11 = $65;
  $66 = $12;
  $67 = (($66) + 1)|0;
  $12 = $67;
 }
 if ((label|0) == 8) {
  $4 = 0;
  $70 = $4;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 20) {
  $68 = $11;
  $69 = $8;
  HEAP32[$69>>2] = $68;
  $4 = 1;
  $70 = $4;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function _IsProperColorSpace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = $7 >>> 16;
 $9 = $8 & 31;
 $5 = $9;
 $10 = $3;
 $11 = (__cmsLCMScolorSpace($10)|0);
 $6 = $11;
 $12 = $5;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $2 = 1;
  } else {
   $14 = $5;
   $15 = $6;
   $16 = ($14|0)==($15|0);
   if ($16) {
    $2 = 1;
    break;
   }
   $17 = $5;
   $18 = ($17|0)==(30);
   $19 = $6;
   $20 = ($19|0)==(10);
   $or$cond = $18 & $20;
   if ($or$cond) {
    $2 = 1;
    break;
   }
   $21 = $5;
   $22 = ($21|0)==(10);
   $23 = $6;
   $24 = ($23|0)==(30);
   $or$cond3 = $22 & $24;
   if ($or$cond3) {
    $2 = 1;
    break;
   } else {
    $2 = 0;
    break;
   }
  }
 } while(0);
 $25 = $2;
 STACKTOP = sp;return ($25|0);
}
function _SetWhitePoint($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $2;
  HEAPF64[$6>>3] = 0.96419999999999995;
  $7 = $2;
  $8 = ((($7)) + 8|0);
  HEAPF64[$8>>3] = 1.0;
  $9 = $2;
  $10 = ((($9)) + 16|0);
  HEAPF64[$10>>3] = 0.82489999999999996;
  STACKTOP = sp;return;
 } else {
  $11 = $3;
  $12 = +HEAPF64[$11>>3];
  $13 = $2;
  HEAPF64[$13>>3] = $12;
  $14 = $3;
  $15 = ((($14)) + 8|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $2;
  $18 = ((($17)) + 8|0);
  HEAPF64[$18>>3] = $16;
  $19 = $3;
  $20 = ((($19)) + 16|0);
  $21 = +HEAPF64[$20>>3];
  $22 = $2;
  $23 = ((($22)) + 16|0);
  HEAPF64[$23>>3] = $21;
  $24 = $2;
  _NormalizeXYZ($24);
  STACKTOP = sp;return;
 }
}
function _TransformOnePixelWithGamutCheck($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 18|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = ((($9)) + 96|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = $3;
 $16 = ((($15)) + 96|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_viii[$13 & 511]($14,$6,$19);
 $20 = HEAP16[$6>>1]|0;
 $21 = $20&65535;
 $22 = ($21|0)>=(1);
 $23 = $3;
 if (!($22)) {
  $46 = ((($23)) + 92|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $4;
  $51 = $5;
  $52 = $3;
  $53 = ((($52)) + 92|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  FUNCTION_TABLE_viii[$49 & 511]($50,$51,$56);
  STACKTOP = sp;return;
 }
 $24 = ((($23)) + 188|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (__cmsContextGetClientChunk($25,2)|0);
 $8 = $26;
 $7 = 0;
 while(1) {
  $27 = $7;
  $28 = $27&65535;
  $29 = $3;
  $30 = ((($29)) + 92|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($28>>>0)<($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $8;
  $36 = $7;
  $37 = $36&65535;
  $38 = (($35) + ($37<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $5;
  $41 = $7;
  $42 = $41&65535;
  $43 = (($40) + ($42<<1)|0);
  HEAP16[$43>>1] = $39;
  $44 = $7;
  $45 = (($44) + 1)<<16>>16;
  $7 = $45;
 }
 STACKTOP = sp;return;
}
function _NormalizeXYZ($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  $2 = $1;
  $3 = +HEAPF64[$2>>3];
  $4 = $3 > 2.0;
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $1;
  $6 = ((($5)) + 8|0);
  $7 = +HEAPF64[$6>>3];
  $8 = $7 > 2.0;
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $1;
  $10 = ((($9)) + 16|0);
  $11 = +HEAPF64[$10>>3];
  $12 = $11 > 2.0;
  if (!($12)) {
   label = 6;
   break;
  }
  $13 = $1;
  $14 = +HEAPF64[$13>>3];
  $15 = $14 / 10.0;
  HEAPF64[$13>>3] = $15;
  $16 = $1;
  $17 = ((($16)) + 8|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $18 / 10.0;
  HEAPF64[$17>>3] = $19;
  $20 = $1;
  $21 = ((($20)) + 16|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 / 10.0;
  HEAPF64[$21>>3] = $23;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
}
function __cmsTransform2toTransformAdaptor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 __cmsHandleExtraChannels($17,$18,$19,$20,$21,$22);
 $13 = 0;
 $14 = 0;
 $12 = 0;
 while(1) {
  $23 = $12;
  $24 = $10;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $7;
  $27 = $13;
  $28 = (($26) + ($27)|0);
  $15 = $28;
  $29 = $8;
  $30 = $14;
  $31 = (($29) + ($30)|0);
  $16 = $31;
  $32 = $6;
  $33 = ((($32)) + 200|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $6;
  $36 = $15;
  $37 = $16;
  $38 = $9;
  $39 = $11;
  $40 = ((($39)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  FUNCTION_TABLE_viiiii[$34 & 0]($35,$36,$37,$38,$41);
  $42 = $11;
  $43 = HEAP32[$42>>2]|0;
  $44 = $13;
  $45 = (($44) + ($43))|0;
  $13 = $45;
  $46 = $11;
  $47 = ((($46)) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $14;
  $50 = (($49) + ($48))|0;
  $14 = $50;
  $51 = $12;
  $52 = (($51) + 1)|0;
  $12 = $52;
 }
 STACKTOP = sp;return;
}
function _NullFloatXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $14 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 __cmsHandleExtraChannels($19,$20,$21,$22,$23,$24);
 $17 = 0;
 $18 = 0;
 dest=$14; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = 0;
 while(1) {
  $25 = $15;
  $26 = $10;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $7;
  $29 = $17;
  $30 = (($28) + ($29)|0);
  $12 = $30;
  $31 = $8;
  $32 = $18;
  $33 = (($31) + ($32)|0);
  $13 = $33;
  $16 = 0;
  while(1) {
   $34 = $16;
   $35 = $9;
   $36 = ($34>>>0)<($35>>>0);
   if (!($36)) {
    break;
   }
   $37 = $6;
   $38 = ((($37)) + 20|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $6;
   $41 = $12;
   $42 = $11;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iiiii[$39 & 511]($40,$14,$41,$44)|0);
   $12 = $45;
   $46 = $6;
   $47 = ((($46)) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $6;
   $50 = $13;
   $51 = $11;
   $52 = ((($51)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (FUNCTION_TABLE_iiiii[$48 & 511]($49,$14,$50,$53)|0);
   $13 = $54;
   $55 = $16;
   $56 = (($55) + 1)|0;
   $16 = $56;
  }
  $57 = $11;
  $58 = HEAP32[$57>>2]|0;
  $59 = $17;
  $60 = (($59) + ($58))|0;
  $17 = $60;
  $61 = $11;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $18;
  $65 = (($64) + ($63))|0;
  $18 = $65;
  $66 = $15;
  $67 = (($66) + 1)|0;
  $15 = $67;
 }
 STACKTOP = sp;return;
}
function _FloatXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $14 = sp + 88|0;
 $15 = sp + 24|0;
 $16 = sp + 20|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $22 = $6;
 $23 = $7;
 $24 = $8;
 $25 = $9;
 $26 = $10;
 $27 = $11;
 __cmsHandleExtraChannels($22,$23,$24,$25,$26,$27);
 $20 = 0;
 $21 = 0;
 dest=$14; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$15; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $17 = 0;
 while(1) {
  $28 = $17;
  $29 = $10;
  $30 = ($28>>>0)<($29>>>0);
  if (!($30)) {
   break;
  }
  $31 = $7;
  $32 = $20;
  $33 = (($31) + ($32)|0);
  $12 = $33;
  $34 = $8;
  $35 = $21;
  $36 = (($34) + ($35)|0);
  $13 = $36;
  $18 = 0;
  while(1) {
   $37 = $18;
   $38 = $9;
   $39 = ($37>>>0)<($38>>>0);
   if (!($39)) {
    break;
   }
   $40 = $6;
   $41 = ((($40)) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $6;
   $44 = $12;
   $45 = $11;
   $46 = ((($45)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiiii[$42 & 511]($43,$14,$44,$47)|0);
   $12 = $48;
   $49 = $6;
   $50 = ((($49)) + 96|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)!=(0|0);
   L7: do {
    if ($52) {
     $53 = $6;
     $54 = ((($53)) + 96|0);
     $55 = HEAP32[$54>>2]|0;
     _cmsPipelineEvalFloat($14,$16,$55);
     $56 = +HEAPF32[$16>>2];
     $57 = $56;
     $58 = $57 > 0.0;
     if (!($58)) {
      $65 = $6;
      $66 = ((($65)) + 92|0);
      $67 = HEAP32[$66>>2]|0;
      _cmsPipelineEvalFloat($14,$15,$67);
      break;
     }
     $19 = 0;
     while(1) {
      $59 = $19;
      $60 = ($59>>>0)<(16);
      if (!($60)) {
       break L7;
      }
      $61 = $19;
      $62 = (($15) + ($61<<2)|0);
      HEAPF32[$62>>2] = -1.0;
      $63 = $19;
      $64 = (($63) + 1)|0;
      $19 = $64;
     }
    } else {
     $68 = $6;
     $69 = ((($68)) + 92|0);
     $70 = HEAP32[$69>>2]|0;
     _cmsPipelineEvalFloat($14,$15,$70);
    }
   } while(0);
   $71 = $6;
   $72 = ((($71)) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $6;
   $75 = $13;
   $76 = $11;
   $77 = ((($76)) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (FUNCTION_TABLE_iiiii[$73 & 511]($74,$15,$75,$78)|0);
   $13 = $79;
   $80 = $18;
   $81 = (($80) + 1)|0;
   $18 = $81;
  }
  $82 = $11;
  $83 = HEAP32[$82>>2]|0;
  $84 = $20;
  $85 = (($84) + ($83))|0;
  $20 = $85;
  $86 = $11;
  $87 = ((($86)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $21;
  $90 = (($89) + ($88))|0;
  $21 = $90;
  $91 = $17;
  $92 = (($91) + 1)|0;
  $17 = $92;
 }
 STACKTOP = sp;return;
}
function _NullXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = sp + 48|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 __cmsHandleExtraChannels($19,$20,$21,$22,$23,$24);
 $17 = 0;
 $18 = 0;
 dest=$14; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $15 = 0;
 while(1) {
  $25 = $15;
  $26 = $10;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $7;
  $29 = $17;
  $30 = (($28) + ($29)|0);
  $12 = $30;
  $31 = $8;
  $32 = $18;
  $33 = (($31) + ($32)|0);
  $13 = $33;
  $16 = 0;
  while(1) {
   $34 = $16;
   $35 = $9;
   $36 = ($34>>>0)<($35>>>0);
   if (!($36)) {
    break;
   }
   $37 = $6;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $6;
   $41 = $12;
   $42 = $11;
   $43 = ((($42)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iiiii[$39 & 511]($40,$14,$41,$44)|0);
   $12 = $45;
   $46 = $6;
   $47 = ((($46)) + 16|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $6;
   $50 = $13;
   $51 = $11;
   $52 = ((($51)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (FUNCTION_TABLE_iiiii[$48 & 511]($49,$14,$50,$53)|0);
   $13 = $54;
   $55 = $16;
   $56 = (($55) + 1)|0;
   $16 = $56;
  }
  $57 = $11;
  $58 = HEAP32[$57>>2]|0;
  $59 = $17;
  $60 = (($59) + ($58))|0;
  $17 = $60;
  $61 = $11;
  $62 = ((($61)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $18;
  $65 = (($64) + ($63))|0;
  $18 = $65;
  $66 = $15;
  $67 = (($66) + 1)|0;
  $15 = $67;
 }
 STACKTOP = sp;return;
}
function _PrecalculatedXFORMGamutCheck($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $14 = sp + 80|0;
 $15 = sp + 48|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 __cmsHandleExtraChannels($20,$21,$22,$23,$24,$25);
 $18 = 0;
 $19 = 0;
 dest=$14; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=$15; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $16 = 0;
 while(1) {
  $26 = $16;
  $27 = $10;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $7;
  $30 = $18;
  $31 = (($29) + ($30)|0);
  $12 = $31;
  $32 = $8;
  $33 = $19;
  $34 = (($32) + ($33)|0);
  $13 = $34;
  $17 = 0;
  while(1) {
   $35 = $17;
   $36 = $9;
   $37 = ($35>>>0)<($36>>>0);
   if (!($37)) {
    break;
   }
   $38 = $6;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $6;
   $42 = $12;
   $43 = $11;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (FUNCTION_TABLE_iiiii[$40 & 511]($41,$14,$42,$45)|0);
   $12 = $46;
   $47 = $6;
   _TransformOnePixelWithGamutCheck($47,$14,$15);
   $48 = $6;
   $49 = ((($48)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $6;
   $52 = $13;
   $53 = $11;
   $54 = ((($53)) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_iiiii[$50 & 511]($51,$15,$52,$55)|0);
   $13 = $56;
   $57 = $17;
   $58 = (($57) + 1)|0;
   $17 = $58;
  }
  $59 = $11;
  $60 = HEAP32[$59>>2]|0;
  $61 = $18;
  $62 = (($61) + ($60))|0;
  $18 = $62;
  $63 = $11;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $19;
  $67 = (($66) + ($65))|0;
  $19 = $67;
  $68 = $16;
  $69 = (($68) + 1)|0;
  $16 = $69;
 }
 STACKTOP = sp;return;
}
function _PrecalculatedXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $14 = sp + 80|0;
 $15 = sp + 48|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 __cmsHandleExtraChannels($20,$21,$22,$23,$24,$25);
 $18 = 0;
 $19 = 0;
 dest=$14; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=$15; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $16 = 0;
 while(1) {
  $26 = $16;
  $27 = $10;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   break;
  }
  $29 = $7;
  $30 = $18;
  $31 = (($29) + ($30)|0);
  $12 = $31;
  $32 = $8;
  $33 = $19;
  $34 = (($32) + ($33)|0);
  $13 = $34;
  $17 = 0;
  while(1) {
   $35 = $17;
   $36 = $9;
   $37 = ($35>>>0)<($36>>>0);
   if (!($37)) {
    break;
   }
   $38 = $6;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $6;
   $42 = $12;
   $43 = $11;
   $44 = ((($43)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (FUNCTION_TABLE_iiiii[$40 & 511]($41,$14,$42,$45)|0);
   $12 = $46;
   $47 = $6;
   $48 = ((($47)) + 92|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 16|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $6;
   $53 = ((($52)) + 92|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($54)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   FUNCTION_TABLE_viii[$51 & 511]($14,$15,$56);
   $57 = $6;
   $58 = ((($57)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $6;
   $61 = $13;
   $62 = $11;
   $63 = ((($62)) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (FUNCTION_TABLE_iiiii[$59 & 511]($60,$15,$61,$64)|0);
   $13 = $65;
   $66 = $17;
   $67 = (($66) + 1)|0;
   $17 = $67;
  }
  $68 = $11;
  $69 = HEAP32[$68>>2]|0;
  $70 = $18;
  $71 = (($70) + ($69))|0;
  $18 = $71;
  $72 = $11;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $19;
  $76 = (($75) + ($74))|0;
  $19 = $76;
  $77 = $16;
  $78 = (($77) + 1)|0;
  $16 = $78;
 }
 STACKTOP = sp;return;
}
function _CachedXFORMGamutCheck($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $14 = sp + 144|0;
 $15 = sp + 112|0;
 $16 = sp + 48|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 __cmsHandleExtraChannels($21,$22,$23,$24,$25,$26);
 dest=$14; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=$15; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $27 = $6;
 $28 = ((($27)) + 28|0);
 dest=$16; src=$28; stop=dest+64|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 $19 = 0;
 $20 = 0;
 $17 = 0;
 while(1) {
  $29 = $17;
  $30 = $10;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   break;
  }
  $32 = $7;
  $33 = $19;
  $34 = (($32) + ($33)|0);
  $12 = $34;
  $35 = $8;
  $36 = $20;
  $37 = (($35) + ($36)|0);
  $13 = $37;
  $18 = 0;
  while(1) {
   $38 = $18;
   $39 = $9;
   $40 = ($38>>>0)<($39>>>0);
   if (!($40)) {
    break;
   }
   $41 = $6;
   $42 = ((($41)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $6;
   $45 = $12;
   $46 = $11;
   $47 = ((($46)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_iiiii[$43 & 511]($44,$14,$45,$48)|0);
   $12 = $49;
   $50 = (_memcmp($14,$16,32)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = ((($16)) + 32|0);
    dest=$15; src=$52; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
   } else {
    $53 = $6;
    _TransformOnePixelWithGamutCheck($53,$14,$15);
    dest=$16; src=$14; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
    $54 = ((($16)) + 32|0);
    dest=$54; src=$15; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
   }
   $55 = $6;
   $56 = ((($55)) + 16|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $6;
   $59 = $13;
   $60 = $11;
   $61 = ((($60)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (FUNCTION_TABLE_iiiii[$57 & 511]($58,$15,$59,$62)|0);
   $13 = $63;
   $64 = $18;
   $65 = (($64) + 1)|0;
   $18 = $65;
  }
  $66 = $11;
  $67 = HEAP32[$66>>2]|0;
  $68 = $19;
  $69 = (($68) + ($67))|0;
  $19 = $69;
  $70 = $11;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $20;
  $74 = (($73) + ($72))|0;
  $20 = $74;
  $75 = $17;
  $76 = (($75) + 1)|0;
  $17 = $76;
 }
 STACKTOP = sp;return;
}
function _CachedXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $14 = sp + 144|0;
 $15 = sp + 112|0;
 $16 = sp + 48|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 $24 = $9;
 $25 = $10;
 $26 = $11;
 __cmsHandleExtraChannels($21,$22,$23,$24,$25,$26);
 dest=$14; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=$15; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $27 = $6;
 $28 = ((($27)) + 28|0);
 dest=$16; src=$28; stop=dest+64|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 $19 = 0;
 $20 = 0;
 $17 = 0;
 while(1) {
  $29 = $17;
  $30 = $10;
  $31 = ($29>>>0)<($30>>>0);
  if (!($31)) {
   break;
  }
  $32 = $7;
  $33 = $19;
  $34 = (($32) + ($33)|0);
  $12 = $34;
  $35 = $8;
  $36 = $20;
  $37 = (($35) + ($36)|0);
  $13 = $37;
  $18 = 0;
  while(1) {
   $38 = $18;
   $39 = $9;
   $40 = ($38>>>0)<($39>>>0);
   if (!($40)) {
    break;
   }
   $41 = $6;
   $42 = ((($41)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $6;
   $45 = $12;
   $46 = $11;
   $47 = ((($46)) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_iiiii[$43 & 511]($44,$14,$45,$48)|0);
   $12 = $49;
   $50 = (_memcmp($14,$16,32)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = ((($16)) + 32|0);
    dest=$15; src=$52; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
   } else {
    $53 = $6;
    $54 = ((($53)) + 92|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $6;
    $59 = ((($58)) + 92|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ((($60)) + 12|0);
    $62 = HEAP32[$61>>2]|0;
    FUNCTION_TABLE_viii[$57 & 511]($14,$15,$62);
    dest=$16; src=$14; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
    $63 = ((($16)) + 32|0);
    dest=$63; src=$15; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
   }
   $64 = $6;
   $65 = ((($64)) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $6;
   $68 = $13;
   $69 = $11;
   $70 = ((($69)) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (FUNCTION_TABLE_iiiii[$66 & 511]($67,$15,$68,$71)|0);
   $13 = $72;
   $73 = $18;
   $74 = (($73) + 1)|0;
   $18 = $74;
  }
  $75 = $11;
  $76 = HEAP32[$75>>2]|0;
  $77 = $19;
  $78 = (($77) + ($76))|0;
  $19 = $78;
  $79 = $11;
  $80 = ((($79)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $20;
  $83 = (($82) + ($81))|0;
  $20 = $83;
  $84 = $17;
  $85 = (($84) + 1)|0;
  $17 = $85;
 }
 STACKTOP = sp;return;
}
function _cmsCreateMultiprofileTransformTHR($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4144|0);
 $vararg_buffer = sp + 2048|0;
 $16 = sp + 3080|0;
 $17 = sp + 2056|0;
 $18 = sp;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $19 = $10;
 $20 = ($19>>>0)<=(0);
 $21 = $10;
 $22 = ($21>>>0)>(255);
 $or$cond = $20 | $22;
 if ($or$cond) {
  $23 = $8;
  $24 = $10;
  HEAP32[$vararg_buffer>>2] = $24;
  _cmsSignalError($23,2,29943,$vararg_buffer);
  $7 = 0;
  $50 = $7;
  STACKTOP = sp;return ($50|0);
 }
 $15 = 0;
 while(1) {
  $25 = $15;
  $26 = $10;
  $27 = ($25>>>0)<($26>>>0);
  if (!($27)) {
   break;
  }
  $28 = $14;
  $29 = $28 & 8192;
  $30 = ($29|0)!=(0);
  $31 = $30 ? 1 : 0;
  $32 = $15;
  $33 = (($16) + ($32<<2)|0);
  HEAP32[$33>>2] = $31;
  $34 = $13;
  $35 = $15;
  $36 = (($17) + ($35<<2)|0);
  HEAP32[$36>>2] = $34;
  $37 = $8;
  $38 = (+_cmsSetAdaptationStateTHR($37,-1.0));
  $39 = $15;
  $40 = (($18) + ($39<<3)|0);
  HEAPF64[$40>>3] = $38;
  $41 = $15;
  $42 = (($41) + 1)|0;
  $15 = $42;
 }
 $43 = $8;
 $44 = $10;
 $45 = $9;
 $46 = $11;
 $47 = $12;
 $48 = $14;
 $49 = (_cmsCreateExtendedTransform($43,$44,$45,$16,$17,$18,0,0,$46,$47,$48)|0);
 $7 = $49;
 $50 = $7;
 STACKTOP = sp;return ($50|0);
}
function _cmsCreateTransformTHR($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $14 = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $15 = $8;
 HEAP32[$14>>2] = $15;
 $16 = $10;
 $17 = ((($14)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = $7;
 $19 = $10;
 $20 = ($19|0)==(0|0);
 $21 = $20 ? 1 : 2;
 $22 = $9;
 $23 = $11;
 $24 = $12;
 $25 = $13;
 $26 = (_cmsCreateMultiprofileTransformTHR($18,$14,$21,$22,$23,$24,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function _cmsCreateTransform($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $6;
 $13 = (_cmsGetProfileContextID($12)|0);
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = (_cmsCreateTransformTHR($13,$14,$15,$16,$17,$18,$19)|0);
 STACKTOP = sp;return ($20|0);
}
function _cmsCreateProofingTransformTHR($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp + 72|0;
 $20 = sp + 56|0;
 $21 = sp + 40|0;
 $22 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $24 = $18;
 $25 = $24 & 8192;
 $26 = ($25|0)!=(0);
 $27 = $26 ? 1 : 0;
 $23 = $27;
 $28 = $11;
 HEAP32[$19>>2] = $28;
 $29 = $15;
 $30 = ((($19)) + 4|0);
 HEAP32[$30>>2] = $29;
 $31 = $15;
 $32 = ((($19)) + 8|0);
 HEAP32[$32>>2] = $31;
 $33 = $13;
 $34 = ((($19)) + 12|0);
 HEAP32[$34>>2] = $33;
 $35 = $16;
 HEAP32[$20>>2] = $35;
 $36 = $16;
 $37 = ((($20)) + 4|0);
 HEAP32[$37>>2] = $36;
 $38 = ((($20)) + 8|0);
 HEAP32[$38>>2] = 1;
 $39 = $17;
 $40 = ((($20)) + 12|0);
 HEAP32[$40>>2] = $39;
 $41 = $23;
 HEAP32[$21>>2] = $41;
 $42 = $23;
 $43 = ((($21)) + 4|0);
 HEAP32[$43>>2] = $42;
 $44 = ((($21)) + 8|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($21)) + 12|0);
 HEAP32[$45>>2] = 0;
 $46 = $10;
 $47 = (+_cmsSetAdaptationStateTHR($46,-1.0));
 $48 = ((($22)) + 24|0);
 HEAPF64[$48>>3] = $47;
 $49 = ((($22)) + 16|0);
 HEAPF64[$49>>3] = $47;
 $50 = ((($22)) + 8|0);
 HEAPF64[$50>>3] = $47;
 HEAPF64[$22>>3] = $47;
 $51 = $18;
 $52 = $51 & 20480;
 $53 = ($52|0)!=(0);
 $54 = $10;
 if ($53) {
  $62 = $15;
  $63 = $12;
  $64 = $14;
  $65 = $18;
  $66 = (_cmsCreateExtendedTransform($54,4,$19,$21,$20,$22,$62,1,$63,$64,$65)|0);
  $9 = $66;
  $67 = $9;
  STACKTOP = sp;return ($67|0);
 } else {
  $55 = $11;
  $56 = $12;
  $57 = $13;
  $58 = $14;
  $59 = $16;
  $60 = $18;
  $61 = (_cmsCreateTransformTHR($54,$55,$56,$57,$58,$59,$60)|0);
  $9 = $61;
  $67 = $9;
  STACKTOP = sp;return ($67|0);
 }
 return (0)|0;
}
function _cmsCreateProofingTransform($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = (_cmsGetProfileContextID($16)|0);
 $18 = $8;
 $19 = $9;
 $20 = $10;
 $21 = $11;
 $22 = $12;
 $23 = $13;
 $24 = $14;
 $25 = $15;
 $26 = (_cmsCreateProofingTransformTHR($17,$18,$19,$20,$21,$22,$23,$24,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function _cmsGetTransformInputFormat($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
 } else {
  $7 = $3;
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _cmsGetTransformOutputFormat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $3 = $4;
 $5 = $3;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
 } else {
  $7 = $3;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $1 = $9;
 }
 $10 = $1;
 STACKTOP = sp;return ($10|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32500|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_85()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_85() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22776|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 379;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $$;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_700()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___pthread_self_700() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 511]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 511]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(29996,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(29996,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 380;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 379;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 288;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 286;
   $38 = HEAP32[(32504)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((32564|0));
 return (32572|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((32564|0));
 return;
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 511]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $28 = ($29|0)==(0);
  if (!($28)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[5786]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[5786]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 511]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 511]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 511]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 511]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out_671($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint_672($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint_672($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((30000 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_674($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 30464;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 30464;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 30464 : (30466);
     $$$ = $238 ? $$ : (30465);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 30464;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 30464;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 30474;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_677($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 30464;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (30464 + ($208)|0);
    $$289 = $or$cond283 ? 30464 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 30464;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_677($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out_671($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_677($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_677($0,32,$$2261,$312,$$6268);
  _out_671($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_677($0,48,$$2261,$312,$314);
  _pad_677($0,48,$$$5,$310,0);
  _out_671($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_677($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg_674($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out_671($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint_672($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg_674($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (30516 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_86()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad_677($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_671($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out_671($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_678($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 30481;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (30482) : (30487);
  $$$ = $16 ? $$ : (30484);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_678($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (30516 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_677($0,32,$2,$104,$4);
    _out_671($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_677($0,48,$2,$104,$105);
    _out_671($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_677($0,48,$106,0,0);
    _out_671($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_677($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_677($0,32,$2,$320,$4);
   _out_671($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_677($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out_671($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out_671($0,30532,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out_671($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_677($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out_671($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out_671($0,30532,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out_671($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_677($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out_671($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_677($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 30500 : 30504;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 30508 : 30512;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_677($0,32,$2,$32,$33);
   _out_671($0,$$0521,$$0520);
   _out_671($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_677($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_678($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_909()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_909() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_86() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (30534 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 30622;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 30622;
  } else {
   $$01214 = 30622;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 511]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 511]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=23148; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function ___fpclassifyl($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___fpclassify($0)|0);
 return ($1|0);
}
function ___fpclassify($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = (_bitshift64Lshr(($1|0),($2|0),52)|0);
 $4 = tempRet0;
 $5 = $3&65535;
 $trunc$clear = $5 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $6 = $2 & 2147483647;
  $7 = ($1|0)!=(0);
  $8 = ($6|0)!=(0);
  $9 = $7 | $8;
  $10 = $9 ? 3 : 2;
  $$0 = $10;
  break;
 }
 case 2047:  {
  $11 = $2 & 1048575;
  $12 = ($1|0)==(0);
  $13 = ($11|0)==(0);
  $14 = $12 & $13;
  $15 = $14&1;
  $$0 = $15;
  break;
 }
 default: {
  $$0 = 4;
 }
 }
 return ($$0|0);
}
function ___fpclassifyf($0) {
 $0 = +$0;
 var $$0 = 0, $$mask = 0, $$mask7 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $not$ = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 23;
 $trunc = $2&255;
 switch ($trunc<<24>>24) {
 case 0:  {
  $$mask = $1 & 2147483647;
  $3 = ($$mask|0)!=(0);
  $4 = $3 ? 3 : 2;
  $$0 = $4;
  break;
 }
 case -1:  {
  $$mask7 = $1 & 8388607;
  $not$ = ($$mask7|0)==(0);
  $5 = $not$&1;
  $$0 = $5;
  break;
 }
 default: {
  $$0 = 4;
 }
 }
 return ($$0|0);
}
function _log10($0) {
 $0 = +$0;
 var $$0 = 0, $$0100 = 0, $$0101 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond105 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1048576);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = $2 & 2147483647;
   $6 = ($1|0)==(0);
   $7 = ($5|0)==(0);
   $8 = $6 & $7;
   if ($8) {
    $9 = $0 * $0;
    $10 = -1.0 / $9;
    $$0101 = $10;
    break;
   }
   if ($4) {
    $11 = $0 - $0;
    $12 = $11 / 0.0;
    $$0101 = $12;
    break;
   } else {
    $13 = $0 * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $13;$14 = HEAP32[tempDoublePtr>>2]|0;
    $15 = HEAP32[tempDoublePtr+4>>2]|0;
    $$0 = -1077;$$0100 = $15;$26 = $14;$71 = $15;
    label = 9;
    break;
   }
  } else {
   $16 = ($2>>>0)>(2146435071);
   if ($16) {
    $$0101 = $0;
   } else {
    $17 = ($2|0)==(1072693248);
    $18 = ($1|0)==(0);
    $19 = (0)==(0);
    $20 = $18 & $19;
    $or$cond105 = $20 & $17;
    if ($or$cond105) {
     $$0101 = 0.0;
    } else {
     $$0 = -1023;$$0100 = $2;$26 = $1;$71 = $2;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $21 = (($$0100) + 614242)|0;
  $22 = $21 >>> 20;
  $23 = (($$0) + ($22))|0;
  $24 = $21 & 1048575;
  $25 = (($24) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $25;$27 = +HEAPF64[tempDoublePtr>>3];
  $28 = $27 + -1.0;
  $29 = $28 * 0.5;
  $30 = $28 * $29;
  $31 = $28 + 2.0;
  $32 = $28 / $31;
  $33 = $32 * $32;
  $34 = $33 * $33;
  $35 = $34 * 0.15313837699209373;
  $36 = $35 + 0.22222198432149784;
  $37 = $34 * $36;
  $38 = $37 + 0.39999999999409419;
  $39 = $34 * $38;
  $40 = $34 * 0.14798198605116586;
  $41 = $40 + 0.1818357216161805;
  $42 = $34 * $41;
  $43 = $42 + 0.28571428743662391;
  $44 = $34 * $43;
  $45 = $44 + 0.66666666666667351;
  $46 = $33 * $45;
  $47 = $39 + $46;
  $48 = $28 - $30;
  HEAPF64[tempDoublePtr>>3] = $48;$49 = HEAP32[tempDoublePtr>>2]|0;
  $50 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $50;$51 = +HEAPF64[tempDoublePtr>>3];
  $52 = $28 - $51;
  $53 = $52 - $30;
  $54 = $30 + $47;
  $55 = $32 * $54;
  $56 = $53 + $55;
  $57 = $51 * 0.43429448187816888;
  $58 = (+($23|0));
  $59 = $58 * 0.30102999566361177;
  $60 = $58 * 3.6942390771589308E-13;
  $61 = $51 + $56;
  $62 = $61 * 2.5082946711645275E-11;
  $63 = $60 + $62;
  $64 = $56 * 0.43429448187816888;
  $65 = $64 + $63;
  $66 = $59 + $57;
  $67 = $59 - $66;
  $68 = $57 + $67;
  $69 = $68 + $65;
  $70 = $66 + $69;
  $$0101 = $70;
 }
 return (+$$0101);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19;
 $21 = (($17) - ($20))|0;
 $22 = ($21|0)>(0);
 $23 = ($21>>>0)<($4>>>0);
 $$57 = $23 ? $21 : $4;
 if ($22) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($19|0),($$57|0))|0;
  $26 = (($19) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 511]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $35 = ($36|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($36|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _remove($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall10(10,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-21);
 if ($3) {
  HEAP32[$vararg_buffer1>>2] = $1;
  $4 = (___syscall40(40,($vararg_buffer1|0))|0);
  $$0 = $4;
 } else {
  $$0 = $2;
 }
 $5 = (___syscall_ret($$0)|0);
 STACKTOP = sp;return ($5|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 511]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[8144]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (32616 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[8144] = $24;
     } else {
      $25 = HEAP32[(32592)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(32584)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (32616 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[8144] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(32592)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(32596)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (32616 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[8144] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(32592)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(32584)>>2] = $84;
     HEAP32[(32596)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(32580)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (32880 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $not$5$i = ($140|0)==(0|0);
     $$sink16$i = $not$5$i&1;
     $141 = (((($134)) + 16|0) + ($$sink16$i<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(0|0);
     if ($143) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;$$01937$i = $138;$145 = $142;
      while(1) {
       $144 = ((($145)) + 4|0);
       $146 = HEAP32[$144>>2]|0;
       $147 = $146 & -8;
       $148 = (($147) - ($6))|0;
       $149 = ($148>>>0)<($$01937$i>>>0);
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = ((($145)) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $not$$i = ($151|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $152 = (((($145)) + 16|0) + ($$sink1$i<<2)|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;$$01937$i = $$$0193$i;$145 = $153;
       }
      }
     }
     $155 = HEAP32[(32592)>>2]|0;
     $156 = ($$0192$lcssa$i>>>0)<($155>>>0);
     if ($156) {
      _abort();
      // unreachable;
     }
     $157 = (($$0192$lcssa$i) + ($6)|0);
     $158 = ($$0192$lcssa$i>>>0)<($157>>>0);
     if (!($158)) {
      _abort();
      // unreachable;
     }
     $159 = ((($$0192$lcssa$i)) + 24|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$0192$lcssa$i)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==($$0192$lcssa$i|0);
     do {
      if ($163) {
       $173 = ((($$0192$lcssa$i)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = ((($$0192$lcssa$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;$$1198$i = $176;
        }
       } else {
        $$1196$i = $174;$$1198$i = $173;
       }
       while(1) {
        $179 = ((($$1196$i)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $$1196$i = $180;$$1198$i = $179;
         continue;
        }
        $182 = ((($$1196$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;$$1198$i = $182;
        }
       }
       $185 = ($$1198$i>>>0)<($155>>>0);
       if ($185) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = ((($$0192$lcssa$i)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165>>>0)<($155>>>0);
       if ($166) {
        _abort();
        // unreachable;
       }
       $167 = ((($165)) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==($$0192$lcssa$i|0);
       if (!($169)) {
        _abort();
        // unreachable;
       }
       $170 = ((($162)) + 8|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==($$0192$lcssa$i|0);
       if ($172) {
        HEAP32[$167>>2] = $162;
        HEAP32[$170>>2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $186 = ($160|0)==(0|0);
     L73: do {
      if (!($186)) {
       $187 = ((($$0192$lcssa$i)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (32880 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($$0192$lcssa$i|0)==($190|0);
       do {
        if ($191) {
         HEAP32[$189>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[(32580)>>2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[(32592)>>2]|0;
         $196 = ($160>>>0)<($195>>>0);
         if ($196) {
          _abort();
          // unreachable;
         } else {
          $197 = ((($160)) + 16|0);
          $198 = HEAP32[$197>>2]|0;
          $not$1$i = ($198|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $not$1$i&1;
          $199 = (((($160)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$199>>2] = $$3$i;
          $200 = ($$3$i|0)==(0|0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $201 = HEAP32[(32592)>>2]|0;
       $202 = ($$3$i>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       }
       $203 = ((($$3$i)) + 24|0);
       HEAP32[$203>>2] = $160;
       $204 = ((($$0192$lcssa$i)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==(0|0);
       do {
        if (!($206)) {
         $207 = ($205>>>0)<($201>>>0);
         if ($207) {
          _abort();
          // unreachable;
         } else {
          $208 = ((($$3$i)) + 16|0);
          HEAP32[$208>>2] = $205;
          $209 = ((($205)) + 24|0);
          HEAP32[$209>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $210 = ((($$0192$lcssa$i)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)==(0|0);
       if (!($212)) {
        $213 = HEAP32[(32592)>>2]|0;
        $214 = ($211>>>0)<($213>>>0);
        if ($214) {
         _abort();
         // unreachable;
        } else {
         $215 = ((($$3$i)) + 20|0);
         HEAP32[$215>>2] = $211;
         $216 = ((($211)) + 24|0);
         HEAP32[$216>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $217 = ($$0193$lcssa$i>>>0)<(16);
     if ($217) {
      $218 = (($$0193$lcssa$i) + ($6))|0;
      $219 = $218 | 3;
      $220 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$220>>2] = $219;
      $221 = (($$0192$lcssa$i) + ($218)|0);
      $222 = ((($221)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 | 1;
      HEAP32[$222>>2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$226>>2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = ((($157)) + 4|0);
      HEAP32[$228>>2] = $227;
      $229 = (($157) + ($$0193$lcssa$i)|0);
      HEAP32[$229>>2] = $$0193$lcssa$i;
      $230 = ($37|0)==(0);
      if (!($230)) {
       $231 = HEAP32[(32596)>>2]|0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = (32616 + ($233<<2)|0);
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = $8 | $235;
        HEAP32[8144] = $238;
        $$pre$i = ((($234)) + 8|0);
        $$0189$i = $234;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = ((($234)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = HEAP32[(32592)>>2]|0;
        $242 = ($240>>>0)<($241>>>0);
        if ($242) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $240;$$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $231;
       $243 = ((($$0189$i)) + 12|0);
       HEAP32[$243>>2] = $231;
       $244 = ((($231)) + 8|0);
       HEAP32[$244>>2] = $$0189$i;
       $245 = ((($231)) + 12|0);
       HEAP32[$245>>2] = $234;
      }
      HEAP32[(32584)>>2] = $$0193$lcssa$i;
      HEAP32[(32596)>>2] = $157;
     }
     $246 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $246;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = ($0>>>0)>(4294967231);
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = (($0) + 11)|0;
    $249 = $248 & -8;
    $250 = HEAP32[(32580)>>2]|0;
    $251 = ($250|0)==(0);
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = (0 - ($249))|0;
     $253 = $248 >>> 8;
     $254 = ($253|0)==(0);
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = ($249>>>0)>(16777215);
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = (($253) + 1048320)|0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = (($259) + 520192)|0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = (($264) + 245760)|0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = (14 - ($268))|0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = (($269) + ($271))|0;
       $273 = $272 << 1;
       $274 = (($272) + 7)|0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = (32880 + ($$0358$i<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(0|0);
     L117: do {
      if ($280) {
       $$2355$i = 0;$$3$i201 = 0;$$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i|0)==(31);
       $282 = $$0358$i >>> 1;
       $283 = (25 - ($282))|0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;$$0347$i = $252;$$0353$i = $279;$$0359$i = $285;$$0362$i = 0;
       while(1) {
        $286 = ((($$0353$i)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $287 & -8;
        $289 = (($288) - ($249))|0;
        $290 = ($289>>>0)<($$0347$i>>>0);
        if ($290) {
         $291 = ($289|0)==(0);
         if ($291) {
          $$415$i = $$0353$i;$$435114$i = 0;$$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $292 = ((($$0353$i)) + 20|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $$0359$i >>> 31;
        $295 = (((($$0353$i)) + 16|0) + ($294<<2)|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($293|0)==(0|0);
        $298 = ($293|0)==($296|0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296|0)==(0|0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i&1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;$$3$i201 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $296;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $301 = ($$2355$i|0)==(0|0);
      $302 = ($$3$i201|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (32880 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;$$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i|0)==(0|0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;$$435114$i = $$3350$i;$$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $334 = ((($$435713$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($249))|0;
       $338 = ($337>>>0)<($$435114$i>>>0);
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = ((($$435713$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $not$1$i203 = ($340|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $341 = (((($$435713$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($342|0)==(0|0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;$$435114$i = $$$4351$i;$$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i|0)==(0|0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[(32584)>>2]|0;
      $346 = (($345) - ($249))|0;
      $347 = ($$4351$lcssa$i>>>0)<($346>>>0);
      if ($347) {
       $348 = HEAP32[(32592)>>2]|0;
       $349 = ($$4$lcssa$i>>>0)<($348>>>0);
       if ($349) {
        _abort();
        // unreachable;
       }
       $350 = (($$4$lcssa$i) + ($249)|0);
       $351 = ($$4$lcssa$i>>>0)<($350>>>0);
       if (!($351)) {
        _abort();
        // unreachable;
       }
       $352 = ((($$4$lcssa$i)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($$4$lcssa$i)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==($$4$lcssa$i|0);
       do {
        if ($356) {
         $366 = ((($$4$lcssa$i)) + 20|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = ($367|0)==(0|0);
         if ($368) {
          $369 = ((($$4$lcssa$i)) + 16|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = ($370|0)==(0|0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;$$1374$i = $369;
          }
         } else {
          $$1370$i = $367;$$1374$i = $366;
         }
         while(1) {
          $372 = ((($$1370$i)) + 20|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($373|0)==(0|0);
          if (!($374)) {
           $$1370$i = $373;$$1374$i = $372;
           continue;
          }
          $375 = ((($$1370$i)) + 16|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = ($376|0)==(0|0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;$$1374$i = $375;
          }
         }
         $378 = ($$1374$i>>>0)<($348>>>0);
         if ($378) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = ((($$4$lcssa$i)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358>>>0)<($348>>>0);
         if ($359) {
          _abort();
          // unreachable;
         }
         $360 = ((($358)) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = ($361|0)==($$4$lcssa$i|0);
         if (!($362)) {
          _abort();
          // unreachable;
         }
         $363 = ((($355)) + 8|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==($$4$lcssa$i|0);
         if ($365) {
          HEAP32[$360>>2] = $355;
          HEAP32[$363>>2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $379 = ($353|0)==(0|0);
       L164: do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = ((($$4$lcssa$i)) + 28|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = (32880 + ($381<<2)|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($$4$lcssa$i|0)==($383|0);
         do {
          if ($384) {
           HEAP32[$382>>2] = $$3372$i;
           $cond$i208 = ($$3372$i|0)==(0|0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[(32580)>>2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[(32592)>>2]|0;
           $389 = ($353>>>0)<($388>>>0);
           if ($389) {
            _abort();
            // unreachable;
           } else {
            $390 = ((($353)) + 16|0);
            $391 = HEAP32[$390>>2]|0;
            $not$$i209 = ($391|0)!=($$4$lcssa$i|0);
            $$sink3$i = $not$$i209&1;
            $392 = (((($353)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$392>>2] = $$3372$i;
            $393 = ($$3372$i|0)==(0|0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $394 = HEAP32[(32592)>>2]|0;
         $395 = ($$3372$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3372$i)) + 24|0);
         HEAP32[$396>>2] = $353;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3372$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[(32592)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3372$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4351$lcssa$i) + ($249))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = ((($350)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($350) + ($$4351$lcssa$i)|0);
         HEAP32[$422>>2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = ($$4351$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (32616 + ($425<<2)|0);
          $427 = HEAP32[8144]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[8144] = $431;
           $$pre$i210 = ((($426)) + 8|0);
           $$0368$i = $426;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(32592)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $433;$$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $350;
          $436 = ((($$0368$i)) + 12|0);
          HEAP32[$436>>2] = $350;
          $437 = ((($350)) + 8|0);
          HEAP32[$437>>2] = $$0368$i;
          $438 = ((($350)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = (32880 + ($$0361$i<<2)|0);
         $465 = ((($350)) + 28|0);
         HEAP32[$465>>2] = $$0361$i;
         $466 = ((($350)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(32580)>>2] = $472;
          HEAP32[$464>>2] = $350;
          $473 = ((($350)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($350)) + 12|0);
          HEAP32[$474>>2] = $350;
          $475 = ((($350)) + 8|0);
          HEAP32[$475>>2] = $350;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0361$i|0)==(31);
         $478 = $$0361$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;$$0345$i = $476;
         while(1) {
          $482 = ((($$0345$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4351$lcssa$i|0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = (((($$0345$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;$$0345$i = $489;
          }
         }
         if ((label|0) == 136) {
          $491 = HEAP32[(32592)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $350;
           $493 = ((($350)) + 24|0);
           HEAP32[$493>>2] = $$0345$i;
           $494 = ((($350)) + 12|0);
           HEAP32[$494>>2] = $350;
           $495 = ((($350)) + 8|0);
           HEAP32[$495>>2] = $350;
           break;
          }
         }
         else if ((label|0) == 139) {
          $496 = ((($$0345$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(32592)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$9$i = ($$0345$i>>>0)>=($498>>>0);
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $350;
           HEAP32[$496>>2] = $350;
           $502 = ((($350)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($350)) + 12|0);
           HEAP32[$503>>2] = $$0345$i;
           $504 = ((($350)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(32584)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(32596)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(32596)>>2] = $511;
   HEAP32[(32584)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(32584)>>2] = 0;
   HEAP32[(32596)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(32588)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(32588)>>2] = $526;
  $527 = HEAP32[(32600)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(32600)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[8262]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(33056)>>2] = 4096;
  HEAP32[(33052)>>2] = 4096;
  HEAP32[(33060)>>2] = -1;
  HEAP32[(33064)>>2] = -1;
  HEAP32[(33068)>>2] = 0;
  HEAP32[(33020)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[8262] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[(33056)>>2]|0;
  $542 = $$pre$i212;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(33016)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(33008)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(33020)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L244: do {
  if ($554) {
   $555 = HEAP32[(32600)>>2]|0;
   $556 = ($555|0)==(0|0);
   L246: do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = (33024);
     while(1) {
      $557 = HEAP32[$$0$i$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;$$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[(33052)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(33008)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[(33016)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723948$i = $$$i;$$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $610 = ($$2247$ph$i|0)==((-1)|0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[(33056)>>2]|0;
     $602 = (($540) - ($$2253$ph$i))|0;
     $603 = (($602) + ($601))|0;
     $604 = (0 - ($601))|0;
     $605 = $603 & $604;
     $606 = ($605>>>0)<(2147483647);
     if (!($606)) {
      $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = (_sbrk(($605|0))|0);
     $608 = ($607|0)==((-1)|0);
     if ($608) {
      (_sbrk(($597|0))|0);
      $$2234253237$i = 0;
      break;
     } else {
      $609 = (($605) + ($$2253$ph$i))|0;
      $$723948$i = $609;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $611 = HEAP32[(33020)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(33020)>>2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = (($619) - ($620))|0;
   $622 = (($$0197) + 40)|0;
   $623 = ($621>>>0)>($622>>>0);
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614|0)==((-1)|0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!($or$cond50$i)) {
    $$723948$i = $$$4236$i;$$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $626 = HEAP32[(33008)>>2]|0;
  $627 = (($626) + ($$723948$i))|0;
  HEAP32[(33008)>>2] = $627;
  $628 = HEAP32[(33012)>>2]|0;
  $629 = ($627>>>0)>($628>>>0);
  if ($629) {
   HEAP32[(33012)>>2] = $627;
  }
  $630 = HEAP32[(32600)>>2]|0;
  $631 = ($630|0)==(0|0);
  do {
   if ($631) {
    $632 = HEAP32[(32592)>>2]|0;
    $633 = ($632|0)==(0|0);
    $634 = ($$749$i>>>0)<($632>>>0);
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[(32592)>>2] = $$749$i;
    }
    HEAP32[(33024)>>2] = $$749$i;
    HEAP32[(33028)>>2] = $$723948$i;
    HEAP32[(33036)>>2] = 0;
    $635 = HEAP32[8262]|0;
    HEAP32[(32612)>>2] = $635;
    HEAP32[(32608)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $636 = $$01$i$i << 1;
     $637 = (32616 + ($636<<2)|0);
     $638 = ((($637)) + 12|0);
     HEAP32[$638>>2] = $637;
     $639 = ((($637)) + 8|0);
     HEAP32[$639>>2] = $637;
     $640 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($640|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = (($$723948$i) + -40)|0;
    $642 = ((($$749$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$749$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(32600)>>2] = $649;
    HEAP32[(32588)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($649) + ($650)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(33064)>>2]|0;
    HEAP32[(32604)>>2] = $655;
   } else {
    $$024371$i = (33024);
    while(1) {
     $656 = HEAP32[$$024371$i>>2]|0;
     $657 = ((($$024371$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$749$i|0)==($659|0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = ((($$024371$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label|0) == 190) {
     $664 = ((($$024371$i)) + 12|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = $665 & 8;
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = ($630>>>0)>=($656>>>0);
      $669 = ($630>>>0)<($$749$i>>>0);
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = (($658) + ($$723948$i))|0;
       HEAP32[$657>>2] = $670;
       $671 = HEAP32[(32588)>>2]|0;
       $672 = ((($630)) + 8|0);
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674|0)==(0);
       $676 = (0 - ($673))|0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = (($630) + ($678)|0);
       $680 = (($$723948$i) - ($678))|0;
       $681 = (($671) + ($680))|0;
       HEAP32[(32600)>>2] = $679;
       HEAP32[(32588)>>2] = $681;
       $682 = $681 | 1;
       $683 = ((($679)) + 4|0);
       HEAP32[$683>>2] = $682;
       $684 = (($679) + ($681)|0);
       $685 = ((($684)) + 4|0);
       HEAP32[$685>>2] = 40;
       $686 = HEAP32[(33064)>>2]|0;
       HEAP32[(32604)>>2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[(32592)>>2]|0;
    $688 = ($$749$i>>>0)<($687>>>0);
    if ($688) {
     HEAP32[(32592)>>2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = (($$749$i) + ($$723948$i)|0);
    $$124470$i = (33024);
    while(1) {
     $690 = HEAP32[$$124470$i>>2]|0;
     $691 = ($690|0)==($689|0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = ((($$124470$i)) + 8|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(0|0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label|0) == 198) {
     $695 = ((($$124470$i)) + 12|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 & 8;
     $698 = ($697|0)==(0);
     if ($698) {
      HEAP32[$$124470$i>>2] = $$749$i;
      $699 = ((($$124470$i)) + 4|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($700) + ($$723948$i))|0;
      HEAP32[$699>>2] = $701;
      $702 = ((($$749$i)) + 8|0);
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704|0)==(0);
      $706 = (0 - ($703))|0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = (($$749$i) + ($708)|0);
      $710 = ((($689)) + 8|0);
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712|0)==(0);
      $714 = (0 - ($711))|0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = (($689) + ($716)|0);
      $718 = $717;
      $719 = $709;
      $720 = (($718) - ($719))|0;
      $721 = (($709) + ($$0197)|0);
      $722 = (($720) - ($$0197))|0;
      $723 = $$0197 | 3;
      $724 = ((($709)) + 4|0);
      HEAP32[$724>>2] = $723;
      $725 = ($717|0)==($630|0);
      do {
       if ($725) {
        $726 = HEAP32[(32588)>>2]|0;
        $727 = (($726) + ($722))|0;
        HEAP32[(32588)>>2] = $727;
        HEAP32[(32600)>>2] = $721;
        $728 = $727 | 1;
        $729 = ((($721)) + 4|0);
        HEAP32[$729>>2] = $728;
       } else {
        $730 = HEAP32[(32596)>>2]|0;
        $731 = ($717|0)==($730|0);
        if ($731) {
         $732 = HEAP32[(32584)>>2]|0;
         $733 = (($732) + ($722))|0;
         HEAP32[(32584)>>2] = $733;
         HEAP32[(32596)>>2] = $721;
         $734 = $733 | 1;
         $735 = ((($721)) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = (($721) + ($733)|0);
         HEAP32[$736>>2] = $733;
         break;
        }
        $737 = ((($717)) + 4|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = $738 & 3;
        $740 = ($739|0)==(1);
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = ($738>>>0)<(256);
         L314: do {
          if ($743) {
           $744 = ((($717)) + 8|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ((($717)) + 12|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = $742 << 1;
           $749 = (32616 + ($748<<2)|0);
           $750 = ($745|0)==($749|0);
           do {
            if (!($750)) {
             $751 = ($745>>>0)<($752>>>0);
             if ($751) {
              _abort();
              // unreachable;
             }
             $753 = ((($745)) + 12|0);
             $754 = HEAP32[$753>>2]|0;
             $755 = ($754|0)==($717|0);
             if ($755) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $756 = ($747|0)==($745|0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[8144]|0;
            $760 = $759 & $758;
            HEAP32[8144] = $760;
            break;
           }
           $761 = ($747|0)==($749|0);
           do {
            if ($761) {
             $$pre10$i$i = ((($747)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = ($747>>>0)<($752>>>0);
             if ($762) {
              _abort();
              // unreachable;
             }
             $763 = ((($747)) + 8|0);
             $764 = HEAP32[$763>>2]|0;
             $765 = ($764|0)==($717|0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $766 = ((($745)) + 12|0);
           HEAP32[$766>>2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $745;
          } else {
           $767 = ((($717)) + 24|0);
           $768 = HEAP32[$767>>2]|0;
           $769 = ((($717)) + 12|0);
           $770 = HEAP32[$769>>2]|0;
           $771 = ($770|0)==($717|0);
           do {
            if ($771) {
             $781 = ((($717)) + 16|0);
             $782 = ((($781)) + 4|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==(0|0);
             if ($784) {
              $785 = HEAP32[$781>>2]|0;
              $786 = ($785|0)==(0|0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;$$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;$$1293$i$i = $782;
             }
             while(1) {
              $787 = ((($$1291$i$i)) + 20|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if (!($789)) {
               $$1291$i$i = $788;$$1293$i$i = $787;
               continue;
              }
              $790 = ((($$1291$i$i)) + 16|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;$$1293$i$i = $790;
              }
             }
             $793 = ($$1293$i$i>>>0)<($752>>>0);
             if ($793) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = ((($717)) + 8|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773>>>0)<($752>>>0);
             if ($774) {
              _abort();
              // unreachable;
             }
             $775 = ((($773)) + 12|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($717|0);
             if (!($777)) {
              _abort();
              // unreachable;
             }
             $778 = ((($770)) + 8|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($717|0);
             if ($780) {
              HEAP32[$775>>2] = $770;
              HEAP32[$778>>2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $794 = ($768|0)==(0|0);
           if ($794) {
            break;
           }
           $795 = ((($717)) + 28|0);
           $796 = HEAP32[$795>>2]|0;
           $797 = (32880 + ($796<<2)|0);
           $798 = HEAP32[$797>>2]|0;
           $799 = ($717|0)==($798|0);
           do {
            if ($799) {
             HEAP32[$797>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[(32580)>>2]|0;
             $803 = $802 & $801;
             HEAP32[(32580)>>2] = $803;
             break L314;
            } else {
             $804 = HEAP32[(32592)>>2]|0;
             $805 = ($768>>>0)<($804>>>0);
             if ($805) {
              _abort();
              // unreachable;
             } else {
              $806 = ((($768)) + 16|0);
              $807 = HEAP32[$806>>2]|0;
              $not$$i17$i = ($807|0)!=($717|0);
              $$sink1$i$i = $not$$i17$i&1;
              $808 = (((($768)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$808>>2] = $$3$i$i;
              $809 = ($$3$i$i|0)==(0|0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $810 = HEAP32[(32592)>>2]|0;
           $811 = ($$3$i$i>>>0)<($810>>>0);
           if ($811) {
            _abort();
            // unreachable;
           }
           $812 = ((($$3$i$i)) + 24|0);
           HEAP32[$812>>2] = $768;
           $813 = ((($717)) + 16|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ($814|0)==(0|0);
           do {
            if (!($815)) {
             $816 = ($814>>>0)<($810>>>0);
             if ($816) {
              _abort();
              // unreachable;
             } else {
              $817 = ((($$3$i$i)) + 16|0);
              HEAP32[$817>>2] = $814;
              $818 = ((($814)) + 24|0);
              HEAP32[$818>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $819 = ((($813)) + 4|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           if ($821) {
            break;
           }
           $822 = HEAP32[(32592)>>2]|0;
           $823 = ($820>>>0)<($822>>>0);
           if ($823) {
            _abort();
            // unreachable;
           } else {
            $824 = ((($$3$i$i)) + 20|0);
            HEAP32[$824>>2] = $820;
            $825 = ((($820)) + 24|0);
            HEAP32[$825>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $826 = (($717) + ($741)|0);
         $827 = (($741) + ($722))|0;
         $$0$i18$i = $826;$$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;$$0287$i$i = $722;
        }
        $828 = ((($$0$i18$i)) + 4|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = $829 & -2;
        HEAP32[$828>>2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = ((($721)) + 4|0);
        HEAP32[$832>>2] = $831;
        $833 = (($721) + ($$0287$i$i)|0);
        HEAP32[$833>>2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = ($$0287$i$i>>>0)<(256);
        if ($835) {
         $836 = $834 << 1;
         $837 = (32616 + ($836<<2)|0);
         $838 = HEAP32[8144]|0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840|0)==(0);
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[8144] = $842;
           $$pre$i19$i = ((($837)) + 8|0);
           $$0295$i$i = $837;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = ((($837)) + 8|0);
           $844 = HEAP32[$843>>2]|0;
           $845 = HEAP32[(32592)>>2]|0;
           $846 = ($844>>>0)<($845>>>0);
           if (!($846)) {
            $$0295$i$i = $844;$$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $721;
         $847 = ((($$0295$i$i)) + 12|0);
         HEAP32[$847>>2] = $721;
         $848 = ((($721)) + 8|0);
         HEAP32[$848>>2] = $$0295$i$i;
         $849 = ((($721)) + 12|0);
         HEAP32[$849>>2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850|0)==(0);
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = ($$0287$i$i>>>0)>(16777215);
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = (($850) + 1048320)|0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = (($856) + 520192)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = (($861) + 245760)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = (14 - ($865))|0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = (($866) + ($868))|0;
          $870 = $869 << 1;
          $871 = (($869) + 7)|0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while(0);
        $875 = (32880 + ($$0296$i$i<<2)|0);
        $876 = ((($721)) + 28|0);
        HEAP32[$876>>2] = $$0296$i$i;
        $877 = ((($721)) + 16|0);
        $878 = ((($877)) + 4|0);
        HEAP32[$878>>2] = 0;
        HEAP32[$877>>2] = 0;
        $879 = HEAP32[(32580)>>2]|0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881|0)==(0);
        if ($882) {
         $883 = $879 | $880;
         HEAP32[(32580)>>2] = $883;
         HEAP32[$875>>2] = $721;
         $884 = ((($721)) + 24|0);
         HEAP32[$884>>2] = $875;
         $885 = ((($721)) + 12|0);
         HEAP32[$885>>2] = $721;
         $886 = ((($721)) + 8|0);
         HEAP32[$886>>2] = $721;
         break;
        }
        $887 = HEAP32[$875>>2]|0;
        $888 = ($$0296$i$i|0)==(31);
        $889 = $$0296$i$i >>> 1;
        $890 = (25 - ($889))|0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;$$0289$i$i = $887;
        while(1) {
         $893 = ((($$0289$i$i)) + 4|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 & -8;
         $896 = ($895|0)==($$0287$i$i|0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = (((($$0289$i$i)) + 16|0) + ($897<<2)|0);
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898>>2]|0;
         $901 = ($900|0)==(0|0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;$$0289$i$i = $900;
         }
        }
        if ((label|0) == 262) {
         $902 = HEAP32[(32592)>>2]|0;
         $903 = ($898>>>0)<($902>>>0);
         if ($903) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$898>>2] = $721;
          $904 = ((($721)) + 24|0);
          HEAP32[$904>>2] = $$0289$i$i;
          $905 = ((($721)) + 12|0);
          HEAP32[$905>>2] = $721;
          $906 = ((($721)) + 8|0);
          HEAP32[$906>>2] = $721;
          break;
         }
        }
        else if ((label|0) == 265) {
         $907 = ((($$0289$i$i)) + 8|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = HEAP32[(32592)>>2]|0;
         $910 = ($908>>>0)>=($909>>>0);
         $not$7$i$i = ($$0289$i$i>>>0)>=($909>>>0);
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = ((($908)) + 12|0);
          HEAP32[$912>>2] = $721;
          HEAP32[$907>>2] = $721;
          $913 = ((($721)) + 8|0);
          HEAP32[$913>>2] = $908;
          $914 = ((($721)) + 12|0);
          HEAP32[$914>>2] = $$0289$i$i;
          $915 = ((($721)) + 24|0);
          HEAP32[$915>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1047 = ((($709)) + 8|0);
      $$0 = $1047;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (33024);
    while(1) {
     $916 = HEAP32[$$0$i$i$i>>2]|0;
     $917 = ($916>>>0)>($630>>>0);
     if (!($917)) {
      $918 = ((($$0$i$i$i)) + 4|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($916) + ($919)|0);
      $921 = ($920>>>0)>($630>>>0);
      if ($921) {
       break;
      }
     }
     $922 = ((($$0$i$i$i)) + 8|0);
     $923 = HEAP32[$922>>2]|0;
     $$0$i$i$i = $923;
    }
    $924 = ((($920)) + -47|0);
    $925 = ((($924)) + 8|0);
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927|0)==(0);
    $929 = (0 - ($926))|0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = (($924) + ($931)|0);
    $933 = ((($630)) + 16|0);
    $934 = ($932>>>0)<($933>>>0);
    $935 = $934 ? $630 : $932;
    $936 = ((($935)) + 8|0);
    $937 = ((($935)) + 24|0);
    $938 = (($$723948$i) + -40)|0;
    $939 = ((($$749$i)) + 8|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    $943 = (0 - ($940))|0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = (($$749$i) + ($945)|0);
    $947 = (($938) - ($945))|0;
    HEAP32[(32600)>>2] = $946;
    HEAP32[(32588)>>2] = $947;
    $948 = $947 | 1;
    $949 = ((($946)) + 4|0);
    HEAP32[$949>>2] = $948;
    $950 = (($946) + ($947)|0);
    $951 = ((($950)) + 4|0);
    HEAP32[$951>>2] = 40;
    $952 = HEAP32[(33064)>>2]|0;
    HEAP32[(32604)>>2] = $952;
    $953 = ((($935)) + 4|0);
    HEAP32[$953>>2] = 27;
    ;HEAP32[$936>>2]=HEAP32[(33024)>>2]|0;HEAP32[$936+4>>2]=HEAP32[(33024)+4>>2]|0;HEAP32[$936+8>>2]=HEAP32[(33024)+8>>2]|0;HEAP32[$936+12>>2]=HEAP32[(33024)+12>>2]|0;
    HEAP32[(33024)>>2] = $$749$i;
    HEAP32[(33028)>>2] = $$723948$i;
    HEAP32[(33036)>>2] = 0;
    HEAP32[(33032)>>2] = $936;
    $955 = $937;
    while(1) {
     $954 = ((($955)) + 4|0);
     HEAP32[$954>>2] = 7;
     $956 = ((($955)) + 8|0);
     $957 = ($956>>>0)<($920>>>0);
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935|0)==($630|0);
    if (!($958)) {
     $959 = $935;
     $960 = $630;
     $961 = (($959) - ($960))|0;
     $962 = HEAP32[$953>>2]|0;
     $963 = $962 & -2;
     HEAP32[$953>>2] = $963;
     $964 = $961 | 1;
     $965 = ((($630)) + 4|0);
     HEAP32[$965>>2] = $964;
     HEAP32[$935>>2] = $961;
     $966 = $961 >>> 3;
     $967 = ($961>>>0)<(256);
     if ($967) {
      $968 = $966 << 1;
      $969 = (32616 + ($968<<2)|0);
      $970 = HEAP32[8144]|0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972|0)==(0);
      if ($973) {
       $974 = $970 | $971;
       HEAP32[8144] = $974;
       $$pre$i$i = ((($969)) + 8|0);
       $$0211$i$i = $969;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = ((($969)) + 8|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = HEAP32[(32592)>>2]|0;
       $978 = ($976>>>0)<($977>>>0);
       if ($978) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $976;$$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $630;
      $979 = ((($$0211$i$i)) + 12|0);
      HEAP32[$979>>2] = $630;
      $980 = ((($630)) + 8|0);
      HEAP32[$980>>2] = $$0211$i$i;
      $981 = ((($630)) + 12|0);
      HEAP32[$981>>2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982|0)==(0);
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = ($961>>>0)>(16777215);
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = (($982) + 1048320)|0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = (($988) + 520192)|0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = (($993) + 245760)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = (14 - ($997))|0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = (($998) + ($1000))|0;
       $1002 = $1001 << 1;
       $1003 = (($1001) + 7)|0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = (32880 + ($$0212$i$i<<2)|0);
     $1008 = ((($630)) + 28|0);
     HEAP32[$1008>>2] = $$0212$i$i;
     $1009 = ((($630)) + 20|0);
     HEAP32[$1009>>2] = 0;
     HEAP32[$933>>2] = 0;
     $1010 = HEAP32[(32580)>>2]|0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012|0)==(0);
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[(32580)>>2] = $1014;
      HEAP32[$1007>>2] = $630;
      $1015 = ((($630)) + 24|0);
      HEAP32[$1015>>2] = $1007;
      $1016 = ((($630)) + 12|0);
      HEAP32[$1016>>2] = $630;
      $1017 = ((($630)) + 8|0);
      HEAP32[$1017>>2] = $630;
      break;
     }
     $1018 = HEAP32[$1007>>2]|0;
     $1019 = ($$0212$i$i|0)==(31);
     $1020 = $$0212$i$i >>> 1;
     $1021 = (25 - ($1020))|0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;$$0207$i$i = $1018;
     while(1) {
      $1024 = ((($$0207$i$i)) + 4|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $1025 & -8;
      $1027 = ($1026|0)==($961|0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = (((($$0207$i$i)) + 16|0) + ($1028<<2)|0);
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029>>2]|0;
      $1032 = ($1031|0)==(0|0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;$$0207$i$i = $1031;
      }
     }
     if ((label|0) == 289) {
      $1033 = HEAP32[(32592)>>2]|0;
      $1034 = ($1029>>>0)<($1033>>>0);
      if ($1034) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1029>>2] = $630;
       $1035 = ((($630)) + 24|0);
       HEAP32[$1035>>2] = $$0207$i$i;
       $1036 = ((($630)) + 12|0);
       HEAP32[$1036>>2] = $630;
       $1037 = ((($630)) + 8|0);
       HEAP32[$1037>>2] = $630;
       break;
      }
     }
     else if ((label|0) == 292) {
      $1038 = ((($$0207$i$i)) + 8|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[(32592)>>2]|0;
      $1041 = ($1039>>>0)>=($1040>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1040>>>0);
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = ((($1039)) + 12|0);
       HEAP32[$1043>>2] = $630;
       HEAP32[$1038>>2] = $630;
       $1044 = ((($630)) + 8|0);
       HEAP32[$1044>>2] = $1039;
       $1045 = ((($630)) + 12|0);
       HEAP32[$1045>>2] = $$0207$i$i;
       $1046 = ((($630)) + 24|0);
       HEAP32[$1046>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1048 = HEAP32[(32588)>>2]|0;
  $1049 = ($1048>>>0)>($$0197>>>0);
  if ($1049) {
   $1050 = (($1048) - ($$0197))|0;
   HEAP32[(32588)>>2] = $1050;
   $1051 = HEAP32[(32600)>>2]|0;
   $1052 = (($1051) + ($$0197)|0);
   HEAP32[(32600)>>2] = $1052;
   $1053 = $1050 | 1;
   $1054 = ((($1052)) + 4|0);
   HEAP32[$1054>>2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = ((($1051)) + 4|0);
   HEAP32[$1056>>2] = $1055;
   $1057 = ((($1051)) + 8|0);
   $$0 = $1057;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1058 = (___errno_location()|0);
 HEAP32[$1058>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(32592)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(32596)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $104 = ((($10)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $108 = (($16) + ($17)|0);
    $109 = ((($16)) + 4|0);
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[(32584)>>2] = $17;
    HEAP32[$104>>2] = $111;
    HEAP32[$109>>2] = $110;
    HEAP32[$108>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (32616 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[8144]|0;
     $38 = $37 & $36;
     HEAP32[8144] = $38;
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre444 = ((($26)) + 8|0);
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi445Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($$1390>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (32880 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(32580)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(32580)>>2] = $81;
       $$1 = $16;$$1382 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(32592)>>2]|0;
      $83 = ($46>>>0)<($82>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $not$405 = ($85|0)!=($16|0);
       $$sink3 = $not$405&1;
       $86 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$86>>2] = $$3;
       $87 = ($$3|0)==(0|0);
       if ($87) {
        $$1 = $16;$$1382 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[(32592)>>2]|0;
    $89 = ($$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($$3)) + 24|0);
    HEAP32[$90>>2] = $46;
    $91 = ((($16)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $$1 = $16;$$1382 = $17;$113 = $16;
    } else {
     $100 = HEAP32[(32592)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $$3;
      $$1 = $16;$$1382 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$113 = $2;
  }
 } while(0);
 $112 = ($113>>>0)<($10>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(32600)>>2]|0;
  $121 = ($10|0)==($120|0);
  $122 = HEAP32[(32596)>>2]|0;
  if ($121) {
   $123 = HEAP32[(32588)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(32588)>>2] = $124;
   HEAP32[(32600)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = ($$1|0)==($122|0);
   if (!($127)) {
    return;
   }
   HEAP32[(32596)>>2] = 0;
   HEAP32[(32584)>>2] = 0;
   return;
  }
  $128 = ($10|0)==($122|0);
  if ($128) {
   $129 = HEAP32[(32584)>>2]|0;
   $130 = (($129) + ($$1382))|0;
   HEAP32[(32584)>>2] = $130;
   HEAP32[(32596)>>2] = $113;
   $131 = $130 | 1;
   $132 = ((($$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($113) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = (($134) + ($$1382))|0;
  $136 = $115 >>> 3;
  $137 = ($115>>>0)<(256);
  L108: do {
   if ($137) {
    $138 = ((($10)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($10)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (32616 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(32592)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($10|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[8144]|0;
     $154 = $153 & $152;
     HEAP32[8144] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre442 = ((($141)) + 8|0);
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[(32592)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($10|0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi443Z2D>>2] = $139;
   } else {
    $162 = ((($10)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($10)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($10|0);
    do {
     if ($166) {
      $177 = ((($10)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;$$1402 = $177;
       }
      } else {
       $$1398 = $179;$$1402 = $178;
      }
      while(1) {
       $183 = ((($$1398)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $$1398 = $184;$$1402 = $183;
        continue;
       }
       $186 = ((($$1398)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;$$1402 = $186;
       }
      }
      $189 = HEAP32[(32592)>>2]|0;
      $190 = ($$1402>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = ((($10)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(32592)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($10|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($10|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($10)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (32880 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($10|0)==($195|0);
     do {
      if ($196) {
       HEAP32[$194>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[(32580)>>2]|0;
        $200 = $199 & $198;
        HEAP32[(32580)>>2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[(32592)>>2]|0;
       $202 = ($163>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       } else {
        $203 = ((($163)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $not$ = ($204|0)!=($10|0);
        $$sink5 = $not$&1;
        $205 = (((($163)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$205>>2] = $$3400;
        $206 = ($$3400|0)==(0|0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $207 = HEAP32[(32592)>>2]|0;
     $208 = ($$3400>>>0)<($207>>>0);
     if ($208) {
      _abort();
      // unreachable;
     }
     $209 = ((($$3400)) + 24|0);
     HEAP32[$209>>2] = $163;
     $210 = ((($10)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0|0);
     do {
      if (!($212)) {
       $213 = ($211>>>0)<($207>>>0);
       if ($213) {
        _abort();
        // unreachable;
       } else {
        $214 = ((($$3400)) + 16|0);
        HEAP32[$214>>2] = $211;
        $215 = ((($211)) + 24|0);
        HEAP32[$215>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $216 = ((($210)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[(32592)>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if ($220) {
       _abort();
       // unreachable;
      } else {
       $221 = ((($$3400)) + 20|0);
       HEAP32[$221>>2] = $217;
       $222 = ((($217)) + 24|0);
       HEAP32[$222>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $223 = $135 | 1;
  $224 = ((($$1)) + 4|0);
  HEAP32[$224>>2] = $223;
  $225 = (($113) + ($135)|0);
  HEAP32[$225>>2] = $135;
  $226 = HEAP32[(32596)>>2]|0;
  $227 = ($$1|0)==($226|0);
  if ($227) {
   HEAP32[(32584)>>2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114>>2] = $228;
  $229 = $$1382 | 1;
  $230 = ((($$1)) + 4|0);
  HEAP32[$230>>2] = $229;
  $231 = (($113) + ($$1382)|0);
  HEAP32[$231>>2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = ($$2>>>0)<(256);
 if ($233) {
  $234 = $232 << 1;
  $235 = (32616 + ($234<<2)|0);
  $236 = HEAP32[8144]|0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238|0)==(0);
  if ($239) {
   $240 = $236 | $237;
   HEAP32[8144] = $240;
   $$pre = ((($235)) + 8|0);
   $$0403 = $235;$$pre$phiZ2D = $$pre;
  } else {
   $241 = ((($235)) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = HEAP32[(32592)>>2]|0;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $242;$$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $245 = ((($$0403)) + 12|0);
  HEAP32[$245>>2] = $$1;
  $246 = ((($$1)) + 8|0);
  HEAP32[$246>>2] = $$0403;
  $247 = ((($$1)) + 12|0);
  HEAP32[$247>>2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248|0)==(0);
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = ($$2>>>0)>(16777215);
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = (($248) + 1048320)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = (($254) + 520192)|0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = (($259) + 245760)|0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = (14 - ($263))|0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = (($264) + ($266))|0;
   $268 = $267 << 1;
   $269 = (($267) + 7)|0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = (32880 + ($$0396<<2)|0);
 $274 = ((($$1)) + 28|0);
 HEAP32[$274>>2] = $$0396;
 $275 = ((($$1)) + 16|0);
 $276 = ((($$1)) + 20|0);
 HEAP32[$276>>2] = 0;
 HEAP32[$275>>2] = 0;
 $277 = HEAP32[(32580)>>2]|0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279|0)==(0);
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[(32580)>>2] = $281;
   HEAP32[$273>>2] = $$1;
   $282 = ((($$1)) + 24|0);
   HEAP32[$282>>2] = $273;
   $283 = ((($$1)) + 12|0);
   HEAP32[$283>>2] = $$1;
   $284 = ((($$1)) + 8|0);
   HEAP32[$284>>2] = $$1;
  } else {
   $285 = HEAP32[$273>>2]|0;
   $286 = ($$0396|0)==(31);
   $287 = $$0396 >>> 1;
   $288 = (25 - ($287))|0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;$$0384 = $285;
   while(1) {
    $291 = ((($$0384)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & -8;
    $294 = ($293|0)==($$2|0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = (((($$0384)) + 16|0) + ($295<<2)|0);
    $297 = $$0383 << 1;
    $298 = HEAP32[$296>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;$$0384 = $298;
    }
   }
   if ((label|0) == 121) {
    $300 = HEAP32[(32592)>>2]|0;
    $301 = ($296>>>0)<($300>>>0);
    if ($301) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$296>>2] = $$1;
     $302 = ((($$1)) + 24|0);
     HEAP32[$302>>2] = $$0384;
     $303 = ((($$1)) + 12|0);
     HEAP32[$303>>2] = $$1;
     $304 = ((($$1)) + 8|0);
     HEAP32[$304>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $305 = ((($$0384)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = HEAP32[(32592)>>2]|0;
    $308 = ($306>>>0)>=($307>>>0);
    $not$437 = ($$0384>>>0)>=($307>>>0);
    $309 = $308 & $not$437;
    if ($309) {
     $310 = ((($306)) + 12|0);
     HEAP32[$310>>2] = $$1;
     HEAP32[$305>>2] = $$1;
     $311 = ((($$1)) + 8|0);
     HEAP32[$311>>2] = $306;
     $312 = ((($$1)) + 12|0);
     HEAP32[$312>>2] = $$0384;
     $313 = ((($$1)) + 24|0);
     HEAP32[$313>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $314 = HEAP32[(32608)>>2]|0;
 $315 = (($314) + -1)|0;
 HEAP32[(32608)>>2] = $315;
 $316 = ($315|0)==(0);
 if ($316) {
  $$0212$in$i = (33032);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $317 = ($$0212$i|0)==(0|0);
  $318 = ((($$0212$i)) + 8|0);
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[(32608)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(32592)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(33056)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(32600)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(32588)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(32600)>>2] = $40;
  HEAP32[(32588)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(32596)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(32584)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  $53 = $3 & 1;
  if ($52) {
   $54 = (($0) + ($1)|0);
   $55 = (($54) + ($51)|0);
   $56 = $53 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($54)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$55>>2] = $51;
   $60 = ((($55)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $54;$storemerge1 = $51;
  } else {
   $63 = $53 | $49;
   $64 = $63 | 2;
   HEAP32[$2>>2] = $64;
   $65 = (($0) + ($49)|0);
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 1;
   HEAP32[$66>>2] = $68;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(32584)>>2] = $storemerge1;
  HEAP32[(32596)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $69 = $10 & 2;
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$2 = 0;
  return ($$2|0);
 }
 $71 = $10 & -8;
 $72 = (($71) + ($4))|0;
 $73 = ($72>>>0)<($1>>>0);
 if ($73) {
  $$2 = 0;
  return ($$2|0);
 }
 $74 = (($72) - ($1))|0;
 $75 = $10 >>> 3;
 $76 = ($10>>>0)<(256);
 L49: do {
  if ($76) {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($5)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $75 << 1;
   $82 = (32616 + ($81<<2)|0);
   $83 = ($78|0)==($82|0);
   if (!($83)) {
    $84 = ($78>>>0)<($6>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($78)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==($5|0);
    if (!($87)) {
     _abort();
     // unreachable;
    }
   }
   $88 = ($80|0)==($78|0);
   if ($88) {
    $89 = 1 << $75;
    $90 = $89 ^ -1;
    $91 = HEAP32[8144]|0;
    $92 = $91 & $90;
    HEAP32[8144] = $92;
    break;
   }
   $93 = ($80|0)==($82|0);
   if ($93) {
    $$pre = ((($80)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $94 = ($80>>>0)<($6>>>0);
    if ($94) {
     _abort();
     // unreachable;
    }
    $95 = ((($80)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==($5|0);
    if ($97) {
     $$pre$phiZ2D = $95;
    } else {
     _abort();
     // unreachable;
    }
   }
   $98 = ((($78)) + 12|0);
   HEAP32[$98>>2] = $80;
   HEAP32[$$pre$phiZ2D>>2] = $78;
  } else {
   $99 = ((($5)) + 24|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($5)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==($5|0);
   do {
    if ($103) {
     $113 = ((($5)) + 16|0);
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $117 = HEAP32[$113>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $$3 = 0;
       break;
      } else {
       $$1272 = $117;$$1275 = $113;
      }
     } else {
      $$1272 = $115;$$1275 = $114;
     }
     while(1) {
      $119 = ((($$1272)) + 20|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)==(0|0);
      if (!($121)) {
       $$1272 = $120;$$1275 = $119;
       continue;
      }
      $122 = ((($$1272)) + 16|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(0|0);
      if ($124) {
       break;
      } else {
       $$1272 = $123;$$1275 = $122;
      }
     }
     $125 = ($$1275>>>0)<($6>>>0);
     if ($125) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1275>>2] = 0;
      $$3 = $$1272;
      break;
     }
    } else {
     $104 = ((($5)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105>>>0)<($6>>>0);
     if ($106) {
      _abort();
      // unreachable;
     }
     $107 = ((($105)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==($5|0);
     if (!($109)) {
      _abort();
      // unreachable;
     }
     $110 = ((($102)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==($5|0);
     if ($112) {
      HEAP32[$107>>2] = $102;
      HEAP32[$110>>2] = $105;
      $$3 = $102;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $126 = ($100|0)==(0|0);
   if (!($126)) {
    $127 = ((($5)) + 28|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (32880 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($5|0)==($130|0);
    do {
     if ($131) {
      HEAP32[$129>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $132 = 1 << $128;
       $133 = $132 ^ -1;
       $134 = HEAP32[(32580)>>2]|0;
       $135 = $134 & $133;
       HEAP32[(32580)>>2] = $135;
       break L49;
      }
     } else {
      $136 = HEAP32[(32592)>>2]|0;
      $137 = ($100>>>0)<($136>>>0);
      if ($137) {
       _abort();
       // unreachable;
      } else {
       $138 = ((($100)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $not$ = ($139|0)!=($5|0);
       $$sink1 = $not$&1;
       $140 = (((($100)) + 16|0) + ($$sink1<<2)|0);
       HEAP32[$140>>2] = $$3;
       $141 = ($$3|0)==(0|0);
       if ($141) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $142 = HEAP32[(32592)>>2]|0;
    $143 = ($$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($$3)) + 24|0);
    HEAP32[$144>>2] = $100;
    $145 = ((($5)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(32592)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($74>>>0)<(16);
 $159 = $3 & 1;
 if ($158) {
  $160 = $72 | $159;
  $161 = $160 | 2;
  HEAP32[$2>>2] = $161;
  $162 = (($0) + ($72)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $$2 = $0;
  return ($$2|0);
 } else {
  $166 = (($0) + ($1)|0);
  $167 = $159 | $1;
  $168 = $167 | 2;
  HEAP32[$2>>2] = $168;
  $169 = ((($166)) + 4|0);
  $170 = $74 | 3;
  HEAP32[$169>>2] = $170;
  $171 = (($166) + ($74)|0);
  $172 = ((($171)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 1;
  HEAP32[$172>>2] = $174;
  _dispose_chunk($166,$74);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $$pre25 = 0, $$sink2 = 0;
 var $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond17 = 0, $not$ = 0, $not$1 = 0, $not$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(32592)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(32596)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $100 = ((($2)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$1 = $11;$$1418 = $12;
     break;
    }
    $104 = (($11) + ($12)|0);
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $101 & -2;
    HEAP32[(32584)>>2] = $12;
    HEAP32[$100>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$104>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (32616 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[8144]|0;
     $34 = $33 & $32;
     HEAP32[8144] = $34;
     $$1 = $11;$$1418 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre25 = ((($22)) + 8|0);
     $$pre$phi26Z2D = $$pre25;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi26Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi26Z2D>>2] = $20;
    $$1 = $11;$$1418 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1426 = $59;$$1429 = $55;
      }
     } else {
      $$1426 = $57;$$1429 = $56;
     }
     while(1) {
      $61 = ((($$1426)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1426 = $62;$$1429 = $61;
       continue;
      }
      $64 = ((($$1426)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1426 = $65;$$1429 = $64;
      }
     }
     $67 = ($$1429>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1429>>2] = 0;
      $$3 = $$1426;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1418 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (32880 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(32580)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(32580)>>2] = $77;
       $$1 = $11;$$1418 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(32592)>>2]|0;
      $79 = ($42>>>0)<($78>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $not$1 = ($81|0)!=($11|0);
       $$sink2 = $not$1&1;
       $82 = (((($42)) + 16|0) + ($$sink2<<2)|0);
       HEAP32[$82>>2] = $$3;
       $83 = ($$3|0)==(0|0);
       if ($83) {
        $$1 = $11;$$1418 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $84 = HEAP32[(32592)>>2]|0;
    $85 = ($$3>>>0)<($84>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($$3)) + 24|0);
    HEAP32[$86>>2] = $42;
    $87 = ((($11)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    do {
     if (!($89)) {
      $90 = ($88>>>0)<($84>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = ((($$3)) + 16|0);
       HEAP32[$91>>2] = $88;
       $92 = ((($88)) + 24|0);
       HEAP32[$92>>2] = $$3;
       break;
      }
     }
    } while(0);
    $93 = ((($87)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$1 = $11;$$1418 = $12;
    } else {
     $96 = HEAP32[(32592)>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = ((($$3)) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = ((($94)) + 24|0);
      HEAP32[$99>>2] = $$3;
      $$1 = $11;$$1418 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1418 = $1;
  }
 } while(0);
 $108 = HEAP32[(32592)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(32600)>>2]|0;
  $115 = ($2|0)==($114|0);
  $116 = HEAP32[(32596)>>2]|0;
  if ($115) {
   $117 = HEAP32[(32588)>>2]|0;
   $118 = (($117) + ($$1418))|0;
   HEAP32[(32588)>>2] = $118;
   HEAP32[(32600)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = ($$1|0)==($116|0);
   if (!($121)) {
    return;
   }
   HEAP32[(32596)>>2] = 0;
   HEAP32[(32584)>>2] = 0;
   return;
  }
  $122 = ($2|0)==($116|0);
  if ($122) {
   $123 = HEAP32[(32584)>>2]|0;
   $124 = (($123) + ($$1418))|0;
   HEAP32[(32584)>>2] = $124;
   HEAP32[(32596)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $111 & -8;
  $129 = (($128) + ($$1418))|0;
  $130 = $111 >>> 3;
  $131 = ($111>>>0)<(256);
  L96: do {
   if ($131) {
    $132 = ((($2)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($2)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (32616 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($108>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[8144]|0;
     $147 = $146 & $145;
     HEAP32[8144] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre23 = ((($135)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $149 = ($135>>>0)<($108>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($2|0);
     if ($152) {
      $$pre$phi24Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi24Z2D>>2] = $133;
   } else {
    $154 = ((($2)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($2)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($2|0);
    do {
     if ($158) {
      $168 = ((($2)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $$3435 = 0;
        break;
       } else {
        $$1433 = $172;$$1437 = $168;
       }
      } else {
       $$1433 = $170;$$1437 = $169;
      }
      while(1) {
       $174 = ((($$1433)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $$1433 = $175;$$1437 = $174;
        continue;
       }
       $177 = ((($$1433)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $$1433 = $178;$$1437 = $177;
       }
      }
      $180 = ($$1437>>>0)<($108>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1437>>2] = 0;
       $$3435 = $$1433;
       break;
      }
     } else {
      $159 = ((($2)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($108>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($2|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($2|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $$3435 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($2)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (32880 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($2|0)==($185|0);
     do {
      if ($186) {
       HEAP32[$184>>2] = $$3435;
       $cond17 = ($$3435|0)==(0|0);
       if ($cond17) {
        $187 = 1 << $183;
        $188 = $187 ^ -1;
        $189 = HEAP32[(32580)>>2]|0;
        $190 = $189 & $188;
        HEAP32[(32580)>>2] = $190;
        break L96;
       }
      } else {
       $191 = HEAP32[(32592)>>2]|0;
       $192 = ($155>>>0)<($191>>>0);
       if ($192) {
        _abort();
        // unreachable;
       } else {
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $not$ = ($194|0)!=($2|0);
        $$sink4 = $not$&1;
        $195 = (((($155)) + 16|0) + ($$sink4<<2)|0);
        HEAP32[$195>>2] = $$3435;
        $196 = ($$3435|0)==(0|0);
        if ($196) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while(0);
     $197 = HEAP32[(32592)>>2]|0;
     $198 = ($$3435>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($$3435)) + 24|0);
     HEAP32[$199>>2] = $155;
     $200 = ((($2)) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($$3435)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $$3435;
        break;
       }
      }
     } while(0);
     $206 = ((($200)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(32592)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($$3435)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $$3435;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $129 | 1;
  $214 = ((($$1)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$1) + ($129)|0);
  HEAP32[$215>>2] = $129;
  $216 = HEAP32[(32596)>>2]|0;
  $217 = ($$1|0)==($216|0);
  if ($217) {
   HEAP32[(32584)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $218 = $111 & -2;
  HEAP32[$110>>2] = $218;
  $219 = $$1418 | 1;
  $220 = ((($$1)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$1) + ($$1418)|0);
  HEAP32[$221>>2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 $223 = ($$2>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (32616 + ($224<<2)|0);
  $226 = HEAP32[8144]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[8144] = $230;
   $$pre = ((($225)) + 8|0);
   $$0438 = $225;$$pre$phiZ2D = $$pre;
  } else {
   $231 = ((($225)) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(32592)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$0438 = $232;$$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $235 = ((($$0438)) + 12|0);
  HEAP32[$235>>2] = $$1;
  $236 = ((($$1)) + 8|0);
  HEAP32[$236>>2] = $$0438;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $$0431 = 0;
 } else {
  $240 = ($$2>>>0)>(16777215);
  if ($240) {
   $$0431 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$2 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $$0431 = $262;
  }
 }
 $263 = (32880 + ($$0431<<2)|0);
 $264 = ((($$1)) + 28|0);
 HEAP32[$264>>2] = $$0431;
 $265 = ((($$1)) + 16|0);
 $266 = ((($$1)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(32580)>>2]|0;
 $268 = 1 << $$0431;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(32580)>>2] = $271;
  HEAP32[$263>>2] = $$1;
  $272 = ((($$1)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$1)) + 12|0);
  HEAP32[$273>>2] = $$1;
  $274 = ((($$1)) + 8|0);
  HEAP32[$274>>2] = $$1;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($$0431|0)==(31);
 $277 = $$0431 >>> 1;
 $278 = (25 - ($277))|0;
 $279 = $276 ? 0 : $278;
 $280 = $$2 << $279;
 $$0419 = $280;$$0420 = $275;
 while(1) {
  $281 = ((($$0420)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $282 & -8;
  $284 = ($283|0)==($$2|0);
  if ($284) {
   label = 121;
   break;
  }
  $285 = $$0419 >>> 31;
  $286 = (((($$0420)) + 16|0) + ($285<<2)|0);
  $287 = $$0419 << 1;
  $288 = HEAP32[$286>>2]|0;
  $289 = ($288|0)==(0|0);
  if ($289) {
   label = 118;
   break;
  } else {
   $$0419 = $287;$$0420 = $288;
  }
 }
 if ((label|0) == 118) {
  $290 = HEAP32[(32592)>>2]|0;
  $291 = ($286>>>0)<($290>>>0);
  if ($291) {
   _abort();
   // unreachable;
  }
  HEAP32[$286>>2] = $$1;
  $292 = ((($$1)) + 24|0);
  HEAP32[$292>>2] = $$0420;
  $293 = ((($$1)) + 12|0);
  HEAP32[$293>>2] = $$1;
  $294 = ((($$1)) + 8|0);
  HEAP32[$294>>2] = $$1;
  return;
 }
 else if ((label|0) == 121) {
  $295 = ((($$0420)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[(32592)>>2]|0;
  $298 = ($296>>>0)>=($297>>>0);
  $not$19 = ($$0420>>>0)>=($297>>>0);
  $299 = $298 & $not$19;
  if (!($299)) {
   _abort();
   // unreachable;
  }
  $300 = ((($296)) + 12|0);
  HEAP32[$300>>2] = $$1;
  HEAP32[$295>>2] = $$1;
  $301 = ((($$1)) + 8|0);
  HEAP32[$301>>2] = $296;
  $302 = ((($$1)) + 12|0);
  HEAP32[$302>>2] = $$0420;
  $303 = ((($$1)) + 24|0);
  HEAP32[$303>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&0](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_diid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return +FUNCTION_TABLE_diid[index&63](a1|0,a2|0,+a3);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_idi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  return FUNCTION_TABLE_idi[index&511](+a1,a2|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&511](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&0](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2);
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_diid(6);return +0;
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7);
}
function b8(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(8);return 0;
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(9);return 0;
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10);
}
function b11(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(11);return 0;
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(12);return 0;
}
function b13(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(13);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_DefaultICCintents,_BlackPreservingKOnlyIntents,_BlackPreservingKPlaneIntents,b0
,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,__cmsReallocDefaultFn,__cmsCallocDefaultFn,__cmsDupDefaultFn,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,_Type_Chromaticity_Dup,b1,b1,b1,_Type_ColorantOrderType_Dup,b1,b1,b1,_Type_S15Fixed16_Dup,b1,b1,b1,_Type_U16Fixed16_Dup,b1,b1,b1,_Type_Text_Dup,b1,b1,b1,_Type_Text_Description_Dup
,b1,b1,b1,_Type_Curve_Dup,b1,b1,b1,_Type_ParametricCurve_Dup,b1,b1,b1,_Type_DateTime_Dup,b1,b1,b1,_Type_LUT8_Dup,b1,b1,b1,_Type_LUT16_Dup,b1,b1,b1,_Type_ColorantTable_Dup,b1,b1,b1,_Type_NamedColor_Dup,b1,b1
,b1,_Type_MLU_Dup,b1,b1,b1,_Type_ProfileSequenceDesc_Dup,b1,b1,b1,_Type_Signature_Dup,b1,b1,b1,_Type_Measurement_Dup,b1,b1,b1,_Type_Data_Dup,b1,b1,b1,_Type_LUTA2B_Dup,b1,b1,b1,_Type_LUTB2A_Dup,b1,b1,b1,_Type_UcrBg_Dup
,b1,b1,b1,_Type_CrdInfo_Dup,b1,b1,b1,_Type_MPE_Dup,b1,b1,b1,_Type_Screening_Dup,b1,b1,b1,_Type_ViewingConditions_Dup,b1,b1,b1,_Type_XYZ_Dup,b1,b1,b1,_Type_ProfileSequenceId_Dup,b1,b1,b1,_Type_Dictionary_Dup,b1,b1
,b1,_Type_vcgt_Dup,b1,b1,b1,_GenericMPEdup,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,___stdout_write,___stdio_seek,_sn_write,_BlackPreservingGrayOnlySampler,_BlackPreservingSampler,_GamutSampler,_EstimateTAC,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_NULLWrite,b1,b1,b1,b1,_MemoryWrite,b1,b1,b1,b1,_FileWrite
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_IdentitySampler,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_XFormSampler16,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,___stdio_write,___stdio_read,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,_CurveSetElemTypeFree,b3,b3,_MatrixElemTypeFree,b3,b3,_CLutElemTypeFree,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_FreeNamedColorList,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,_copy8,_from8to16,_from8toHLF,_from8toFLT,_from8toDBL,_from16to8,_copy16,_from16toHLF,_from16toFLT,_from16toDBL,_fromHLFto8,_fromHLFto16,_fromHLFtoFLT,_fromHLFtoDBL,_fromFLTto8,_fromFLTto16,_fromFLTtoHLF,_copy32,_fromFLTtoDBL,_fromDBLto8,_fromDBLto16,_fromDBLtoHLF,_fromDBLtoFLT,_copy64,b4,b4,b4,b4
,b4,__cmsFreeDefaultFn,b4,b4,b4,b4,b4,_defMtxDestroy,b4,_defMtxUnlock,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_Type_Chromaticity_Free,b4,b4,b4,_Type_ColorantOrderType_Free,b4,b4,b4,_Type_S15Fixed16_Free,b4,b4,b4,_Type_U16Fixed16_Free,b4,b4,b4,_Type_Text_Free,b4,b4,b4
,_Type_Text_Description_Free,b4,b4,b4,_Type_Curve_Free,b4,b4,b4,_Type_ParametricCurve_Free,b4,b4,b4,_Type_DateTime_Free,b4,b4,b4,_Type_LUT8_Free,b4,b4,b4,_Type_LUT16_Free,b4,b4,b4,_Type_ColorantTable_Free,b4,b4,b4,_Type_NamedColor_Free,b4
,b4,b4,_Type_MLU_Free,b4,b4,b4,_Type_ProfileSequenceDesc_Free,b4,b4,b4,_Type_Signature_Free,b4,b4,b4,_Type_Measurement_Free,b4,b4,b4,_Type_Data_Free,b4,b4,b4,_Type_LUTA2B_Free,b4,b4,b4,_Type_LUTB2A_Free,b4,b4,b4
,_Type_UcrBg_Free,b4,b4,b4,_Type_CrdInfo_Free,b4,b4,b4,_Type_MPE_Free,b4,b4,b4,_Type_Screening_Free,b4,b4,b4,_Type_ViewingConditions_Free,b4,b4,b4,_Type_XYZ_Free,b4,b4,b4,_Type_ProfileSequenceId_Free,b4,b4,b4,_Type_Dictionary_Free,b4
,b4,b4,_Type_vcgt_Free,b4,b4,b4,_GenericMPEfree,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_PrelinOpt16free,b4,b4,_CurvesFree,b4,b4
,b4,_Prelin8free,b4,b4,b4,_FreeMatShaper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,_defMtxCreate,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,___stdio_close,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_NULLClose,_NULLTell,b5,b5,b5,_MemoryClose,_MemoryTell,b5,b5,b5,_FileClose,_FileTell,b5
,b5,b5,_CurveSetDup,b5,b5,_MatrixElemDup,b5,b5,_CLUTElemDup,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_DupNamedColorList,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_diid = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_DefaultEvalParametricFn,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,_DefaultLogErrorHandlerFunction,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_LinLerp1Dfloat,_LinLerp1D,_Eval1InputFloat,_Eval1Input,_BilinearInterpFloat
,_BilinearInterp16,_TrilinearInterpFloat,_TrilinearInterp16,_TetrahedralInterpFloat,_TetrahedralInterp16,_Eval4InputsFloat,_Eval4Inputs,_Eval5InputsFloat,_Eval5Inputs,_Eval6InputsFloat,_Eval6Inputs,_Eval7InputsFloat,_Eval7Inputs,_Eval8InputsFloat,_Eval8Inputs,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,_EvaluateIdentity,_EvaluateCurves,b7,b7,_EvaluateMatrix,b7,b7,_EvaluateCLUTfloatIn16,b7,b7,_EvaluateCLUTfloat,b7,_EvaluateLab2XYZ,_Clipper,_EvaluateXYZ2Lab,__LUTeval16,__LUTevalFloat,_EvalNamedColorPCS,_EvalNamedColor,b7,b7,_FastIdentity16,b7,_PrelinEval16,b7,b7,_FastEvaluateCurves8,b7,b7,_FastEvaluateCurves16
,_PrelinEval8,b7,b7,_Eval16nop1D,_MatShaperEval16,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_idi = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_DecideLUTtypeA2B,_DecideLUTtypeB2A,_DecideXYZtype,_DecideCurveType,_DecideTextType,_DecideTextDescType,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_iiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_PackLabDoubleFrom16,_PackXYZDoubleFrom16,_PackLabFloatFrom16,_PackXYZFloatFrom16,_PackDoubleFrom16,_PackFloatFrom16,_PackHalfFrom16,_Pack1Byte,_Pack1ByteSkip1,_Pack1ByteSkip1SwapFirst,_Pack1ByteReversed,_PackLabV2_8,_PackALabV2_8,_PackLabV2_16,_Pack3BytesOptimized
,_Pack3BytesAndSkip1Optimized,_Pack3BytesAndSkip1SwapFirstOptimized,_Pack3BytesAndSkip1SwapSwapFirstOptimized,_Pack3BytesAndSkip1SwapOptimized,_Pack3BytesSwapOptimized,_Pack3Bytes,_Pack3BytesAndSkip1,_Pack3BytesAndSkip1SwapFirst,_Pack3BytesAndSkip1SwapSwapFirst,_Pack3BytesAndSkip1Swap,_Pack3BytesSwap,_Pack6Bytes,_Pack6BytesSwap,_Pack4Bytes,_Pack4BytesReverse,_Pack4BytesSwapFirst,_Pack4BytesSwap,_Pack4BytesSwapSwapFirst,_PackAnyBytes,_PackPlanarBytes,_Pack1Word,_Pack1WordSkip1,_Pack1WordSkip1SwapFirst,_Pack1WordReversed,_Pack1WordBigEndian,_Pack3Words,_Pack3WordsSwap,_Pack3WordsBigEndian,_Pack3WordsAndSkip1,_Pack3WordsAndSkip1Swap
,_Pack3WordsAndSkip1SwapFirst,_Pack3WordsAndSkip1SwapSwapFirst,_Pack4Words,_Pack4WordsReverse,_Pack4WordsSwap,_Pack4WordsBigEndian,_Pack6Words,_Pack6WordsSwap,_PackPlanarWords,_PackAnyWords,_PackLabFloatFromFloat,_PackXYZFloatFromFloat,_PackLabDoubleFromFloat,_PackXYZDoubleFromFloat,_PackFloatsFromFloat,_PackDoublesFromFloat,_PackHalfFromFloat,_UnrollLabDoubleTo16,_UnrollXYZDoubleTo16,_UnrollLabFloatTo16,_UnrollXYZFloatTo16,_UnrollDouble1Chan,_UnrollDoubleTo16,_UnrollFloatTo16,_UnrollHalfTo16,_Unroll1Byte,_Unroll1ByteSkip1,_Unroll1ByteSkip2,_Unroll1ByteReversed,_Unroll2Bytes
,_UnrollLabV2_8,_UnrollALabV2_8,_UnrollLabV2_16,_Unroll3Bytes,_Unroll3BytesSwap,_Unroll3BytesSkip1Swap,_Unroll3BytesSkip1SwapFirst,_Unroll3BytesSkip1SwapSwapFirst,_Unroll4Bytes,_Unroll4BytesReverse,_Unroll4BytesSwapFirst,_Unroll4BytesSwap,_Unroll4BytesSwapSwapFirst,_UnrollPlanarBytes,_UnrollChunkyBytes,_Unroll1Word,_Unroll1WordReversed,_Unroll1WordSkip3,_Unroll2Words,_Unroll3Words,_Unroll4Words,_Unroll3WordsSwap,_Unroll3WordsSkip1SwapFirst,_Unroll3WordsSkip1Swap,_Unroll4WordsReverse,_Unroll4WordsSwapFirst,_Unroll4WordsSwap,_Unroll4WordsSwapSwapFirst,_UnrollPlanarWords,_UnrollAnyWords
,_UnrollLabDoubleToFloat,_UnrollLabFloatToFloat,_UnrollXYZDoubleToFloat,_UnrollXYZFloatToFloat,_UnrollFloatsToFloat,_UnrollDoublesToFloat,_UnrollHalfToFloat,_Type_Chromaticity_Read,_Type_Chromaticity_Write,b9,b9,_Type_ColorantOrderType_Read,_Type_ColorantOrderType_Write,b9,b9,_Type_S15Fixed16_Read,_Type_S15Fixed16_Write,b9,b9,_Type_U16Fixed16_Read,_Type_U16Fixed16_Write,b9,b9,_Type_Text_Read,_Type_Text_Write,b9,b9,_Type_Text_Description_Read,_Type_Text_Description_Write,b9
,b9,_Type_Curve_Read,_Type_Curve_Write,b9,b9,_Type_ParametricCurve_Read,_Type_ParametricCurve_Write,b9,b9,_Type_DateTime_Read,_Type_DateTime_Write,b9,b9,_Type_LUT8_Read,_Type_LUT8_Write,b9,b9,_Type_LUT16_Read,_Type_LUT16_Write,b9,b9,_Type_ColorantTable_Read,_Type_ColorantTable_Write,b9,b9,_Type_NamedColor_Read,_Type_NamedColor_Write,b9,b9,_Type_MLU_Read
,_Type_MLU_Write,b9,b9,_Type_ProfileSequenceDesc_Read,_Type_ProfileSequenceDesc_Write,b9,b9,_Type_Signature_Read,_Type_Signature_Write,b9,b9,_Type_Measurement_Read,_Type_Measurement_Write,b9,b9,_Type_Data_Read,_Type_Data_Write,b9,b9,_Type_LUTA2B_Read,_Type_LUTA2B_Write,b9,b9,_Type_LUTB2A_Read,_Type_LUTB2A_Write,b9,b9,_Type_UcrBg_Read,_Type_UcrBg_Write,b9
,b9,_Type_CrdInfo_Read,_Type_CrdInfo_Write,b9,b9,_Type_MPE_Read,_Type_MPE_Write,b9,b9,_Type_Screening_Read,_Type_Screening_Write,b9,b9,_Type_ViewingConditions_Read,_Type_ViewingConditions_Write,b9,b9,_Type_XYZ_Read,_Type_XYZ_Write,b9,b9,_Type_ProfileSequenceId_Read,_Type_ProfileSequenceId_Write,b9,b9,_Type_Dictionary_Read,_Type_Dictionary_Write,b9,b9,_Type_vcgt_Read
,_Type_vcgt_Write,b9,b9,_Type_MPEcurve_Read,_Type_MPEcurve_Write,b9,b9,_Type_MPEmatrix_Read,_Type_MPEmatrix_Write,_Type_MPEclut_Read,_Type_MPEclut_Write,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_NULLRead,b9,b9,b9,b9,_MemoryRead,b9,b9,b9,b9,_FileRead,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__cmsTransform2toTransformAdaptor,_NullFloatXFORM,_FloatXFORM,_NullXFORM,_PrecalculatedXFORMGamutCheck,_PrecalculatedXFORM,_CachedXFORMGamutCheck,_CachedXFORM,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10];
var FUNCTION_TABLE_iii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__cmsMallocDefaultFn
,__cmsMallocZeroDefaultFn,b11,b11,b11,b11,b11,b11,b11,_defMtxLock,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_NULLSeek,b11,b11,b11,b11,_MemorySeek,b11,b11,b11,b11,_FileSeek,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_Prelin16dup,b11,b11,_CurvesDup,b11
,b11,b11,_Prelin8dup,b11,b11,b11,_DupMatShaper,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_iiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,_OptimizeByJoiningCurves,_OptimizeMatrixShaper,_OptimizeByComputingLinearization,_OptimizeByResampling,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,_ReadMPEElem,_ReadSeqID,_WriteSeqID,_ReadMPECurve,_WriteMPECurve,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_viiii = [b13];

  return { _cmsXYZ2xyY: _cmsXYZ2xyY, _cmsCreateProofingTransform: _cmsCreateProofingTransform, _cmsGetTransformInputFormat: _cmsGetTransformInputFormat, _cmsCreateTransform: _cmsCreateTransform, _cmsCreateXYZProfile: _cmsCreateXYZProfile, _cmsReadTag: _cmsReadTag, _cmsOpenProfileFromMem: _cmsOpenProfileFromMem, _memset: _memset, _cmsGetTransformOutputFormat: _cmsGetTransformOutputFormat, _cmsGetProfileInfoASCII: _cmsGetProfileInfoASCII, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _cmsDeleteTransform: _cmsDeleteTransform, _fflush: _fflush, _cmsDoTransform: _cmsDoTransform, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _i64Add: _i64Add, _cmsCreateLab4Profile: _cmsCreateLab4Profile, _pthread_mutex_unlock: _pthread_mutex_unlock, _cmsCloseProfile: _cmsCloseProfile, _emscripten_get_global_libc: _emscripten_get_global_libc, _cmsFormatterForColorspaceOfProfile: _cmsFormatterForColorspaceOfProfile, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, _free: _free, _memmove: _memmove, _cmsGetColorSpace: _cmsGetColorSpace, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, _cmsCreate_sRGBProfile: _cmsCreate_sRGBProfile, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_diid: dynCall_diid, dynCall_viii: dynCall_viii, dynCall_idi: dynCall_idi, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__cmsXYZ2xyY = asm["_cmsXYZ2xyY"]; asm["_cmsXYZ2xyY"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsXYZ2xyY.apply(null, arguments);
};

var real__cmsCreateProofingTransform = asm["_cmsCreateProofingTransform"]; asm["_cmsCreateProofingTransform"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsCreateProofingTransform.apply(null, arguments);
};

var real__cmsGetTransformInputFormat = asm["_cmsGetTransformInputFormat"]; asm["_cmsGetTransformInputFormat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsGetTransformInputFormat.apply(null, arguments);
};

var real__cmsCreateTransform = asm["_cmsCreateTransform"]; asm["_cmsCreateTransform"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsCreateTransform.apply(null, arguments);
};

var real__cmsCreateXYZProfile = asm["_cmsCreateXYZProfile"]; asm["_cmsCreateXYZProfile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsCreateXYZProfile.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackSave.apply(null, arguments);
};

var real__cmsReadTag = asm["_cmsReadTag"]; asm["_cmsReadTag"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsReadTag.apply(null, arguments);
};

var real__cmsOpenProfileFromMem = asm["_cmsOpenProfileFromMem"]; asm["_cmsOpenProfileFromMem"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsOpenProfileFromMem.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_getTempRet0.apply(null, arguments);
};

var real__cmsGetTransformOutputFormat = asm["_cmsGetTransformOutputFormat"]; asm["_cmsGetTransformOutputFormat"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsGetTransformOutputFormat.apply(null, arguments);
};

var real__cmsGetProfileInfoASCII = asm["_cmsGetProfileInfoASCII"]; asm["_cmsGetProfileInfoASCII"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsGetProfileInfoASCII.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__cmsDeleteTransform = asm["_cmsDeleteTransform"]; asm["_cmsDeleteTransform"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsDeleteTransform.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__cmsDoTransform = asm["_cmsDoTransform"]; asm["_cmsDoTransform"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsDoTransform.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackAlloc.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__cmsCreateLab4Profile = asm["_cmsCreateLab4Profile"]; asm["_cmsCreateLab4Profile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsCreateLab4Profile.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__cmsCloseProfile = asm["_cmsCloseProfile"]; asm["_cmsCloseProfile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsCloseProfile.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__cmsFormatterForColorspaceOfProfile = asm["_cmsFormatterForColorspaceOfProfile"]; asm["_cmsFormatterForColorspaceOfProfile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsFormatterForColorspaceOfProfile.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setThrew.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__cmsGetColorSpace = asm["_cmsGetColorSpace"]; asm["_cmsGetColorSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsGetColorSpace.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_mutex_lock.apply(null, arguments);
};

var real__cmsCreate_sRGBProfile = asm["_cmsCreate_sRGBProfile"]; asm["_cmsCreate_sRGBProfile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__cmsCreate_sRGBProfile.apply(null, arguments);
};
var _cmsXYZ2xyY = Module["_cmsXYZ2xyY"] = asm["_cmsXYZ2xyY"];
var _cmsCreateProofingTransform = Module["_cmsCreateProofingTransform"] = asm["_cmsCreateProofingTransform"];
var _cmsGetTransformInputFormat = Module["_cmsGetTransformInputFormat"] = asm["_cmsGetTransformInputFormat"];
var _cmsCreateTransform = Module["_cmsCreateTransform"] = asm["_cmsCreateTransform"];
var _cmsCreateXYZProfile = Module["_cmsCreateXYZProfile"] = asm["_cmsCreateXYZProfile"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var _cmsReadTag = Module["_cmsReadTag"] = asm["_cmsReadTag"];
var _cmsOpenProfileFromMem = Module["_cmsOpenProfileFromMem"] = asm["_cmsOpenProfileFromMem"];
var _memset = Module["_memset"] = asm["_memset"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _cmsGetTransformOutputFormat = Module["_cmsGetTransformOutputFormat"] = asm["_cmsGetTransformOutputFormat"];
var _cmsGetProfileInfoASCII = Module["_cmsGetProfileInfoASCII"] = asm["_cmsGetProfileInfoASCII"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _cmsDeleteTransform = Module["_cmsDeleteTransform"] = asm["_cmsDeleteTransform"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _cmsDoTransform = Module["_cmsDoTransform"] = asm["_cmsDoTransform"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _cmsCreateLab4Profile = Module["_cmsCreateLab4Profile"] = asm["_cmsCreateLab4Profile"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _cmsCloseProfile = Module["_cmsCloseProfile"] = asm["_cmsCloseProfile"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _cmsFormatterForColorspaceOfProfile = Module["_cmsFormatterForColorspaceOfProfile"] = asm["_cmsFormatterForColorspaceOfProfile"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _cmsGetColorSpace = Module["_cmsGetColorSpace"] = asm["_cmsGetColorSpace"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _cmsCreate_sRGBProfile = Module["_cmsCreate_sRGBProfile"] = asm["_cmsCreate_sRGBProfile"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_diid = Module["dynCall_diid"] = asm["dynCall_diid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_idi = Module["dynCall_idi"] = asm["dynCall_idi"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];

Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



